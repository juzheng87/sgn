
<%doc>


</%doc>

<%args>

</%args>

<& '/page/page_title.mas', title => "Compare trials" &>

<& '/util/import_javascript.mas', classes => [ 'jquery', 'jqueryui', 'popup', 'CXGN.List', 'CXGN.Login', 'd3.d3v4Min' ] &>

<div class="row">
  <center class = "col-md-offset-2 col-md-8">
    <form class="tc-form">
      <div class="form-group">
        <label for="trials_list_select">Choose a list of trials:</label>
        <div id="trials_list_select_container">
          <select disabled class="form-control input-sm" id="trials_list_select">
            <option selected="selected">Loading...</option>
          </select>
        </div>
        <img hidden id="trials-loading-spinner" src="/img/wheel.gif" alt="loading">
        <small hidden="true" id = "trials_list_info" class="form-text text-muted">
          List contains <span id="list_trial_count">?</span> trials phenotyped for <span id="common_trait_count">?</span> common traits.
        </small>
      </div>
      <div class="form-group">
        <label for="formGroupExampleInput2">Choose a trait to compare:</label>
        <select disabled class="form-control input-sm" id="trait_select">
          <option selected="selected" value=""> </option>
        </select>
      </div>
      <img hidden id="results-loading-spinner" src="/img/wheel.gif" alt="loading">
    </form>
  </center>
</div>

<div id="result_div" class="row">
  <div class="tc-main">
    <div hidden="true" class="tc-grid col-lg-6 col-md-6 col-sm-12">
    </div>
    <div hidden="true" class="tc-histogram col-lg-6 col-md-6 col-sm-12"></div>
  </div>
</div>

<script>

$(document).ready(function(){
  if (isLoggedIn()) {
    var list = new CXGN.List();
    var select_html = list.listSelect('trials', ['trials'], ' ');
    $('#trials_list_select_container').html(select_html);
    if (d3.select('#trials_list_select').selectAll("option").size()<2){
      d3.select('#trials_list_select').html("<option>No trial lists! (Create one using the wizard.)</option>");
    }
    $('#trials_list_select').change(function(){
      $(".tc-grid").hide();
      $(".tc-histogram").hide();
      $("#trials_list_info").hide();
      $("#trials-loading-spinner").show();
      $(".tc-grid").hide();
      $(".tc-histogram").hide();
      $('#trait_select').attr("disabled",true).html('<option selected="selected" value=""> </option>');
      var trial_list_id = $('#trials_list_select').val();
      if (trial_list_id === "") {
        $("#trials-loading-spinner").hide();
        return;
      }
      setTimeout(function(){ //use setTimeout to pull sync call list.getListData out of event listener thread.
        var item_data = list.getListData(trial_list_id);
        // var items = item_data.elements;
        // console.log("items: ",items);
        var ids = list.transform2Ids(trial_list_id, item_data);
        console.log("ids: ",ids);
        var params = "";
        for (n=0; n<ids.length; n++) {
          params += 'trial_id='+ids[n]+'&';
        }
        $.ajax({
          url: '/ajax/trial/common_traits?'+params,
          success: function(response) {
            if (response.error) {
              $('#trait_select').val('ERROR');
            }
            else {
              var option_html = '<option selected="selected" value=""> </option>';
              for (var i =0 ; i < response.options.length; i++) {
                option_html += '<option value="'+response.options[i][0]+'">'+(response.options[i][1])+'</option>';
              }
              $("#trials-loading-spinner").hide();
              $("#trials_list_info").show();
              $('#trait_select').attr("disabled",false).html(option_html);
              $('#list_trial_count').html(response.list_trial_count);
              $('#common_trait_count').html(response.common_trait_count);
             }
          },
          error: function(response) {
            //alert("An error occurred, the service may temporarily be unavailable");
          }

        });
      },1);
    })
  }
  else {
    $('#trials_list_select').html('<option selected="selected">You must be logged in to use lists.</option>');
  }
})

$('#trait_select').change(fetchAndBuildGraphs);

function fetchAndBuildGraphs(){
  $(".tc-grid").hide();
  $(".tc-histogram").hide();
  var list_id = $('#trials_list_select').val();
  if ($('#trait_select').val()!=""){
    $(".tc-grid").hide();
    $(".tc-histogram").hide();
    $("#results-loading-spinner").show();
    $.ajax( {
     url: '/ajax/trial/compare_list_data',
     data: { 'cvterm_id' : $('#trait_select').val(), 'list_id': list_id },
     success: function(response) {
        if (response.error) {
           alert(response.error);
        }
        else {
            d3.select('.tc-grid').html("");
            d3.select('.tc-histogram').html("");
            createVisualizations(response);
        }
      }
    });
  }
}

function  createVisualizations(response){
  //We need to know the variable name to parse the data
  var variable_name = $('#trait_select option:selected').text();
  if (response.cvterm_id=="TEST_TEST"){
    variable_name = "Variable";
  }

  //parse the csv and filter out unwanted data.
  var all_data = d3.csvParse(response.csv, function(d){
    return {
      study: d.studyDbId,
      studyName: d.studyName,
      accession: d.germplasmDbId,
      accessionName:d.germplasmName,
      variableName:variable_name,
      value: (parseFloat(d[variable_name])===NaN ? null : parseFloat(d[variable_name]))
    }
  }).filter(function(d){return d.value!==null});

  $(".tc-grid").show();
  $(".tc-histogram").show();
  $("#results-loading-spinner").hide();

  //nest by study
  var studies = d3.nest().key(function(d){
    return d.study
  }).entries(all_data);
  updateHistogram(studies,all_data);

  //sort studies by key
  studies.sort(function(a,b){
    return a.key>b.key ? 1 : -1;
  });

  //pair studies for scatter grid
  var paired_studies = d3.cross(
    studies.slice(0,studies.length-1),
    studies.slice(1,studies.length),
    function(a,b){
      return a.key<b.key ? {a:b,b:a} : null;
  });
  updateScatter(studies,paired_studies);
  var scatter = d3.selectAll(".tc-grid-box");
  if(scatter.size()==1){
    scatter.on("click").call(scatter.node(),scatter.datum());
    scatter.classed("only-box",true).on("click",null);
  }
}

function updateScatter(studies,paired_studies){
  var ttime = 200;
  var scatter_size = 400;
  var axis_offset = 50;
  var gutter_ratio = 0.01;
  var label_ratio = 0.2; //ratio of scatter_size
  var max_label_ratio = 0.05; //ratio of grid size
  //update grid dimensions
  var columns = studies.length-1
  var size = scatter_size*columns/(1-gutter_ratio*(columns+1));
  if (label_ratio*scatter_size > max_label_ratio*size){
    label_ratio = max_label_ratio*size/scatter_size;
  }
  var gutter_size = gutter_ratio*size;
  var label_size = label_ratio*scatter_size;
  var label_o = -label_size-gutter_size
  size = size+label_size+gutter_size;

  var canv = d3.select(".tc-grid")
    .selectAll(".tc-grid-svg")
    .data([paired_studies]);
  canv = canv.enter().append('svg')
    .classed("tc-grid-svg",true)
    .attr("shape-rendering","geometricPrecision")
    .attr("viewBox",(label_o)+" "+(label_o)+" "+(size)+" "+(size))
    .merge(canv);
  canv.transition(ttime)
    .attr("viewBox",(label_o)+" "+(label_o)+" "+(size)+" "+(size));
  var grid_gs = canv.selectAll(".tc-grid-box")
    .data(function(d){return d;});
  grid_gs.exit().transition(ttime).remove();
  grid_gs = grid_gs.enter()
    .append("g")
    .classed("tc-grid-box",true)
    .attr("transform",function(d,i){
      var row = Math.floor(i/columns);
      var col = i%columns;
      var y = gutter_size+row*(scatter_size+gutter_size);
      var x = gutter_size+col*(scatter_size+gutter_size);
      return "translate(" + x + "," + y + ")";
    })
    .attr("orig-translate",function(d){return d3.select(this).attr("transform");});
  scatters = grid_gs.filter(function(d){return d!=undefined;});
  grid_placeholders = grid_gs.filter(function(d){return d==undefined;});
  grid_placeholders.append("rect")
    .classed("tc-ph-bg",true)
    .attr("x",0).attr("y",0)
    .attr("width",scatter_size)
    .attr("height",scatter_size);
  scatters.append("rect")
    .classed("tc-background",true)
    .classed("tc-var-stroke",true)
    .attr("stroke-width",1/scatter_size*size)
    .attr("x",0).attr("y",0)
    .attr("width",scatter_size)
    .attr("height",scatter_size);
  scatters.on("click",function(d,i){
    this_g = d3.select(this);
    if (!this_g.classed("tc-changing")){
      this_g.classed("tc-changing",true);
      if (this_g.classed("tc-expanded")){
        d3.selectAll(".tc-legend-entry")
        .each(function(d,i){
            d.toggleHLeg(true);
          })
        .filter(".orig-leg-hidden")
        .each(function(d,i){
            d.toggleHLeg(false);
        });
        this_g
          .classed("tc-expanded",false)
          .transition(ttime)
          .attr("transform","scale(1,1)"+this_g.attr("orig-translate"))
        this_g.selectAll(".tc-var-stroke")
          .transition(ttime)
          .attr("stroke-width",function(d){return +d3.select(this).attr("orig-stroke");});

      } else {
        var legents = d3.selectAll(".tc-legend-entry");
        legents.classed("orig-leg-hidden",false)
          .filter(".leg-hidden")
          .classed("orig-leg-hidden",true);
        legents.each(function(d,i){
            d.toggleHLeg(false);
          });
        d.a.toggleHLeg(true);
        d.b.toggleHLeg(true);
        var scale = (size-gutter_size*2)/(scatter_size)
        this_g
          .raise()
          .classed("tc-expanded",true)
          .transition(ttime)
          .attr("transform","translate("+(label_o+gutter_size)+","+(label_o+gutter_size)+")scale("+scale+","+scale+")")
        this_g.selectAll(".tc-var-stroke")
          .attr("orig-stroke",function(d){return parseFloat(d3.select(this).attr("stroke-width"));})
          .transition(ttime)
          .attr("stroke-width",function(d){return parseFloat(d3.select(this).attr("stroke-width"))/size*scatter_size;});
      }
      setTimeout(function(){
          this_g.classed("tc-changing",false);
      },ttime);
    }
    clearTimeout(tooltip.hover_timeout)
    tooltip._setTip(false);
  });
  var tooltip = tooltipSetup(canv,size);
  scatters.each(function(d,i){
    var study_pair = d;
    var current_graph = d3.select(this);

    var Xscale = d3.scaleLinear().range([0, scatter_size-axis_offset*2]);
    var Yscale = d3.scaleLinear().range([scatter_size-axis_offset*2, 0]);
    var Xaxis = d3.axisBottom(Xscale).ticks(8);
    var Yaxis = d3.axisLeft(Yscale).ticks(8);
    var xBounds = d3.extent(study_pair.a.values.concat(study_pair.b.values), function(d) { return d.value; });
    var yBounds = xBounds;
    Xscale.domain(xBounds).nice();
    Yscale.domain(yBounds).nice();

    //axes!
    current_graph.append("g")
      .classed("tc-graph-axis",true)
      .attr("transform", "translate("+axis_offset+"," + (scatter_size-axis_offset) + ")")
      .call(Xaxis)
      .append("text")
      .classed("tc-axis-label",true)
      .attr("x", (scatter_size-2*axis_offset)/2)
      .attr("y", 35)
      .text(study_pair.a.values[0].studyName+": "+study_pair.a.values[0].variableName);
    current_graph.append("g")
      .classed("tc-graph-axis",true)
      .attr("transform", "translate("+axis_offset+","+axis_offset+")")
      .call(Yaxis)
      .append("text")
      .classed("tc-axis-label",true)
      .attr("transform", "rotate(-90)")
      .attr("x", -(scatter_size-2*axis_offset)/2)
      .attr("y", -35)
      .text(study_pair.b.values[0].studyName+": "+study_pair.a.values[0].variableName);

    //parse/filter data!
    var studyids = {"a":study_pair.a.key,"b":study_pair.b.key}
    var accessions = d3.nest().key(function(d) {return d.accession;})
      .entries(study_pair.a.values.concat(study_pair.b.values))
      .filter(function(d) {
        var found_a = false;
        var found_b = false;
        for (var j = 0; j < d.values.length; j++) {
            found_a = (found_a || ((d.values[j].value !== null) && (d.values[j].study == studyids["a"])));
            found_b = (found_b || ((d.values[j].value !== null) && (d.values[j].study == studyids["b"])));
        }
        return (found_a && found_b);
      }).map(function(d) {
        var name = d.values[0].accessionName
        var x = null;
        var y = null;
        for (var j in d.values){
          if (d.values[j].value !== null){
            if (d.values[j].study == studyids["a"]){
              x = d.values[j].value;
            } else {
              y = d.values[j].value;
            }
          }
        }
        return {
         key:d.key,
         name:name,
         x:x,
         y:y,
         orig:d
       }
      }).filter(function(d,i) {
        return !(isNaN(d.x)||isNaN(d.y));
      });

    getx = (d) => Xscale(d.x)+axis_offset;
    gety = (d) => Yscale(d.y)+axis_offset;
    //create plot points using data
    var plotpoints = current_graph.selectAll(".tc-scatter-point")
      .data(accessions)
      .enter()
      .append("g").classed("tc-scatter-point",true)
    plotpoints.append("circle")
      .attr("r", 3)
      .attr("cx", getx)
      .attr("cy", gety);
    plotpoints.append("circle")
      .attr("r", 15)
      .attr("cx", getx)
      .attr("cy", gety)
      .style("opacity","0");

    plotpoints.datum(function(d){
      d.scatter_point = this;
      return d;
    })

    //create the tooltip voronoi diagram
    var xr = Xscale.range();
    var yr = Yscale.range();
    var voronoi =  d3.voronoi()
      .x(getx).y(gety)(accessions);
    current_graph.on("mousemove",function(d,i){
      var cg = d3.select(this);
      if (cg.classed("tc-expanded")){
        var mpos = d3.mouse(this);
        var near_point = voronoi.find(mpos[0],mpos[1],30);
        if (near_point && (tooltip.hidden || tooltip.current!=near_point)){
          tooltip.current = near_point;
          var point_d = near_point.data;
          tooltip.setTip(true,"<a target='_blank' href='/stock/"+point_d.key+"/view'>"+point_d.name+"</a>",point_d.scatter_point);
        } else if(!near_point && !tooltip.hidden){
          tooltip.setTip(false);
        }
      } else {
        var label = d.a.values[0].studyName+" vs. "+d.b.values[0].studyName
        var label_onclick = function(){
          console.log("oops");
          cg.on("click").call(cg.node(),d,i)
        }
        tooltip.setTip(true,label,this,onclick);
      }
    }).on("mouseout",function(d,i){
      tooltip.setTip(false);
    });


    //add line of best fit and rsquared

    var best_fit = lineOfBestFit(accessions);

    var x1 = Xscale.domain()[0];
    var y1 = best_fit.slope*x1+best_fit.yIntercept;
    if (y1<Yscale.domain()[0]){
      y1 = Yscale.domain()[0];
      x1 = (y1-best_fit.yIntercept)/best_fit.slope;
    }

    var x2 = Xscale.domain()[1];
    var y2 = best_fit.slope*x2+best_fit.yIntercept;
    if (y2>Yscale.domain()[1]){
      y2 = Yscale.domain()[1];
      x2 = (y2-best_fit.yIntercept)/best_fit.slope;
    }

    current_graph.insert('line',".tc-scatter-point")
      .classed('tc-fit-line',true)
      .classed("tc-var-stroke",true)
      .attr("stroke-width",1/scatter_size*size)
      .attr("x1",Xscale(x1)+axis_offset+1)
      .attr("y1",Yscale(y1)+axis_offset+1)
      .attr("x2",Xscale(x2)+axis_offset-1)
      .attr("y2",Yscale(y2)+axis_offset-1);
    current_graph.append('text')
      .classed("tc-info-text",true)
      .attr('x',scatter_size- axis_offset )
      .attr('y',30)
      .text("r^2 = "+best_fit.rsquared.toFixed(3));
    current_graph.append('text')
      .classed("tc-info-text",true)
      .attr('x',scatter_size- axis_offset )
      .attr('y',50)
      .text("y = "+best_fit.slope.toFixed(3)+"x + "+best_fit.yIntercept.toFixed(3));
  });
  var top_labels = canv.selectAll(".tc-top-label")
    .data(studies.slice(1,studies.length),function(d,i){return "top-label-"+i;});
  var left_labels = canv.selectAll(".tc-left-label")
    .data(studies.slice(0,studies.length-1),function(d,i){return "left-label-"+i;});
  top_labels.exit().transition(ttime).remove();
  left_labels.exit().transition(ttime).remove();
  new_top_labels = top_labels.enter()
    .append("g")
    .classed("tc-top-label",true)
    .classed("tc-label",true)
    .attr("transform",function(d,i){
      var row = Math.floor(i/columns);
      var col = i%columns;
      var y = label_o+gutter_size;
      var x = gutter_size+col*(scatter_size+gutter_size);
      return "translate(" + x + "," + y + ")";
    });
  new_left_labels = left_labels.enter()
    .append("g")
    .classed("tc-left-label",true)
    .classed("tc-label",true)
    .attr("transform",function(d,i){
      var row = Math.floor(i/columns);
      var col = i%columns;
      var y = label_o+gutter_size;
      var x = -(gutter_size+col*(scatter_size+gutter_size))-scatter_size;
      return "rotate(-90) translate(" + x + "," + y + ")";
    });
  new_top_labels.append("rect");
  new_top_labels.append("text");
  new_left_labels.append("rect");
  new_left_labels.append("text");
  canv.selectAll(".tc-label")
    .each(function(d,i){
      var cur_label = d3.select(this);
      cur_label.select("rect")
        .attr("x",0)
        .attr("y",0)
        .transition()
        .attr("width",scatter_size)
        .attr("height",scatter_size*label_ratio);
      cur_label.select("text")
        .attr("x",scatter_size/2)
        .attr("y",scatter_size*label_ratio/2)
        .attr("font-size","10pt")
        .attr("dy","0.1em")
        .text(d.values[0].studyName);
      var bbox = cur_label.node().getBBox();
      var scale = d3.max([bbox.width/(scatter_size-gutter_size/2),bbox.height/(scatter_size*label_ratio-gutter_size/2)]);
      cur_label.select("text").attr("font-size",parseFloat(cur_label.select("text").attr("font-size"))/scale+"pt");
    });
}

function tooltipSetup(canv,view_width){
  var ttime = 100;
  var scale = view_width/1800;
  var tooltip = canv.select(".tc-tool-tip");
  if (!tooltip.empty()){
    return tooltip.datum();
  } else {
    tooltip = canv.insert('g')
      .classed("tc-tool-tip",true)
      .datum({
        hoverlock: false,
        hover_timeout:null,
        onclick:null,
        hidden: true,
        current: null,
        _setTip: function (visible,content,target,onclick){
          if (!visible){
            clearTimeout(tooltip.datum().hover_timeout);
            tooltip.datum().hidden = true;
            if (!tooltip.datum().hoverlock){
              tooltip.style("opacity",0);
              tooltip.datum().onclick = onclick;
            }
          } else {
            tooltip.datum().onclick = onclick;
            bbox = getGlobalBBox(target);
            var width = tooltip.select("text")
              .html(content).node().getComputedTextLength();
            tooltip.select("text").selectAll("*").attr("fill","#fff");
            var ttwidth = width+48;
            var ttx = -width/2-24;
            tooltip.raise();
            if (!tooltip.datum().hidden){
              tooltip.style("opacity",0.8)
                .transition(ttime/2)
                .ease(d3.easeCubicInOut)
                .attr("transform", "translate("+(bbox.x+bbox.width/2)+"," +(bbox.y+bbox.height/2)+") scale("+scale+")");
              tooltip.select("rect").transition(ttime/2)
                .attr("width",ttwidth).attr("x",-width/2-24);
            } else {
              tooltip.attr("transform", "translate("+(bbox.x+bbox.width/2)+"," +(bbox.y+bbox.height/2)+") scale("+scale+")")
                .transition(ttime)
                .style("opacity",0.8);
              tooltip.select("rect")
                .attr("width",ttwidth).attr("x",-width/2-24);
            }
            tooltip.datum().hidden = false;
          }
        },
        setTip: function(visible,text,target,onclick){
          clearTimeout(tooltip.datum().hover_timeout);
          tooltip.datum().hover_timeout = setTimeout(function(){
            tooltip.datum()._setTip(visible,text,target,onclick);
          },250);
        }
      });
    tooltip.append('rect').classed("tc-tool-tip-rect",true)
      .attr("x", -24-12)
      .attr("y", -42-70)
      .attr("width", 24*2)
      .attr("height", 70);
    tooltip.append('text').classed("tc-tool-tip-text",true)
      .attr("text-anchor","middle")
      .attr("x", 0)
      .attr("y", -42-16.5)
      .text("");
    var trianglePoints = "-24 -43.5, 0 0, 24 -43.5"
    tooltip.append('polyline')
      .attr('points', trianglePoints)
      .classed("tc-tool-tip-point",true);
    tooltip.on("mouseover",function(d){
      d.hoverlock = true;
    });
    tooltip.on("mouseout",function(d){
      d.hoverlock = false;
      d.setTip(false);
    });
    tooltip.on("click",function(d){
      if (d.onclick){
        console.log("why")
        d.onclick();
      }
      d3.event.stopPropagation();
    });
    tooltip.style("opacity","0")
      .attr("transform","scale("+scale+")");
    tooltip.datum()._setTip(false);
    return tooltip.datum();
  }
}

function getGlobalBBox(node,container){
  var p = node
  while (p.nodeName!="svg" && p.nodeName!="SVG"){
    p = p.parentNode
  }
  var p = container || p;
  var pm = p.getCTM();
  var ctm = node.getCTM();
  var m = pm.inverse().multiply(ctm);
  var bbox = node.getBBox();
  var v1 = [bbox.x,bbox.y,1];
  var v2 = [bbox.x+bbox.width,bbox.y+bbox.height,1];
  var tv1 = [
    (v1[0]*m.a+v1[1]*m.c+v1[2]*m.e),
    (v1[0]*m.b+v1[1]*m.d+v1[2]*m.f),
    (1)
  ];
  var tv2 = [
    (v2[0]*m.a+v2[1]*m.c+v2[2]*m.e),
    (v2[0]*m.b+v2[1]*m.d+v2[2]*m.f),
    (1)
  ];
  gbbox = {
    x:tv1[0],
    y:tv1[1],
    width:tv2[0]-tv1[0],
    height:tv2[1]-tv1[1],
  }
  return gbbox;
}

function updateHistogram(studies,all_data){
  var num_studies = studies.length;
  size = 400;
  axis_offset = 50;
  ttime = 200;

  //generate all the grid SVGs and pairs of studies

  var hist = d3.select(".tc-histogram")
    .selectAll(".tc-histogram-svg")
    .data([studies]);
  hist = hist.enter().append('svg')
    .attr("shape-rendering","geometricPrecision")
    .classed("tc-histogram-svg",true)
    .attr("viewBox","0 0 "+(size)+" "+(size))
    .merge(hist);
  hist.transition(ttime)
    .attr("viewBox","0 0 "+(size)+" "+(size));

  hist.append('rect')
    .classed("tc-background",true)
    .attr("x",400*0.01)
    .attr("y",400*0.01)
    .attr("width",400*0.98)
    .attr("height",400*0.98)


  var Xscale = d3.scaleLinear().range([0, 400-axis_offset*2]);
  var Yscale = d3.scaleLinear().range([400-axis_offset*2, 0]);

  var color = d3.scaleOrdinal(d3.schemeCategory10);

  var bounds = d3.extent(all_data, function(d) { return d.value; });
  Xscale.domain(bounds).nice(8);

  var thresholds = Xscale.ticks(8);
  var Xaxis = d3.axisBottom(Xscale).tickValues(thresholds);

  var binner = d3.histogram()
    .value(function(d){
      return d.value;
    })
    .domain(Xscale.domain())
    .thresholds(thresholds);

  var studygroups = hist.selectAll(".tc-hist-group")
    .data(studies).enter()
    .append('g')
    .classed("tc-hist-group",true)
    .each(function(d){
      d.bins = binner(d.values);
      d.max_bin = d3.max(d.bins,function(d){
        return d.length;
      });
    });

  var max_bin = d3.max(studies, function(d) {
    return d.max_bin
  });
  Yscale.domain([0,max_bin]).nice();
  var Yaxis = d3.axisLeft(Yscale).ticks(8);

  //legend
  var legend = hist.append("g")

  studygroups.each(function(d,i){
    var g = d3.select(this);
    var bar = g.selectAll(".tc-bar")
      .data(d.bins)
      .enter().append("g")
      .attr("class", "tc-bar")
      .attr("transform", function(d) { return "translate("+axis_offset+","+axis_offset+")";});
    bar.filter(function(d,i) {
        return d.x1>d.x0;
      })
      .append("rect")
      .attr("x", function(d){
        return Xscale(d.x0)+1
      })
      .attr("y", function(d){
        return Yscale(d.length)
      })
      .attr("width", function(d){return Xscale(d.x1)-Xscale(d.x0)-2;})
      .attr("height", function(d) { return Yscale.range()[0]-Yscale(d.length)})
      .attr("fill",color(i))
      .attr("opacity",0.4);

    var outline_points = [{x:axis_offset,y:400-axis_offset}]
    for (var k in d.bins){
      outline_points.push({x:Xscale((d.bins[k].x0+d.bins[k].x1)/2)+axis_offset,y:Yscale(d.bins[k].length)+axis_offset})
    }
    outline_points.push({x:400-axis_offset,y:400-axis_offset})
    var lineFunction = d3.line()
      .x(function(d) { return d.x; })
      .y(function(d) { return d.y; })
      .curve(d3.curveBasis);
    var hpath = g.append('path')
      .attr("d",lineFunction(outline_points))
      .attr("stroke", color(i))
      .attr("stroke-width", 2)
      .attr("fill", "none");

    var legend_entry = legend.append("g")
      .classed("tc-legend-entry",true)
      .attr("transform", function(d) { return "translate(0,"+16*i+")";})
      .datum(d);
    legend_entry.append('circle')
        .classed("tc-legend-circle",true)
        .attr("cx", 0)
        .attr("cy", 0)
        .attr("r",  6)
        .attr("fill", color(i))
        .attr("opacity", 0.6)
    legend_entry.append('circle')
        .classed("tc-select-indicator",true)
        .attr("cx", 0)
        .attr("cy", 0)
        .attr("r",  3)
        .attr("stroke", "white")
        .attr("stroke-width", "0.5")
        .attr("fill", color(i));
    legend_entry.append('text')
      .attr("x",10)
      .attr("y",4.5)
      .attr("font-size",12)
      .text(d.values[0].studyName);
    d.toggleHLeg = function(show){
      show = show===undefined ? legend_entry.classed("leg-hidden") : show;
      if (show){
        legend_entry.classed("leg-hidden",null)
        g.transition(ttime)
          .style("opacity",1)
        legend_entry.select(".tc-select-indicator")
          .transition(ttime)
          .attr("fill", color(i));
      } else {
        legend_entry.classed("leg-hidden",true)
        g.transition(ttime)
          .style("opacity",0)
        legend_entry.select(".tc-select-indicator")
          .transition(ttime)
          .attr("fill", "white");
      }
    };
    legend_entry.on("click",function(d){
      d.toggleHLeg();
    });
  });

  var bb = legend.node().getBBox();
  legend.attr("transform", function(d) {
    var nx = (400-10-bb.width);
    var ny = (15-bb.y);
    return "translate("+nx+","+ny+")";
  });
  legend.insert("rect","*")
    .attr({
      x:bb.x-10,
      y:bb.y-10,
      width:bb.width+25,
      height:bb.height+20,
      fill:"rgba(255,255,255,0.5)",
      stroke: "rgba(125,125,125,0.5)"
    })

  //axes!
  hist.append("g")
    .classed("tc-graph-axis",true)
    .attr("transform", "translate("+axis_offset+"," + (size-axis_offset) + ")")
    .call(Xaxis)
    .append("text")
    .classed("tc-axis-label",true)
    .attr("x", (size-axis_offset*2)/2)
    .attr("y", 35)
    .text(all_data[0].variableName);
  hist.append("g")
    .classed("tc-graph-axis",true)
    .attr("transform", "translate("+axis_offset+","+axis_offset+")")
    .call(Yaxis);
}


function lineOfBestFit(points){
  var xbar = 0;
  var ybar = 0;
  for (var i in points){
    xbar+=points[i].x;
    ybar+=points[i].y;
  }
  xbar = xbar/points.length;
  ybar = ybar/points.length;
  var sum1 = 0;
  var sum2 = 0;
  for (var i in points){
    sum1+=(points[i].x-xbar)*(points[i].y-ybar);
    sum2+=(points[i].x-xbar)*(points[i].x-xbar);
  }
  var slope = sum1/sum2;
  var yIntercept = ybar-slope*xbar;

  var SSE = 0;
  var SSTO = 0;
  for (var i in points){
    SSE+=Math.pow(points[i].y-(slope*points[i].x+yIntercept),2);
    SSTO+=Math.pow(points[i].y-ybar,2);
  }

  return {
    slope:slope,
    yIntercept:yIntercept,
    xIntercept:(-yIntercept)/slope,
    rsquared: 1-(SSE/SSTO)
  };
}

</script>
