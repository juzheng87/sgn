--
-- PostgreSQL database dump
--

-- Dumped from database version 9.5.5
-- Dumped by pg_dump version 9.5.5

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: annotation; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA annotation;


ALTER SCHEMA annotation OWNER TO postgres;

--
-- Name: biosource; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA biosource;


ALTER SCHEMA biosource OWNER TO postgres;

--
-- Name: SCHEMA biosource; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA biosource IS 'Biosource schema are composed by tables that store data about biological source of the data or other schemas as transcript or expression. It is a combination of the biological origin (samples) and how it was processed (protocol). See specific table comment for more information. The table prefix used is "bs_"';


--
-- Name: gem; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA gem;


ALTER SCHEMA gem OWNER TO postgres;

--
-- Name: genomic; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA genomic;


ALTER SCHEMA genomic OWNER TO postgres;

--
-- Name: insitu; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA insitu;


ALTER SCHEMA insitu OWNER TO postgres;

--
-- Name: metadata; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA metadata;


ALTER SCHEMA metadata OWNER TO postgres;

--
-- Name: SCHEMA metadata; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA metadata IS 'metadata schema is composed of tables that store data about the CXGN system (from file locations to the user that loaded some data). See specific table comment for more information. The table prefix used is "md_"';


--
-- Name: pheno_population; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA pheno_population;


ALTER SCHEMA pheno_population OWNER TO postgres;

--
-- Name: phenome; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA phenome;


ALTER SCHEMA phenome OWNER TO postgres;

--
-- Name: physical; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA physical;


ALTER SCHEMA physical OWNER TO postgres;

--
-- Name: sgn; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA sgn;


ALTER SCHEMA sgn OWNER TO postgres;

--
-- Name: sgn_people; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA sgn_people;


ALTER SCHEMA sgn_people OWNER TO postgres;

--
-- Name: sgn_submit; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA sgn_submit;


ALTER SCHEMA sgn_submit OWNER TO postgres;

--
-- Name: tomato_gff; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA tomato_gff;


ALTER SCHEMA tomato_gff OWNER TO postgres;

--
-- Name: utils; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA utils;


ALTER SCHEMA utils OWNER TO postgres;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

--
-- Name: abstract_tsvector(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION abstract_tsvector() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
NEW.abstract_tsvector := to_tsvector(NEW.abstract);
RETURN NEW;
END
$$;


ALTER FUNCTION public.abstract_tsvector() OWNER TO postgres;

--
-- Name: boxquery(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION boxquery(integer, integer) RETURNS box
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT box (create_point($1, $2), create_point($1, $2))$_$;


ALTER FUNCTION public.boxquery(integer, integer) OWNER TO postgres;

--
-- Name: boxrange(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION boxrange(integer, integer) RETURNS box
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT box (create_point(0, $1), create_point($2,500000000))$_$;


ALTER FUNCTION public.boxrange(integer, integer) OWNER TO postgres;

--
-- Name: create_point(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION create_point(integer, integer) RETURNS point
    LANGUAGE sql
    AS $_$SELECT point ($1, $2)$_$;


ALTER FUNCTION public.create_point(integer, integer) OWNER TO postgres;

SET default_tablespace = '';

SET default_with_oids = true;

--
-- Name: feature; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE feature (
    feature_id integer NOT NULL,
    dbxref_id integer,
    organism_id integer NOT NULL,
    name character varying(255),
    uniquename text NOT NULL,
    residues text,
    seqlen integer,
    md5checksum character(32),
    type_id integer NOT NULL,
    is_analysis boolean DEFAULT false NOT NULL,
    is_obsolete boolean DEFAULT false NOT NULL,
    timeaccessioned timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
    timelastmodified timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL
);


ALTER TABLE feature OWNER TO postgres;

--
-- Name: TABLE feature; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature IS 'A feature is a biological sequence or a
section of a biological sequence, or a collection of such
sections. Examples include genes, exons, transcripts, regulatory
regions, polypeptides, protein domains, chromosome sequences, sequence
variations, cross-genome match regions such as hits and HSPs and so
on; see the Sequence Ontology for more';


--
-- Name: COLUMN feature.dbxref_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.dbxref_id IS 'An optional primary public stable
identifier for this feature. Secondary identifiers and external
dbxrefs go in table:feature_dbxref';


--
-- Name: COLUMN feature.organism_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.organism_id IS 'The organism to which this feature
belongs. This column is mandatory';


--
-- Name: COLUMN feature.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.name IS 'The optional human-readable common name for
a feature, for display purposes';


--
-- Name: COLUMN feature.uniquename; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.uniquename IS 'The unique name for a feature; may
not be necessarily be particularly human-readable, although this is
prefered. This name must be unique for this type of feature within
this organism';


--
-- Name: COLUMN feature.residues; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.residues IS 'A sequence of alphabetic characters
representing biological residues (nucleic acids, amino acids). This
column does not need to be manifested for all features; it is optional
for features such as exons where the residues can be derived from the
featureloc. It is recommended that the value for this column be
manifested for features which may may non-contiguous sublocations (eg
transcripts), since derivation at query time is non-trivial. For
expressed sequence, the DNA sequence should be used rather than the
RNA sequence';


--
-- Name: COLUMN feature.seqlen; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.seqlen IS 'The length of the residue feature. See
column:residues. This column is partially redundant with the residues
column, and also with featureloc. This column is required because the
location may be unknown and the residue sequence may not be
manifested, yet it may be desirable to store and query the length of
the feature. The seqlen should always be manifested where the length
of the sequence is known';


--
-- Name: COLUMN feature.md5checksum; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.md5checksum IS 'The 32-character checksum of the sequence,
calculated using the MD5 algorithm. This is practically guaranteed to
be unique for any feature. This column thus acts as a unique
identifier on the mathematical sequence';


--
-- Name: COLUMN feature.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.type_id IS 'A required reference to a table:cvterm
giving the feature type. This will typically be a Sequence Ontology
identifier. This column is thus used to subclass the feature table';


--
-- Name: COLUMN feature.is_analysis; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.is_analysis IS 'Boolean indicating whether this
feature is annotated or the result of an automated analysis. Analysis
results also use the companalysis module. Note that the dividing line
between analysis/annotation may be fuzzy, this should be determined on
a per-project basis in a consistent manner. One requirement is that
there should only be one non-analysis version of each wild-type gene
feature in a genome, whereas the same gene feature can be predicted
multiple times in different analyses';


--
-- Name: COLUMN feature.is_obsolete; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.is_obsolete IS 'Boolean indicating whether this
feature has been obsoleted. Some chado instances may choose to simply
remove the feature altogether, others may choose to keep an obsolete
row in the table';


--
-- Name: COLUMN feature.timeaccessioned; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.timeaccessioned IS 'for handling object
accession/modification timestamps (as opposed to db auditing info,
handled elsewhere). The expectation is that these fields would be
available to software interacting with chado';


--
-- Name: COLUMN feature.timelastmodified; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature.timelastmodified IS 'for handling object
accession/modification timestamps (as opposed to db auditing info,
handled elsewhere). The expectation is that these fields would be
available to software interacting with chado';


--
-- Name: feature_disjoint_from(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION feature_disjoint_from(integer) RETURNS SETOF feature
    LANGUAGE sql
    AS $_$SELECT feature.*
  FROM feature
   INNER JOIN featureloc AS x ON (x.feature_id=feature.feature_id)
   INNER JOIN featureloc AS y ON (y.feature_id=$1)
  WHERE
   x.srcfeature_id = y.srcfeature_id            AND
   ( x.fmax < y.fmin OR x.fmin > y.fmax ) $_$;


ALTER FUNCTION public.feature_disjoint_from(integer) OWNER TO postgres;

--
-- Name: feature_overlaps(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION feature_overlaps(integer) RETURNS SETOF feature
    LANGUAGE sql
    AS $_$SELECT feature.*
  FROM feature
   INNER JOIN featureloc AS x ON (x.feature_id=feature.feature_id)
   INNER JOIN featureloc AS y ON (y.feature_id=$1)
  WHERE
   x.srcfeature_id = y.srcfeature_id            AND
   ( x.fmax >= y.fmin AND x.fmin <= y.fmax ) $_$;


ALTER FUNCTION public.feature_overlaps(integer) OWNER TO postgres;

--
-- Name: featureloc; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE featureloc (
    featureloc_id integer NOT NULL,
    feature_id integer NOT NULL,
    srcfeature_id integer,
    fmin integer,
    is_fmin_partial boolean DEFAULT false NOT NULL,
    fmax integer,
    is_fmax_partial boolean DEFAULT false NOT NULL,
    strand smallint,
    phase integer,
    residue_info text,
    locgroup integer DEFAULT 0 NOT NULL,
    rank integer DEFAULT 0 NOT NULL,
    CONSTRAINT featureloc_c2 CHECK ((fmin <= fmax))
);


ALTER TABLE featureloc OWNER TO postgres;

--
-- Name: TABLE featureloc; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE featureloc IS 'The location of a feature relative to
another feature.  IMPORTANT: INTERBASE COORDINATES ARE USED.(This is
vital as it allows us to represent zero-length features eg splice
sites, insertion points without an awkward fuzzy system). Features
typically have exactly ONE location, but this need not be the
case. Some features may not be localized (eg a gene that has been
characterized genetically but no sequence/molecular info is
available). NOTE ON MULTIPLE LOCATIONS: Each feature can have 0 or
more locations. Multiple locations do NOT indicate non-contiguous
locations (if a feature such as a transcript has a non-contiguous
location, then the subfeatures such as exons should always be
manifested). Instead, multiple featurelocs for a feature designate
alternate locations or grouped locations; for instance, a feature
designating a blast hit or hsp will have two locations, one on the
query feature, one on the subject feature.  features representing
sequence variation could have alternate locations instantiated on a
feature on the mutant strain.  the column:rank is used to
differentiate these different locations. Reflexive locations should
never be stored - this is for -proper- (ie non-self) locations only;
i.e. nothing should be located relative to itself';


--
-- Name: COLUMN featureloc.feature_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.feature_id IS 'The feature that is being located. Any feature can have zero or more featurelocs';


--
-- Name: COLUMN featureloc.srcfeature_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.srcfeature_id IS 'The source feature which this location is relative to. Every location is relative to another feature (however, this column is nullable, because the srcfeature may not be known). All locations are -proper- that is, nothing should be located relative to itself. No cycles are allowed in the featureloc graph';


--
-- Name: COLUMN featureloc.fmin; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.fmin IS 'The leftmost/minimal boundary in the linear range represented by the featureloc. Sometimes (eg in bioperl) this is called -start- although this is confusing because it does not necessarily represent the 5-prime coordinate. IMPORTANT: This is space-based (INTERBASE) coordinates, counting from zero. To convert this to the leftmost position in a base-oriented system (eg GFF, bioperl), add 1 to fmin';


--
-- Name: COLUMN featureloc.is_fmin_partial; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.is_fmin_partial IS 'This is typically
false, but may be true if the value for column:fmin is inaccurate or
the leftmost part of the range is unknown/unbounded';


--
-- Name: COLUMN featureloc.fmax; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.fmax IS 'The rightmost/maximal boundary in the linear range represented by the featureloc. Sometimes (eg in bioperl) this is called -end- although this is confusing because it does not necessarily represent the 3-prime coordinate. IMPORTANT: This is space-based (INTERBASE) coordinates, counting from zero. No conversion is required to go from fmax to the rightmost coordinate in a base-oriented system that counts from 1 (eg GFF, bioperl)';


--
-- Name: COLUMN featureloc.is_fmax_partial; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.is_fmax_partial IS 'This is typically
false, but may be true if the value for column:fmax is inaccurate or
the rightmost part of the range is unknown/unbounded';


--
-- Name: COLUMN featureloc.strand; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.strand IS 'The orientation/directionality of the
location. Should be 0,-1 or +1';


--
-- Name: COLUMN featureloc.phase; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.phase IS 'phase of translation wrt srcfeature_id.
Values are 0,1,2. It may not be possible to manifest this column for
some features such as exons, because the phase is dependant on the
spliceform (the same exon can appear in multiple spliceforms). This column is mostly useful for predicted exons and CDSs';


--
-- Name: COLUMN featureloc.residue_info; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.residue_info IS 'Alternative residues,
when these differ from feature.residues. for instance, a SNP feature
located on a wild and mutant protein would have different alresidues.
for alignment/similarity features, the altresidues is used to
represent the alignment string (CIGAR format). Note on variation
features; even if we dont want to instantiate a mutant
chromosome/contig feature, we can still represent a SNP etc with 2
locations, one (rank 0) on the genome, the other (rank 1) would have
most fields null, except for altresidues';


--
-- Name: COLUMN featureloc.locgroup; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.locgroup IS 'This is used to manifest redundant,
derivable extra locations for a feature. The default locgroup=0 is
used for the DIRECT location of a feature. !! MOST CHADO USERS MAY
NEVER USE featurelocs WITH logroup>0 !! Transitively derived locations
are indicated with locgroup>0. For example, the position of an exon on
a BAC and in global chromosome coordinates. This column is used to
differentiate these groupings of locations. the default locgroup 0
is used for the main/primary location, from which the others can be
derived via coordinate transformations. another example of redundant
locations is storing ORF coordinates relative to both transcript and
genome. redundant locations open the possibility of the database
getting into inconsistent states; this schema gives us the flexibility
of both warehouse instantiations with redundant locations (easier for
querying) and management instantiations with no redundant
locations. An example of using both locgroup and rank: imagine a
feature indicating a conserved region between the chromosomes of two
different species. we may want to keep redundant locations on both
contigs and chromosomes. we would thus have 4 locations for the single
conserved region feature - two distinct locgroups (contig level and
chromosome level) and two distinct ranks (for the two species)';


--
-- Name: COLUMN featureloc.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureloc.rank IS 'Used when a feature has >1
location, otherwise the default rank 0 is used. Some features (eg
blast hits and HSPs) have two locations - one on the query and one on
the subject. Rank is used to differentiate these. Rank=0 is always
used for the query, Rank=1 for the subject. For multiple alignments,
assignment of rank is arbitrary. Rank is also used for
sequence_variant features, such as SNPs. Rank=0 indicates the wildtype
(or baseline) feature, Rank=1 indicates the mutant (or compared) feature';


--
-- Name: featureloc_slice(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION featureloc_slice(integer, integer) RETURNS SETOF featureloc
    LANGUAGE sql
    AS $_$SELECT * from featureloc where boxquery($1, $2) @ boxrange(fmin,fmax)$_$;


ALTER FUNCTION public.featureloc_slice(integer, integer) OWNER TO postgres;

--
-- Name: featureloc_slice(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION featureloc_slice(integer, integer, integer) RETURNS SETOF featureloc
    LANGUAGE sql
    AS $_$SELECT * 
   FROM featureloc 
   WHERE boxquery($2, $3) @ boxrange(fmin,fmax)
   AND srcfeature_id = $1 $_$;


ALTER FUNCTION public.featureloc_slice(integer, integer, integer) OWNER TO postgres;

--
-- Name: featureloc_slice(character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION featureloc_slice(character varying, integer, integer) RETURNS SETOF featureloc
    LANGUAGE sql
    AS $_$SELECT featureloc.* 
   FROM featureloc 
   INNER JOIN feature AS srcf ON (srcf.feature_id = featureloc.srcfeature_id)
   WHERE boxquery($2, $3) @ boxrange(fmin,fmax)
   AND srcf.name = $1 $_$;


ALTER FUNCTION public.featureloc_slice(character varying, integer, integer) OWNER TO postgres;

--
-- Name: featureslice(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION featureslice(integer, integer) RETURNS SETOF featureloc
    LANGUAGE sql
    AS $_$SELECT * from featureloc where boxquery($1, $2) @ boxrange(fmin,fmax)$_$;


ALTER FUNCTION public.featureslice(integer, integer) OWNER TO postgres;

--
-- Name: gffattstring(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION gffattstring(integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$DECLARE
  return_string      varchar;
  f_id               ALIAS FOR $1;
  atts_view          gffatts%ROWTYPE;
  feature_row        feature%ROWTYPE;
  name               varchar;
  uniquename         varchar;
  parent             varchar;
  escape_loc         int; 
BEGIN
  --Get name from feature.name
  --Get ID from feature.uniquename
                                                                                
  SELECT INTO feature_row * FROM feature WHERE feature_id = f_id;
  name  = feature_row.name;
  return_string = 'ID=' || feature_row.uniquename;
  IF name IS NOT NULL AND name != ''
  THEN
    return_string = return_string ||';' || 'Name=' || name;
  END IF;
                                                                                
  --Get Parent from feature_relationship
  SELECT INTO feature_row * FROM feature f, feature_relationship fr
    WHERE fr.subject_id = f_id AND fr.object_id = f.feature_id;
  IF FOUND
  THEN
    return_string = return_string||';'||'Parent='||feature_row.uniquename;
  END IF;
                                                                                
  FOR atts_view IN SELECT * FROM gff3atts WHERE feature_id = f_id  LOOP
    escape_loc = position(';' in atts_view.attribute);
    IF escape_loc > 0 THEN
      atts_view.attribute = replace(atts_view.attribute, ';', '%3B');
    END IF;
    return_string = return_string || ';'
                     || atts_view.type || '='
                     || atts_view.attribute;
  END LOOP;
                                                                                
  RETURN return_string;
END;
$_$;


ALTER FUNCTION public.gffattstring(integer) OWNER TO postgres;

--
-- Name: cvterm; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE cvterm (
    cvterm_id integer NOT NULL,
    cv_id integer NOT NULL,
    name character varying(1024) NOT NULL,
    definition text,
    dbxref_id integer NOT NULL,
    is_obsolete integer DEFAULT 0 NOT NULL,
    is_relationshiptype integer DEFAULT 0 NOT NULL
);


ALTER TABLE cvterm OWNER TO postgres;

--
-- Name: TABLE cvterm; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE cvterm IS 'A term, class, universal or type within an
ontology or controlled vocabulary.  This table is also used for
relations and properties. cvterms constitute nodes in the graph
defined by the collection of cvterms and cvterm_relationships';


--
-- Name: COLUMN cvterm.cv_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvterm.cv_id IS 'The cv/ontology/namespace to which
this cvterm belongs';


--
-- Name: COLUMN cvterm.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvterm.name IS 'A concise human-readable name or
label for the cvterm. uniquely identifies a cvterm within a cv';


--
-- Name: COLUMN cvterm.definition; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvterm.definition IS 'A human-readable text
definition';


--
-- Name: COLUMN cvterm.dbxref_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvterm.dbxref_id IS 'Primary identifier dbxref - The
unique global OBO identifier for this cvterm.  Note that a cvterm may
have multiple secondary dbxrefs - see also table: cvterm_dbxref';


--
-- Name: COLUMN cvterm.is_obsolete; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvterm.is_obsolete IS 'Boolean 0=false,1=true; see
GO documentation for details of obsoletion.  note that two terms with
different primary dbxrefs may exist if one is obsolete';


--
-- Name: COLUMN cvterm.is_relationshiptype; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvterm.is_relationshiptype IS 'Boolean
0=false,1=true relations or relationship types (also known as Typedefs
in OBO format, or as properties or slots) form a cv/ontology in
themselves. We use this flag to indicate whether this cvterm is an
actual term/class/universal or a relation. Relations may be drawn from
the OBO Relations ontology, but are not exclusively drawn from there';


--
-- Name: db; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE db (
    db_id integer NOT NULL,
    name character varying(255) NOT NULL,
    description character varying(255),
    urlprefix character varying(255),
    url character varying(255)
);


ALTER TABLE db OWNER TO postgres;

--
-- Name: TABLE db; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE db IS 'A database authority. Typical dbs in
bioinformatics are FlyBase, GO, UniProt, NCBI, MGI, etc. The authority
is generally known by this sortened form, which is unique within the
bioinformatics and biomedical realm.  **TODO** - add support for URIs,
URNs (eg LSIDs). We can do this by treating the url as a uri -
however, some applications may expect this to be resolvable - to be
decided';


--
-- Name: dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE dbxref (
    dbxref_id integer NOT NULL,
    db_id integer NOT NULL,
    accession character varying(255) NOT NULL,
    version character varying(255) DEFAULT ''::character varying NOT NULL,
    description text
);


ALTER TABLE dbxref OWNER TO postgres;

--
-- Name: TABLE dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE dbxref IS 'A unique, global, public, stable identifier. Not necessarily an eXternal reference - can reference data items inside the particular chado instance being used. Typically a row in a table can be uniquely identified with a primary identifier (called dbxref_id); a table may also have secondary identifiers (in a linking table <T>_dbxref). A dbxref is generally written as <DB>:<ACCESSION> or as <DB>:<ACCESSION>:<VERSION>. ';


--
-- Name: COLUMN dbxref.accession; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN dbxref.accession IS 'The local part of the identifier. Guaranteed by the db authority to be unique for that db';


--
-- Name: feature_cvterm; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE feature_cvterm (
    feature_cvterm_id integer NOT NULL,
    feature_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer NOT NULL,
    is_not boolean DEFAULT false NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE feature_cvterm OWNER TO postgres;

--
-- Name: TABLE feature_cvterm; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_cvterm IS 'Associate a term from a cv with a feature, for example, GO annotation';


--
-- Name: COLUMN feature_cvterm.pub_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_cvterm.pub_id IS 'Provenance for the annotation. Each annotation should have a single primary publication (which may be of the appropriate type for computational analyses) where more details can be found. Additional provenance dbxrefs can be attached using feature_cvterm_dbxref';


--
-- Name: COLUMN feature_cvterm.is_not; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_cvterm.is_not IS 'if this is set to true, then this annotation is interpreted as a NEGATIVE annotation - ie the feature does NOT have the specified function, process, component, part, etc. See GO docs for more details';


--
-- Name: feature_dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE feature_dbxref (
    feature_dbxref_id integer NOT NULL,
    feature_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL
);


ALTER TABLE feature_dbxref OWNER TO postgres;

--
-- Name: TABLE feature_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_dbxref IS 'links a feature to dbxrefs. This is for secondary identifiers; primary identifiers should use feature.dbxref_id';


--
-- Name: COLUMN feature_dbxref.is_current; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_dbxref.is_current IS 'the is_current boolean indicates whether the linked dbxref is the  current -official- dbxref for the linked feature';


--
-- Name: feature_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE feature_pub (
    feature_pub_id integer NOT NULL,
    feature_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE feature_pub OWNER TO postgres;

--
-- Name: TABLE feature_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_pub IS 'Provenance. Linking table between features and publications that mention them';


--
-- Name: feature_synonym; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE feature_synonym (
    feature_synonym_id integer NOT NULL,
    synonym_id integer NOT NULL,
    feature_id integer NOT NULL,
    pub_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL,
    is_internal boolean DEFAULT false NOT NULL
);


ALTER TABLE feature_synonym OWNER TO postgres;

--
-- Name: TABLE feature_synonym; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_synonym IS 'Linking table between feature and synonym';


--
-- Name: COLUMN feature_synonym.pub_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_synonym.pub_id IS 'the pub_id link is for relating the usage of a given synonym to the publication in which it was used';


--
-- Name: COLUMN feature_synonym.is_current; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_synonym.is_current IS 'the is_current boolean indicates whether the linked synonym is the  current -official- symbol for the linked feature';


--
-- Name: COLUMN feature_synonym.is_internal; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_synonym.is_internal IS 'typically a synonym exists so that somebody querying the db with an obsolete name can find the object theyre looking for (under its current name.  If the synonym has been used publicly & deliberately (eg in a paper), it my also be listed in reports as a synonym.   If the synonym was not used deliberately (eg, there was a typo which went public), then the is_internal boolean may be set to -true- so that it is known that the 
synonym is -internal- and should be queryable but should not be listed in reports as a valid synonym';


--
-- Name: featureprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE featureprop (
    featureprop_id integer NOT NULL,
    feature_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE featureprop OWNER TO postgres;

--
-- Name: TABLE featureprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE featureprop IS 'A feature can have any number of slot-value property tags attached to it. This is an alternative to hardcoding a list of columns in the relational schema, and is completely extensible';


--
-- Name: COLUMN featureprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureprop.type_id IS 'The name of the
property/slot is a cvterm. The meaning of the property is defined in
that cvterm. Certain property types will only apply to certain feature
types (e.g. the anticodon property will only apply to tRNA features) ;
the types here come from the sequence feature property ontology';


--
-- Name: COLUMN featureprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureprop.value IS 'The value of the property, represented as text. Numeric values are converted to their text representation. This is less efficient than using native database types, but is easier to query.';


--
-- Name: COLUMN featureprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN featureprop.rank IS 'Property-Value ordering. Any
feature can have multiple values for any particular property type -
these are ordered in a list using rank, counting from zero. For
properties that are single-valued rather than multi-valued, the
default 0 value should be used';


--
-- Name: pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE pub (
    pub_id integer NOT NULL,
    title text,
    volumetitle text,
    volume character varying(255),
    series_name character varying(255),
    issue character varying(255),
    pyear character varying(255),
    pages character varying(255),
    miniref character varying(255),
    uniquename text NOT NULL,
    type_id integer NOT NULL,
    is_obsolete boolean DEFAULT false,
    publisher character varying(255),
    pubplace character varying(255),
    title_tsvector tsvector
);


ALTER TABLE pub OWNER TO postgres;

--
-- Name: TABLE pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE pub IS 'A documented provenance artefact - publications,
documents, personal communication';


--
-- Name: COLUMN pub.title; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN pub.title IS 'descriptive general heading';


--
-- Name: COLUMN pub.volumetitle; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN pub.volumetitle IS 'title of part if one of a series';


--
-- Name: COLUMN pub.series_name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN pub.series_name IS 'full name of (journal) series';


--
-- Name: COLUMN pub.pages; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN pub.pages IS 'page number range[s], eg, 457--459, viii + 664pp, lv--lvii';


--
-- Name: COLUMN pub.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN pub.type_id IS 'the type of the publication (book, journal, poem, graffiti, etc). Uses pub cv';


--
-- Name: synonym; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE synonym (
    synonym_id integer NOT NULL,
    name character varying(255) NOT NULL,
    type_id integer NOT NULL,
    synonym_sgml character varying(255) NOT NULL
);


ALTER TABLE synonym OWNER TO postgres;

--
-- Name: TABLE synonym; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE synonym IS 'A synonym for a feature. One feature can have multiple synonyms, and the same synonym can apply to multiple features';


--
-- Name: COLUMN synonym.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN synonym.name IS 'The synonym itself. Should be human-readable machine-searchable ascii text';


--
-- Name: COLUMN synonym.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN synonym.type_id IS 'types would be symbol and fullname for now';


--
-- Name: COLUMN synonym.synonym_sgml; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN synonym.synonym_sgml IS 'The fully specified synonym, with any non-ascii characters encoded in SGML';


--
-- Name: gffatts; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW gffatts AS
 SELECT fs.feature_id,
    'cvterm'::text AS type,
    s.name AS attribute
   FROM cvterm s,
    feature_cvterm fs
  WHERE (fs.cvterm_id = s.cvterm_id)
UNION ALL
 SELECT fs.feature_id,
    'dbxref'::text AS type,
    (((d.name)::text || ':'::text) || (s.accession)::text) AS attribute
   FROM dbxref s,
    feature_dbxref fs,
    db d
  WHERE ((fs.dbxref_id = s.dbxref_id) AND (s.db_id = d.db_id))
UNION ALL
 SELECT fs.feature_id,
    'synonym'::text AS type,
    s.name AS attribute
   FROM synonym s,
    feature_synonym fs
  WHERE (fs.synonym_id = s.synonym_id)
UNION ALL
 SELECT fp.feature_id,
    cv.name AS type,
    fp.value AS attribute
   FROM featureprop fp,
    cvterm cv
  WHERE (fp.type_id = cv.cvterm_id)
UNION ALL
 SELECT fs.feature_id,
    'pub'::text AS type,
    (((s.series_name)::text || ':'::text) || s.title) AS attribute
   FROM pub s,
    feature_pub fs
  WHERE (fs.pub_id = s.pub_id);


ALTER TABLE gffatts OWNER TO postgres;

--
-- Name: gfffeatureatts(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION gfffeatureatts(integer) RETURNS SETOF gffatts
    LANGUAGE sql
    AS $_$
SELECT feature_id, 'cvterm' AS type,  s.name AS attribute
FROM cvterm s, feature_cvterm fs
WHERE fs.feature_id= $1 AND fs.cvterm_id = s.cvterm_id
UNION
SELECT feature_id, 'dbxref' AS type, d.name || ':' || s.accession AS attribute
FROM dbxref s, feature_dbxref fs, db d
WHERE fs.feature_id= $1 AND fs.dbxref_id = s.dbxref_id AND s.db_id = d.db_id
--UNION
--SELECT feature_id, 'expression' AS type, s.description AS attribute
--FROM expression s, feature_expression fs
--WHERE fs.feature_id= $1 AND fs.expression_id = s.expression_id
--UNION
--SELECT fg.feature_id, 'genotype' AS type, g.uniquename||': '||g.description AS attribute
--FROM gcontext g, feature_gcontext fg
--WHERE fg.feature_id= $1 AND g.gcontext_id = fg.gcontext_id
--UNION
--SELECT feature_id, 'genotype' AS type, s.description AS attribute
--FROM genotype s, feature_genotype fs
--WHERE fs.feature_id= $1 AND fs.genotype_id = s.genotype_id
--UNION
--SELECT feature_id, 'phenotype' AS type, s.description AS attribute
--FROM phenotype s, feature_phenotype fs
--WHERE fs.feature_id= $1 AND fs.phenotype_id = s.phenotype_id
UNION
SELECT feature_id, 'synonym' AS type, s.name AS attribute
FROM synonym s, feature_synonym fs
WHERE fs.feature_id= $1 AND fs.synonym_id = s.synonym_id
UNION
SELECT fp.feature_id,cv.name,fp.value
FROM featureprop fp, cvterm cv
WHERE fp.feature_id= $1 AND fp.type_id = cv.cvterm_id 
UNION
SELECT feature_id, 'pub' AS type, s.series_name || ':' || s.title AS attribute
FROM pub s, feature_pub fs
WHERE fs.feature_id= $1 AND fs.pub_id = s.pub_id
$_$;


ALTER FUNCTION public.gfffeatureatts(integer) OWNER TO postgres;

--
-- Name: make_all_rows_visible_in_schema(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION make_all_rows_visible_in_schema(scm character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  myrec RECORD;
  stmt VARCHAR;
  query VARCHAR;
  bt_schema VARCHAR;
BEGIN
  bt_schema = scm || '_bt';
  query = 'SELECT relname 
             FROM pg_class c, pg_namespace n
            WHERE c.relnamespace=n.oid 
              AND c.relkind=''r''
              AND n.nspname=''' || bt_schema || '''';
--  RAISE NOTICE '%', query; --stmt;
  FOR myrec IN EXECUTE query LOOP
    RAISE NOTICE 'Making rows in ''%'' visible', myrec.relname;
    stmt = 'SELECT make_all_rows_visible(''' || scm || '''::varchar, ''' || myrec.relname || '''::varchar)';
    --RAISE NOTICE '%', stmt;
    EXECUTE stmt;
  END LOOP;
  RETURN 't';
END
$$;


ALTER FUNCTION public.make_all_rows_visible_in_schema(scm character varying) OWNER TO postgres;

--
-- Name: plpgsql_call_handler(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION plpgsql_call_handler() RETURNS language_handler
    LANGUAGE c
    AS '$libdir/plpgsql', 'plpgsql_call_handler';


ALTER FUNCTION public.plpgsql_call_handler() OWNER TO postgres;

--
-- Name: plpgsql_validator(oid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION plpgsql_validator(oid) RETURNS void
    LANGUAGE c
    AS '$libdir/plpgsql', 'plpgsql_validator';


ALTER FUNCTION public.plpgsql_validator(oid) OWNER TO postgres;

--
-- Name: randstring(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION randstring(length integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$ declare ret varchar; begin ret = ''; for i in 1..length loop ret = ret || substring ('abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMN' from cast (random()*50 as integer) for 1); end loop; return ret; end $$;


ALTER FUNCTION public.randstring(length integer) OWNER TO postgres;

--
-- Name: refresh_materialized_views(); Type: FUNCTION; Schema: public; Owner: web_usr
--

CREATE FUNCTION refresh_materialized_views() RETURNS void
    LANGUAGE sql
    AS $$
REFRESH MATERIALIZED VIEW public.materialized_phenoview;
REFRESH MATERIALIZED VIEW public.materialized_genoview;
REFRESH MATERIALIZED VIEW public.accessions;
REFRESH MATERIALIZED VIEW public.accessionsXbreeding_programs;
REFRESH MATERIALIZED VIEW public.accessionsXlocations;
REFRESH MATERIALIZED VIEW public.accessionsXgenotyping_protocols;
REFRESH MATERIALIZED VIEW public.accessionsXplants;
REFRESH MATERIALIZED VIEW public.accessionsXplots;
REFRESH MATERIALIZED VIEW public.accessionsXtraits;
REFRESH MATERIALIZED VIEW public.accessionsXtrial_designs;
REFRESH MATERIALIZED VIEW public.accessionsXtrial_types;
REFRESH MATERIALIZED VIEW public.accessionsXtrials;
REFRESH MATERIALIZED VIEW public.accessionsXyears;
REFRESH MATERIALIZED VIEW public.breeding_programs;
REFRESH MATERIALIZED VIEW public.breeding_programsXlocations;
REFRESH MATERIALIZED VIEW public.breeding_programsXgenotyping_protocols;
REFRESH MATERIALIZED VIEW public.breeding_programsXplants;
REFRESH MATERIALIZED VIEW public.breeding_programsXplots;
REFRESH MATERIALIZED VIEW public.breeding_programsXtraits;
REFRESH MATERIALIZED VIEW public.breeding_programsXtrial_designs;
REFRESH MATERIALIZED VIEW public.breeding_programsXtrial_types;
REFRESH MATERIALIZED VIEW public.breeding_programsXtrials;
REFRESH MATERIALIZED VIEW public.breeding_programsXyears;
REFRESH MATERIALIZED VIEW public.genotyping_protocols;
REFRESH MATERIALIZED VIEW public.genotyping_protocolsXlocations;
REFRESH MATERIALIZED VIEW public.genotyping_protocolsXplants;
REFRESH MATERIALIZED VIEW public.genotyping_protocolsXplots;
REFRESH MATERIALIZED VIEW public.genotyping_protocolsXtraits;
REFRESH MATERIALIZED VIEW public.genotyping_protocolsXtrial_designs;
REFRESH MATERIALIZED VIEW public.genotyping_protocolsXtrial_types;
REFRESH MATERIALIZED VIEW public.genotyping_protocolsXtrials;
REFRESH MATERIALIZED VIEW public.genotyping_protocolsXyears;
REFRESH MATERIALIZED VIEW public.locations;
REFRESH MATERIALIZED VIEW public.locationsXplants;
REFRESH MATERIALIZED VIEW public.locationsXplots;
REFRESH MATERIALIZED VIEW public.locationsXtraits;
REFRESH MATERIALIZED VIEW public.locationsXtrial_designs;
REFRESH MATERIALIZED VIEW public.locationsXtrial_types;
REFRESH MATERIALIZED VIEW public.locationsXtrials;
REFRESH MATERIALIZED VIEW public.locationsXyears;
REFRESH MATERIALIZED VIEW public.plants;
REFRESH MATERIALIZED VIEW public.plantsXplots;
REFRESH MATERIALIZED VIEW public.plantsXtraits;
REFRESH MATERIALIZED VIEW public.plantsXtrial_designs;
REFRESH MATERIALIZED VIEW public.plantsXtrial_types;
REFRESH MATERIALIZED VIEW public.plantsXtrials;
REFRESH MATERIALIZED VIEW public.plantsXyears;
REFRESH MATERIALIZED VIEW public.plots;
REFRESH MATERIALIZED VIEW public.plotsXtraits;
REFRESH MATERIALIZED VIEW public.plotsXtrial_designs;
REFRESH MATERIALIZED VIEW public.plotsXtrial_types;
REFRESH MATERIALIZED VIEW public.plotsXtrials;
REFRESH MATERIALIZED VIEW public.plotsXyears;
REFRESH MATERIALIZED VIEW public.traits;
REFRESH MATERIALIZED VIEW public.traitsXtrial_designs;
REFRESH MATERIALIZED VIEW public.traitsXtrial_types;
REFRESH MATERIALIZED VIEW public.traitsXtrials;
REFRESH MATERIALIZED VIEW public.traitsXyears;
REFRESH MATERIALIZED VIEW public.trial_designs;
REFRESH MATERIALIZED VIEW public.trial_designsXtrial_types;
REFRESH MATERIALIZED VIEW public.trial_designsXtrials;
REFRESH MATERIALIZED VIEW public.trial_designsXyears;
REFRESH MATERIALIZED VIEW public.trial_types;
REFRESH MATERIALIZED VIEW public.trial_typesXtrials;
REFRESH MATERIALIZED VIEW public.trial_typesXyears;
REFRESH MATERIALIZED VIEW public.trials;
REFRESH MATERIALIZED VIEW public.trialsXyears;
REFRESH MATERIALIZED VIEW public.years;
UPDATE public.matviews SET currently_refreshing=FALSE, last_refresh=CURRENT_TIMESTAMP;$$;


ALTER FUNCTION public.refresh_materialized_views() OWNER TO web_usr;

--
-- Name: refresh_materialized_views_concurrently(); Type: FUNCTION; Schema: public; Owner: web_usr
--

CREATE FUNCTION refresh_materialized_views_concurrently() RETURNS void
    LANGUAGE sql
    AS $$
REFRESH MATERIALIZED VIEW CONCURRENTLY public.materialized_phenoview;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.materialized_genoview;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessions;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXbreeding_programs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXlocations;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXgenotyping_protocols;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXplants;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXplots;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXtraits;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXtrial_designs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXtrial_types;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXtrials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.accessionsXyears;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programsXlocations;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programsXgenotyping_protocols;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programsXplants;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programsXplots;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programsXtraits;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programsXtrial_designs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programsXtrial_types;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programsXtrials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.breeding_programsXyears;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.genotyping_protocols;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.genotyping_protocolsXlocations;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.genotyping_protocolsXplants;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.genotyping_protocolsXplots;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.genotyping_protocolsXtraits;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.genotyping_protocolsXtrial_designs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.genotyping_protocolsXtrial_types;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.genotyping_protocolsXtrials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.genotyping_protocolsXyears;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.locations;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.locationsXplants;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.locationsXplots;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.locationsXtraits;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.locationsXtrial_designs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.locationsXtrial_types;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.locationsXtrials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.locationsXyears;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plants;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plantsXplots;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plantsXtraits;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plantsXtrial_designs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plantsXtrial_types;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plantsXtrials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plantsXyears;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plots;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plotsXtraits;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plotsXtrial_designs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plotsXtrial_types;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plotsXtrials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.plotsXyears;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.traits;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.traitsXtrial_designs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.traitsXtrial_types;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.traitsXtrials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.traitsXyears;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trial_designs;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trial_designsXtrial_types;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trial_designsXtrials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trial_designsXyears;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trial_types;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trial_typesXtrials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trial_typesXyears;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trials;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.trialsXyears;
REFRESH MATERIALIZED VIEW CONCURRENTLY public.years;
UPDATE public.matviews SET currently_refreshing=FALSE, last_refresh=CURRENT_TIMESTAMP;$$;


ALTER FUNCTION public.refresh_materialized_views_concurrently() OWNER TO web_usr;

--
-- Name: store_feature(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION store_feature(character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    paccession           ALIAS FOR $1;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid feature_id
      FROM feature
      WHERE feature.accession = paccession;
    IF NOT FOUND THEN
      INSERT INTO feature 
       (accession)
         VALUES
       (paccession);
      RETURN currval('feature_pk_seq');
    END IF;
    UPDATE feature
      SET
         
      WHERE
         feature.accession = paccession

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_feature(character varying) OWNER TO postgres;

--
-- Name: store_feature(character varying, character varying, integer, integer, integer, text, integer, character, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION store_feature(character varying, character varying, integer, integer, integer, text, integer, character, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    pname                ALIAS FOR $1;
    paccession           ALIAS FOR $2;
    pfmin                ALIAS FOR $3;
    pfmax                ALIAS FOR $4;
    pfstrand             ALIAS FOR $5;
    presidues            ALIAS FOR $6;
    pseqlen              ALIAS FOR $7;
    pmd5checksum         ALIAS FOR $8;
    ptype_id             ALIAS FOR $9;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid feature_id
      FROM feature
      WHERE feature.name = pname AND
            feature.accession = paccession AND
            feature.fmin = pfmin AND
            feature.fmax = pfmax AND
            feature.fstrand = pfstrand AND
            feature.residues = presidues AND
            feature.seqlen = pseqlen AND
            feature.md5checksum = pmd5checksum AND
            feature.type_id = ptype_id;
    IF NOT FOUND THEN
      INSERT INTO feature 
       (name, accession, fmin, fmax, fstrand, residues, seqlen, md5checksum, type_id)
         VALUES
       (pname, paccession, pfmin, pfmax, pfstrand, presidues, pseqlen, pmd5checksum, ptype_id);
      RETURN currval('feature_pk_seq');
    END IF;
    UPDATE feature
      SET
         
      WHERE
         feature.name = pname AND
            feature.accession = paccession AND
            feature.fmin = pfmin AND
            feature.fmax = pfmax AND
            feature.fstrand = pfstrand AND
            feature.residues = presidues AND
            feature.seqlen = pseqlen AND
            feature.md5checksum = pmd5checksum AND
            feature.type_id = ptype_id

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_feature(character varying, character varying, integer, integer, integer, text, integer, character, integer) OWNER TO postgres;

--
-- Name: store_feature_cvterm(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION store_feature_cvterm(integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    pfeature_id          ALIAS FOR $1;
    pcvterm_id           ALIAS FOR $2;
    ppub_id              ALIAS FOR $3;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid feature_cvterm_id
      FROM feature_cvterm
      WHERE feature_cvterm.feature_id = pfeature_id AND
            feature_cvterm.cvterm_id = pcvterm_id AND
            feature_cvterm.pub_id = ppub_id;
    IF NOT FOUND THEN
      INSERT INTO feature_cvterm 
       (feature_id, cvterm_id, pub_id)
         VALUES
       (pfeature_id, pcvterm_id, ppub_id);
      RETURN currval('feature_cvterm_pk_seq');
    END IF;
    UPDATE feature_cvterm
      SET
         
      WHERE
         feature_cvterm.feature_id = pfeature_id AND
            feature_cvterm.cvterm_id = pcvterm_id AND
            feature_cvterm.pub_id = ppub_id

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_feature_cvterm(integer, integer, integer) OWNER TO postgres;

--
-- Name: store_feature_dbxref(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION store_feature_dbxref(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    pdbxref_id           ALIAS FOR $1;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid feature_dbxref_id
      FROM feature_dbxref
      WHERE feature_dbxref.feature_dbxref_id = pfeature_dbxref_id AND
            feature_dbxref.dbxref_id = pdbxref_id;
    IF NOT FOUND THEN
      INSERT INTO feature_dbxref 
       (dbxref_id)
         VALUES
       (pdbxref_id);
      RETURN currval('feature_dbxref_pk_seq');
    END IF;
    UPDATE feature_dbxref
      SET
         
      WHERE
         feature_dbxref.feature_dbxref_id = pfeature_dbxref_id AND
            feature_dbxref.dbxref_id = pdbxref_id

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_feature_dbxref(integer) OWNER TO postgres;

--
-- Name: store_feature_relationship(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION store_feature_relationship(integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    psubj_feature_id     ALIAS FOR $1;
    pobj_feature_id      ALIAS FOR $2;
    ptype_id             ALIAS FOR $3;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid feature_relationship_id
      FROM feature_relationship
      WHERE feature_relationship.subj_feature_id = psubj_feature_id AND
            feature_relationship.obj_feature_id = pobj_feature_id AND
            feature_relationship.type_id = ptype_id;
    IF NOT FOUND THEN
      INSERT INTO feature_relationship 
       (subj_feature_id, obj_feature_id, type_id)
         VALUES
       (psubj_feature_id, pobj_feature_id, ptype_id);
      RETURN currval('feature_relationship_pk_seq');
    END IF;
    UPDATE feature_relationship
      SET
         
      WHERE
         feature_relationship.subj_feature_id = psubj_feature_id AND
            feature_relationship.obj_feature_id = pobj_feature_id AND
            feature_relationship.type_id = ptype_id

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_feature_relationship(integer, integer, integer) OWNER TO postgres;

--
-- Name: store_featureprop(integer, integer, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION store_featureprop(integer, integer, text, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    pfeature_id          ALIAS FOR $1;
    ppkey_id             ALIAS FOR $2;
    ppval                ALIAS FOR $3;
    pprank               ALIAS FOR $4;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid featureprop_id
      FROM featureprop
      WHERE featureprop.feature_id = pfeature_id AND
            featureprop.pkey_id = ppkey_id AND
            featureprop.pval = ppval AND
            featureprop.prank = pprank;
    IF NOT FOUND THEN
      INSERT INTO featureprop 
       (feature_id, pkey_id, pval, prank)
         VALUES
       (pfeature_id, ppkey_id, ppval, pprank);
      RETURN currval('featureprop_pk_seq');
    END IF;
    UPDATE featureprop
      SET
         
      WHERE
         featureprop.feature_id = pfeature_id AND
            featureprop.pkey_id = ppkey_id AND
            featureprop.pval = ppval AND
            featureprop.prank = pprank

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_featureprop(integer, integer, text, integer) OWNER TO postgres;

--
-- Name: store_featureprop_pub(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION store_featureprop_pub(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    pfeatureprop_id      ALIAS FOR $1;
    ppub_id              ALIAS FOR $2;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid 0
      FROM featureprop_pub
      WHERE featureprop_pub.featureprop_id = pfeatureprop_id AND
            featureprop_pub.pub_id = ppub_id;
    IF NOT FOUND THEN
      INSERT INTO featureprop_pub 
       (featureprop_id, pub_id)
         VALUES
       (pfeatureprop_id, ppub_id);
      RETURN currval('0');
    END IF;
    UPDATE featureprop_pub
      SET
         
      WHERE
         featureprop_pub.featureprop_id = pfeatureprop_id AND
            featureprop_pub.pub_id = ppub_id

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_featureprop_pub(integer, integer) OWNER TO postgres;

--
-- Name: store_gene(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION store_gene(character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    pname                ALIAS FOR $1;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid gene_id
      FROM gene
      WHERE gene.name = pname;
    IF NOT FOUND THEN
      INSERT INTO gene 
       (name)
         VALUES
       (pname);
      RETURN currval('gene_pk_seq');
    END IF;
    UPDATE gene
      SET
         
      WHERE
         gene.name = pname

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_gene(character varying) OWNER TO postgres;

--
-- Name: store_gene_feature(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION store_gene_feature(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    pgene_id             ALIAS FOR $1;
    pfeature_id          ALIAS FOR $2;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid 0
      FROM gene_feature
      WHERE gene_feature.gene_id = pgene_id AND
            gene_feature.feature_id = pfeature_id;
    IF NOT FOUND THEN
      INSERT INTO gene_feature 
       (gene_id, feature_id)
         VALUES
       (pgene_id, pfeature_id);
      RETURN currval('0');
    END IF;
    UPDATE gene_feature
      SET
         
      WHERE
         gene_feature.gene_id = pgene_id AND
            gene_feature.feature_id = pfeature_id

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_gene_feature(integer, integer) OWNER TO postgres;

--
-- Name: store_gene_genesynonym(integer, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION store_gene_genesynonym(integer, integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    pgenesynonym_id      ALIAS FOR $1;
    pgene_id             ALIAS FOR $2;
    ppub_id              ALIAS FOR $3;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid 0
      FROM gene_genesynonym
      WHERE gene_genesynonym.genesynonym_id = pgenesynonym_id AND
            gene_genesynonym.gene_id = pgene_id AND
            gene_genesynonym.pub_id = ppub_id;
    IF NOT FOUND THEN
      INSERT INTO gene_genesynonym 
       (genesynonym_id, gene_id, pub_id)
         VALUES
       (pgenesynonym_id, pgene_id, ppub_id);
      RETURN currval('0');
    END IF;
    UPDATE gene_genesynonym
      SET
         
      WHERE
         gene_genesynonym.genesynonym_id = pgenesynonym_id AND
            gene_genesynonym.gene_id = pgene_id AND
            gene_genesynonym.pub_id = ppub_id

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_gene_genesynonym(integer, integer, integer) OWNER TO postgres;

--
-- Name: store_genesynonym(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION store_genesynonym(character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
  DECLARE
    pgsynonym            ALIAS FOR $1;

    pkeyid INTEGER;
  BEGIN
    SELECT INTO pkeyid genesynonym_id
      FROM genesynonym
      WHERE genesynonym.gsynonym = pgsynonym;
    IF NOT FOUND THEN
      INSERT INTO genesynonym 
       (gsynonym)
         VALUES
       (pgsynonym);
      RETURN currval('genesynonym_pk_seq');
    END IF;
    UPDATE genesynonym
      SET
         
      WHERE
         genesynonym.gsynonym = pgsynonym

    RETURN pkeyid;
  END;
$_$;


ALTER FUNCTION public.store_genesynonym(character varying) OWNER TO postgres;

SET search_path = utils, pg_catalog;

--
-- Name: add_cxgn_metadata_to_empty_table(character varying, character varying); Type: FUNCTION; Schema: utils; Owner: postgres
--

CREATE FUNCTION add_cxgn_metadata_to_empty_table(scm character varying, tbl character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
visible_bit VARCHAR := 'cxgn_production_visible';
prod_schema VARCHAR;
dev_schema VARCHAR;
bt_schema VARCHAR;
nonempty INTEGER := 0;
stmt VARCHAR;
BEGIN
  prod_schema = scm;
  dev_schema = scm || '_dev';
  bt_schema = scm || '_bt';
-- FIXME: check whether the table is empty before doing this, or else
-- you'll wait a loooonnnnngggg time for it to finish.
--  stmt='SELECT count(*) FROM ' || bt_schema || '.' || tbl || ' LIMIT 1';
--  EXECUTE stmt;
--  IF nonempty > 0 THEN
--    RAISE NOTICE 'Can''t add metadata to a non-empty table.';
--     RETURN 'f';
--  ELSE
    stmt= 'ALTER TABLE ' || bt_schema || '.' || tbl || ' ADD COLUMN ' || visible_bit || ' BOOLEAN DEFAULT false';
    EXECUTE stmt;
    RETURN 't';
--  END IF;
END
$$;


ALTER FUNCTION utils.add_cxgn_metadata_to_empty_table(scm character varying, tbl character varying) OWNER TO postgres;

--
-- Name: create_cxgn_branch_views_for_table(character varying, character varying); Type: FUNCTION; Schema: utils; Owner: postgres
--

CREATE FUNCTION create_cxgn_branch_views_for_table(scm character varying, tbl character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
cols VARCHAR;
pkey VARCHAR;
pkey_ins VARCHAR;
seq VARCHAR;
upd_cols VARCHAR;
ins_cols VARCHAR;
visible_bit VARCHAR := 'cxgn_production_visible';
--metadata_cols ROW := ('cxgn_production_visible');
prod_schema VARCHAR;
dev_schema VARCHAR;
bt_schema VARCHAR;
stmt VARCHAR;
new_view_oid BIGINT;
BEGIN
--RAISE NOTICE '%', scm;
--RAISE NOTICE '%', tbl;
prod_schema = scm;
dev_schema = scm || '_dev';
bt_schema = scm || '_bt';
--RAISE NOTICE '%', prod_schema;
--RAISE NOTICE '%', dev_schema;
--RAISE NOTICE '%', bt_schema;

-- Make sure there's a primary key
pkey = find_primary_key_for_table(bt_schema, tbl);
IF pkey IS NULL THEN
  RAISE NOTICE 'Sorry, can''t operate on tables that lack primary keys.  Please fix me.';
  RETURN 'f';
END IF;

-- Get a string representation of the column names.
SELECT array_to_string(array(SELECT quote_ident(attname)
                               FROM pg_class c, 
                                    pg_attribute a,
                                    pg_namespace n
                              WHERE c.relnamespace = n.oid
                                AND a.attrelid = c.oid
                                AND a.attisdropped = 'f'
                                AND a.attname NOT IN ('cxgn_production_visible')
                                AND nspname = bt_schema
                                AND c.relname = tbl
                                AND a.attnum > 0 
                           ORDER BY attnum), ', ')
   INTO cols;

 SELECT (SELECT adsrc
           FROM pg_class c, 
                 pg_attribute a,
                 pg_namespace n,
                 pg_constraint t,
                 pg_attrdef d
  WHERE c.relnamespace = n.oid
    AND a.attrelid = c.oid
    AND t.conrelid = c.oid
    AND t.contype = 'p'
    AND array_upper(t.conkey, 1)=1
    AND t.conkey[1]=a.attnum      
    AND d.adrelid = c.oid
    AND d.adnum = a.attnum
    AND a.attname NOT IN ('cxgn_production_visible')
    AND nspname = bt_schema
    AND c.relname = tbl
    AND a.attnum > 0
       ORDER BY attnum)
   INTO seq;

-- If the table doesn't have a sequence behind the pkey, use the pkey
-- column.
IF seq IS NULL THEN
  pkey_ins = 'NEW.' || pkey;
ELSE
  pkey_ins = 'COALESCE(NEW.' || pkey || ',' || seq || ')';
END IF;

-- Get a string representation of the non-primary key columns
-- of the pseudotable NEW (see the Pg Rules documentation for NEW).
SELECT pkey_ins || ', ' || 
       array_to_string(array(SELECT 'NEW.' || quote_ident(attname)
                               FROM pg_class c 
                               JOIN pg_attribute a ON (a.attrelid = c.oid)
                               JOIN pg_namespace n ON (c.relnamespace = n.oid)
                              WHERE a.attname NOT IN ('cxgn_production_visible')
                                AND a.attname <> pkey
                                AND a.attisdropped = 'f'
                                AND nspname = bt_schema
                                AND c.relname = tbl
                                AND a.attnum > 0 
                             ORDER BY attnum), ', ')
  INTO ins_cols;

IF ins_cols IS NULL THEN
  RAISE NOTICE 'This table doesn''t have any non-primary key columns.';
  RETURN 'f';
END IF;     

-- Get a string representation of the update list for all the
-- non-primary key columns.
SELECT array_to_string(array(SELECT quote_ident(attname) || ' = NEW.' || quote_ident(attname)
                               FROM pg_class c, 
                                    pg_attribute a,
                                    pg_namespace n
                              WHERE c.relnamespace = n.oid
                                AND a.attrelid = c.oid
                                AND a.attname NOT IN ('cxgn_production_visible')
                                AND a.attname <> pkey
                                AND a.attisdropped = 'f'
                                AND nspname = bt_schema
                                AND c.relname = tbl
                                AND a.attnum > 0 
                           ORDER BY attnum), ', ')
          INTO upd_cols;

--RAISE NOTICE 'cols: %', cols;
--RAISE NOTICE 'pkey: %', pkey;
--RAISE NOTICE 'ins_cols: %', ins_cols;
--RAISE NOTICE 'upd_cols: %', upd_cols;

stmt ='CREATE VIEW ' || dev_schema || '.' || tbl || ' AS SELECT ' || cols ||
      ' FROM ' || bt_schema || '.' || tbl;
--RAISE NOTICE 'dev view: %', stmt;
EXECUTE stmt;
stmt ='CREATE VIEW ' || prod_schema || '.' || tbl || ' AS SELECT ' || cols ||
      ' FROM ' || bt_schema || '.' || tbl || ' WHERE ' || visible_bit || ' = ' || 'true';
--RAISE NOTICE 'prod view: %', stmt;
EXECUTE stmt;
stmt ='CREATE RULE development_' || scm || '_' || tbl || '_insert_rule AS ON INSERT TO '
      || dev_schema || '.' || tbl || ' DO INSTEAD INSERT INTO ' || bt_schema || '.' ||
      tbl || ' (' || cols || ') VALUES (' || ins_cols ||')';
--RAISE NOTICE 'insert rule %', stmt;
EXECUTE stmt;
stmt ='CREATE RULE development_' || scm || '_' || tbl || '_update_rule AS ON UPDATE TO '
      || dev_schema || '.' || tbl || ' DO INSTEAD UPDATE ' || bt_schema || '.' || tbl
      || ' SET ' || upd_cols || ' WHERE ' || pkey || ' = OLD.' || pkey;
--RAISE NOTICE '%', stmt;
EXECUTE stmt;
stmt ='CREATE RULE development_' || scm || '_' || tbl || '_delete_rule AS ON DELETE TO '
      || dev_schema || '.' || tbl || ' DO INSTEAD DELETE FROM ' || bt_schema || '.' ||
      tbl || ' WHERE ' || pkey || ' = OLD.' || pkey;
--RAISE NOTICE '%', stmt;
EXECUTE stmt;

--      Restore old privileges on views.  XXX doesn't actually work.
--SELECT relname INTO dropped_view_privs FROM pg_class WHERE relname='dropped_view_privs';
--IF dropped_view_privs IS NOT NULL THEN
--  stmt='SELECT oid INTO new_view_oid FROM pg_class c JOIN pg_namespace n ON (n.oid=c.relnamespace) 
--WHERE c.relname=' || tbl || ' AND n.nspname=' || prod_schema;
--          EXECUTE stmt;
--  stmt='UPDATE pg_class SET relacl=(SELECT relacl FROM dropped_view_privs WHERE relname=' || tbl || ' AND nspname=' prod_schema ') WHERE oid=' || new_view_oid;
--          EXECUTE stmt;
--  stmt='SELECT oid INTO new_view_oid FROM pg_class c JOIN pg_namespace n ON (n.oid=c.relnamespace) 
--WHERE c.relname=' || tbl || ' AND n.nspname=' || prod_schema;
--          EXECUTE stmt;
--          stmt= 'UPDATE pg_class SET relacl=(SELECT relacl FROM dropped_view_privs WHERE relname=' || tbl || ' AND nspname=' prod_schema ') WHERE oid=' || new_view_oid;
--          EXECUTE stmt;
--END IF;
RETURN 't';
END
$$;


ALTER FUNCTION utils.create_cxgn_branch_views_for_table(scm character varying, tbl character varying) OWNER TO postgres;

--
-- Name: create_cxgn_branch_views_for_table(character varying, character varying, boolean); Type: FUNCTION; Schema: utils; Owner: postgres
--

CREATE FUNCTION create_cxgn_branch_views_for_table(scm character varying, tbl character varying, modifiable_in_production boolean) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
cols VARCHAR;
pkey VARCHAR;
pkey_ins VARCHAR;
seq VARCHAR;
upd_cols VARCHAR;
ins_cols VARCHAR;
visible_bit VARCHAR := 'cxgn_production_visible';
--metadata_cols ROW := ('cxgn_production_visible');
prod_schema VARCHAR;
dev_schema VARCHAR;
bt_schema VARCHAR;
stmt VARCHAR;
new_view_oid BIGINT;
BEGIN
--RAISE NOTICE '%', scm;
--RAISE NOTICE '%', tbl;
prod_schema = scm;
dev_schema = scm || '_dev';
bt_schema = scm || '_bt';
--RAISE NOTICE '%', prod_schema;
--RAISE NOTICE '%', dev_schema;
--RAISE NOTICE '%', bt_schema;

-- Make sure there's a primary key
pkey = find_primary_key_for_table(bt_schema, tbl);
IF pkey IS NULL THEN
  RAISE NOTICE 'Sorry, can''t operate on tables that lack primary keys.  Please fix me.';
  RETURN 'f';
END IF;

-- Get a string representation of the column names.
SELECT array_to_string(array(SELECT quote_ident(attname)
                               FROM pg_class c, 
                                    pg_attribute a,
                                    pg_namespace n
                              WHERE c.relnamespace = n.oid
                                AND a.attrelid = c.oid
                                AND a.attisdropped = 'f'
                                AND a.attname NOT IN ('cxgn_production_visible')
                                AND nspname = bt_schema
                                AND c.relname = tbl
                                AND a.attnum > 0 
                           ORDER BY attnum), ', ')
   INTO cols;

 SELECT (SELECT adsrc
           FROM pg_class c, 
                 pg_attribute a,
                 pg_namespace n,
                 pg_constraint t,
                 pg_attrdef d
  WHERE c.relnamespace = n.oid
    AND a.attrelid = c.oid
    AND t.conrelid = c.oid
    AND t.contype = 'p'
    AND array_upper(t.conkey, 1)=1
    AND t.conkey[1]=a.attnum      
    AND d.adrelid = c.oid
    AND d.adnum = a.attnum
    AND a.attname NOT IN ('cxgn_production_visible')
    AND nspname = bt_schema
    AND c.relname = tbl
    AND a.attnum > 0
       ORDER BY attnum)
   INTO seq;

-- If the table doesn't have a sequence behind the pkey, use the pkey
-- column.
IF seq IS NULL THEN
  pkey_ins = 'NEW.' || pkey;
ELSE
  pkey_ins = 'COALESCE(NEW.' || pkey || ',' || seq || ')';
END IF;

-- Get a string representation of the non-primary key columns
-- of the pseudotable NEW (see the Pg Rules documentation for NEW).
SELECT pkey_ins || ', ' || 
       array_to_string(array(SELECT 'NEW.' || quote_ident(attname)
                               FROM pg_class c 
                               JOIN pg_attribute a ON (a.attrelid = c.oid)
                               JOIN pg_namespace n ON (c.relnamespace = n.oid)
                              WHERE a.attname NOT IN ('cxgn_production_visible')
                                AND a.attname <> pkey
                                AND a.attisdropped = 'f'
                                AND nspname = bt_schema
                                AND c.relname = tbl
                                AND a.attnum > 0 
                             ORDER BY attnum), ', ')
  INTO ins_cols;

IF ins_cols IS NULL THEN
  RAISE NOTICE 'This table doesn''t have any non-primary key columns.';
  RETURN 'f';
END IF;     

-- Get a string representation of the update list for all the
-- non-primary key columns.
SELECT array_to_string(array(SELECT quote_ident(attname) || ' = NEW.' || quote_ident(attname)
                               FROM pg_class c, 
                                    pg_attribute a,
                                    pg_namespace n
                              WHERE c.relnamespace = n.oid
                                AND a.attrelid = c.oid
                                AND a.attname NOT IN ('cxgn_production_visible')
                                AND a.attname <> pkey
                                AND a.attisdropped = 'f'
                                AND nspname = bt_schema
                                AND c.relname = tbl
                                AND a.attnum > 0 
                           ORDER BY attnum), ', ')
          INTO upd_cols;

--RAISE NOTICE 'cols: %', cols;
--RAISE NOTICE 'pkey: %', pkey;
--RAISE NOTICE 'ins_cols: %', ins_cols;
--RAISE NOTICE 'upd_cols: %', upd_cols;

stmt ='CREATE VIEW ' || dev_schema || '.' || tbl || ' AS SELECT ' || cols ||
      ' FROM ' || bt_schema || '.' || tbl;
--RAISE NOTICE 'dev view: %', stmt;
EXECUTE stmt;
stmt ='CREATE VIEW ' || prod_schema || '.' || tbl || ' AS SELECT ' || cols ||
      ' FROM ' || bt_schema || '.' || tbl || ' WHERE ' || visible_bit || ' = ' || 'true';
--RAISE NOTICE 'prod view: %', stmt;
EXECUTE stmt;
stmt ='CREATE RULE development_' || scm || '_' || tbl || '_insert_rule AS ON INSERT TO '
      || dev_schema || '.' || tbl || ' DO INSTEAD INSERT INTO ' || bt_schema || '.' ||
      tbl || ' (' || cols || ') VALUES (' || ins_cols ||')';
--RAISE NOTICE 'insert rule %', stmt;
EXECUTE stmt;
stmt ='CREATE RULE development_' || scm || '_' || tbl || '_update_rule AS ON UPDATE TO '
      || dev_schema || '.' || tbl || ' DO INSTEAD UPDATE ' || bt_schema || '.' || tbl
      || ' SET ' || upd_cols || ' WHERE ' || pkey || ' = OLD.' || pkey;
--RAISE NOTICE '%', stmt;
EXECUTE stmt;
stmt ='CREATE RULE development_' || scm || '_' || tbl || '_delete_rule AS ON DELETE TO '
      || dev_schema || '.' || tbl || ' DO INSTEAD DELETE FROM ' || bt_schema || '.' ||
      tbl || ' WHERE ' || pkey || ' = OLD.' || pkey;
--RAISE NOTICE '%', stmt;
EXECUTE stmt;
if modifiable_in_production IS TRUE THEN
  stmt ='CREATE RULE production_' || scm || '_' || tbl || '_insert_rule AS ON INSERT TO '
      || prod_schema || '.' || tbl || ' DO INSTEAD INSERT INTO ' || bt_schema || '.' ||
      tbl || ' (' || cols || ', cxgn_production_visible) VALUES (' || ins_cols ||', ''t'')';
  --RAISE NOTICE 'insert rule %', stmt;
  EXECUTE stmt;
  stmt ='CREATE RULE production_' || scm || '_' || tbl || '_update_rule AS ON UPDATE TO '
      || prod_schema || '.' || tbl || ' DO INSTEAD UPDATE ' || bt_schema || '.' || tbl
      || ' SET ' || upd_cols || ' WHERE ' || pkey || ' = OLD.' || pkey;
  --RAISE NOTICE '%', stmt;
  EXECUTE stmt;
  stmt ='CREATE RULE production_' || scm || '_' || tbl || '_delete_rule AS ON DELETE TO '
      || prod_schema || '.' || tbl || ' DO INSTEAD DELETE FROM ' || bt_schema || '.' ||
      tbl || ' WHERE ' || pkey || ' = OLD.' || pkey;
  --RAISE NOTICE '%', stmt;
  EXECUTE stmt;
END IF;

--      Restore old privileges on views.  XXX doesn't actually work.
--SELECT relname INTO dropped_view_privs FROM pg_class WHERE relname='dropped_view_privs';
--IF dropped_view_privs IS NOT NULL THEN
--  stmt='SELECT oid INTO new_view_oid FROM pg_class c JOIN pg_namespace n ON (n.oid=c.relnamespace) 
--WHERE c.relname=' || tbl || ' AND n.nspname=' || prod_schema;
--          EXECUTE stmt;
--  stmt='UPDATE pg_class SET relacl=(SELECT relacl FROM dropped_view_privs WHERE relname=' || tbl || ' AND nspname=' prod_schema ') WHERE oid=' || new_view_oid;
--          EXECUTE stmt;
--  stmt='SELECT oid INTO new_view_oid FROM pg_class c JOIN pg_namespace n ON (n.oid=c.relnamespace) 
--WHERE c.relname=' || tbl || ' AND n.nspname=' || prod_schema;
--          EXECUTE stmt;
--          stmt= 'UPDATE pg_class SET relacl=(SELECT relacl FROM dropped_view_privs WHERE relname=' || tbl || ' AND nspname=' prod_schema ') WHERE oid=' || new_view_oid;
--          EXECUTE stmt;
--END IF;
RETURN 't';
END $$;


ALTER FUNCTION utils.create_cxgn_branch_views_for_table(scm character varying, tbl character varying, modifiable_in_production boolean) OWNER TO postgres;

--
-- Name: drop_cxgn_branch_views_for_table(character varying, character varying); Type: FUNCTION; Schema: utils; Owner: postgres
--

CREATE FUNCTION drop_cxgn_branch_views_for_table(scm character varying, tbl character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
prod_schema VARCHAR;
dev_schema VARCHAR;
bt_schema VARCHAR;
stmt VARCHAR;
BEGIN
--RAISE NOTICE '%', scm;
--RAISE NOTICE '%', tbl;
prod_schema = scm;
dev_schema = scm || '_dev';
bt_schema = scm || '_bt';
--Save the permissions on the production and development tables
--before proceeding
--      XXX: Doesn't actually work, because
--stmt='SELECT nspname, relname, relacl INTO TEMPORARY TABLE dropped_view_privs FROM pg_class c
--JOIN pg_namespace n ON (n.oid=c.relnamespace) WHERE c.relname=''' || tbl || ''' AND n.nspname='''|| dev_schema ||'''';
--EXECUTE stmt;
--stmt='SELECT nspname, relname, relacl INTO TEMPORARY TABLE dropped_view_privs FROM pg_class c
--JOIN pg_namespace n ON (n.oid=c.relnamespace) WHERE c.relname=' || tbl || ' AND n.nspname='|| prod_schema || ';';
--EXECUTE stmt;
stmt = 'DROP RULE development_' || scm || '_' || tbl || '_insert_rule ON ' || dev_schema || '.' || tbl;
EXECUTE stmt;
stmt = 'DROP RULE development_' || scm || '_' || tbl || '_update_rule ON ' || dev_schema || '.' || tbl;
EXECUTE stmt;
stmt = 'DROP RULE development_' || scm || '_' || tbl || '_delete_rule ON ' || dev_schema || '.' || tbl;
EXECUTE stmt;

stmt = 'DROP VIEW ' || prod_schema || '.' || tbl;
EXECUTE stmt;
stmt = 'DROP VIEW ' || dev_schema || '.' || tbl;
EXECUTE stmt;
RETURN 't';
END
$$;


ALTER FUNCTION utils.drop_cxgn_branch_views_for_table(scm character varying, tbl character varying) OWNER TO postgres;

--
-- Name: find_primary_key_for_table(character varying, character varying); Type: FUNCTION; Schema: utils; Owner: postgres
--

CREATE FUNCTION find_primary_key_for_table(scm character varying, tbl character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$DECLARE ret VARCHAR; BEGIN SELECT quote_ident(attname) FROM pg_class c JOIN pg_namespace n ON (n.oid = c.relnamespace) JOIN pg_attribute a ON (a.attrelid = c.oid)  JOIN pg_constraint t ON (t.conrelid = c.oid) WHERE array_upper(t.conkey, 1)=1 AND t.conkey[1]=a.attnum AND t.contype = 'p' AND a.attname NOT IN ('cxgn_production_visible') AND nspname = scm AND c.relname = tbl INTO ret; RETURN ret; END;$$;


ALTER FUNCTION utils.find_primary_key_for_table(scm character varying, tbl character varying) OWNER TO postgres;

--
-- Name: make_all_rows_visible(character varying, character varying); Type: FUNCTION; Schema: utils; Owner: postgres
--

CREATE FUNCTION make_all_rows_visible(scm character varying, tbl character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$DECLARE
  stmt VARCHAR;
  visible_bit VARCHAR := 'cxgn_production_visible';
  bt_schema VARCHAR;
  qualified_tbl VARCHAR;
BEGIN
  bt_schema = scm || '_bt';
  qualified_tbl = bt_schema || '.' || tbl;
     stmt = 'UPDATE ' || qualified_tbl || ' SET ' || visible_bit || ' = true WHERE ' || visible_bit || ' = ''f''';
     BEGIN
       EXECUTE stmt;
     EXCEPTION WHEN OTHERS THEN
       RAISE NOTICE 'failure making rows in % visible', qualified_tbl;
     END;
     RETURN 't';
END
$$;


ALTER FUNCTION utils.make_all_rows_visible(scm character varying, tbl character varying) OWNER TO postgres;

--
-- Name: make_all_rows_visible_in_schema(character varying); Type: FUNCTION; Schema: utils; Owner: postgres
--

CREATE FUNCTION make_all_rows_visible_in_schema(scm character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  myrec RECORD;
  stmt VARCHAR;
  query VARCHAR;
  bt_schema VARCHAR;
BEGIN
  bt_schema = scm || '_bt';
  query = 'SELECT relname 
             FROM pg_class c, pg_namespace n
            WHERE c.relnamespace=n.oid 
              AND c.relkind=''r''
              AND n.nspname=''' || bt_schema || '''';
--  RAISE NOTICE '%', query; --stmt;
  FOR myrec IN EXECUTE query LOOP
    RAISE NOTICE 'Making rows in ''%'' visible', myrec.relname;
    stmt = 'SELECT make_all_rows_visible(''' || scm || ''', ''' || myrec.relname || ''')';
    --RAISE NOTICE '%', stmt;
    EXECUTE stmt;
  END LOOP;
  RETURN 't';
END
$$;


ALTER FUNCTION utils.make_all_rows_visible_in_schema(scm character varying) OWNER TO postgres;

SET search_path = annotation, pg_catalog;

--
-- Name: annotation; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE annotation (
    annot_id integer NOT NULL,
    id character varying(100),
    name character varying(100),
    type character varying(10),
    date date,
    person_id bigint,
    "timestamp" timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
    version bigint,
    history_id bigint,
    CONSTRAINT annotation_type_check CHECK ((((type)::text = 'gene'::text) OR ((type)::text = 'pseudogene'::text) OR ((type)::text = 'transposon'::text) OR ((type)::text = 'tRNA'::text) OR ((type)::text = 'rRNA'::text) OR ((type)::text = 'snRNA'::text) OR ((type)::text = 'snoRNA'::text)))
);


ALTER TABLE annotation OWNER TO postgres;

--
-- Name: annotation_annot_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE annotation_annot_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE annotation_annot_id_seq OWNER TO postgres;

--
-- Name: annotation_annot_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE annotation_annot_id_seq OWNED BY annotation.annot_id;


--
-- Name: comment; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE comment (
    comment_id integer NOT NULL,
    text text,
    person_id bigint,
    date date,
    table_name character varying(11),
    table_id bigint,
    CONSTRAINT comment_table_name_check CHECK ((((table_name)::text = 'annotation'::text) OR ((table_name)::text = 'feature_set'::text)))
);


ALTER TABLE comment OWNER TO postgres;

--
-- Name: comment_comment_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE comment_comment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE comment_comment_id_seq OWNER TO postgres;

--
-- Name: comment_comment_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE comment_comment_id_seq OWNED BY comment.comment_id;


--
-- Name: comp_analysis; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE comp_analysis (
    ca_id integer NOT NULL,
    program_id bigint,
    db_id bigint,
    date date,
    person_id bigint,
    "timestamp" timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
    version bigint
);


ALTER TABLE comp_analysis OWNER TO postgres;

--
-- Name: comp_analysis_ca_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE comp_analysis_ca_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE comp_analysis_ca_id_seq OWNER TO postgres;

--
-- Name: comp_analysis_ca_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE comp_analysis_ca_id_seq OWNED BY comp_analysis.ca_id;


--
-- Name: dblist; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE dblist (
    db_id integer NOT NULL,
    name character varying(100)
);


ALTER TABLE dblist OWNER TO postgres;

--
-- Name: dblist_db_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE dblist_db_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dblist_db_id_seq OWNER TO postgres;

--
-- Name: dblist_db_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE dblist_db_id_seq OWNED BY dblist.db_id;


--
-- Name: dbxref; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE dbxref (
    dbxref_id integer NOT NULL,
    db_id bigint,
    db_key character varying(100),
    table_name character varying(10),
    table_id bigint,
    CONSTRAINT dbxref_table_name_check CHECK ((((table_name)::text = 'annotation'::text) OR ((table_name)::text = 'seq'::text)))
);


ALTER TABLE dbxref OWNER TO postgres;

--
-- Name: dbxref_dbxref_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE dbxref_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dbxref_dbxref_id_seq OWNER TO postgres;

--
-- Name: dbxref_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE dbxref_dbxref_id_seq OWNED BY dbxref.dbxref_id;


--
-- Name: feature_set; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE feature_set (
    f_set_id integer NOT NULL,
    annot_id bigint,
    name character varying(100),
    type character varying(20),
    cdna_seq_id bigint,
    cds_seq_id bigint,
    prot_seq_id bigint,
    description text,
    date date,
    person_id bigint,
    "timestamp" timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
    version bigint,
    history_id bigint
);


ALTER TABLE feature_set OWNER TO postgres;

--
-- Name: feature_set_f_set_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE feature_set_f_set_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE feature_set_f_set_id_seq OWNER TO postgres;

--
-- Name: feature_set_f_set_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE feature_set_f_set_id_seq OWNED BY feature_set.f_set_id;


--
-- Name: feature_span; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE feature_span (
    f_span_id integer NOT NULL,
    f_set_id bigint,
    type character varying(13),
    CONSTRAINT feature_span_type_check CHECK ((((type)::text = 'exon'::text) OR ((type)::text = 'intron'::text) OR ((type)::text = '3utr'::text) OR ((type)::text = '5utr'::text) OR ((type)::text = 'match_segment'::text) OR ((type)::text = 'start_codon'::text)))
);


ALTER TABLE feature_span OWNER TO postgres;

--
-- Name: feature_span_f_span_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE feature_span_f_span_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE feature_span_f_span_id_seq OWNER TO postgres;

--
-- Name: feature_span_f_span_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE feature_span_f_span_id_seq OWNED BY feature_span.f_span_id;


--
-- Name: organism; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE organism (
    organism_id integer NOT NULL,
    name character varying(100)
);


ALTER TABLE organism OWNER TO postgres;

--
-- Name: organism_organism_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE organism_organism_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE organism_organism_id_seq OWNER TO postgres;

--
-- Name: organism_organism_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE organism_organism_id_seq OWNED BY organism.organism_id;


--
-- Name: output; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE output (
    output_id integer NOT NULL,
    r_span_id bigint,
    type character varying(20),
    value character varying(20)
);


ALTER TABLE output OWNER TO postgres;

--
-- Name: output_output_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE output_output_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE output_output_id_seq OWNER TO postgres;

--
-- Name: output_output_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE output_output_id_seq OWNED BY output.output_id;


--
-- Name: person; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE person (
    person_id integer NOT NULL,
    name character varying(100)
);


ALTER TABLE person OWNER TO postgres;

--
-- Name: person_person_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE person_person_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE person_person_id_seq OWNER TO postgres;

--
-- Name: person_person_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE person_person_id_seq OWNED BY person.person_id;


--
-- Name: program; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE program (
    program_id integer NOT NULL,
    name character varying(100)
);


ALTER TABLE program OWNER TO postgres;

--
-- Name: program_program_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE program_program_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE program_program_id_seq OWNER TO postgres;

--
-- Name: program_program_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE program_program_id_seq OWNED BY program.program_id;


--
-- Name: property; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE property (
    property_id integer NOT NULL,
    type character varying(100),
    value character varying(100),
    table_name character varying(13),
    table_id bigint,
    CONSTRAINT property_table_name_check CHECK ((((table_name)::text = 'annotation'::text) OR ((table_name)::text = 'feature_set'::text) OR ((table_name)::text = 'comp_analysis'::text)))
);


ALTER TABLE property OWNER TO postgres;

--
-- Name: property_property_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE property_property_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE property_property_id_seq OWNER TO postgres;

--
-- Name: property_property_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE property_property_id_seq OWNED BY property.property_id;


--
-- Name: result_set; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE result_set (
    r_set_id integer NOT NULL,
    ca_id bigint,
    name character varying(100),
    "timestamp" timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL
);


ALTER TABLE result_set OWNER TO postgres;

--
-- Name: result_set_r_set_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE result_set_r_set_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE result_set_r_set_id_seq OWNER TO postgres;

--
-- Name: result_set_r_set_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE result_set_r_set_id_seq OWNED BY result_set.r_set_id;


--
-- Name: result_span; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE result_span (
    r_span_id integer NOT NULL,
    r_set_id bigint,
    type character varying(20),
    score double precision,
    output_id bigint
);


ALTER TABLE result_span OWNER TO postgres;

--
-- Name: result_span_r_span_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE result_span_r_span_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE result_span_r_span_id_seq OWNER TO postgres;

--
-- Name: result_span_r_span_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE result_span_r_span_id_seq OWNED BY result_span.r_span_id;


--
-- Name: seq; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE seq (
    seq_id integer NOT NULL,
    id character varying(100),
    version bigint,
    length bigint,
    md5checksum character varying(32),
    name character varying(100),
    description text,
    organism_id bigint,
    type character varying(3),
    residues text,
    genbank_gi character varying(20),
    person_id bigint,
    clone_id bigint,
    CONSTRAINT seq_type_check CHECK ((((type)::text = 'AA'::text) OR ((type)::text = 'DNA'::text) OR ((type)::text = 'RNA'::text)))
);


ALTER TABLE seq OWNER TO postgres;

--
-- Name: seq_error; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE seq_error (
    seq_err_id integer NOT NULL,
    seq_id bigint,
    type character varying(20),
    "position" bigint
);


ALTER TABLE seq_error OWNER TO postgres;

--
-- Name: seq_error_seq_err_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE seq_error_seq_err_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seq_error_seq_err_id_seq OWNER TO postgres;

--
-- Name: seq_error_seq_err_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE seq_error_seq_err_id_seq OWNED BY seq_error.seq_err_id;


--
-- Name: seq_relationship; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE seq_relationship (
    seq_rel_id integer NOT NULL,
    seq_id bigint,
    type character varying(7),
    alignment text,
    start bigint,
    "end" bigint,
    strand character varying(1),
    table_name character varying(12),
    table_id bigint,
    CONSTRAINT seq_relationship_strand_check CHECK ((((strand)::text = '-'::text) OR ((strand)::text = '+'::text))),
    CONSTRAINT seq_relationship_table_name_check CHECK ((((table_name)::text = 'seq'::text) OR ((table_name)::text = 'result_span'::text) OR ((table_name)::text = 'feature_set'::text) OR ((table_name)::text = 'feature_span'::text))),
    CONSTRAINT seq_relationship_type_check CHECK ((((type)::text = 'query'::text) OR ((type)::text = 'subject'::text)))
);


ALTER TABLE seq_relationship OWNER TO postgres;

--
-- Name: seq_relationship_seq_rel_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE seq_relationship_seq_rel_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seq_relationship_seq_rel_id_seq OWNER TO postgres;

--
-- Name: seq_relationship_seq_rel_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE seq_relationship_seq_rel_id_seq OWNED BY seq_relationship.seq_rel_id;


--
-- Name: seq_seq_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE seq_seq_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seq_seq_id_seq OWNER TO postgres;

--
-- Name: seq_seq_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE seq_seq_id_seq OWNED BY seq.seq_id;


--
-- Name: synonym; Type: TABLE; Schema: annotation; Owner: postgres
--

CREATE TABLE synonym (
    synonym_id integer NOT NULL,
    name character varying(100),
    table_name character varying(11),
    table_id bigint,
    CONSTRAINT synonym_table_name_check CHECK ((((table_name)::text = 'annotation'::text) OR ((table_name)::text = 'feature_set'::text)))
);


ALTER TABLE synonym OWNER TO postgres;

--
-- Name: synonym_synonym_id_seq; Type: SEQUENCE; Schema: annotation; Owner: postgres
--

CREATE SEQUENCE synonym_synonym_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE synonym_synonym_id_seq OWNER TO postgres;

--
-- Name: synonym_synonym_id_seq; Type: SEQUENCE OWNED BY; Schema: annotation; Owner: postgres
--

ALTER SEQUENCE synonym_synonym_id_seq OWNED BY synonym.synonym_id;


SET search_path = biosource, pg_catalog;

SET default_with_oids = false;

--
-- Name: bs_protocol; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE bs_protocol (
    protocol_id integer NOT NULL,
    protocol_name character varying(250),
    protocol_type character varying(250),
    description text,
    metadata_id bigint
);


ALTER TABLE bs_protocol OWNER TO postgres;

--
-- Name: TABLE bs_protocol; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE bs_protocol IS 'biosource.bs_protocol store general information about how something was processed. mRNA extraction is a protocol, but also can be a protocol sequence_assembly or plant growth';


--
-- Name: bs_protocol_protocol_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE bs_protocol_protocol_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bs_protocol_protocol_id_seq OWNER TO postgres;

--
-- Name: bs_protocol_protocol_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE bs_protocol_protocol_id_seq OWNED BY bs_protocol.protocol_id;


--
-- Name: bs_protocol_pub; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE bs_protocol_pub (
    protocol_pub_id integer NOT NULL,
    protocol_id integer,
    pub_id integer,
    metadata_id bigint
);


ALTER TABLE bs_protocol_pub OWNER TO postgres;

--
-- Name: TABLE bs_protocol_pub; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE bs_protocol_pub IS 'biosource.bs_protocol_pub is a linker table to associate publications to some protocols';


--
-- Name: bs_protocol_pub_protocol_pub_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE bs_protocol_pub_protocol_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bs_protocol_pub_protocol_pub_id_seq OWNER TO postgres;

--
-- Name: bs_protocol_pub_protocol_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE bs_protocol_pub_protocol_pub_id_seq OWNED BY bs_protocol_pub.protocol_pub_id;


--
-- Name: bs_protocol_step; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE bs_protocol_step (
    protocol_step_id integer NOT NULL,
    protocol_id integer,
    step integer,
    action text,
    execution text,
    tool_id integer,
    begin_date timestamp without time zone,
    end_date timestamp without time zone,
    location text,
    metadata_id bigint
);


ALTER TABLE bs_protocol_step OWNER TO postgres;

--
-- Name: TABLE bs_protocol_step; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE bs_protocol_step IS 'biosource.bs_protocol_step store data for each step or stage in a protocol. They are order by the secuencially by step column. Execution describe the action produced during the step, for example plant growth at 24C, blastall -p blastx, ligation... begin_date, end_date and location generally will be used for plant field growth conditions.';


--
-- Name: bs_protocol_step_dbxref; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE bs_protocol_step_dbxref (
    protocol_step_dbxref_id integer NOT NULL,
    protocol_step_id integer,
    dbxref_id integer,
    metadata_id bigint
);


ALTER TABLE bs_protocol_step_dbxref OWNER TO postgres;

--
-- Name: TABLE bs_protocol_step_dbxref; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE bs_protocol_step_dbxref IS 'biosource.bs_protocol_step_dbxref is a loker table designed to store controlled vocabulary terms associated to some protocol steps';


--
-- Name: bs_protocol_step_dbxref_protocol_step_dbxref_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE bs_protocol_step_dbxref_protocol_step_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bs_protocol_step_dbxref_protocol_step_dbxref_id_seq OWNER TO postgres;

--
-- Name: bs_protocol_step_dbxref_protocol_step_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE bs_protocol_step_dbxref_protocol_step_dbxref_id_seq OWNED BY bs_protocol_step_dbxref.protocol_step_dbxref_id;


--
-- Name: bs_protocol_step_protocol_step_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE bs_protocol_step_protocol_step_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bs_protocol_step_protocol_step_id_seq OWNER TO postgres;

--
-- Name: bs_protocol_step_protocol_step_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE bs_protocol_step_protocol_step_id_seq OWNED BY bs_protocol_step.protocol_step_id;


--
-- Name: bs_sample; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE bs_sample (
    sample_id integer NOT NULL,
    sample_name character varying(250),
    sample_type character varying(250),
    alternative_name text,
    type_id bigint,
    description text,
    organism_id integer,
    stock_id integer,
    protocol_id bigint,
    contact_id integer,
    metadata_id bigint
);


ALTER TABLE bs_sample OWNER TO postgres;

--
-- Name: TABLE bs_sample; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE bs_sample IS 'biosource.bs_sample store information about the origin of a biological sample. It can be composed by different elements, for example tomato fruit sample can be a mix of fruits in different stages. Each stage will be a sample_element. Sample also can have associated a sp_person_id in terms of contact.';


--
-- Name: bs_sample_cvterm; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE bs_sample_cvterm (
    sample_cvterm_id integer NOT NULL,
    sample_id integer,
    cvterm_id integer,
    metadata_id bigint
);


ALTER TABLE bs_sample_cvterm OWNER TO postgres;

--
-- Name: TABLE bs_sample_cvterm; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE bs_sample_cvterm IS 'biosource.bs_sample_cvterm is a linker table to associate tags to the samples as Normalized, Sustracted...';


--
-- Name: bs_sample_cvterm_sample_cvterm_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE bs_sample_cvterm_sample_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bs_sample_cvterm_sample_cvterm_id_seq OWNER TO postgres;

--
-- Name: bs_sample_cvterm_sample_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE bs_sample_cvterm_sample_cvterm_id_seq OWNED BY bs_sample_cvterm.sample_cvterm_id;


--
-- Name: bs_sample_dbxref; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE bs_sample_dbxref (
    sample_dbxref_id integer NOT NULL,
    sample_id integer,
    dbxref_id bigint,
    metadata_id bigint
);


ALTER TABLE bs_sample_dbxref OWNER TO postgres;

--
-- Name: TABLE bs_sample_dbxref; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE bs_sample_dbxref IS 'biosource.bs_sample_dbxref is a linker table to associate controlled vocabullary as Plant Ontology to each element of a sample';


--
-- Name: bs_sample_dbxref_sample_dbxref_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE bs_sample_dbxref_sample_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bs_sample_dbxref_sample_dbxref_id_seq OWNER TO postgres;

--
-- Name: bs_sample_dbxref_sample_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE bs_sample_dbxref_sample_dbxref_id_seq OWNED BY bs_sample_dbxref.sample_dbxref_id;


--
-- Name: bs_sample_element; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE bs_sample_element (
    sample_element_id integer NOT NULL,
    sample_element_name character varying(250),
    alternative_name text,
    sample_id integer,
    description text,
    organism_id integer,
    stock_id integer,
    protocol_id integer,
    metadata_id bigint
);


ALTER TABLE bs_sample_element OWNER TO postgres;

--
-- Name: TABLE bs_sample_element; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE bs_sample_element IS 'biosource.bs_sample_element store information of each elemennt of a sample. It have a organism_id column and stock_id to associate different origins, for example a tomato leaves sample can be composed by leaves of Solanum lycopersicum and Solanum pimpinellifolium.';


--
-- Name: bs_sample_element_cvterm; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE bs_sample_element_cvterm (
    sample_element_cvterm_id integer NOT NULL,
    sample_element_id integer,
    cvterm_id integer,
    metadata_id bigint
);


ALTER TABLE bs_sample_element_cvterm OWNER TO postgres;

--
-- Name: TABLE bs_sample_element_cvterm; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE bs_sample_element_cvterm IS 'biosource.bs_sample_cvterm is a linker table to associate tags to the samples as Normalized, Sustracted...';


--
-- Name: bs_sample_element_cvterm_sample_element_cvterm_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE bs_sample_element_cvterm_sample_element_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bs_sample_element_cvterm_sample_element_cvterm_id_seq OWNER TO postgres;

--
-- Name: bs_sample_element_cvterm_sample_element_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE bs_sample_element_cvterm_sample_element_cvterm_id_seq OWNED BY bs_sample_element_cvterm.sample_element_cvterm_id;


--
-- Name: bs_sample_element_dbxref; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE bs_sample_element_dbxref (
    sample_element_dbxref_id integer NOT NULL,
    sample_element_id integer,
    dbxref_id bigint,
    metadata_id bigint
);


ALTER TABLE bs_sample_element_dbxref OWNER TO postgres;

--
-- Name: TABLE bs_sample_element_dbxref; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE bs_sample_element_dbxref IS 'biosource.bs_sample_element_dbxref is a linker table to associate controlled vocabullary as Plant Ontology to each element of a sample';


--
-- Name: bs_sample_element_dbxref_sample_element_dbxref_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE bs_sample_element_dbxref_sample_element_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bs_sample_element_dbxref_sample_element_dbxref_id_seq OWNER TO postgres;

--
-- Name: bs_sample_element_dbxref_sample_element_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE bs_sample_element_dbxref_sample_element_dbxref_id_seq OWNED BY bs_sample_element_dbxref.sample_element_dbxref_id;


--
-- Name: bs_sample_element_file; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE bs_sample_element_file (
    sample_element_file_id integer NOT NULL,
    sample_element_id integer,
    file_id integer,
    metadata_id bigint
);


ALTER TABLE bs_sample_element_file OWNER TO postgres;

--
-- Name: TABLE bs_sample_element_file; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE bs_sample_element_file IS 'biosource.bs_sample_element_file store the associations between the sample_elements and files.';


--
-- Name: bs_sample_element_file_sample_element_file_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE bs_sample_element_file_sample_element_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bs_sample_element_file_sample_element_file_id_seq OWNER TO postgres;

--
-- Name: bs_sample_element_file_sample_element_file_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE bs_sample_element_file_sample_element_file_id_seq OWNED BY bs_sample_element_file.sample_element_file_id;


--
-- Name: bs_sample_element_relation; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE bs_sample_element_relation (
    sample_element_relation_id integer NOT NULL,
    sample_element_id_a integer,
    sample_element_id_b integer,
    relation_type text,
    metadata_id bigint
);


ALTER TABLE bs_sample_element_relation OWNER TO postgres;

--
-- Name: TABLE bs_sample_element_relation; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE bs_sample_element_relation IS 'biosource.bs_sample_element_relation store the associations between sample_elements, for example an est dataset and an unigene dataset can be related with a sequence assembly relation';


--
-- Name: bs_sample_element_relation_sample_element_relation_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE bs_sample_element_relation_sample_element_relation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bs_sample_element_relation_sample_element_relation_id_seq OWNER TO postgres;

--
-- Name: bs_sample_element_relation_sample_element_relation_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE bs_sample_element_relation_sample_element_relation_id_seq OWNED BY bs_sample_element_relation.sample_element_relation_id;


--
-- Name: bs_sample_element_sample_element_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE bs_sample_element_sample_element_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bs_sample_element_sample_element_id_seq OWNER TO postgres;

--
-- Name: bs_sample_element_sample_element_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE bs_sample_element_sample_element_id_seq OWNED BY bs_sample_element.sample_element_id;


--
-- Name: bs_sample_file; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE bs_sample_file (
    sample_file_id integer NOT NULL,
    sample_id integer,
    file_id integer,
    metadata_id bigint
);


ALTER TABLE bs_sample_file OWNER TO postgres;

--
-- Name: TABLE bs_sample_file; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE bs_sample_file IS 'biosource.bs_sample_file store the associations between the sample and files.';


--
-- Name: bs_sample_file_sample_file_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE bs_sample_file_sample_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bs_sample_file_sample_file_id_seq OWNER TO postgres;

--
-- Name: bs_sample_file_sample_file_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE bs_sample_file_sample_file_id_seq OWNED BY bs_sample_file.sample_file_id;


--
-- Name: bs_sample_pub; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE bs_sample_pub (
    sample_pub_id integer NOT NULL,
    sample_id integer,
    pub_id integer,
    metadata_id bigint
);


ALTER TABLE bs_sample_pub OWNER TO postgres;

--
-- Name: TABLE bs_sample_pub; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE bs_sample_pub IS 'bisource.bs_sample_pub is a linker table to associate publications to a sample.';


--
-- Name: bs_sample_pub_sample_pub_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE bs_sample_pub_sample_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bs_sample_pub_sample_pub_id_seq OWNER TO postgres;

--
-- Name: bs_sample_pub_sample_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE bs_sample_pub_sample_pub_id_seq OWNED BY bs_sample_pub.sample_pub_id;


--
-- Name: bs_sample_relationship; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE bs_sample_relationship (
    sample_relationship_id integer NOT NULL,
    subject_id integer,
    object_id integer,
    type_id integer,
    value text,
    rank integer,
    metadata_id bigint
);


ALTER TABLE bs_sample_relationship OWNER TO postgres;

--
-- Name: TABLE bs_sample_relationship; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE bs_sample_relationship IS 'biosource.bs_sample_relationship store the associations between sample, for example an est dataset and an unigene dataset can be related with a sequence assembly relation';


--
-- Name: bs_sample_relationship_sample_relationship_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE bs_sample_relationship_sample_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bs_sample_relationship_sample_relationship_id_seq OWNER TO postgres;

--
-- Name: bs_sample_relationship_sample_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE bs_sample_relationship_sample_relationship_id_seq OWNED BY bs_sample_relationship.sample_relationship_id;


--
-- Name: bs_sample_sample_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE bs_sample_sample_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bs_sample_sample_id_seq OWNER TO postgres;

--
-- Name: bs_sample_sample_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE bs_sample_sample_id_seq OWNED BY bs_sample.sample_id;


--
-- Name: bs_tool; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE bs_tool (
    tool_id integer NOT NULL,
    tool_name character varying(250),
    tool_version character varying(10),
    tool_type character varying(250),
    tool_description text,
    tool_weblink text,
    file_id integer,
    metadata_id bigint
);


ALTER TABLE bs_tool OWNER TO postgres;

--
-- Name: TABLE bs_tool; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE bs_tool IS 'biosource.bs_tool stores information about the tools used during the execution of some protocols. Example of tools are vectors, mRNA purification kits, software, soils. They can have links to web_pages or/and files.';


--
-- Name: bs_tool_pub; Type: TABLE; Schema: biosource; Owner: postgres
--

CREATE TABLE bs_tool_pub (
    tool_pub_id integer NOT NULL,
    tool_id integer,
    pub_id integer,
    metadata_id bigint
);


ALTER TABLE bs_tool_pub OWNER TO postgres;

--
-- Name: TABLE bs_tool_pub; Type: COMMENT; Schema: biosource; Owner: postgres
--

COMMENT ON TABLE bs_tool_pub IS 'biosource.bs_tool_pub is a linker table to associate publications to some tools';


--
-- Name: bs_tool_pub_tool_pub_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE bs_tool_pub_tool_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bs_tool_pub_tool_pub_id_seq OWNER TO postgres;

--
-- Name: bs_tool_pub_tool_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE bs_tool_pub_tool_pub_id_seq OWNED BY bs_tool_pub.tool_pub_id;


--
-- Name: bs_tool_tool_id_seq; Type: SEQUENCE; Schema: biosource; Owner: postgres
--

CREATE SEQUENCE bs_tool_tool_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bs_tool_tool_id_seq OWNER TO postgres;

--
-- Name: bs_tool_tool_id_seq; Type: SEQUENCE OWNED BY; Schema: biosource; Owner: postgres
--

ALTER SEQUENCE bs_tool_tool_id_seq OWNED BY bs_tool.tool_id;


SET search_path = gem, pg_catalog;

--
-- Name: ge_cluster_analysis; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_cluster_analysis (
    cluster_analysis_id integer NOT NULL,
    experiment_analysis_group_id integer,
    methodology character varying(250),
    protocol_id integer,
    description text,
    correlation_analysis_id bigint,
    metadata_id bigint
);


ALTER TABLE ge_cluster_analysis OWNER TO postgres;

--
-- Name: TABLE ge_cluster_analysis; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_cluster_analysis IS 'gem.ge_cluster_analysis stores information about the experiments and methology used to do a cluster analysis of data expression.';


--
-- Name: ge_cluster_analysis_cluster_analysis_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_cluster_analysis_cluster_analysis_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_cluster_analysis_cluster_analysis_id_seq OWNER TO postgres;

--
-- Name: ge_cluster_analysis_cluster_analysis_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_cluster_analysis_cluster_analysis_id_seq OWNED BY ge_cluster_analysis.cluster_analysis_id;


--
-- Name: ge_cluster_member; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_cluster_member (
    cluster_member_id bigint NOT NULL,
    template_id bigint,
    cluster_profile_id bigint,
    metadata_id bigint
);


ALTER TABLE ge_cluster_member OWNER TO postgres;

--
-- Name: TABLE ge_cluster_member; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_cluster_member IS 'gem.ge_cluster_member stores the cluster composition as template list';


--
-- Name: ge_cluster_member_cluster_member_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_cluster_member_cluster_member_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_cluster_member_cluster_member_id_seq OWNER TO postgres;

--
-- Name: ge_cluster_member_cluster_member_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_cluster_member_cluster_member_id_seq OWNED BY ge_cluster_member.cluster_member_id;


--
-- Name: ge_cluster_profile; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_cluster_profile (
    cluster_profile_id integer NOT NULL,
    cluster_analysis_id integer,
    member_nr integer,
    file_id integer,
    metadata_id bigint
);


ALTER TABLE ge_cluster_profile OWNER TO postgres;

--
-- Name: TABLE ge_cluster_profile; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_cluster_profile IS 'gem.ge_cluster_profile is a linker table between ge_cluster_expression_analysis table and md_files table. It let associate image and files to a cluster expression analysis.';


--
-- Name: ge_cluster_profile_cluster_profile_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_cluster_profile_cluster_profile_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_cluster_profile_cluster_profile_id_seq OWNER TO postgres;

--
-- Name: ge_cluster_profile_cluster_profile_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_cluster_profile_cluster_profile_id_seq OWNED BY ge_cluster_profile.cluster_profile_id;


--
-- Name: ge_correlation_analysis; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_correlation_analysis (
    correlation_analysis_id integer NOT NULL,
    experiment_analysis_group_id integer,
    methodology character varying(250),
    description text,
    metadata_id bigint
);


ALTER TABLE ge_correlation_analysis OWNER TO postgres;

--
-- Name: TABLE ge_correlation_analysis; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_correlation_analysis IS 'gem.ge_correlation_member stores correlation values associated to each template of a correlation analysis over a set of experiments.';


--
-- Name: ge_correlation_analysis_correlation_analysis_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_correlation_analysis_correlation_analysis_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_correlation_analysis_correlation_analysis_id_seq OWNER TO postgres;

--
-- Name: ge_correlation_analysis_correlation_analysis_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_correlation_analysis_correlation_analysis_id_seq OWNED BY ge_correlation_analysis.correlation_analysis_id;


--
-- Name: ge_correlation_member; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_correlation_member (
    correlation_member_id bigint NOT NULL,
    correlation_analysis_id bigint,
    template_a_id bigint,
    template_b_id bigint,
    correlation_value real,
    correlation_type character varying(250),
    dataset_id integer,
    metadata_id bigint
);


ALTER TABLE ge_correlation_member OWNER TO postgres;

--
-- Name: ge_correlation_member_correlation_member_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_correlation_member_correlation_member_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_correlation_member_correlation_member_id_seq OWNER TO postgres;

--
-- Name: ge_correlation_member_correlation_member_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_correlation_member_correlation_member_id_seq OWNED BY ge_correlation_member.correlation_member_id;


--
-- Name: ge_data_analysis_process; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_data_analysis_process (
    data_analysis_process_id integer NOT NULL,
    process_type character varying(250),
    target_id integer,
    source_dataset_id integer,
    result_dataset_id integer,
    file_id integer,
    metadata_id bigint
);


ALTER TABLE ge_data_analysis_process OWNER TO postgres;

--
-- Name: TABLE ge_data_analysis_process; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_data_analysis_process IS 'gem.ge_data_analysis_process store the different steps of a data analysis process for a microarray analysis as a relation between two datasets (source and result). The protocol can be stored as a protocol associated to a sample. A result file can be associated using file_id.';


--
-- Name: ge_data_analysis_process_data_analysis_process_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_data_analysis_process_data_analysis_process_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_data_analysis_process_data_analysis_process_id_seq OWNER TO postgres;

--
-- Name: ge_data_analysis_process_data_analysis_process_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_data_analysis_process_data_analysis_process_id_seq OWNED BY ge_data_analysis_process.data_analysis_process_id;


--
-- Name: ge_diff_expression; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_diff_expression (
    diff_expression_id integer NOT NULL,
    experiment_analysis_group_id integer,
    method character varying(250),
    stat_significance_cutoff real,
    stat_significance_type character varying(250),
    metadata_id bigint
);


ALTER TABLE ge_diff_expression OWNER TO postgres;

--
-- Name: TABLE ge_diff_expression; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_diff_expression IS 'gem.ge_diff_expression store information about the differential expression analysis made over a set of experiments';


--
-- Name: ge_diff_expression_diff_expression_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_diff_expression_diff_expression_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_diff_expression_diff_expression_id_seq OWNER TO postgres;

--
-- Name: ge_diff_expression_diff_expression_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_diff_expression_diff_expression_id_seq OWNED BY ge_diff_expression.diff_expression_id;


--
-- Name: ge_experiment; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_experiment (
    experiment_id integer NOT NULL,
    experiment_name character varying(250),
    experimental_design_id integer,
    replicates_nr integer,
    colour_nr integer,
    description text,
    contact_id integer,
    metadata_id bigint
);


ALTER TABLE ge_experiment OWNER TO postgres;

--
-- Name: TABLE ge_experiment; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_experiment IS 'gem.ge_experiment store data about a single expression experiment such as tomato leaves or tomato leaves vs potato leaves in a two colour microarray experiment. For a high-throughtput sequencing methods an experiment could be equal to a sequencing run.';


--
-- Name: ge_experiment_analysis_group; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_experiment_analysis_group (
    experiment_analysis_group_id integer NOT NULL,
    group_name character varying(250),
    group_description text,
    metadata_id bigint
);


ALTER TABLE ge_experiment_analysis_group OWNER TO postgres;

--
-- Name: TABLE ge_experiment_analysis_group; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_experiment_analysis_group IS 'gem.ge_experiment_analysis_member stores member id for experiment groups.';


--
-- Name: ge_experiment_analysis_group_experiment_analysis_group_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_experiment_analysis_group_experiment_analysis_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_experiment_analysis_group_experiment_analysis_group_id_seq OWNER TO postgres;

--
-- Name: ge_experiment_analysis_group_experiment_analysis_group_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_experiment_analysis_group_experiment_analysis_group_id_seq OWNED BY ge_experiment_analysis_group.experiment_analysis_group_id;


--
-- Name: ge_experiment_analysis_member; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_experiment_analysis_member (
    experiment_analysis_member_id integer NOT NULL,
    experiment_analysis_group_id integer,
    experiment_id integer,
    metadata_id bigint
);


ALTER TABLE ge_experiment_analysis_member OWNER TO postgres;

--
-- Name: ge_experiment_analysis_member_experiment_analysis_member_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_experiment_analysis_member_experiment_analysis_member_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_experiment_analysis_member_experiment_analysis_member_id_seq OWNER TO postgres;

--
-- Name: ge_experiment_analysis_member_experiment_analysis_member_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_experiment_analysis_member_experiment_analysis_member_id_seq OWNED BY ge_experiment_analysis_member.experiment_analysis_member_id;


--
-- Name: ge_experiment_dbxref; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_experiment_dbxref (
    experiment_dbxref_id integer NOT NULL,
    experiment_id integer,
    dbxref_id bigint,
    metadata_id bigint
);


ALTER TABLE ge_experiment_dbxref OWNER TO postgres;

--
-- Name: TABLE ge_experiment_dbxref; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_experiment_dbxref IS 'gem.ge_experiment_dbxref is a linking table between gem.ge_experiment table and dbxref table in the chado schema. It is used to store experiment associations with other databases.';


--
-- Name: ge_experiment_dbxref_experiment_dbxref_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_experiment_dbxref_experiment_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_experiment_dbxref_experiment_dbxref_id_seq OWNER TO postgres;

--
-- Name: ge_experiment_dbxref_experiment_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_experiment_dbxref_experiment_dbxref_id_seq OWNED BY ge_experiment_dbxref.experiment_dbxref_id;


--
-- Name: ge_experiment_experiment_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_experiment_experiment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_experiment_experiment_id_seq OWNER TO postgres;

--
-- Name: ge_experiment_experiment_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_experiment_experiment_id_seq OWNED BY ge_experiment.experiment_id;


--
-- Name: ge_experimental_design; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_experimental_design (
    experimental_design_id integer NOT NULL,
    experimental_design_name character varying(250),
    description text,
    design_type character varying(250),
    metadata_id bigint
);


ALTER TABLE ge_experimental_design OWNER TO postgres;

--
-- Name: ge_experimental_design_dbxref; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_experimental_design_dbxref (
    experimental_design_dbxref_id integer NOT NULL,
    experimental_design_id integer,
    dbxref_id bigint,
    metadata_id bigint
);


ALTER TABLE ge_experimental_design_dbxref OWNER TO postgres;

--
-- Name: TABLE ge_experimental_design_dbxref; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_experimental_design_dbxref IS 'gem.ge_experimental_design_dbxref is a linking table between gem.ge_experimental_design table and dbxref table in the chado schema. It is used to store experimental designs associations with other databases.';


--
-- Name: ge_experimental_design_dbxref_experimental_design_dbxref_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_experimental_design_dbxref_experimental_design_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_experimental_design_dbxref_experimental_design_dbxref_id_seq OWNER TO postgres;

--
-- Name: ge_experimental_design_dbxref_experimental_design_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_experimental_design_dbxref_experimental_design_dbxref_id_seq OWNED BY ge_experimental_design_dbxref.experimental_design_dbxref_id;


--
-- Name: ge_experimental_design_experimental_design_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_experimental_design_experimental_design_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_experimental_design_experimental_design_id_seq OWNER TO postgres;

--
-- Name: ge_experimental_design_experimental_design_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_experimental_design_experimental_design_id_seq OWNED BY ge_experimental_design.experimental_design_id;


--
-- Name: ge_experimental_design_pub; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_experimental_design_pub (
    experimental_design_pub_id integer NOT NULL,
    experimental_design_id integer,
    pub_id bigint,
    metadata_id bigint
);


ALTER TABLE ge_experimental_design_pub OWNER TO postgres;

--
-- Name: TABLE ge_experimental_design_pub; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_experimental_design_pub IS 'gem.ge_experimental_design_pub is a linking table between gem.ge_experimental_design table and pub table in the chado schema. It is used to store experimental designs associations with publications.';


--
-- Name: ge_experimental_design_pub_experimental_design_pub_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_experimental_design_pub_experimental_design_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_experimental_design_pub_experimental_design_pub_id_seq OWNER TO postgres;

--
-- Name: ge_experimental_design_pub_experimental_design_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_experimental_design_pub_experimental_design_pub_id_seq OWNED BY ge_experimental_design_pub.experimental_design_pub_id;


--
-- Name: ge_expression_by_experiment; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_expression_by_experiment (
    expression_by_experiment_id bigint NOT NULL,
    experiment_id integer,
    template_id bigint,
    replicates_used integer,
    mean real,
    median real,
    standard_desviation double precision,
    coefficient_of_variance double precision,
    dataset_id integer,
    metadata_id bigint
);


ALTER TABLE ge_expression_by_experiment OWNER TO postgres;

--
-- Name: TABLE ge_expression_by_experiment; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_expression_by_experiment IS 'gem.ge_expression_by_experiment stores the mean, media, SD and CV associated to the expression values of a template in a concrete experiment. These statistical values are calculated using the signal values for different hybridizations in the same experiment.';


--
-- Name: ge_expression_by_experiment_expression_by_experiment_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_expression_by_experiment_expression_by_experiment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_expression_by_experiment_expression_by_experiment_id_seq OWNER TO postgres;

--
-- Name: ge_expression_by_experiment_expression_by_experiment_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_expression_by_experiment_expression_by_experiment_id_seq OWNED BY ge_expression_by_experiment.expression_by_experiment_id;


--
-- Name: ge_fluorescanning; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_fluorescanning (
    fluorescanning_id integer NOT NULL,
    hybridization_id integer,
    protocol_id integer,
    file_id integer,
    dbxref_id bigint,
    metadata_id bigint
);


ALTER TABLE ge_fluorescanning OWNER TO postgres;

--
-- Name: TABLE ge_fluorescanning; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_fluorescanning IS 'gem.ge_fluorescanning store the data and the file location of how a hybridization was scanned (the location can be specified in two different ways. Using a file location in the system (file_id), or linking the file with a ftp location (dbxref_id)).';


--
-- Name: ge_fluorescanning_fluorescanning_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_fluorescanning_fluorescanning_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_fluorescanning_fluorescanning_id_seq OWNER TO postgres;

--
-- Name: ge_fluorescanning_fluorescanning_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_fluorescanning_fluorescanning_id_seq OWNED BY ge_fluorescanning.fluorescanning_id;


--
-- Name: ge_hybridization; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_hybridization (
    hybridization_id integer NOT NULL,
    target_id integer,
    platform_id integer,
    platform_batch character varying(250),
    protocol_id integer,
    metadata_id bigint
);


ALTER TABLE ge_hybridization OWNER TO postgres;

--
-- Name: TABLE ge_hybridization; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_hybridization IS 'gem.ge_hybridization store the data of the platform and the target used in a hybridization.';


--
-- Name: ge_hybridization_hybridization_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_hybridization_hybridization_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_hybridization_hybridization_id_seq OWNER TO postgres;

--
-- Name: ge_hybridization_hybridization_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_hybridization_hybridization_id_seq OWNED BY ge_hybridization.hybridization_id;


--
-- Name: ge_platform; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_platform (
    platform_id integer NOT NULL,
    technology_type_id integer,
    platform_name character varying(250),
    description text,
    contact_id bigint,
    metadata_id bigint
);


ALTER TABLE ge_platform OWNER TO postgres;

--
-- Name: TABLE ge_platform; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_platform IS 'trancriptomics.ge_platform stores for a specific gem platform, an aplication of a gem expression meassure technology to a concrete system. For example Arabidopsis AffyChip';


--
-- Name: ge_platform_dbxref; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_platform_dbxref (
    platform_dbxref_id integer NOT NULL,
    platform_id integer,
    dbxref_id bigint,
    metadata_id bigint
);


ALTER TABLE ge_platform_dbxref OWNER TO postgres;

--
-- Name: TABLE ge_platform_dbxref; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_platform_dbxref IS 'gem.ge_platform_dbxref is a linking table between gem.ge_platform table and dbxref table in the chado schema. It is used to store platform associations with other expression databases as GEO';


--
-- Name: ge_platform_dbxref_platform_dbxref_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_platform_dbxref_platform_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_platform_dbxref_platform_dbxref_id_seq OWNER TO postgres;

--
-- Name: ge_platform_dbxref_platform_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_platform_dbxref_platform_dbxref_id_seq OWNED BY ge_platform_dbxref.platform_dbxref_id;


--
-- Name: ge_platform_design; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_platform_design (
    platform_design_id integer NOT NULL,
    platform_id integer,
    sample_id integer,
    metadata_id bigint
);


ALTER TABLE ge_platform_design OWNER TO postgres;

--
-- Name: TABLE ge_platform_design; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_platform_design IS 'gem.ge_platform_design is a linking table between gem.ge_platform table and biosource.sample table. This table is used to create relations between a platform and a sequence datatset (sequence dataset as sample_type used in the design of the gem platform';


--
-- Name: ge_platform_design_platform_design_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_platform_design_platform_design_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_platform_design_platform_design_id_seq OWNER TO postgres;

--
-- Name: ge_platform_design_platform_design_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_platform_design_platform_design_id_seq OWNED BY ge_platform_design.platform_design_id;


--
-- Name: ge_platform_platform_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_platform_platform_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_platform_platform_id_seq OWNER TO postgres;

--
-- Name: ge_platform_platform_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_platform_platform_id_seq OWNED BY ge_platform.platform_id;


--
-- Name: ge_platform_pub; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_platform_pub (
    platform_pub_id integer NOT NULL,
    platform_id integer,
    pub_id bigint,
    metadata_id bigint
);


ALTER TABLE ge_platform_pub OWNER TO postgres;

--
-- Name: TABLE ge_platform_pub; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_platform_pub IS 'gem.ge_platform_pub is a linking table between gem.ge_platform table and pub table in the chado schema. It is used to store platform associations with publications';


--
-- Name: ge_platform_pub_platform_pub_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_platform_pub_platform_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_platform_pub_platform_pub_id_seq OWNER TO postgres;

--
-- Name: ge_platform_pub_platform_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_platform_pub_platform_pub_id_seq OWNED BY ge_platform_pub.platform_pub_id;


--
-- Name: ge_probe; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_probe (
    probe_id bigint NOT NULL,
    platform_id integer,
    probe_name character varying(250),
    probe_type character varying(250),
    sequence_file_id bigint,
    template_id bigint,
    template_start bigint,
    template_end bigint,
    metadata_id bigint
);


ALTER TABLE ge_probe OWNER TO postgres;

--
-- Name: TABLE ge_probe; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_probe IS 'gem.ge_probe stores data about the sequence used in the hybridization or produced by the sequencing method. Also map these sequence with a reference (see ge_template table).';


--
-- Name: ge_probe_expression; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_probe_expression (
    probe_expression_id bigint NOT NULL,
    target_element_id integer,
    probe_id bigint,
    signal real,
    signal_type character varying(25),
    background real,
    background_type character varying(25),
    flag character varying(25),
    dataset_id integer,
    metadata_id bigint
);


ALTER TABLE ge_probe_expression OWNER TO postgres;

--
-- Name: TABLE ge_probe_expression; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_probe_expression IS 'gem.ge_probe_expression stores the signal and the background associated with each probe for a target_element in a hybridization. The experiment data are associated in two ways: target_id (faster) and as a sample_id (dataset_id) that keeps the history of the process.';


--
-- Name: ge_probe_expression_probe_expression_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_probe_expression_probe_expression_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_probe_expression_probe_expression_id_seq OWNER TO postgres;

--
-- Name: ge_probe_expression_probe_expression_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_probe_expression_probe_expression_id_seq OWNED BY ge_probe_expression.probe_expression_id;


--
-- Name: ge_probe_probe_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_probe_probe_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_probe_probe_id_seq OWNER TO postgres;

--
-- Name: ge_probe_probe_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_probe_probe_id_seq OWNED BY ge_probe.probe_id;


--
-- Name: ge_probe_spot; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_probe_spot (
    probe_spot_id bigint NOT NULL,
    probe_id bigint,
    spot_name character varying(250),
    metadata_id bigint
);


ALTER TABLE ge_probe_spot OWNER TO postgres;

--
-- Name: TABLE ge_probe_spot; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_probe_spot IS 'gem.ge_probe_spot store each spot (each point of the microarray) associated with a probe (one probe can have more than one spot).';


--
-- Name: ge_probe_spot_coordinate; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_probe_spot_coordinate (
    probe_spot_coordinate_id bigint NOT NULL,
    probe_spot_id bigint,
    coordinate_type character varying(50),
    coordinate_value integer,
    metadata_id bigint
);


ALTER TABLE ge_probe_spot_coordinate OWNER TO postgres;

--
-- Name: TABLE ge_probe_spot_coordinate; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_probe_spot_coordinate IS 'gem.ge_probe_spot_coordinate store each coordinate associated to a spot as combination of different coordination types, for example a spot can have the coordinates x=1, y=1 and grid=1. This will be translate in three rows in this table for the same spot_id';


--
-- Name: ge_probe_spot_coordinate_probe_spot_coordinate_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_probe_spot_coordinate_probe_spot_coordinate_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_probe_spot_coordinate_probe_spot_coordinate_id_seq OWNER TO postgres;

--
-- Name: ge_probe_spot_coordinate_probe_spot_coordinate_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_probe_spot_coordinate_probe_spot_coordinate_id_seq OWNED BY ge_probe_spot_coordinate.probe_spot_coordinate_id;


--
-- Name: ge_probe_spot_probe_spot_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_probe_spot_probe_spot_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_probe_spot_probe_spot_id_seq OWNER TO postgres;

--
-- Name: ge_probe_spot_probe_spot_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_probe_spot_probe_spot_id_seq OWNED BY ge_probe_spot.probe_spot_id;


--
-- Name: ge_profile_element; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_profile_element (
    profile_element_id integer NOT NULL,
    cluster_profile_id integer,
    experiment_id integer,
    experiment_predefined_position integer,
    element_mean_value real,
    element_median_value real,
    element_sd real,
    element_type character varying(25),
    previous_element_ratio real,
    metadata_id bigint
);


ALTER TABLE ge_profile_element OWNER TO postgres;

--
-- Name: TABLE ge_profile_element; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_profile_element IS 'gem.ge_cluster_profile_element store data about each element of a profile, for example is a profile is done over a time course with 4 points, each element will be one of these points.';


--
-- Name: ge_profile_element_profile_element_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_profile_element_profile_element_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_profile_element_profile_element_id_seq OWNER TO postgres;

--
-- Name: ge_profile_element_profile_element_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_profile_element_profile_element_id_seq OWNED BY ge_profile_element.profile_element_id;


--
-- Name: ge_target; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_target (
    target_id integer NOT NULL,
    target_name character varying(250),
    experiment_id integer,
    metadata_id bigint
);


ALTER TABLE ge_target OWNER TO postgres;

--
-- Name: TABLE ge_target; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_target IS 'gems.ge_target store data about the replicates for an experiment. Different biological replicates will have different sample_id. Technical replicated will have the same sample_id but different target_id.';


--
-- Name: ge_target_dbxref; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_target_dbxref (
    target_dbxref_id integer NOT NULL,
    target_id integer,
    dbxref_id bigint,
    metadata_id bigint
);


ALTER TABLE ge_target_dbxref OWNER TO postgres;

--
-- Name: TABLE ge_target_dbxref; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_target_dbxref IS 'gem.ge_target_dbxref is a linking table between gem.ge_target table and dbxref table in the chado schema. It is used to store target associations with other databases.';


--
-- Name: ge_target_dbxref_target_dbxref_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_target_dbxref_target_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_target_dbxref_target_dbxref_id_seq OWNER TO postgres;

--
-- Name: ge_target_dbxref_target_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_target_dbxref_target_dbxref_id_seq OWNED BY ge_target_dbxref.target_dbxref_id;


--
-- Name: ge_target_element; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_target_element (
    target_element_id integer NOT NULL,
    target_element_name character varying(250),
    target_id integer,
    sample_id integer,
    protocol_id integer,
    dye text,
    metadata_id bigint
);


ALTER TABLE ge_target_element OWNER TO postgres;

--
-- Name: TABLE ge_target_element; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_target_element IS 'gems.ge_target_element store data about the association of different samples in the same hybridization as target_elements, for example a two colour experiment will have one experiment, as many target as replicates and two target elements per replicates. A dye swap technique will be represented as two different targets with two different element each with different combinations of sample_id and dye.';


--
-- Name: ge_target_element_target_element_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_target_element_target_element_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_target_element_target_element_id_seq OWNER TO postgres;

--
-- Name: ge_target_element_target_element_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_target_element_target_element_id_seq OWNED BY ge_target_element.target_element_id;


--
-- Name: ge_target_target_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_target_target_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_target_target_id_seq OWNER TO postgres;

--
-- Name: ge_target_target_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_target_target_id_seq OWNED BY ge_target.target_id;


--
-- Name: ge_technology_type; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_technology_type (
    technology_type_id integer NOT NULL,
    technology_name character varying(250),
    description text,
    metadata_id bigint
);


ALTER TABLE ge_technology_type OWNER TO postgres;

--
-- Name: TABLE ge_technology_type; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_technology_type IS 'gem.ge_technology_type stores information about gem technology used in the development of the expression platform, for example Affymetrix GeneChip or High-throughput pyrosequencing';


--
-- Name: ge_technology_type_technology_type_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_technology_type_technology_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_technology_type_technology_type_id_seq OWNER TO postgres;

--
-- Name: ge_technology_type_technology_type_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_technology_type_technology_type_id_seq OWNED BY ge_technology_type.technology_type_id;


--
-- Name: ge_template; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_template (
    template_id bigint NOT NULL,
    template_name character varying(250),
    template_type text,
    platform_id integer,
    metadata_id bigint
);


ALTER TABLE ge_template OWNER TO postgres;

--
-- Name: TABLE ge_template; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_template IS 'gem.ge_template store data about the gem templates of a specific platform. A template is a reference sequence used in the microarrat probe design or in the high-throughput sequencing mapping.';


--
-- Name: ge_template_dbiref; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_template_dbiref (
    template_dbiref_id bigint NOT NULL,
    template_id bigint,
    dbiref_id bigint,
    metadata_id bigint
);


ALTER TABLE ge_template_dbiref OWNER TO postgres;

--
-- Name: TABLE ge_template_dbiref; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_template_dbiref IS 'gem.ge_template_dbiref is a linking table between gem.ge_template table and metadata.md_dbiref table in the metadata schema. It is used to store associations between a template and internal sequence accessions, such us unigenes or ests';


--
-- Name: ge_template_dbiref_template_dbiref_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_template_dbiref_template_dbiref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_template_dbiref_template_dbiref_id_seq OWNER TO postgres;

--
-- Name: ge_template_dbiref_template_dbiref_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_template_dbiref_template_dbiref_id_seq OWNED BY ge_template_dbiref.template_dbiref_id;


--
-- Name: ge_template_dbxref; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_template_dbxref (
    template_dbxref_id bigint NOT NULL,
    template_id bigint,
    dbxref_id bigint,
    metadata_id bigint
);


ALTER TABLE ge_template_dbxref OWNER TO postgres;

--
-- Name: TABLE ge_template_dbxref; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_template_dbxref IS 'gem.ge_template_dbxref is a linking table between gem.ge_template table and dbxref table in the chado schema. It is used to store associations between a template and external sequence accessions of other databases as genbank';


--
-- Name: ge_template_dbxref_template_dbxref_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_template_dbxref_template_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_template_dbxref_template_dbxref_id_seq OWNER TO postgres;

--
-- Name: ge_template_dbxref_template_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_template_dbxref_template_dbxref_id_seq OWNED BY ge_template_dbxref.template_dbxref_id;


--
-- Name: ge_template_diff_expression; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_template_diff_expression (
    template_diff_expression_id bigint NOT NULL,
    diff_expression_id integer,
    template_id bigint,
    stat_value double precision,
    stat_type character varying(25),
    dataset_id integer,
    metadata_id bigint
);


ALTER TABLE ge_template_diff_expression OWNER TO postgres;

--
-- Name: TABLE ge_template_diff_expression; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_template_diff_expression IS 'gem.ge_template_diff_expression store information about the differential expression analysis per template';


--
-- Name: ge_template_diff_expression_template_diff_expression_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_template_diff_expression_template_diff_expression_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_template_diff_expression_template_diff_expression_id_seq OWNER TO postgres;

--
-- Name: ge_template_diff_expression_template_diff_expression_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_template_diff_expression_template_diff_expression_id_seq OWNED BY ge_template_diff_expression.template_diff_expression_id;


--
-- Name: ge_template_expression; Type: TABLE; Schema: gem; Owner: postgres
--

CREATE TABLE ge_template_expression (
    template_expression_id bigint NOT NULL,
    hybridization_id integer,
    template_id bigint,
    template_signal real,
    template_signal_type character varying(25),
    statistical_value double precision,
    statistical_value_type character varying(25),
    flag character varying(25),
    dataset_id integer,
    metadata_id bigint
);


ALTER TABLE ge_template_expression OWNER TO postgres;

--
-- Name: TABLE ge_template_expression; Type: COMMENT; Schema: gem; Owner: postgres
--

COMMENT ON TABLE ge_template_expression IS 'gem.ge_template_expression store the signal and its statitistical avlue associated to a template in a hybridization ( the average, median ... of the signal of the probes associated to the template). The experiment data are linked using two ways: hybrdization_id (faster) and as a sample_id (dataset_id) that keeps the history of the process';


--
-- Name: ge_template_expression_template_expression_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_template_expression_template_expression_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_template_expression_template_expression_id_seq OWNER TO postgres;

--
-- Name: ge_template_expression_template_expression_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_template_expression_template_expression_id_seq OWNED BY ge_template_expression.template_expression_id;


--
-- Name: ge_template_template_id_seq; Type: SEQUENCE; Schema: gem; Owner: postgres
--

CREATE SEQUENCE ge_template_template_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ge_template_template_id_seq OWNER TO postgres;

--
-- Name: ge_template_template_id_seq; Type: SEQUENCE OWNED BY; Schema: gem; Owner: postgres
--

ALTER SEQUENCE ge_template_template_id_seq OWNED BY ge_template.template_id;


SET search_path = genomic, pg_catalog;

SET default_with_oids = true;

--
-- Name: blast_defline; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE blast_defline (
    blast_defline_id integer NOT NULL,
    blast_db_id integer,
    identifier character varying(255),
    defline text,
    identifier_defline_fulltext tsvector
);


ALTER TABLE blast_defline OWNER TO postgres;

--
-- Name: blast_defline_blast_defline_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE blast_defline_blast_defline_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE blast_defline_blast_defline_id_seq OWNER TO postgres;

--
-- Name: blast_defline_blast_defline_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE blast_defline_blast_defline_id_seq OWNED BY blast_defline.blast_defline_id;


--
-- Name: blast_hit; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE blast_hit (
    blast_hit_id integer NOT NULL,
    blast_query_id integer,
    identifier character varying(255),
    evalue double precision,
    score double precision,
    identity_percentage double precision,
    align_start bigint,
    align_end bigint,
    blast_defline_id integer
);


ALTER TABLE blast_hit OWNER TO postgres;

--
-- Name: blast_hit_blast_hit_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE blast_hit_blast_hit_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE blast_hit_blast_hit_id_seq OWNER TO postgres;

--
-- Name: blast_hit_blast_hit_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE blast_hit_blast_hit_id_seq OWNED BY blast_hit.blast_hit_id;


--
-- Name: blast_query; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE blast_query (
    blast_query_id integer NOT NULL,
    source_id integer,
    query_source_type_id integer,
    blast_db_id integer,
    total_hits integer,
    stored_hits integer,
    last_updated timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL
);


ALTER TABLE blast_query OWNER TO postgres;

--
-- Name: blast_query_blast_query_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE blast_query_blast_query_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE blast_query_blast_query_id_seq OWNER TO postgres;

--
-- Name: blast_query_blast_query_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE blast_query_blast_query_id_seq OWNED BY blast_query.blast_query_id;


--
-- Name: chromat; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE chromat (
    chromat_id bigint NOT NULL,
    clone_id bigint,
    primer character varying(50),
    direction character(1),
    filename character varying(50),
    subpath text,
    date timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
    censor_id integer,
    read_class_id bigint
);


ALTER TABLE chromat OWNER TO postgres;

--
-- Name: chromat_chromat_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE chromat_chromat_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE chromat_chromat_id_seq OWNER TO postgres;

--
-- Name: chromat_chromat_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE chromat_chromat_id_seq OWNED BY chromat.chromat_id;


--
-- Name: clone; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE clone (
    clone_id integer NOT NULL,
    library_id bigint,
    clone_type_id smallint DEFAULT (0)::smallint NOT NULL,
    platenum integer,
    wellrow character varying(2),
    wellcol smallint,
    genbank_accession character varying(32),
    bad_clone character varying(32),
    estimated_length bigint
);


ALTER TABLE clone OWNER TO postgres;

--
-- Name: clone_clone_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE clone_clone_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE clone_clone_id_seq OWNER TO postgres;

--
-- Name: clone_clone_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE clone_clone_id_seq OWNED BY clone.clone_id;


--
-- Name: clone_feature; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE clone_feature (
    clone_feature_id integer NOT NULL,
    clone_id bigint,
    feature_id bigint
);


ALTER TABLE clone_feature OWNER TO postgres;

--
-- Name: TABLE clone_feature; Type: COMMENT; Schema: genomic; Owner: postgres
--

COMMENT ON TABLE clone_feature IS 'linking table between genomic.clone and the chado feature table, showing which features in the feature table are the sequences of clones in the clone table';


SET default_with_oids = false;

--
-- Name: clone_feature_backup; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE clone_feature_backup (
    clone_feature_id integer,
    clone_id bigint,
    feature_id bigint
);


ALTER TABLE clone_feature_backup OWNER TO postgres;

--
-- Name: clone_feature_clone_feature_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE clone_feature_clone_feature_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE clone_feature_clone_feature_id_seq OWNER TO postgres;

--
-- Name: clone_feature_clone_feature_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE clone_feature_clone_feature_id_seq OWNED BY clone_feature.clone_feature_id;


SET default_with_oids = true;

--
-- Name: clone_type; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE clone_type (
    clone_type_id integer NOT NULL,
    name character varying(40),
    shortname character varying(12)
);


ALTER TABLE clone_type OWNER TO postgres;

--
-- Name: clone_type_clone_type_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE clone_type_clone_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE clone_type_clone_type_id_seq OWNER TO postgres;

--
-- Name: clone_type_clone_type_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE clone_type_clone_type_id_seq OWNED BY clone_type.clone_type_id;


--
-- Name: genbank_submission; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE genbank_submission (
    genbank_submission_id integer NOT NULL,
    date_generated timestamp without time zone,
    date_sent timestamp without time zone,
    submitted_by character varying(20),
    ncbi_reply_date timestamp without time zone
);


ALTER TABLE genbank_submission OWNER TO postgres;

--
-- Name: genbank_submission_genbank_submission_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE genbank_submission_genbank_submission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genbank_submission_genbank_submission_id_seq OWNER TO postgres;

--
-- Name: genbank_submission_genbank_submission_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE genbank_submission_genbank_submission_id_seq OWNED BY genbank_submission.genbank_submission_id;


--
-- Name: gss; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE gss (
    gss_id integer NOT NULL,
    chromat_id bigint,
    version smallint DEFAULT 1 NOT NULL,
    basecaller character varying(32),
    seq text,
    qual text,
    call_positions text,
    status integer,
    flags integer,
    date timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL
);


ALTER TABLE gss OWNER TO postgres;

--
-- Name: gss_gss_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE gss_gss_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gss_gss_id_seq OWNER TO postgres;

--
-- Name: gss_gss_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE gss_gss_id_seq OWNED BY gss.gss_id;


--
-- Name: gss_submitted_to_genbank; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE gss_submitted_to_genbank (
    gss_submitted_to_genbank_id integer NOT NULL,
    genbank_submission_id integer DEFAULT 0 NOT NULL,
    gss_id integer DEFAULT 0 NOT NULL,
    genbank_identifier character varying(80),
    genbank_dbgss_id bigint
);


ALTER TABLE gss_submitted_to_genbank OWNER TO postgres;

--
-- Name: gss_submitted_to_genbank_gss_submitted_to_genbank_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE gss_submitted_to_genbank_gss_submitted_to_genbank_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE gss_submitted_to_genbank_gss_submitted_to_genbank_id_seq OWNER TO postgres;

--
-- Name: gss_submitted_to_genbank_gss_submitted_to_genbank_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE gss_submitted_to_genbank_gss_submitted_to_genbank_id_seq OWNED BY gss_submitted_to_genbank.gss_submitted_to_genbank_id;


--
-- Name: library; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE library (
    library_id integer NOT NULL,
    clone_type_id bigint DEFAULT (0)::bigint NOT NULL,
    name character varying(80),
    shortname character varying(16) DEFAULT ''::character varying NOT NULL,
    accession_id bigint,
    subclone_of bigint,
    cloning_host character varying(80) DEFAULT 'E. coli'::character varying,
    rs1 character varying(12),
    rs2 character varying(12),
    vector_ligation_1 integer,
    vector_ligation_2 integer,
    vector character varying(80) NOT NULL,
    left_primer_id bigint,
    right_primer_id bigint,
    organism_id bigint
);


ALTER TABLE library OWNER TO postgres;

--
-- Name: library_annotation_db; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE library_annotation_db (
    library_annotation_db_id integer NOT NULL,
    library_id bigint DEFAULT (0)::bigint NOT NULL,
    blast_db_id bigint DEFAULT (0)::bigint NOT NULL,
    is_contaminant smallint DEFAULT (0)::smallint NOT NULL
);


ALTER TABLE library_annotation_db OWNER TO postgres;

--
-- Name: library_annotation_db_library_annotation_db_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE library_annotation_db_library_annotation_db_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE library_annotation_db_library_annotation_db_id_seq OWNER TO postgres;

--
-- Name: library_annotation_db_library_annotation_db_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE library_annotation_db_library_annotation_db_id_seq OWNED BY library_annotation_db.library_annotation_db_id;


--
-- Name: library_library_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE library_library_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE library_library_id_seq OWNER TO postgres;

--
-- Name: library_library_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE library_library_id_seq OWNED BY library.library_id;


SET default_with_oids = false;

--
-- Name: library_shortname_abbreviation; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE library_shortname_abbreviation (
    library_shortname_abbreviation_id integer NOT NULL,
    library_id integer,
    abbreviation character varying(10)
);


ALTER TABLE library_shortname_abbreviation OWNER TO postgres;

--
-- Name: TABLE library_shortname_abbreviation; Type: COMMENT; Schema: genomic; Owner: postgres
--

COMMENT ON TABLE library_shortname_abbreviation IS 'stores known abbreviations for the shortnames of genomic libraries';


--
-- Name: library_shortname_abbreviatio_library_shortname_abbreviatio_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE library_shortname_abbreviatio_library_shortname_abbreviatio_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE library_shortname_abbreviatio_library_shortname_abbreviatio_seq OWNER TO postgres;

--
-- Name: library_shortname_abbreviatio_library_shortname_abbreviatio_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE library_shortname_abbreviatio_library_shortname_abbreviatio_seq OWNED BY library_shortname_abbreviation.library_shortname_abbreviation_id;


SET default_with_oids = true;

--
-- Name: qc_report; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE qc_report (
    qc_report_id integer NOT NULL,
    gss_id bigint DEFAULT (0)::bigint NOT NULL,
    vs_status smallint,
    qstart integer,
    qend integer,
    istart integer,
    iend integer,
    hqi_start integer,
    hqi_length integer,
    entropy real,
    expected_error real,
    qual_trim_threshold real,
    vector_tokens character varying(40)
);


ALTER TABLE qc_report OWNER TO postgres;

--
-- Name: qc_report_qc_report_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE qc_report_qc_report_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE qc_report_qc_report_id_seq OWNER TO postgres;

--
-- Name: qc_report_qc_report_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE qc_report_qc_report_id_seq OWNED BY qc_report.qc_report_id;


--
-- Name: query_source_type; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE query_source_type (
    query_source_type_id integer NOT NULL,
    name character varying(255),
    shortname character varying(15)
);


ALTER TABLE query_source_type OWNER TO postgres;

--
-- Name: query_source_type_query_source_type_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE query_source_type_query_source_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE query_source_type_query_source_type_id_seq OWNER TO postgres;

--
-- Name: query_source_type_query_source_type_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE query_source_type_query_source_type_id_seq OWNED BY query_source_type.query_source_type_id;


--
-- Name: read_class; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE read_class (
    read_class_id integer NOT NULL,
    class_name character varying(40)
);


ALTER TABLE read_class OWNER TO postgres;

--
-- Name: read_class_read_class_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE read_class_read_class_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE read_class_read_class_id_seq OWNER TO postgres;

--
-- Name: read_class_read_class_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE read_class_read_class_id_seq OWNED BY read_class.read_class_id;


SET default_with_oids = false;

--
-- Name: sequencing_primer; Type: TABLE; Schema: genomic; Owner: postgres
--

CREATE TABLE sequencing_primer (
    sequencing_primer_id integer NOT NULL,
    name character varying(20) NOT NULL
);


ALTER TABLE sequencing_primer OWNER TO postgres;

--
-- Name: sequencing_primer_sequencing_primer_id_seq; Type: SEQUENCE; Schema: genomic; Owner: postgres
--

CREATE SEQUENCE sequencing_primer_sequencing_primer_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sequencing_primer_sequencing_primer_id_seq OWNER TO postgres;

--
-- Name: sequencing_primer_sequencing_primer_id_seq; Type: SEQUENCE OWNED BY; Schema: genomic; Owner: postgres
--

ALTER SEQUENCE sequencing_primer_sequencing_primer_id_seq OWNED BY sequencing_primer.sequencing_primer_id;


SET search_path = insitu, pg_catalog;

SET default_with_oids = true;

--
-- Name: ex_tag; Type: TABLE; Schema: insitu; Owner: postgres
--

CREATE TABLE ex_tag (
    experiment_id bigint DEFAULT (0)::bigint NOT NULL,
    tag_id bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE ex_tag OWNER TO postgres;

--
-- Name: experiment; Type: TABLE; Schema: insitu; Owner: postgres
--

CREATE TABLE experiment (
    experiment_id integer NOT NULL,
    name text,
    date date,
    is_organism_id bigint DEFAULT (0)::bigint NOT NULL,
    tissue text,
    stage text,
    probe_id bigint,
    description text,
    user_id bigint,
    obsolete boolean,
    type text
);


ALTER TABLE experiment OWNER TO postgres;

--
-- Name: experiment_experiment_id_seq; Type: SEQUENCE; Schema: insitu; Owner: postgres
--

CREATE SEQUENCE experiment_experiment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE experiment_experiment_id_seq OWNER TO postgres;

--
-- Name: experiment_experiment_id_seq; Type: SEQUENCE OWNED BY; Schema: insitu; Owner: postgres
--

ALTER SEQUENCE experiment_experiment_id_seq OWNED BY experiment.experiment_id;


SET default_with_oids = false;

--
-- Name: experiment_image; Type: TABLE; Schema: insitu; Owner: postgres
--

CREATE TABLE experiment_image (
    experiment_image_id integer NOT NULL,
    image_id bigint,
    experiment_id bigint,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE experiment_image OWNER TO postgres;

--
-- Name: experiment_image_experiment_image_id_seq; Type: SEQUENCE; Schema: insitu; Owner: postgres
--

CREATE SEQUENCE experiment_image_experiment_image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE experiment_image_experiment_image_id_seq OWNER TO postgres;

--
-- Name: experiment_image_experiment_image_id_seq; Type: SEQUENCE OWNED BY; Schema: insitu; Owner: postgres
--

ALTER SEQUENCE experiment_image_experiment_image_id_seq OWNED BY experiment_image.experiment_image_id;


--
-- Name: experiment_tag; Type: TABLE; Schema: insitu; Owner: postgres
--

CREATE TABLE experiment_tag (
    experiment_tag_id integer NOT NULL,
    tag_id bigint,
    experiment_id bigint,
    sp_person_id bigint,
    modified_date timestamp with time zone,
    create_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE experiment_tag OWNER TO postgres;

--
-- Name: experiment_tag_experiment_tag_id_seq; Type: SEQUENCE; Schema: insitu; Owner: postgres
--

CREATE SEQUENCE experiment_tag_experiment_tag_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE experiment_tag_experiment_tag_id_seq OWNER TO postgres;

--
-- Name: experiment_tag_experiment_tag_id_seq; Type: SEQUENCE OWNED BY; Schema: insitu; Owner: postgres
--

ALTER SEQUENCE experiment_tag_experiment_tag_id_seq OWNED BY experiment_tag.experiment_tag_id;


SET default_with_oids = true;

--
-- Name: image_tag; Type: TABLE; Schema: insitu; Owner: postgres
--

CREATE TABLE image_tag (
    image_id bigint DEFAULT (0)::bigint NOT NULL,
    tag_id bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE image_tag OWNER TO postgres;

--
-- Name: is_organism; Type: TABLE; Schema: insitu; Owner: postgres
--

CREATE TABLE is_organism (
    is_organism_id integer NOT NULL,
    name text NOT NULL,
    common_name text,
    description text,
    user_id bigint
);


ALTER TABLE is_organism OWNER TO postgres;

--
-- Name: is_organism_is_organism_id_seq; Type: SEQUENCE; Schema: insitu; Owner: postgres
--

CREATE SEQUENCE is_organism_is_organism_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE is_organism_is_organism_id_seq OWNER TO postgres;

--
-- Name: is_organism_is_organism_id_seq; Type: SEQUENCE OWNED BY; Schema: insitu; Owner: postgres
--

ALTER SEQUENCE is_organism_is_organism_id_seq OWNED BY is_organism.is_organism_id;


--
-- Name: probe; Type: TABLE; Schema: insitu; Owner: postgres
--

CREATE TABLE probe (
    probe_id bigint NOT NULL,
    name text NOT NULL,
    sequence text,
    clone text,
    link_desc text,
    link text,
    primer1 text,
    primer1_seq text,
    primer2 text,
    primer2_seq text,
    user_id bigint,
    obsolete boolean,
    dbxref_type_id bigint,
    antibody text,
    identifier text
);


ALTER TABLE probe OWNER TO postgres;

--
-- Name: probe_probe_id_seq; Type: SEQUENCE; Schema: insitu; Owner: postgres
--

CREATE SEQUENCE probe_probe_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE probe_probe_id_seq OWNER TO postgres;

--
-- Name: probe_probe_id_seq; Type: SEQUENCE OWNED BY; Schema: insitu; Owner: postgres
--

ALTER SEQUENCE probe_probe_id_seq OWNED BY probe.probe_id;


--
-- Name: tag; Type: TABLE; Schema: insitu; Owner: postgres
--

CREATE TABLE tag (
    tag_id bigint NOT NULL,
    name text,
    description text,
    user_id bigint
);


ALTER TABLE tag OWNER TO postgres;

--
-- Name: tag_implication; Type: TABLE; Schema: insitu; Owner: postgres
--

CREATE TABLE tag_implication (
    tag_id bigint,
    implied_id bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE tag_implication OWNER TO postgres;

--
-- Name: tag_tag_id_seq; Type: SEQUENCE; Schema: insitu; Owner: postgres
--

CREATE SEQUENCE tag_tag_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tag_tag_id_seq OWNER TO postgres;

--
-- Name: tag_tag_id_seq; Type: SEQUENCE OWNED BY; Schema: insitu; Owner: postgres
--

ALTER SEQUENCE tag_tag_id_seq OWNED BY tag.tag_id;


SET search_path = metadata, pg_catalog;

--
-- Name: attribution; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE attribution (
    attribution_id bigint NOT NULL,
    database_name character varying(255),
    table_name character varying(255),
    primary_key_column_name character varying(255),
    row_id bigint
);


ALTER TABLE attribution OWNER TO postgres;

--
-- Name: attribution_attribution_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE attribution_attribution_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE attribution_attribution_id_seq OWNER TO postgres;

--
-- Name: attribution_attribution_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE attribution_attribution_id_seq OWNED BY attribution.attribution_id;


--
-- Name: attribution_to; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE attribution_to (
    attribution_to_id bigint NOT NULL,
    attribution_id bigint,
    person_id bigint,
    organization_id bigint,
    project_id bigint,
    role_id bigint
);


ALTER TABLE attribution_to OWNER TO postgres;

--
-- Name: attribution_to_attribution_to_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE attribution_to_attribution_to_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE attribution_to_attribution_to_id_seq OWNER TO postgres;

--
-- Name: attribution_to_attribution_to_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE attribution_to_attribution_to_id_seq OWNED BY attribution_to.attribution_to_id;


--
-- Name: comments; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE comments (
    comment_id bigint NOT NULL,
    attribution_id bigint,
    comment_text character varying(255)
);


ALTER TABLE comments OWNER TO postgres;

--
-- Name: comments_comment_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE comments_comment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE comments_comment_id_seq OWNER TO postgres;

--
-- Name: comments_comment_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE comments_comment_id_seq OWNED BY comments.comment_id;


SET default_with_oids = false;

--
-- Name: md_dbipath; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE md_dbipath (
    dbipath_id integer NOT NULL,
    column_name text,
    table_name text,
    schema_name text,
    metadata_id bigint
);


ALTER TABLE md_dbipath OWNER TO postgres;

--
-- Name: TABLE md_dbipath; Type: COMMENT; Schema: metadata; Owner: postgres
--

COMMENT ON TABLE md_dbipath IS 'md_dbipath is a table that store the path to access to any internal data in the database as a combination of schema_name.table_name.column_name. See md_dbiref for more details about internal references.';


--
-- Name: md_dbipath_dbipath_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE md_dbipath_dbipath_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE md_dbipath_dbipath_id_seq OWNER TO postgres;

--
-- Name: md_dbipath_dbipath_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE md_dbipath_dbipath_id_seq OWNED BY md_dbipath.dbipath_id;


--
-- Name: md_dbiref; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE md_dbiref (
    dbiref_id bigint NOT NULL,
    iref_accession text,
    dbipath_id integer,
    metadata_id bigint
);


ALTER TABLE md_dbiref OWNER TO postgres;

--
-- Name: TABLE md_dbiref; Type: COMMENT; Schema: metadata; Owner: postgres
--

COMMENT ON TABLE md_dbiref IS 'md_dbiref is a table that store internal database references. An internal database reference (dbiref) is an unique combination of schema_name + table_name + column_name (from md_dbipath table) and iref_accession that let access to any data in the database. The internal accession refered must be unique.';


--
-- Name: md_dbiref_dbiref_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE md_dbiref_dbiref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE md_dbiref_dbiref_id_seq OWNER TO postgres;

--
-- Name: md_dbiref_dbiref_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE md_dbiref_dbiref_id_seq OWNED BY md_dbiref.dbiref_id;


--
-- Name: md_dbversion; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE md_dbversion (
    dbversion_id integer NOT NULL,
    patch_name text,
    patch_description text,
    metadata_id bigint
);


ALTER TABLE md_dbversion OWNER TO postgres;

--
-- Name: TABLE md_dbversion; Type: COMMENT; Schema: metadata; Owner: postgres
--

COMMENT ON TABLE md_dbversion IS 'md_dbversion is a table that store the names of the patches that have been executed over the database.';


--
-- Name: md_dbversion_dbversion_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE md_dbversion_dbversion_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE md_dbversion_dbversion_id_seq OWNER TO postgres;

--
-- Name: md_dbversion_dbversion_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE md_dbversion_dbversion_id_seq OWNED BY md_dbversion.dbversion_id;


--
-- Name: md_files; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE md_files (
    file_id integer NOT NULL,
    basename text,
    dirname text,
    filetype character varying(250),
    alt_filename text,
    comment text,
    md5checksum text,
    metadata_id bigint,
    urlsource text,
    urlsource_md5checksum text
);


ALTER TABLE md_files OWNER TO postgres;

--
-- Name: TABLE md_files; Type: COMMENT; Schema: metadata; Owner: postgres
--

COMMENT ON TABLE md_files IS 'md_files is a table that store the location and the name of any file. The location (dirname) should be relative and not absolute (example core/sgn/images and not /data/local/cxgn/core/sgn/images).';


--
-- Name: md_files_file_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE md_files_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE md_files_file_id_seq OWNER TO postgres;

--
-- Name: md_files_file_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE md_files_file_id_seq OWNED BY md_files.file_id;


--
-- Name: md_groupmembers; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE md_groupmembers (
    groupmember_id bigint NOT NULL,
    group_id integer,
    dbiref_id bigint,
    metadata_id bigint
);


ALTER TABLE md_groupmembers OWNER TO postgres;

--
-- Name: TABLE md_groupmembers; Type: COMMENT; Schema: metadata; Owner: postgres
--

COMMENT ON TABLE md_groupmembers IS 'md_groupmembers is a table that store the relations between a group and the members that compound this group as dbiref (see md_dbiref and md_groups comments).';


--
-- Name: md_groupmembers_groupmember_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE md_groupmembers_groupmember_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE md_groupmembers_groupmember_id_seq OWNER TO postgres;

--
-- Name: md_groupmembers_groupmember_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE md_groupmembers_groupmember_id_seq OWNED BY md_groupmembers.groupmember_id;


--
-- Name: md_groups; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE md_groups (
    group_id bigint NOT NULL,
    group_name character varying(250),
    group_type character varying(250),
    group_description text,
    metadata_id bigint
);


ALTER TABLE md_groups OWNER TO postgres;

--
-- Name: TABLE md_groups; Type: COMMENT; Schema: metadata; Owner: postgres
--

COMMENT ON TABLE md_groups IS 'md_groups is a table that store data about a group identity and a group type of a group of data. These groups are composed by dbirefs (see md_dbiref comment), so can be groups of any data in the database (from sample_id to organism_names).';


--
-- Name: md_groups_group_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE md_groups_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE md_groups_group_id_seq OWNER TO postgres;

--
-- Name: md_groups_group_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE md_groups_group_id_seq OWNED BY md_groups.group_id;


--
-- Name: md_image; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE md_image (
    image_id integer NOT NULL,
    name character varying(100),
    description text,
    original_filename character varying(100),
    file_ext character varying(20),
    sp_person_id bigint,
    modified_date timestamp with time zone,
    create_date timestamp with time zone,
    obsolete boolean DEFAULT false,
    md5sum text
);


ALTER TABLE md_image OWNER TO postgres;

--
-- Name: md_image_image_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE md_image_image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE md_image_image_id_seq OWNER TO postgres;

--
-- Name: md_image_image_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE md_image_image_id_seq OWNED BY md_image.image_id;


--
-- Name: md_image_organism; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE md_image_organism (
    md_image_organism_id integer NOT NULL,
    image_id bigint NOT NULL,
    organism_id bigint NOT NULL,
    sp_person_id bigint,
    obsolete boolean DEFAULT false
);


ALTER TABLE md_image_organism OWNER TO postgres;

--
-- Name: md_image_organism_md_image_organism_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE md_image_organism_md_image_organism_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE md_image_organism_md_image_organism_id_seq OWNER TO postgres;

--
-- Name: md_image_organism_md_image_organism_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE md_image_organism_md_image_organism_id_seq OWNED BY md_image_organism.md_image_organism_id;


--
-- Name: md_metadata; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE md_metadata (
    metadata_id bigint NOT NULL,
    create_date timestamp with time zone DEFAULT now(),
    create_person_id integer NOT NULL,
    modified_date timestamp with time zone,
    modified_person_id integer,
    modification_note text,
    previous_metadata_id integer,
    obsolete integer DEFAULT 0,
    obsolete_note text,
    permission_id integer
);


ALTER TABLE md_metadata OWNER TO postgres;

--
-- Name: TABLE md_metadata; Type: COMMENT; Schema: metadata; Owner: postgres
--

COMMENT ON TABLE md_metadata IS 'md_metadata is a table that store data about who and when insert or modify some data in the database. Also it can support obsolete features. It can not support permission features yet.';


--
-- Name: md_metadata_metadata_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE md_metadata_metadata_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE md_metadata_metadata_id_seq OWNER TO postgres;

--
-- Name: md_metadata_metadata_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE md_metadata_metadata_id_seq OWNED BY md_metadata.metadata_id;


--
-- Name: md_tag; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE md_tag (
    tag_id integer NOT NULL,
    name character varying(100),
    description text,
    sp_person_id bigint,
    modified_date timestamp with time zone,
    create_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE md_tag OWNER TO postgres;

--
-- Name: md_tag_image; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE md_tag_image (
    tag_image_id integer NOT NULL,
    image_id bigint,
    tag_id bigint,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone,
    modified_date timestamp with time zone
);


ALTER TABLE md_tag_image OWNER TO postgres;

--
-- Name: md_tag_image_tag_image_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE md_tag_image_tag_image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE md_tag_image_tag_image_id_seq OWNER TO postgres;

--
-- Name: md_tag_image_tag_image_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE md_tag_image_tag_image_id_seq OWNED BY md_tag_image.tag_image_id;


--
-- Name: md_tag_tag_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE md_tag_tag_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE md_tag_tag_id_seq OWNER TO postgres;

--
-- Name: md_tag_tag_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE md_tag_tag_id_seq OWNED BY md_tag.tag_id;


SET default_with_oids = true;

--
-- Name: roles; Type: TABLE; Schema: metadata; Owner: postgres
--

CREATE TABLE roles (
    role_id bigint NOT NULL,
    role_name character varying(255),
    role_description character varying(255)
);


ALTER TABLE roles OWNER TO postgres;

--
-- Name: roles_role_id_seq; Type: SEQUENCE; Schema: metadata; Owner: postgres
--

CREATE SEQUENCE roles_role_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE roles_role_id_seq OWNER TO postgres;

--
-- Name: roles_role_id_seq; Type: SEQUENCE OWNED BY; Schema: metadata; Owner: postgres
--

ALTER SEQUENCE roles_role_id_seq OWNED BY roles.role_id;


SET search_path = pheno_population, pg_catalog;

--
-- Name: data_points; Type: TABLE; Schema: pheno_population; Owner: postgres
--

CREATE TABLE data_points (
    dp_id integer NOT NULL,
    sample_id bigint DEFAULT (0)::bigint NOT NULL,
    prop_id bigint DEFAULT (0)::bigint NOT NULL,
    source_id bigint,
    image_id bigint,
    value character varying(128)
);


ALTER TABLE data_points OWNER TO postgres;

--
-- Name: data_points_dp_id_seq; Type: SEQUENCE; Schema: pheno_population; Owner: postgres
--

CREATE SEQUENCE data_points_dp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE data_points_dp_id_seq OWNER TO postgres;

--
-- Name: data_points_dp_id_seq; Type: SEQUENCE OWNED BY; Schema: pheno_population; Owner: postgres
--

ALTER SEQUENCE data_points_dp_id_seq OWNED BY data_points.dp_id;


--
-- Name: genotypes; Type: TABLE; Schema: pheno_population; Owner: postgres
--

CREATE TABLE genotypes (
    gen_id integer NOT NULL,
    gen_name character varying(32),
    pop_id bigint,
    annotation character varying(128)
);


ALTER TABLE genotypes OWNER TO postgres;

--
-- Name: genotypes_gen_id_seq; Type: SEQUENCE; Schema: pheno_population; Owner: postgres
--

CREATE SEQUENCE genotypes_gen_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genotypes_gen_id_seq OWNER TO postgres;

--
-- Name: genotypes_gen_id_seq; Type: SEQUENCE OWNED BY; Schema: pheno_population; Owner: postgres
--

ALTER SEQUENCE genotypes_gen_id_seq OWNED BY genotypes.gen_id;


--
-- Name: images; Type: TABLE; Schema: pheno_population; Owner: postgres
--

CREATE TABLE images (
    image_id integer NOT NULL,
    filepath character varying(128),
    sample_id bigint,
    source_id bigint,
    annotation character varying(128)
);


ALTER TABLE images OWNER TO postgres;

--
-- Name: images_image_id_seq; Type: SEQUENCE; Schema: pheno_population; Owner: postgres
--

CREATE SEQUENCE images_image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE images_image_id_seq OWNER TO postgres;

--
-- Name: images_image_id_seq; Type: SEQUENCE OWNED BY; Schema: pheno_population; Owner: postgres
--

ALTER SEQUENCE images_image_id_seq OWNED BY images.image_id;


--
-- Name: locations; Type: TABLE; Schema: pheno_population; Owner: postgres
--

CREATE TABLE locations (
    loc_id integer NOT NULL,
    institution character varying(32),
    environment character varying(32),
    year bigint,
    annotation character varying(128)
);


ALTER TABLE locations OWNER TO postgres;

--
-- Name: locations_loc_id_seq; Type: SEQUENCE; Schema: pheno_population; Owner: postgres
--

CREATE SEQUENCE locations_loc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE locations_loc_id_seq OWNER TO postgres;

--
-- Name: locations_loc_id_seq; Type: SEQUENCE OWNED BY; Schema: pheno_population; Owner: postgres
--

ALTER SEQUENCE locations_loc_id_seq OWNED BY locations.loc_id;


--
-- Name: organs; Type: TABLE; Schema: pheno_population; Owner: postgres
--

CREATE TABLE organs (
    organ_id integer NOT NULL,
    organ_name character varying(32) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE organs OWNER TO postgres;

--
-- Name: organs_organ_id_seq; Type: SEQUENCE; Schema: pheno_population; Owner: postgres
--

CREATE SEQUENCE organs_organ_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE organs_organ_id_seq OWNER TO postgres;

--
-- Name: organs_organ_id_seq; Type: SEQUENCE OWNED BY; Schema: pheno_population; Owner: postgres
--

ALTER SEQUENCE organs_organ_id_seq OWNED BY organs.organ_id;


--
-- Name: plants; Type: TABLE; Schema: pheno_population; Owner: postgres
--

CREATE TABLE plants (
    plant_id integer NOT NULL,
    plant_name character varying(32),
    gen_id bigint,
    loc_id bigint
);


ALTER TABLE plants OWNER TO postgres;

--
-- Name: plants_plant_id_seq; Type: SEQUENCE; Schema: pheno_population; Owner: postgres
--

CREATE SEQUENCE plants_plant_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE plants_plant_id_seq OWNER TO postgres;

--
-- Name: plants_plant_id_seq; Type: SEQUENCE OWNED BY; Schema: pheno_population; Owner: postgres
--

ALTER SEQUENCE plants_plant_id_seq OWNED BY plants.plant_id;


--
-- Name: populations; Type: TABLE; Schema: pheno_population; Owner: postgres
--

CREATE TABLE populations (
    pop_id integer NOT NULL,
    pedigree character varying(32),
    annotation character varying(128)
);


ALTER TABLE populations OWNER TO postgres;

--
-- Name: populations_pop_id_seq; Type: SEQUENCE; Schema: pheno_population; Owner: postgres
--

CREATE SEQUENCE populations_pop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE populations_pop_id_seq OWNER TO postgres;

--
-- Name: populations_pop_id_seq; Type: SEQUENCE OWNED BY; Schema: pheno_population; Owner: postgres
--

ALTER SEQUENCE populations_pop_id_seq OWNED BY populations.pop_id;


--
-- Name: properties; Type: TABLE; Schema: pheno_population; Owner: postgres
--

CREATE TABLE properties (
    prop_id integer NOT NULL,
    prop_name character varying(64) DEFAULT ''::character varying NOT NULL,
    organ_id bigint DEFAULT (0)::bigint NOT NULL,
    unit_name character varying(16) DEFAULT ''::character varying NOT NULL,
    unit_precision bigint DEFAULT (0)::bigint NOT NULL,
    annotation character varying(200)
);


ALTER TABLE properties OWNER TO postgres;

--
-- Name: properties_prop_id_seq; Type: SEQUENCE; Schema: pheno_population; Owner: postgres
--

CREATE SEQUENCE properties_prop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE properties_prop_id_seq OWNER TO postgres;

--
-- Name: properties_prop_id_seq; Type: SEQUENCE OWNED BY; Schema: pheno_population; Owner: postgres
--

ALTER SEQUENCE properties_prop_id_seq OWNED BY properties.prop_id;


--
-- Name: samples; Type: TABLE; Schema: pheno_population; Owner: postgres
--

CREATE TABLE samples (
    sample_id integer NOT NULL,
    sample_name character varying(32),
    sample_group character varying(32),
    organ_id bigint DEFAULT (0)::bigint NOT NULL,
    plant_id bigint DEFAULT (0)::bigint NOT NULL,
    annotation character varying(128)
);


ALTER TABLE samples OWNER TO postgres;

--
-- Name: samples_sample_id_seq; Type: SEQUENCE; Schema: pheno_population; Owner: postgres
--

CREATE SEQUENCE samples_sample_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE samples_sample_id_seq OWNER TO postgres;

--
-- Name: samples_sample_id_seq; Type: SEQUENCE OWNED BY; Schema: pheno_population; Owner: postgres
--

ALTER SEQUENCE samples_sample_id_seq OWNED BY samples.sample_id;


--
-- Name: sources; Type: TABLE; Schema: pheno_population; Owner: postgres
--

CREATE TABLE sources (
    source_id integer NOT NULL,
    author character varying(32),
    location character varying(32),
    source_date character varying(32)
);


ALTER TABLE sources OWNER TO postgres;

--
-- Name: sources_source_id_seq; Type: SEQUENCE; Schema: pheno_population; Owner: postgres
--

CREATE SEQUENCE sources_source_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sources_source_id_seq OWNER TO postgres;

--
-- Name: sources_source_id_seq; Type: SEQUENCE OWNED BY; Schema: pheno_population; Owner: postgres
--

ALTER SEQUENCE sources_source_id_seq OWNED BY sources.source_id;


SET search_path = phenome, pg_catalog;

--
-- Name: allele; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE allele (
    allele_id integer NOT NULL,
    locus_id integer,
    allele_symbol character varying(32),
    allele_name character varying(255),
    mode_of_inheritance character varying(18),
    allele_synonym character varying(255)[],
    allele_phenotype text,
    allele_notes text,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    updated_by integer,
    is_default boolean DEFAULT true,
    sequence text,
    CONSTRAINT chk_allele_mode_of_inheritance CHECK ((((mode_of_inheritance)::text = 'recessive'::text) OR ((mode_of_inheritance)::text = 'partially dominant'::text) OR ((mode_of_inheritance)::text = 'dominant'::text) OR ((mode_of_inheritance)::text = ''::text)))
);


ALTER TABLE allele OWNER TO postgres;

--
-- Name: allele_alias; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE allele_alias (
    allele_alias_id integer NOT NULL,
    alias text NOT NULL,
    allele_id integer NOT NULL,
    preferred boolean,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE allele_alias OWNER TO postgres;

--
-- Name: allele_alias_allele_alias_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE allele_alias_allele_alias_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE allele_alias_allele_alias_id_seq OWNER TO postgres;

--
-- Name: allele_alias_allele_alias_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE allele_alias_allele_alias_id_seq OWNED BY allele_alias.allele_alias_id;


--
-- Name: allele_allele_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE allele_allele_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE allele_allele_id_seq OWNER TO postgres;

--
-- Name: allele_allele_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE allele_allele_id_seq OWNED BY allele.allele_id;


--
-- Name: allele_dbxref; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE allele_dbxref (
    allele_dbxref_id integer NOT NULL,
    allele_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE allele_dbxref OWNER TO postgres;

--
-- Name: allele_dbxref_allele_dbxref_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE allele_dbxref_allele_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE allele_dbxref_allele_dbxref_id_seq OWNER TO postgres;

--
-- Name: allele_dbxref_allele_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE allele_dbxref_allele_dbxref_id_seq OWNED BY allele_dbxref.allele_dbxref_id;


SET default_with_oids = false;

--
-- Name: allele_history; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE allele_history (
    allele_history_id integer NOT NULL,
    allele_id integer NOT NULL,
    locus_id integer NOT NULL,
    allele_symbol character varying(32),
    allele_name character varying(32),
    mode_of_inheritance character varying(18),
    allele_phenotype text,
    sp_person_id integer,
    updated_by integer,
    obsolete boolean DEFAULT false,
    create_date timestamp with time zone DEFAULT now(),
    sequence text,
    CONSTRAINT allele_history_mode_of_inheritance_check CHECK ((((mode_of_inheritance)::text = 'dominant'::text) OR ((mode_of_inheritance)::text = 'partially dominant'::text) OR ((mode_of_inheritance)::text = 'recessive'::text) OR ((mode_of_inheritance)::text = ''::text)))
);


ALTER TABLE allele_history OWNER TO postgres;

--
-- Name: allele_history_allele_history_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE allele_history_allele_history_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE allele_history_allele_history_id_seq OWNER TO postgres;

--
-- Name: allele_history_allele_history_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE allele_history_allele_history_id_seq OWNED BY allele_history.allele_history_id;


--
-- Name: cross_type; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE cross_type (
    cross_type_id integer NOT NULL,
    cross_type character varying NOT NULL
);


ALTER TABLE cross_type OWNER TO postgres;

--
-- Name: cross_type_cross_type_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE cross_type_cross_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cross_type_cross_type_id_seq OWNER TO postgres;

--
-- Name: cross_type_cross_type_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE cross_type_cross_type_id_seq OWNED BY cross_type.cross_type_id;


--
-- Name: cvterm_pub_ranking; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE cvterm_pub_ranking (
    cvterm_id integer,
    pub_id integer,
    rank real,
    match_type text,
    headline text
);


ALTER TABLE cvterm_pub_ranking OWNER TO postgres;

SET default_with_oids = true;

--
-- Name: dbxref_type; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE dbxref_type (
    dbxref_type_id integer NOT NULL,
    dbxref_type_name character varying(32),
    dbxref_type_definition character varying(255),
    dbxref_type_url character varying(255)
);


ALTER TABLE dbxref_type OWNER TO postgres;

--
-- Name: dbxref_type_dbxref_type_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE dbxref_type_dbxref_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dbxref_type_dbxref_type_id_seq OWNER TO postgres;

--
-- Name: dbxref_type_dbxref_type_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE dbxref_type_dbxref_type_id_seq OWNED BY dbxref_type.dbxref_type_id;


--
-- Name: genotype; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE genotype (
    genotype_id integer NOT NULL,
    individual_id bigint,
    experiment_name character varying(100),
    reference_map_id bigint,
    background_accession_id bigint,
    preferred boolean,
    sp_person_id bigint,
    modified_date timestamp with time zone,
    create_date timestamp with time zone,
    obsolete boolean DEFAULT false,
    genotype_experiment_id bigint,
    stock_id integer
);


ALTER TABLE genotype OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: genotype_experiment; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE genotype_experiment (
    genotype_experiment_id integer NOT NULL,
    experiment_name character varying(100),
    reference_map_id bigint,
    background_accession_id bigint,
    preferred boolean,
    sp_person_id bigint,
    modified_date timestamp with time zone,
    create_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE genotype_experiment OWNER TO postgres;

--
-- Name: genotype_experiment_genotype_experiment_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE genotype_experiment_genotype_experiment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genotype_experiment_genotype_experiment_id_seq OWNER TO postgres;

--
-- Name: genotype_experiment_genotype_experiment_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE genotype_experiment_genotype_experiment_id_seq OWNED BY genotype_experiment.genotype_experiment_id;


--
-- Name: genotype_genotype_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE genotype_genotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genotype_genotype_id_seq OWNER TO postgres;

--
-- Name: genotype_genotype_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE genotype_genotype_id_seq OWNED BY genotype.genotype_id;


SET default_with_oids = true;

--
-- Name: genotype_region; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE genotype_region (
    genotype_region_id integer NOT NULL,
    genotype_id integer,
    marker_id_nn bigint,
    marker_id_ns bigint NOT NULL,
    marker_id_sn bigint NOT NULL,
    marker_id_ss bigint,
    zygocity_code character varying(1),
    lg_id integer,
    type character varying(32) NOT NULL,
    name character varying(32),
    sp_person_id integer,
    modified_date timestamp with time zone DEFAULT now() NOT NULL,
    create_date timestamp with time zone DEFAULT now() NOT NULL,
    obsolete boolean DEFAULT false NOT NULL,
    CONSTRAINT genotype_region_type_check CHECK ((((type)::text = 'bin'::text) OR ((type)::text = 'map'::text) OR ((type)::text = 'inbred'::text))),
    CONSTRAINT genotype_region_zygocity_code_check CHECK ((((zygocity_code)::text = 'a'::text) OR ((zygocity_code)::text = 'b'::text) OR ((zygocity_code)::text = 'c'::text) OR ((zygocity_code)::text = 'd'::text) OR ((zygocity_code)::text = 'h'::text)))
);


ALTER TABLE genotype_region OWNER TO postgres;

--
-- Name: TABLE genotype_region; Type: COMMENT; Schema: phenome; Owner: postgres
--

COMMENT ON TABLE genotype_region IS 'polymorphic regions from a genotype, delineated by markers in a certain linkage group on a certain map';


--
-- Name: COLUMN genotype_region.genotype_id; Type: COMMENT; Schema: phenome; Owner: postgres
--

COMMENT ON COLUMN genotype_region.genotype_id IS 'optional genotype this region belongs to.  some regions are artificial, arising from combinations of other regions, and thus do not have an associated genotype';


--
-- Name: COLUMN genotype_region.marker_id_nn; Type: COMMENT; Schema: phenome; Owner: postgres
--

COMMENT ON COLUMN genotype_region.marker_id_nn IS 'the north marker in the pair of markers bracketing the north end of this region. this may be null for regions at the north end of a linkage group';


--
-- Name: COLUMN genotype_region.marker_id_ns; Type: COMMENT; Schema: phenome; Owner: postgres
--

COMMENT ON COLUMN genotype_region.marker_id_ns IS 'the south marker in the pair of markers bracketing the north end of this region';


--
-- Name: COLUMN genotype_region.marker_id_sn; Type: COMMENT; Schema: phenome; Owner: postgres
--

COMMENT ON COLUMN genotype_region.marker_id_sn IS 'the north marker in the pair of markers bracketing the south end of this region';


--
-- Name: COLUMN genotype_region.marker_id_ss; Type: COMMENT; Schema: phenome; Owner: postgres
--

COMMENT ON COLUMN genotype_region.marker_id_ss IS 'the south marker in the pair of markers bracketing the south end of this region. this may be null for regions at the south end of a linkage group.';


--
-- Name: COLUMN genotype_region.lg_id; Type: COMMENT; Schema: phenome; Owner: postgres
--

COMMENT ON COLUMN genotype_region.lg_id IS 'the linkage group in a specific version of a specific map where this region is located';


--
-- Name: COLUMN genotype_region.type; Type: COMMENT; Schema: phenome; Owner: postgres
--

COMMENT ON COLUMN genotype_region.type IS 'the type of polymorphic region this is.  map is mapping experiment data, inbred is IL lines segments, and bin is a derived region based on a boolean combination of inbred fragments.  For bin regions, the specific boolean combination of fragments that make the bin is not stored.';


--
-- Name: COLUMN genotype_region.name; Type: COMMENT; Schema: phenome; Owner: postgres
--

COMMENT ON COLUMN genotype_region.name IS 'special name for this region, if any.  optional';


--
-- Name: COLUMN genotype_region.sp_person_id; Type: COMMENT; Schema: phenome; Owner: postgres
--

COMMENT ON COLUMN genotype_region.sp_person_id IS 'the person who loaded this datum.  optional';


--
-- Name: genotype_region_genotype_region_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE genotype_region_genotype_region_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genotype_region_genotype_region_id_seq OWNER TO postgres;

--
-- Name: genotype_region_genotype_region_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE genotype_region_genotype_region_id_seq OWNED BY genotype_region.genotype_region_id;


--
-- Name: germplasm; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE germplasm (
    germplasm_id integer NOT NULL,
    germplasm_type character varying(10),
    individual_id bigint NOT NULL,
    description text,
    dbxref_id bigint,
    sp_person_id bigint,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false,
    CONSTRAINT chk_germplasm_germplasm_type CHECK ((((germplasm_type)::text = 'seed'::text) OR ((germplasm_type)::text = 'vegetative'::text)))
);


ALTER TABLE germplasm OWNER TO postgres;

--
-- Name: germplasm_germplasm_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE germplasm_germplasm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE germplasm_germplasm_id_seq OWNER TO postgres;

--
-- Name: germplasm_germplasm_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE germplasm_germplasm_id_seq OWNED BY germplasm.germplasm_id;


--
-- Name: individual; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE individual (
    individual_id integer NOT NULL,
    name character varying(100),
    description text,
    sp_person_id bigint,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false,
    population_id bigint,
    updated_by integer,
    common_name_id bigint,
    accession_id integer,
    stock_id integer
);


ALTER TABLE individual OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: individual_alias; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE individual_alias (
    individual_alias_id integer NOT NULL,
    alias text NOT NULL,
    individual_id integer NOT NULL,
    preferred boolean DEFAULT false,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE individual_alias OWNER TO postgres;

--
-- Name: individual_alias_individual_alias_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE individual_alias_individual_alias_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE individual_alias_individual_alias_id_seq OWNER TO postgres;

--
-- Name: individual_alias_individual_alias_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE individual_alias_individual_alias_id_seq OWNED BY individual_alias.individual_alias_id;


SET default_with_oids = true;

--
-- Name: individual_allele; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE individual_allele (
    individual_allele_id integer NOT NULL,
    individual_id bigint NOT NULL,
    allele_id bigint NOT NULL,
    sp_person_id bigint,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE individual_allele OWNER TO postgres;

--
-- Name: individual_allele_individual_allele_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE individual_allele_individual_allele_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE individual_allele_individual_allele_id_seq OWNER TO postgres;

--
-- Name: individual_allele_individual_allele_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE individual_allele_individual_allele_id_seq OWNED BY individual_allele.individual_allele_id;


--
-- Name: individual_dbxref; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE individual_dbxref (
    individual_dbxref_id integer NOT NULL,
    individual_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE individual_dbxref OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: individual_dbxref_evidence; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE individual_dbxref_evidence (
    individual_dbxref_evidence_id integer NOT NULL,
    individual_dbxref_id integer,
    relationship_type integer,
    evidence_code integer,
    evidence_description integer,
    evidence_with integer,
    reference_id integer,
    sp_person_id integer,
    updated_by integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE individual_dbxref_evidence OWNER TO postgres;

--
-- Name: individual_dbxref_evidence_history; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE individual_dbxref_evidence_history (
    individual_dbxref_evidence_history_id integer NOT NULL,
    individual_dbxref_evidence_id integer,
    individual_dbxref_id integer,
    relationship_type integer,
    evidence_code integer,
    evidence_description integer,
    evidence_with integer,
    reference_id integer,
    sp_person_id integer,
    updated_by integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE individual_dbxref_evidence_history OWNER TO postgres;

--
-- Name: individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq OWNER TO postgres;

--
-- Name: individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq OWNED BY individual_dbxref_evidence_history.individual_dbxref_evidence_history_id;


--
-- Name: individual_dbxref_evidence_individual_dbxref_evidence_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE individual_dbxref_evidence_individual_dbxref_evidence_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE individual_dbxref_evidence_individual_dbxref_evidence_id_seq OWNER TO postgres;

--
-- Name: individual_dbxref_evidence_individual_dbxref_evidence_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE individual_dbxref_evidence_individual_dbxref_evidence_id_seq OWNED BY individual_dbxref_evidence.individual_dbxref_evidence_id;


--
-- Name: individual_dbxref_individual_dbxref_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE individual_dbxref_individual_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE individual_dbxref_individual_dbxref_id_seq OWNER TO postgres;

--
-- Name: individual_dbxref_individual_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE individual_dbxref_individual_dbxref_id_seq OWNED BY individual_dbxref.individual_dbxref_id;


SET default_with_oids = true;

--
-- Name: individual_history; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE individual_history (
    individual_history_id integer NOT NULL,
    individual_id integer NOT NULL,
    name character varying(255),
    description text,
    population_id integer,
    sp_person_id integer,
    updated_by integer,
    obsolete boolean DEFAULT false,
    create_date timestamp with time zone DEFAULT now()
);


ALTER TABLE individual_history OWNER TO postgres;

--
-- Name: individual_history_individual_history_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE individual_history_individual_history_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE individual_history_individual_history_id_seq OWNER TO postgres;

--
-- Name: individual_history_individual_history_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE individual_history_individual_history_id_seq OWNED BY individual_history.individual_history_id;


SET default_with_oids = false;

--
-- Name: individual_image; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE individual_image (
    individual_image_id integer NOT NULL,
    image_id bigint,
    individual_id bigint,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE individual_image OWNER TO postgres;

--
-- Name: individual_image_individual_image_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE individual_image_individual_image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE individual_image_individual_image_id_seq OWNER TO postgres;

--
-- Name: individual_image_individual_image_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE individual_image_individual_image_id_seq OWNED BY individual_image.individual_image_id;


--
-- Name: individual_individual_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE individual_individual_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE individual_individual_id_seq OWNER TO postgres;

--
-- Name: individual_individual_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE individual_individual_id_seq OWNED BY individual.individual_id;


SET default_with_oids = true;

--
-- Name: individual_locus; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE individual_locus (
    individual_locus_id integer NOT NULL,
    individual_id bigint NOT NULL,
    locus_id bigint NOT NULL,
    sp_person_id bigint,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE individual_locus OWNER TO postgres;

--
-- Name: individual_locus_individual_locus_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE individual_locus_individual_locus_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE individual_locus_individual_locus_id_seq OWNER TO postgres;

--
-- Name: individual_locus_individual_locus_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE individual_locus_individual_locus_id_seq OWNED BY individual_locus.individual_locus_id;


SET default_with_oids = false;

--
-- Name: is_public; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE is_public (
    is_public_id integer NOT NULL,
    population_id integer NOT NULL,
    is_public boolean DEFAULT true,
    owner_id integer NOT NULL
);


ALTER TABLE is_public OWNER TO postgres;

--
-- Name: is_public_is_public_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE is_public_is_public_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE is_public_is_public_id_seq OWNER TO postgres;

--
-- Name: is_public_is_public_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE is_public_is_public_id_seq OWNED BY is_public.is_public_id;


SET default_with_oids = true;

--
-- Name: locus; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE locus (
    locus_id integer NOT NULL,
    locus_name character varying(255) NOT NULL,
    locus_symbol character varying(32) NOT NULL,
    original_symbol character varying(32),
    gene_activity text,
    locus_notes text,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    description text,
    linkage_group character varying(16),
    lg_arm character varying(16),
    common_name_id integer NOT NULL,
    updated_by integer,
    locus character varying(24),
    organism_id integer,
    CONSTRAINT chk_lg_arm CHECK ((((lg_arm)::text = 'short'::text) OR ((lg_arm)::text = 'long'::text) OR ((lg_arm)::text = ''::text)))
);


ALTER TABLE locus OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: locus2locus; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE locus2locus (
    locus2locus_id integer NOT NULL,
    subject_id bigint,
    object_id bigint,
    relationship_id bigint,
    evidence_id bigint,
    reference_id bigint,
    sp_person_id bigint,
    obsolete boolean DEFAULT false,
    modified_date timestamp with time zone,
    create_date timestamp with time zone DEFAULT now()
);


ALTER TABLE locus2locus OWNER TO postgres;

--
-- Name: locus2locus_locus2locus_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE locus2locus_locus2locus_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE locus2locus_locus2locus_id_seq OWNER TO postgres;

--
-- Name: locus2locus_locus2locus_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE locus2locus_locus2locus_id_seq OWNED BY locus2locus.locus2locus_id;


SET default_with_oids = true;

--
-- Name: locus_alias; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE locus_alias (
    locus_alias_id integer NOT NULL,
    alias text NOT NULL,
    locus_id integer NOT NULL,
    preferred boolean DEFAULT false,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE locus_alias OWNER TO postgres;

--
-- Name: locus_alias_locus_alias_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE locus_alias_locus_alias_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE locus_alias_locus_alias_id_seq OWNER TO postgres;

--
-- Name: locus_alias_locus_alias_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE locus_alias_locus_alias_id_seq OWNED BY locus_alias.locus_alias_id;


--
-- Name: locus_dbxref; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE locus_dbxref (
    locus_dbxref_id integer NOT NULL,
    locus_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE locus_dbxref OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: locus_dbxref_evidence; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE locus_dbxref_evidence (
    locus_dbxref_evidence_id integer NOT NULL,
    locus_dbxref_id integer,
    relationship_type_id integer,
    evidence_code_id integer,
    evidence_description_id integer,
    evidence_with integer,
    reference_id integer,
    sp_person_id integer,
    updated_by integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE locus_dbxref_evidence OWNER TO postgres;

--
-- Name: locus_dbxref_evidence_history; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE locus_dbxref_evidence_history (
    locus_dbxref_evidence_history_id integer NOT NULL,
    locus_dbxref_evidence_id integer,
    locus_dbxref_id integer,
    relationship_type integer,
    evidence_code integer,
    evidence_description integer,
    evidence_with integer,
    reference_id integer,
    sp_person_id integer,
    updated_by integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE locus_dbxref_evidence_history OWNER TO postgres;

--
-- Name: locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq OWNER TO postgres;

--
-- Name: locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq OWNED BY locus_dbxref_evidence_history.locus_dbxref_evidence_history_id;


--
-- Name: locus_dbxref_evidence_locus_dbxref_evidence_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE locus_dbxref_evidence_locus_dbxref_evidence_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE locus_dbxref_evidence_locus_dbxref_evidence_id_seq OWNER TO postgres;

--
-- Name: locus_dbxref_evidence_locus_dbxref_evidence_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE locus_dbxref_evidence_locus_dbxref_evidence_id_seq OWNED BY locus_dbxref_evidence.locus_dbxref_evidence_id;


--
-- Name: locus_dbxref_locus_dbxref_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE locus_dbxref_locus_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE locus_dbxref_locus_dbxref_id_seq OWNER TO postgres;

--
-- Name: locus_dbxref_locus_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE locus_dbxref_locus_dbxref_id_seq OWNED BY locus_dbxref.locus_dbxref_id;


SET default_with_oids = true;

--
-- Name: locus_history; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE locus_history (
    locus_history_id integer NOT NULL,
    locus_id integer NOT NULL,
    locus_name character varying(255),
    locus_symbol character varying(32),
    original_symbol character varying(32),
    gene_activity text,
    locus_description text,
    locus_notes text,
    linkage_group character varying(16),
    lg_arm character varying(16),
    sp_person_id integer,
    updated_by integer,
    obsolete boolean DEFAULT false,
    create_date timestamp with time zone DEFAULT now(),
    CONSTRAINT locus_history_lg_arm_check CHECK ((((lg_arm)::text = 'short'::text) OR ((lg_arm)::text = 'long'::text) OR ((lg_arm)::text = ''::text)))
);


ALTER TABLE locus_history OWNER TO postgres;

--
-- Name: locus_history_locus_history_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE locus_history_locus_history_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE locus_history_locus_history_id_seq OWNER TO postgres;

--
-- Name: locus_history_locus_history_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE locus_history_locus_history_id_seq OWNED BY locus_history.locus_history_id;


SET default_with_oids = false;

--
-- Name: locus_image; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE locus_image (
    locus_image_id integer NOT NULL,
    image_id bigint,
    locus_id bigint,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE locus_image OWNER TO postgres;

--
-- Name: locus_image_locus_image_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE locus_image_locus_image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE locus_image_locus_image_id_seq OWNER TO postgres;

--
-- Name: locus_image_locus_image_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE locus_image_locus_image_id_seq OWNED BY locus_image.locus_image_id;


--
-- Name: locus_locus_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE locus_locus_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE locus_locus_id_seq OWNER TO postgres;

--
-- Name: locus_locus_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE locus_locus_id_seq OWNED BY locus.locus_id;


SET default_with_oids = true;

--
-- Name: locus_marker; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE locus_marker (
    locus_marker_id integer NOT NULL,
    locus_id integer NOT NULL,
    marker_id integer NOT NULL,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE locus_marker OWNER TO postgres;

--
-- Name: locus_marker_locus_marker_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE locus_marker_locus_marker_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE locus_marker_locus_marker_id_seq OWNER TO postgres;

--
-- Name: locus_marker_locus_marker_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE locus_marker_locus_marker_id_seq OWNED BY locus_marker.locus_marker_id;


SET default_with_oids = false;

--
-- Name: locus_owner; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE locus_owner (
    locus_owner_id integer NOT NULL,
    locus_id integer NOT NULL,
    sp_person_id integer NOT NULL,
    granted_by integer,
    obsolete boolean DEFAULT false,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE locus_owner OWNER TO postgres;

--
-- Name: locus_owner_locus_owner_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE locus_owner_locus_owner_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE locus_owner_locus_owner_id_seq OWNER TO postgres;

--
-- Name: locus_owner_locus_owner_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE locus_owner_locus_owner_id_seq OWNED BY locus_owner.locus_owner_id;


--
-- Name: locus_pub_ranking; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE locus_pub_ranking (
    locus_id integer,
    pub_id integer,
    rank real,
    match_type text,
    headline text
);


ALTER TABLE locus_pub_ranking OWNER TO postgres;

--
-- Name: locus_pub_ranking_validate; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE locus_pub_ranking_validate (
    locus_id integer,
    pub_id integer,
    validate character varying(18)
);


ALTER TABLE locus_pub_ranking_validate OWNER TO postgres;

--
-- Name: locus_registry; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE locus_registry (
    locus_registry_id integer NOT NULL,
    locus_id integer,
    registry_id integer,
    sp_person_id integer NOT NULL,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE locus_registry OWNER TO postgres;

--
-- Name: locus_registry_locus_registry_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE locus_registry_locus_registry_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE locus_registry_locus_registry_id_seq OWNER TO postgres;

--
-- Name: locus_registry_locus_registry_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE locus_registry_locus_registry_id_seq OWNED BY locus_registry.locus_registry_id;


SET default_with_oids = true;

--
-- Name: locus_unigene; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE locus_unigene (
    locus_unigene_id integer NOT NULL,
    locus_id integer NOT NULL,
    unigene_id integer NOT NULL,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE locus_unigene OWNER TO postgres;

--
-- Name: locus_unigene_locus_unigene_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE locus_unigene_locus_unigene_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE locus_unigene_locus_unigene_id_seq OWNER TO postgres;

--
-- Name: locus_unigene_locus_unigene_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE locus_unigene_locus_unigene_id_seq OWNED BY locus_unigene.locus_unigene_id;


SET default_with_oids = false;

--
-- Name: locusgroup; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE locusgroup (
    locusgroup_id integer NOT NULL,
    locusgroup_name character varying(255),
    relationship_id integer,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE locusgroup OWNER TO postgres;

--
-- Name: locusgroup_locusgroup_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE locusgroup_locusgroup_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE locusgroup_locusgroup_id_seq OWNER TO postgres;

--
-- Name: locusgroup_locusgroup_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE locusgroup_locusgroup_id_seq OWNED BY locusgroup.locusgroup_id;


--
-- Name: locusgroup_member; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE locusgroup_member (
    locusgroup_member_id integer NOT NULL,
    locusgroup_id integer,
    locus_id integer,
    direction character varying(16),
    evidence_id integer,
    reference_id integer,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    obsolete boolean DEFAULT false,
    CONSTRAINT locusgroup_member_direction_check CHECK ((((direction)::text = 'subject'::text) OR ((direction)::text = 'object'::text) OR ((direction)::text = ''::text)))
);


ALTER TABLE locusgroup_member OWNER TO postgres;

--
-- Name: locusgroup_member_locusgroup_member_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE locusgroup_member_locusgroup_member_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE locusgroup_member_locusgroup_member_id_seq OWNER TO postgres;

--
-- Name: locusgroup_member_locusgroup_member_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE locusgroup_member_locusgroup_member_id_seq OWNED BY locusgroup_member.locusgroup_member_id;


--
-- Name: nd_experiment_md_files; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE nd_experiment_md_files (
    nd_experiment_md_files_id integer NOT NULL,
    nd_experiment_id bigint,
    file_id bigint
);


ALTER TABLE nd_experiment_md_files OWNER TO postgres;

--
-- Name: nd_experiment_md_files_nd_experiment_md_files_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE nd_experiment_md_files_nd_experiment_md_files_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nd_experiment_md_files_nd_experiment_md_files_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_md_files_nd_experiment_md_files_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE nd_experiment_md_files_nd_experiment_md_files_id_seq OWNED BY nd_experiment_md_files.nd_experiment_md_files_id;


--
-- Name: phenotype_user_trait; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE phenotype_user_trait (
    phenotype_user_trait_id integer NOT NULL,
    user_trait_id integer NOT NULL,
    phenotype_id integer NOT NULL
);


ALTER TABLE phenotype_user_trait OWNER TO postgres;

--
-- Name: phenotype_user_trait_phenotype_user_trait_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE phenotype_user_trait_phenotype_user_trait_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenotype_user_trait_phenotype_user_trait_id_seq OWNER TO postgres;

--
-- Name: phenotype_user_trait_phenotype_user_trait_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE phenotype_user_trait_phenotype_user_trait_id_seq OWNED BY phenotype_user_trait.phenotype_user_trait_id;


SET default_with_oids = true;

--
-- Name: polymorphic_fragment; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE polymorphic_fragment (
    polymorphic_fragment_id integer NOT NULL,
    genotype_id bigint,
    flanking_marker1_id bigint,
    flanking_marker2_id bigint,
    zygocity character varying(15),
    linkage_group text,
    type text,
    sp_person_id bigint,
    modified_date timestamp with time zone,
    create_date timestamp with time zone,
    obsolete boolean DEFAULT false
);


ALTER TABLE polymorphic_fragment OWNER TO postgres;

--
-- Name: polymorphic_fragment_polymorphic_fragment_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE polymorphic_fragment_polymorphic_fragment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE polymorphic_fragment_polymorphic_fragment_id_seq OWNER TO postgres;

--
-- Name: polymorphic_fragment_polymorphic_fragment_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE polymorphic_fragment_polymorphic_fragment_id_seq OWNED BY polymorphic_fragment.polymorphic_fragment_id;


--
-- Name: population; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE population (
    population_id integer NOT NULL,
    name character varying(100),
    description text,
    person_id integer,
    sp_person_id bigint,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    background_accession_id bigint,
    obsolete boolean DEFAULT false,
    cross_type_id integer,
    female_parent_id integer,
    male_parent_id integer,
    recurrent_parent_id integer,
    donor_parent_id integer,
    comment text,
    web_uploaded boolean,
    common_name_id integer,
    stock_id integer
);


ALTER TABLE population OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: population_dbxref; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE population_dbxref (
    population_dbxref_id integer NOT NULL,
    population_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    obsolete boolean DEFAULT false,
    sp_person_id integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone
);


ALTER TABLE population_dbxref OWNER TO postgres;

--
-- Name: population_dbxref_population_dbxref_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE population_dbxref_population_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE population_dbxref_population_dbxref_id_seq OWNER TO postgres;

--
-- Name: population_dbxref_population_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE population_dbxref_population_dbxref_id_seq OWNED BY population_dbxref.population_dbxref_id;


--
-- Name: population_population_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE population_population_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE population_population_id_seq OWNER TO postgres;

--
-- Name: population_population_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE population_population_id_seq OWNED BY population.population_id;


--
-- Name: pub_curator; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE pub_curator (
    pub_curator_id integer NOT NULL,
    pub_id integer,
    sp_person_id integer,
    status character varying(32),
    date_stored timestamp with time zone DEFAULT now(),
    date_curated timestamp with time zone,
    curated_by integer,
    assigned_to integer
);


ALTER TABLE pub_curator OWNER TO postgres;

--
-- Name: pub_curator_pub_curator_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE pub_curator_pub_curator_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pub_curator_pub_curator_id_seq OWNER TO postgres;

--
-- Name: pub_curator_pub_curator_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE pub_curator_pub_curator_id_seq OWNED BY pub_curator.pub_curator_id;


--
-- Name: registry; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE registry (
    registry_id integer NOT NULL,
    symbol character varying(32) NOT NULL,
    name character varying(255) NOT NULL,
    description text NOT NULL,
    origin character varying(32),
    sp_person_id integer NOT NULL,
    updated_by integer,
    create_date timestamp with time zone DEFAULT now(),
    modified_date timestamp with time zone,
    status character varying(32),
    CONSTRAINT registry_status_check CHECK ((((status)::text = 'registered'::text) OR ((status)::text = 'active'::text) OR ((status)::text = 'inactive'::text) OR ((status)::text = 'deleted'::text) OR ((status)::text = 'obsolete'::text)))
);


ALTER TABLE registry OWNER TO postgres;

--
-- Name: registry_registry_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE registry_registry_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE registry_registry_id_seq OWNER TO postgres;

--
-- Name: registry_registry_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE registry_registry_id_seq OWNED BY registry.registry_id;


--
-- Name: stock_allele; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE stock_allele (
    stock_allele_id integer NOT NULL,
    stock_id integer NOT NULL,
    allele_id integer NOT NULL,
    metadata_id integer
);


ALTER TABLE stock_allele OWNER TO postgres;

--
-- Name: stock_allele_stock_allele_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE stock_allele_stock_allele_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stock_allele_stock_allele_id_seq OWNER TO postgres;

--
-- Name: stock_allele_stock_allele_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE stock_allele_stock_allele_id_seq OWNED BY stock_allele.stock_allele_id;


--
-- Name: stock_image; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE stock_image (
    stock_image_id integer NOT NULL,
    stock_id integer NOT NULL,
    image_id integer NOT NULL,
    metadata_id integer
);


ALTER TABLE stock_image OWNER TO postgres;

--
-- Name: stock_image_stock_image_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE stock_image_stock_image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stock_image_stock_image_id_seq OWNER TO postgres;

--
-- Name: stock_image_stock_image_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE stock_image_stock_image_id_seq OWNED BY stock_image.stock_image_id;


--
-- Name: stock_owner; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE stock_owner (
    stock_owner_id integer NOT NULL,
    stock_id integer NOT NULL,
    sp_person_id integer NOT NULL,
    metadata_id integer
);


ALTER TABLE stock_owner OWNER TO postgres;

--
-- Name: stock_owner_stock_owner_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE stock_owner_stock_owner_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stock_owner_stock_owner_id_seq OWNER TO postgres;

--
-- Name: stock_owner_stock_owner_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE stock_owner_stock_owner_id_seq OWNED BY stock_owner.stock_owner_id;


SET default_with_oids = true;

--
-- Name: tomato_il_bin; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE tomato_il_bin (
    il_bin_id integer NOT NULL,
    chromosome integer NOT NULL,
    name character varying(32) NOT NULL,
    n_marker_n integer,
    n_marker_s integer,
    s_marker_n integer,
    s_marker_s integer,
    CONSTRAINT tomato_il_bin_chromosome_check CHECK (((chromosome >= 1) AND (chromosome <= 12)))
);


ALTER TABLE tomato_il_bin OWNER TO postgres;

--
-- Name: tomato_il_bin_il_bin_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE tomato_il_bin_il_bin_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tomato_il_bin_il_bin_id_seq OWNER TO postgres;

--
-- Name: tomato_il_bin_il_bin_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE tomato_il_bin_il_bin_id_seq OWNED BY tomato_il_bin.il_bin_id;


--
-- Name: tomato_term; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE tomato_term (
    tomato_term_id integer NOT NULL,
    tomato_term_name character varying(255) DEFAULT ''::character varying NOT NULL,
    tomato_term_type character varying(55) DEFAULT ''::character varying NOT NULL,
    tomato_term_acc character varying(255) DEFAULT ''::character varying NOT NULL,
    is_obsolete bigint DEFAULT (0)::bigint NOT NULL,
    is_root bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE tomato_term OWNER TO postgres;

--
-- Name: tomato_term2term; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE tomato_term2term (
    tomato_term2term_id integer NOT NULL,
    relationship_type_id bigint DEFAULT (0)::bigint NOT NULL,
    term1_id bigint DEFAULT (0)::bigint NOT NULL,
    term2_id bigint DEFAULT (0)::bigint NOT NULL,
    complete bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE tomato_term2term OWNER TO postgres;

--
-- Name: tomato_term2term_tomato_term2term_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE tomato_term2term_tomato_term2term_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tomato_term2term_tomato_term2term_id_seq OWNER TO postgres;

--
-- Name: tomato_term2term_tomato_term2term_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE tomato_term2term_tomato_term2term_id_seq OWNED BY tomato_term2term.tomato_term2term_id;


--
-- Name: tomato_term_tomato_term_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE tomato_term_tomato_term_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tomato_term_tomato_term_id_seq OWNER TO postgres;

--
-- Name: tomato_term_tomato_term_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE tomato_term_tomato_term_id_seq OWNED BY tomato_term.tomato_term_id;


SET default_with_oids = false;

--
-- Name: unit; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE unit (
    unit_id integer NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE unit OWNER TO postgres;

--
-- Name: unit_unit_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE unit_unit_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE unit_unit_id_seq OWNER TO postgres;

--
-- Name: unit_unit_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE unit_unit_id_seq OWNED BY unit.unit_id;


--
-- Name: user_trait; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE user_trait (
    user_trait_id integer NOT NULL,
    cv_id integer,
    name character varying NOT NULL,
    definition text,
    dbxref_id integer,
    sp_person_id integer
);


ALTER TABLE user_trait OWNER TO postgres;

--
-- Name: user_trait_unit; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE user_trait_unit (
    user_trait_unit_id integer NOT NULL,
    user_trait_id integer NOT NULL,
    unit_id integer,
    population_id integer NOT NULL
);


ALTER TABLE user_trait_unit OWNER TO postgres;

--
-- Name: user_trait_unit_user_trait_unit_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE user_trait_unit_user_trait_unit_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE user_trait_unit_user_trait_unit_id_seq OWNER TO postgres;

--
-- Name: user_trait_unit_user_trait_unit_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE user_trait_unit_user_trait_unit_id_seq OWNED BY user_trait_unit.user_trait_unit_id;


--
-- Name: user_trait_user_trait_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE user_trait_user_trait_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE user_trait_user_trait_id_seq OWNER TO postgres;

--
-- Name: user_trait_user_trait_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE user_trait_user_trait_id_seq OWNED BY user_trait.user_trait_id;


SET default_with_oids = true;

--
-- Name: variant; Type: TABLE; Schema: phenome; Owner: postgres
--

CREATE TABLE variant (
    variant_id integer NOT NULL,
    locus_id integer NOT NULL,
    variant_name character varying(255),
    variant_gi integer,
    variant_notes text
);


ALTER TABLE variant OWNER TO postgres;

--
-- Name: variant_variant_id_seq; Type: SEQUENCE; Schema: phenome; Owner: postgres
--

CREATE SEQUENCE variant_variant_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE variant_variant_id_seq OWNER TO postgres;

--
-- Name: variant_variant_id_seq; Type: SEQUENCE OWNED BY; Schema: phenome; Owner: postgres
--

ALTER SEQUENCE variant_variant_id_seq OWNED BY variant.variant_id;


SET search_path = physical, pg_catalog;

--
-- Name: ba_plausibility; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE ba_plausibility (
    bap_id bigint NOT NULL,
    bac_assoc_id bigint,
    map_id bigint,
    plausible smallint DEFAULT (0)::smallint NOT NULL
);


ALTER TABLE ba_plausibility OWNER TO postgres;

--
-- Name: ba_plausibility_bap_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE ba_plausibility_bap_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ba_plausibility_bap_id_seq OWNER TO postgres;

--
-- Name: ba_plausibility_bap_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE ba_plausibility_bap_id_seq OWNED BY ba_plausibility.bap_id;


--
-- Name: bac_associations; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE bac_associations (
    bac_assoc_id integer NOT NULL,
    bac_id bigint DEFAULT (0)::bigint NOT NULL,
    bac_contig_id bigint DEFAULT (0)::bigint NOT NULL,
    plausible smallint DEFAULT (0)::smallint NOT NULL
);


ALTER TABLE bac_associations OWNER TO postgres;

--
-- Name: bac_associations_bac_assoc_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE bac_associations_bac_assoc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bac_associations_bac_assoc_id_seq OWNER TO postgres;

--
-- Name: bac_associations_bac_assoc_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE bac_associations_bac_assoc_id_seq OWNED BY bac_associations.bac_assoc_id;


--
-- Name: bac_consensus_sequences; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE bac_consensus_sequences (
    consensus_seq_id integer NOT NULL,
    fasta_sequence text NOT NULL,
    bac_id bigint DEFAULT (0)::bigint NOT NULL,
    tracefile character varying(64) DEFAULT ''::character varying NOT NULL,
    consensus_seq_name character varying(32),
    length bigint DEFAULT (0)::bigint NOT NULL,
    includes_sp6_end smallint,
    includes_t7_end smallint
);


ALTER TABLE bac_consensus_sequences OWNER TO postgres;

--
-- Name: bac_consensus_sequences_consensus_seq_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE bac_consensus_sequences_consensus_seq_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bac_consensus_sequences_consensus_seq_id_seq OWNER TO postgres;

--
-- Name: bac_consensus_sequences_consensus_seq_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE bac_consensus_sequences_consensus_seq_id_seq OWNED BY bac_consensus_sequences.consensus_seq_id;


--
-- Name: bac_contigs; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE bac_contigs (
    bac_contig_id integer NOT NULL,
    contig_name character varying(16) DEFAULT ''::character varying NOT NULL,
    fpc_version bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE bac_contigs OWNER TO postgres;

--
-- Name: bac_contigs_bac_contig_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE bac_contigs_bac_contig_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bac_contigs_bac_contig_id_seq OWNER TO postgres;

--
-- Name: bac_contigs_bac_contig_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE bac_contigs_bac_contig_id_seq OWNED BY bac_contigs.bac_contig_id;


--
-- Name: bac_end_sequences; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE bac_end_sequences (
    end_seq_id integer NOT NULL,
    end_id smallint DEFAULT (0)::smallint NOT NULL,
    fasta_sequence text NOT NULL,
    tracefile character varying(64) DEFAULT ''::character varying NOT NULL,
    length bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE bac_end_sequences OWNER TO postgres;

--
-- Name: bac_end_sequences_end_seq_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE bac_end_sequences_end_seq_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bac_end_sequences_end_seq_id_seq OWNER TO postgres;

--
-- Name: bac_end_sequences_end_seq_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE bac_end_sequences_end_seq_id_seq OWNED BY bac_end_sequences.end_seq_id;


--
-- Name: bac_marker_matches; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE bac_marker_matches (
    marker_id integer,
    alias text,
    confidence_id integer,
    lg_id integer,
    lg_name text,
    lg_order integer,
    "position" numeric(8,5),
    bac_id integer,
    arizona_clone_name character varying(32),
    cornell_clone_name character varying(16),
    estimated_length bigint,
    number_of_bacs bigint,
    contig_name character varying(16),
    fpc_version bigint,
    association_type text,
    CONSTRAINT bac_marker_matches_association_type_check CHECK (((association_type = 'computational'::text) OR (association_type = 'overgo'::text) OR (association_type = 'manual'::text)))
);


ALTER TABLE bac_marker_matches OWNER TO postgres;

--
-- Name: bacs; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE bacs (
    bac_id integer NOT NULL,
    cornell_clone_name character varying(16) DEFAULT ''::character varying NOT NULL,
    arizona_clone_name character varying(32) DEFAULT ''::character varying NOT NULL,
    species_id bigint DEFAULT (0)::bigint NOT NULL,
    sp6_end_seq_id bigint,
    t7_end_seq_id bigint,
    genbank_accession character varying(32),
    bad_clone smallint DEFAULT (0)::smallint NOT NULL,
    estimated_length bigint,
    library_id integer
);


ALTER TABLE bacs OWNER TO postgres;

--
-- Name: bacs_bac_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE bacs_bac_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bacs_bac_id_seq OWNER TO postgres;

--
-- Name: bacs_bac_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE bacs_bac_id_seq OWNED BY bacs.bac_id;


--
-- Name: computational_associations; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE computational_associations (
    computational_assoc_id integer NOT NULL,
    marker_id integer NOT NULL,
    clone_id integer NOT NULL,
    e_value double precision,
    q_start bigint,
    q_end bigint,
    s_start bigint,
    s_end bigint,
    identity double precision,
    score double precision,
    parameters text
);


ALTER TABLE computational_associations OWNER TO postgres;

--
-- Name: computational_associations_computational_assoc_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE computational_associations_computational_assoc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE computational_associations_computational_assoc_id_seq OWNER TO postgres;

--
-- Name: computational_associations_computational_assoc_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE computational_associations_computational_assoc_id_seq OWNED BY computational_associations.computational_assoc_id;


--
-- Name: contig_sizes; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE contig_sizes (
    contig_size_id bigint NOT NULL,
    bac_contig_id bigint,
    contig_size double precision
);


ALTER TABLE contig_sizes OWNER TO postgres;

--
-- Name: contig_sizes_contig_size_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE contig_sizes_contig_size_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE contig_sizes_contig_size_id_seq OWNER TO postgres;

--
-- Name: contig_sizes_contig_size_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE contig_sizes_contig_size_id_seq OWNED BY contig_sizes.contig_size_id;


--
-- Name: deprecated_probes; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE deprecated_probes (
    dp_id integer NOT NULL,
    overgo_version bigint,
    overgo_probe_id bigint
);


ALTER TABLE deprecated_probes OWNER TO postgres;

--
-- Name: deprecated_probes_dp_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE deprecated_probes_dp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deprecated_probes_dp_id_seq OWNER TO postgres;

--
-- Name: deprecated_probes_dp_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE deprecated_probes_dp_id_seq OWNED BY deprecated_probes.dp_id;


--
-- Name: fpc_data; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE fpc_data (
    fpc_datum_id integer NOT NULL,
    bac_id bigint DEFAULT (0)::bigint NOT NULL,
    bac_name character varying(32) DEFAULT ''::character varying NOT NULL,
    gel_number character varying(16),
    map_ctg_left character varying(16),
    map_ctg_right character varying(16),
    map_ends_left double precision,
    map_ends_right double precision,
    creation_date date,
    modification_date date,
    bac_contig_id_left integer,
    bac_contig_id_right integer
);


ALTER TABLE fpc_data OWNER TO postgres;

--
-- Name: fpc_data_fpc_datum_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE fpc_data_fpc_datum_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE fpc_data_fpc_datum_id_seq OWNER TO postgres;

--
-- Name: fpc_data_fpc_datum_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE fpc_data_fpc_datum_id_seq OWNED BY fpc_data.fpc_datum_id;


--
-- Name: fpc_version; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE fpc_version (
    fpc_version integer NOT NULL,
    updated_on date DEFAULT ('now'::text)::date NOT NULL,
    updated_by bigint DEFAULT (0)::bigint NOT NULL,
    fpcfile character varying(32),
    current smallint,
    comments text
);


ALTER TABLE fpc_version OWNER TO postgres;

--
-- Name: fpc_version_fpc_version_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE fpc_version_fpc_version_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE fpc_version_fpc_version_seq OWNER TO postgres;

--
-- Name: fpc_version_fpc_version_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE fpc_version_fpc_version_seq OWNED BY fpc_version.fpc_version;


--
-- Name: manual_associations; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE manual_associations (
    manual_assoc_id integer NOT NULL,
    marker_id integer NOT NULL,
    clone_id integer NOT NULL,
    pubmed_id integer,
    sp_person_id integer,
    comment text
);


ALTER TABLE manual_associations OWNER TO postgres;

--
-- Name: manual_associations_manual_assoc_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE manual_associations_manual_assoc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE manual_associations_manual_assoc_id_seq OWNER TO postgres;

--
-- Name: manual_associations_manual_assoc_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE manual_associations_manual_assoc_id_seq OWNED BY manual_associations.manual_assoc_id;


--
-- Name: oa_plausibility; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE oa_plausibility (
    oap_id bigint NOT NULL,
    overgo_assoc_id bigint,
    map_id bigint,
    plausible smallint DEFAULT (0)::smallint NOT NULL
);


ALTER TABLE oa_plausibility OWNER TO postgres;

--
-- Name: oa_plausibility_oap_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE oa_plausibility_oap_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE oa_plausibility_oap_id_seq OWNER TO postgres;

--
-- Name: oa_plausibility_oap_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE oa_plausibility_oap_id_seq OWNED BY oa_plausibility.oap_id;


--
-- Name: overgo_associations; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE overgo_associations (
    overgo_assoc_id integer NOT NULL,
    overgo_version bigint,
    overgo_probe_id bigint,
    bac_id bigint,
    plausible smallint DEFAULT (0)::smallint NOT NULL
);


ALTER TABLE overgo_associations OWNER TO postgres;

--
-- Name: overgo_associations_overgo_assoc_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE overgo_associations_overgo_assoc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE overgo_associations_overgo_assoc_id_seq OWNER TO postgres;

--
-- Name: overgo_associations_overgo_assoc_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE overgo_associations_overgo_assoc_id_seq OWNED BY overgo_associations.overgo_assoc_id;


--
-- Name: overgo_plates; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE overgo_plates (
    plate_id integer NOT NULL,
    plate_number bigint DEFAULT (0)::bigint NOT NULL,
    row_max character varying(4) DEFAULT ''::character varying NOT NULL,
    col_max bigint DEFAULT (0)::bigint NOT NULL,
    plate_size bigint,
    empty_wells bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE overgo_plates OWNER TO postgres;

--
-- Name: overgo_plates_plate_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE overgo_plates_plate_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE overgo_plates_plate_id_seq OWNER TO postgres;

--
-- Name: overgo_plates_plate_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE overgo_plates_plate_id_seq OWNED BY overgo_plates.plate_id;


--
-- Name: overgo_results; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE overgo_results (
    result_id integer NOT NULL,
    overgo_plate_id bigint,
    overgo_pool character(2),
    bac_id bigint
);


ALTER TABLE overgo_results OWNER TO postgres;

--
-- Name: overgo_results_result_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE overgo_results_result_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE overgo_results_result_id_seq OWNER TO postgres;

--
-- Name: overgo_results_result_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE overgo_results_result_id_seq OWNED BY overgo_results.result_id;


--
-- Name: overgo_version; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE overgo_version (
    overgo_version integer NOT NULL,
    updated_on timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
    updated_by bigint,
    current smallint,
    comments text
);


ALTER TABLE overgo_version OWNER TO postgres;

--
-- Name: overgo_version_overgo_version_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE overgo_version_overgo_version_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE overgo_version_overgo_version_seq OWNER TO postgres;

--
-- Name: overgo_version_overgo_version_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE overgo_version_overgo_version_seq OWNED BY overgo_version.overgo_version;


--
-- Name: plausible_bacs_in_all_contigs; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE plausible_bacs_in_all_contigs (
    overgo_assoc_id integer,
    overgo_version bigint,
    overgo_probe_id bigint,
    bac_id bigint,
    overgo_plausible smallint,
    overgo_map bigint,
    bac_assoc_id integer,
    bac_contig_id integer,
    contig_name character varying(16),
    fpc_version bigint,
    bac_plausible smallint,
    bac_map bigint
);


ALTER TABLE plausible_bacs_in_all_contigs OWNER TO postgres;

--
-- Name: probe_markers; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE probe_markers (
    overgo_probe_id integer NOT NULL,
    overgo_plate_id bigint,
    overgo_plate_row character varying(4),
    overgo_plate_col bigint,
    marker_id bigint,
    overgo_seq_a character varying(30),
    overgo_seq_b character varying(30),
    overgo_seq_ab character varying(30),
    marker_seq text
);


ALTER TABLE probe_markers OWNER TO postgres;

--
-- Name: probe_markers_overgo_probe_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE probe_markers_overgo_probe_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE probe_markers_overgo_probe_id_seq OWNER TO postgres;

--
-- Name: probe_markers_overgo_probe_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE probe_markers_overgo_probe_id_seq OWNED BY probe_markers.overgo_probe_id;


--
-- Name: species; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE species (
    species_id integer NOT NULL,
    short_name character varying(32),
    long_name character varying(64)
);


ALTER TABLE species OWNER TO postgres;

--
-- Name: species_species_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE species_species_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE species_species_id_seq OWNER TO postgres;

--
-- Name: species_species_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE species_species_id_seq OWNED BY species.species_id;


--
-- Name: tentative_association_conflict_groups; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE tentative_association_conflict_groups (
    tacg_id integer NOT NULL,
    conflict_group_id bigint,
    tentative_assoc_id bigint
);


ALTER TABLE tentative_association_conflict_groups OWNER TO postgres;

--
-- Name: tentative_association_conflict_groups_tacg_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE tentative_association_conflict_groups_tacg_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tentative_association_conflict_groups_tacg_id_seq OWNER TO postgres;

--
-- Name: tentative_association_conflict_groups_tacg_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE tentative_association_conflict_groups_tacg_id_seq OWNED BY tentative_association_conflict_groups.tacg_id;


--
-- Name: tentative_overgo_associations; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE tentative_overgo_associations (
    tentative_assoc_id integer NOT NULL,
    overgo_version bigint,
    overgo_probe_id bigint,
    bac_id bigint
);


ALTER TABLE tentative_overgo_associations OWNER TO postgres;

--
-- Name: tentative_overgo_associations_tentative_assoc_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE tentative_overgo_associations_tentative_assoc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tentative_overgo_associations_tentative_assoc_id_seq OWNER TO postgres;

--
-- Name: tentative_overgo_associations_tentative_assoc_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE tentative_overgo_associations_tentative_assoc_id_seq OWNED BY tentative_overgo_associations.tentative_assoc_id;


--
-- Name: users; Type: TABLE; Schema: physical; Owner: postgres
--

CREATE TABLE users (
    user_id integer NOT NULL,
    full_name character varying(64) DEFAULT ''::character varying NOT NULL,
    net_id character varying(16) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE users OWNER TO postgres;

--
-- Name: users_user_id_seq; Type: SEQUENCE; Schema: physical; Owner: postgres
--

CREATE SEQUENCE users_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE users_user_id_seq OWNER TO postgres;

--
-- Name: users_user_id_seq; Type: SEQUENCE OWNED BY; Schema: physical; Owner: postgres
--

ALTER SEQUENCE users_user_id_seq OWNED BY users.user_id;


SET search_path = public, pg_catalog;

SET default_with_oids = false;

--
-- Name: stock; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE stock (
    stock_id integer NOT NULL,
    dbxref_id integer,
    organism_id integer,
    name character varying(255),
    uniquename text NOT NULL,
    description text,
    type_id integer NOT NULL,
    is_obsolete boolean DEFAULT false NOT NULL
);


ALTER TABLE stock OWNER TO postgres;

--
-- Name: TABLE stock; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stock IS 'Any stock can be globally identified by the
combination of organism, uniquename and stock type. A stock is the physical entities, either living or preserved, held by collections. Stocks belong to a collection; they have IDs, type, organism, description and may have a genotype.';


--
-- Name: COLUMN stock.dbxref_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock.dbxref_id IS 'The dbxref_id is an optional primary stable identifier for this stock. Secondary indentifiers and external dbxrefs go in table: stock_dbxref.';


--
-- Name: COLUMN stock.organism_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock.organism_id IS 'The organism_id is the organism to which the stock belongs. This column should only be left blank if the organism cannot be determined.';


--
-- Name: COLUMN stock.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock.name IS 'The name is a human-readable local name for a stock.';


--
-- Name: COLUMN stock.description; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock.description IS 'The description is the genetic description provided in the stock list.';


--
-- Name: COLUMN stock.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock.type_id IS 'The type_id foreign key links to a controlled vocabulary of stock types. The would include living stock, genomic DNA, preserved specimen. Secondary cvterms for stocks would go in stock_cvterm.';


--
-- Name: accessions; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW accessions AS
 SELECT stock.stock_id AS accession_id,
    stock.uniquename AS accession_name
   FROM stock
  WHERE (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM cvterm
          WHERE ((cvterm.name)::text = 'accession'::text)))
  GROUP BY stock.stock_id, stock.uniquename
  WITH NO DATA;


ALTER TABLE accessions OWNER TO web_usr;

SET default_with_oids = true;

--
-- Name: cv; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE cv (
    cv_id integer NOT NULL,
    name character varying(255) NOT NULL,
    definition text
);


ALTER TABLE cv OWNER TO postgres;

--
-- Name: TABLE cv; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE cv IS 'A controlled vocabulary or ontology. A cv is
composed of cvterms (aka terms, classes, types, universals - relations
and properties are also stored in cvterm)) and the relationships
between them';


--
-- Name: COLUMN cv.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cv.name IS 'The name of the ontology. This
corresponds to the obo-format -namespace-. cv names uniquely identify
the cv. In obo file format, the cv.name is known as the namespace';


--
-- Name: COLUMN cv.definition; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cv.definition IS 'A text description of the criteria for
membership of this ontology';


SET default_with_oids = false;

--
-- Name: nd_experiment; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE nd_experiment (
    nd_experiment_id integer NOT NULL,
    nd_geolocation_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE nd_experiment OWNER TO postgres;

--
-- Name: nd_experiment_phenotype; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE nd_experiment_phenotype (
    nd_experiment_phenotype_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    phenotype_id integer NOT NULL
);


ALTER TABLE nd_experiment_phenotype OWNER TO postgres;

--
-- Name: TABLE nd_experiment_phenotype; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_experiment_phenotype IS 'Linking table: experiments to the phenotypes they produce. There is a one-to-one relationship between an experiment and a phenotype since each phenotype record should point to one experiment. Add a new experiment_id for each phenotype record.';


--
-- Name: nd_experiment_project; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE nd_experiment_project (
    nd_experiment_project_id integer NOT NULL,
    project_id integer NOT NULL,
    nd_experiment_id integer NOT NULL
);


ALTER TABLE nd_experiment_project OWNER TO postgres;

--
-- Name: nd_experiment_stock; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE nd_experiment_stock (
    nd_experiment_stock_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    stock_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE nd_experiment_stock OWNER TO postgres;

--
-- Name: TABLE nd_experiment_stock; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_experiment_stock IS 'Part of a stock or a clone of a stock that is used in an experiment';


--
-- Name: COLUMN nd_experiment_stock.stock_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_experiment_stock.stock_id IS 'stock used in the extraction or the corresponding stock for the clone';


--
-- Name: nd_geolocation; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE nd_geolocation (
    nd_geolocation_id integer NOT NULL,
    description character varying(255),
    latitude real,
    longitude real,
    geodetic_datum character varying(32),
    altitude real
);


ALTER TABLE nd_geolocation OWNER TO postgres;

--
-- Name: TABLE nd_geolocation; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_geolocation IS 'The geo-referencable location of the stock. NOTE: This entity is subject to change as a more general and possibly more OpenGIS-compliant geolocation module may be introduced into Chado.';


--
-- Name: COLUMN nd_geolocation.description; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_geolocation.description IS 'A textual representation of the location, if this is the original georeference. Optional if the original georeference is available in lat/long coordinates.';


--
-- Name: COLUMN nd_geolocation.latitude; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_geolocation.latitude IS 'The decimal latitude coordinate of the georeference, using positive and negative sign to indicate N and S, respectively.';


--
-- Name: COLUMN nd_geolocation.longitude; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_geolocation.longitude IS 'The decimal longitude coordinate of the georeference, using positive and negative sign to indicate E and W, respectively.';


--
-- Name: COLUMN nd_geolocation.geodetic_datum; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_geolocation.geodetic_datum IS 'The geodetic system on which the geo-reference coordinates are based. For geo-references measured between 1984 and 2010, this will typically be WGS84.';


--
-- Name: COLUMN nd_geolocation.altitude; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_geolocation.altitude IS 'The altitude (elevation) of the location in meters. If the altitude is only known as a range, this is the average, and altitude_dev will hold half of the width of the range.';


--
-- Name: phenotype; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE phenotype (
    phenotype_id integer NOT NULL,
    uniquename text NOT NULL,
    observable_id integer,
    attr_id integer,
    value character varying,
    cvalue_id integer,
    assay_id integer,
    individual_id integer,
    sp_person_id integer,
    name text
);


ALTER TABLE phenotype OWNER TO postgres;

SET default_with_oids = true;

--
-- Name: project; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE project (
    project_id integer NOT NULL,
    name character varying(255) NOT NULL,
    description character varying(255) NOT NULL
);


ALTER TABLE project OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: project_relationship; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE project_relationship (
    project_relationship_id integer NOT NULL,
    subject_project_id integer NOT NULL,
    object_project_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE project_relationship OWNER TO postgres;

--
-- Name: TABLE project_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE project_relationship IS 'A project can be composed of several smaller scale projects';


--
-- Name: COLUMN project_relationship.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN project_relationship.type_id IS 'The type of relationship being stated, such as "is part of".';


--
-- Name: projectprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE projectprop (
    projectprop_id integer NOT NULL,
    project_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE projectprop OWNER TO postgres;

--
-- Name: stock_relationship; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE stock_relationship (
    stock_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE stock_relationship OWNER TO postgres;

--
-- Name: COLUMN stock_relationship.subject_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock_relationship.subject_id IS 'stock_relationship.subject_id is the subject of the subj-predicate-obj sentence. This is typically the substock.';


--
-- Name: COLUMN stock_relationship.object_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock_relationship.object_id IS 'stock_relationship.object_id is the object of the subj-predicate-obj sentence. This is typically the container stock.';


--
-- Name: COLUMN stock_relationship.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock_relationship.type_id IS 'stock_relationship.type_id is relationship type between subject and object. This is a cvterm, typically from the OBO relationship ontology, although other relationship types are allowed.';


--
-- Name: COLUMN stock_relationship.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock_relationship.value IS 'stock_relationship.value is for additional notes or comments.';


--
-- Name: COLUMN stock_relationship.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock_relationship.rank IS 'stock_relationship.rank is the ordering of subject stocks with respect to the object stock may be important where rank is used to order these; starts from zero.';


--
-- Name: materialized_phenoview; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW materialized_phenoview AS
 SELECT plant.uniquename AS plant_name,
    plant.stock_id AS plant_id,
    plot.uniquename AS plot_name,
    plot.stock_id AS plot_id,
    accession.uniquename AS accession_name,
    accession.stock_id AS accession_id,
    nd_experiment.nd_geolocation_id AS location_id,
    nd_geolocation.description AS location_name,
    projectprop.value AS year_id,
    projectprop.value AS year_name,
    trial.project_id AS trial_id,
    trial.name AS trial_name,
    trialterm.cvterm_id AS trial_type_id,
    trialterm.name AS trial_type_name,
    trialdesign.value AS trial_design_id,
    trialdesign.value AS trial_design_value,
    breeding_program.project_id AS breeding_program_id,
    breeding_program.name AS breeding_program_name,
    cvterm.cvterm_id AS trait_id,
    (((((cvterm.name)::text || '|'::text) || (db.name)::text) || ':'::text) || (dbxref.accession)::text) AS trait_name,
    phenotype.phenotype_id,
    phenotype.value AS phenotype_value
   FROM ((((((((((((((((((((((stock accession
     LEFT JOIN stock_relationship plot_relationship ON ((accession.stock_id = plot_relationship.object_id)))
     LEFT JOIN stock plot ON (((plot_relationship.subject_id = plot.stock_id) AND (plot.type_id = ( SELECT cvterm_1.cvterm_id
           FROM cvterm cvterm_1
          WHERE ((cvterm_1.name)::text = 'plot'::text))))))
     LEFT JOIN stock_relationship plant_relationship ON ((plot.stock_id = plant_relationship.subject_id)))
     LEFT JOIN stock plant ON (((plant_relationship.object_id = plant.stock_id) AND (plant.type_id = ( SELECT cvterm_1.cvterm_id
           FROM cvterm cvterm_1
          WHERE ((cvterm_1.name)::text = 'plant'::text))))))
     LEFT JOIN nd_experiment_stock nd_experiment_plot ON ((plot.stock_id = nd_experiment_plot.stock_id)))
     LEFT JOIN nd_experiment_stock nd_experiment_accession ON ((accession.stock_id = nd_experiment_accession.stock_id)))
     LEFT JOIN nd_experiment ON ((nd_experiment_plot.nd_experiment_id = nd_experiment.nd_experiment_id)))
     LEFT JOIN nd_geolocation ON ((nd_experiment.nd_geolocation_id = nd_geolocation.nd_geolocation_id)))
     LEFT JOIN nd_experiment_project ON ((nd_experiment_plot.nd_experiment_id = nd_experiment_project.nd_experiment_id)))
     LEFT JOIN project trial ON ((nd_experiment_project.project_id = trial.project_id)))
     LEFT JOIN project_relationship ON ((trial.project_id = project_relationship.subject_project_id)))
     LEFT JOIN projectprop breeding_programprop ON ((project_relationship.object_project_id = breeding_programprop.project_id)))
     LEFT JOIN project breeding_program ON ((breeding_programprop.project_id = breeding_program.project_id)))
     LEFT JOIN projectprop ON (((trial.project_id = projectprop.project_id) AND (projectprop.type_id = ( SELECT cvterm_1.cvterm_id
           FROM cvterm cvterm_1
          WHERE ((cvterm_1.name)::text = 'project year'::text))))))
     LEFT JOIN projectprop trialdesign ON (((trial.project_id = trialdesign.project_id) AND (trialdesign.type_id = ( SELECT cvterm_1.cvterm_id
           FROM cvterm cvterm_1
          WHERE ((cvterm_1.name)::text = 'design'::text))))))
     LEFT JOIN projectprop trialprop ON (((trial.project_id = trialprop.project_id) AND (trialprop.type_id IN ( SELECT cvterm_1.cvterm_id
           FROM (cvterm cvterm_1
             JOIN cv USING (cv_id))
          WHERE ((cv.name)::text = 'project_type'::text))))))
     LEFT JOIN cvterm trialterm ON ((trialprop.type_id = trialterm.cvterm_id)))
     LEFT JOIN nd_experiment_phenotype ON ((nd_experiment_plot.nd_experiment_id = nd_experiment_phenotype.nd_experiment_id)))
     LEFT JOIN phenotype ON ((nd_experiment_phenotype.phenotype_id = phenotype.phenotype_id)))
     LEFT JOIN cvterm ON ((phenotype.cvalue_id = cvterm.cvterm_id)))
     LEFT JOIN dbxref ON ((cvterm.dbxref_id = dbxref.dbxref_id)))
     LEFT JOIN db ON ((dbxref.db_id = db.db_id)))
  WHERE ((accession.type_id = ( SELECT cvterm_1.cvterm_id
           FROM cvterm cvterm_1
          WHERE ((cvterm_1.name)::text = 'accession'::text))) AND (breeding_programprop.type_id = ( SELECT cvterm_1.cvterm_id
           FROM cvterm cvterm_1
          WHERE ((cvterm_1.name)::text = 'breeding_program'::text))))
  GROUP BY plant.stock_id, plant.uniquename, plot.stock_id, plot.uniquename, accession.uniquename, accession.stock_id, (((((cvterm.name)::text || '|'::text) || (db.name)::text) || ':'::text) || (dbxref.accession)::text), cvterm.cvterm_id, trial.name, trial.project_id, breeding_program.name, breeding_program.project_id, projectprop.value, trialdesign.value, trialterm.cvterm_id, trialterm.name, nd_experiment.nd_geolocation_id, nd_geolocation.description, phenotype.phenotype_id, phenotype.value
  WITH NO DATA;


ALTER TABLE materialized_phenoview OWNER TO web_usr;

--
-- Name: accessionsxbreeding_programs; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW accessionsxbreeding_programs AS
 SELECT materialized_phenoview.accession_id,
    materialized_phenoview.breeding_program_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.accession_id, materialized_phenoview.breeding_program_id
  WITH NO DATA;


ALTER TABLE accessionsxbreeding_programs OWNER TO web_usr;

--
-- Name: genotype; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE genotype (
    genotype_id integer NOT NULL,
    name text,
    uniquename text NOT NULL,
    description character varying(255),
    type_id integer NOT NULL
);


ALTER TABLE genotype OWNER TO postgres;

--
-- Name: TABLE genotype; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE genotype IS 'Genetic context. A genotype is defined by a collection of features, mutations, balancers, deficiencies, haplotype blocks, or engineered constructs.';


--
-- Name: COLUMN genotype.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN genotype.name IS 'Optional alternative name for a genotype, 
for display purposes.';


--
-- Name: COLUMN genotype.uniquename; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN genotype.uniquename IS 'The unique name for a genotype; 
typically derived from the features making up the genotype.';


--
-- Name: nd_experiment_genotype; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE nd_experiment_genotype (
    nd_experiment_genotype_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    genotype_id integer NOT NULL
);


ALTER TABLE nd_experiment_genotype OWNER TO postgres;

--
-- Name: TABLE nd_experiment_genotype; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_experiment_genotype IS 'Linking table: experiments to the genotypes they produce. There is a one-to-one relationship between an experiment and a genotype since each genotype record should point to one experiment. Add a new experiment_id for each genotype record.';


--
-- Name: nd_experiment_protocol; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE nd_experiment_protocol (
    nd_experiment_protocol_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    nd_protocol_id integer NOT NULL
);


ALTER TABLE nd_experiment_protocol OWNER TO postgres;

--
-- Name: TABLE nd_experiment_protocol; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_experiment_protocol IS 'Linking table: experiments to the protocols they involve.';


--
-- Name: nd_protocol; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE nd_protocol (
    nd_protocol_id integer NOT NULL,
    name character varying(255) NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE nd_protocol OWNER TO postgres;

--
-- Name: TABLE nd_protocol; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_protocol IS 'A protocol can be anything that is done as part of the experiment.';


--
-- Name: COLUMN nd_protocol.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_protocol.name IS 'The protocol name.';


--
-- Name: materialized_genoview; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW materialized_genoview AS
 SELECT stock.uniquename AS accession_name,
    stock.stock_id AS accession_id,
    nd_experiment_protocol.nd_protocol_id AS genotyping_protocol_id,
    nd_protocol.name AS genotyping_protocol_name,
    genotype.genotype_id,
    genotype.uniquename AS genotype_name
   FROM (((((stock
     LEFT JOIN nd_experiment_stock ON ((stock.stock_id = nd_experiment_stock.stock_id)))
     LEFT JOIN nd_experiment_protocol ON ((nd_experiment_stock.nd_experiment_id = nd_experiment_protocol.nd_experiment_id)))
     LEFT JOIN nd_protocol ON ((nd_experiment_protocol.nd_protocol_id = nd_protocol.nd_protocol_id)))
     LEFT JOIN nd_experiment_genotype ON ((nd_experiment_stock.nd_experiment_id = nd_experiment_genotype.nd_experiment_id)))
     LEFT JOIN genotype ON ((genotype.genotype_id = nd_experiment_genotype.genotype_id)))
  WHERE (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM cvterm
          WHERE ((cvterm.name)::text = 'accession'::text)))
  GROUP BY stock.uniquename, stock.stock_id, nd_experiment_protocol.nd_protocol_id, nd_protocol.name, genotype.genotype_id, genotype.uniquename
  WITH NO DATA;


ALTER TABLE materialized_genoview OWNER TO web_usr;

--
-- Name: accessionsxgenotyping_protocols; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW accessionsxgenotyping_protocols AS
 SELECT materialized_genoview.accession_id,
    materialized_genoview.genotyping_protocol_id
   FROM materialized_genoview
  GROUP BY materialized_genoview.accession_id, materialized_genoview.genotyping_protocol_id
  WITH NO DATA;


ALTER TABLE accessionsxgenotyping_protocols OWNER TO web_usr;

--
-- Name: accessionsxlocations; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW accessionsxlocations AS
 SELECT materialized_phenoview.accession_id,
    materialized_phenoview.location_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.accession_id, materialized_phenoview.location_id
  WITH NO DATA;


ALTER TABLE accessionsxlocations OWNER TO web_usr;

--
-- Name: accessionsxplants; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW accessionsxplants AS
 SELECT materialized_phenoview.accession_id,
    materialized_phenoview.plant_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.accession_id, materialized_phenoview.plant_id
  WITH NO DATA;


ALTER TABLE accessionsxplants OWNER TO web_usr;

--
-- Name: accessionsxplots; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW accessionsxplots AS
 SELECT materialized_phenoview.accession_id,
    materialized_phenoview.plot_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.accession_id, materialized_phenoview.plot_id
  WITH NO DATA;


ALTER TABLE accessionsxplots OWNER TO web_usr;

--
-- Name: accessionsxtraits; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW accessionsxtraits AS
 SELECT materialized_phenoview.accession_id,
    materialized_phenoview.trait_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.accession_id, materialized_phenoview.trait_id
  WITH NO DATA;


ALTER TABLE accessionsxtraits OWNER TO web_usr;

--
-- Name: accessionsxtrial_designs; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW accessionsxtrial_designs AS
 SELECT materialized_phenoview.accession_id,
    materialized_phenoview.trial_design_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.accession_id, materialized_phenoview.trial_design_id
  WITH NO DATA;


ALTER TABLE accessionsxtrial_designs OWNER TO web_usr;

--
-- Name: accessionsxtrial_types; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW accessionsxtrial_types AS
 SELECT materialized_phenoview.accession_id,
    materialized_phenoview.trial_type_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.accession_id, materialized_phenoview.trial_type_id
  WITH NO DATA;


ALTER TABLE accessionsxtrial_types OWNER TO web_usr;

--
-- Name: accessionsxtrials; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW accessionsxtrials AS
 SELECT materialized_phenoview.accession_id,
    materialized_phenoview.trial_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.accession_id, materialized_phenoview.trial_id
  WITH NO DATA;


ALTER TABLE accessionsxtrials OWNER TO web_usr;

--
-- Name: accessionsxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW accessionsxyears AS
 SELECT materialized_phenoview.accession_id,
    materialized_phenoview.year_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.accession_id, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE accessionsxyears OWNER TO web_usr;

--
-- Name: all_gs_traits; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW all_gs_traits AS
 SELECT observable.cvterm_id,
    observable.name
   FROM (phenotype me
     JOIN cvterm observable ON ((observable.cvterm_id = me.observable_id)))
  GROUP BY observable.cvterm_id, observable.name
  WITH NO DATA;


ALTER TABLE all_gs_traits OWNER TO web_usr;

SET default_with_oids = true;

--
-- Name: analysis; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE analysis (
    analysis_id integer NOT NULL,
    name character varying(255),
    description text,
    program character varying(255) NOT NULL,
    programversion character varying(255) NOT NULL,
    algorithm character varying(255),
    sourcename character varying(255),
    sourceversion character varying(255),
    sourceuri text,
    timeexecuted timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL
);


ALTER TABLE analysis OWNER TO postgres;

--
-- Name: analysis_analysis_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE analysis_analysis_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE analysis_analysis_id_seq OWNER TO postgres;

--
-- Name: analysis_analysis_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE analysis_analysis_id_seq OWNED BY analysis.analysis_id;


--
-- Name: analysisfeature; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE analysisfeature (
    analysisfeature_id integer NOT NULL,
    feature_id integer NOT NULL,
    analysis_id integer NOT NULL,
    rawscore double precision,
    normscore double precision,
    significance double precision,
    identity double precision
);


ALTER TABLE analysisfeature OWNER TO postgres;

--
-- Name: analysisfeature_analysisfeature_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE analysisfeature_analysisfeature_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE analysisfeature_analysisfeature_id_seq OWNER TO postgres;

--
-- Name: analysisfeature_analysisfeature_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE analysisfeature_analysisfeature_id_seq OWNED BY analysisfeature.analysisfeature_id;


--
-- Name: analysisprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE analysisprop (
    analysisprop_id integer NOT NULL,
    analysis_id integer NOT NULL,
    type_id integer NOT NULL,
    value text
);


ALTER TABLE analysisprop OWNER TO postgres;

--
-- Name: analysisprop_analysisprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE analysisprop_analysisprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE analysisprop_analysisprop_id_seq OWNER TO postgres;

--
-- Name: analysisprop_analysisprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE analysisprop_analysisprop_id_seq OWNED BY analysisprop.analysisprop_id;


--
-- Name: ara_annotation; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ara_annotation (
    agi character varying(16) NOT NULL,
    locus character varying(16),
    genbank_gi bigint,
    gb_prot_id character varying(16),
    gb_mrna_id character varying(16),
    uniprot_id character varying(128),
    tair_annotation text,
    symbol character varying(256),
    aliases text,
    localization text,
    process text,
    function text,
    localization_evidence text,
    process_evidence text,
    function_evidence text,
    fulltext tsvector
);


ALTER TABLE ara_annotation OWNER TO postgres;

--
-- Name: ara_domain; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ara_domain (
    agi character varying(16),
    locus character varying(16),
    prot_length integer,
    app_name character varying(32),
    dom_id character varying(12),
    dom_desc character varying(32),
    dom_start integer,
    dom_end integer,
    e_value character varying(16),
    interpro_id character varying(12),
    interpro_dom text,
    run_date date
);


ALTER TABLE ara_domain OWNER TO postgres;

--
-- Name: ara_evidef; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ara_evidef (
    code character varying(10),
    description text,
    longdescription text
);


ALTER TABLE ara_evidef OWNER TO postgres;

--
-- Name: ara_family; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ara_family (
    locus character varying(128),
    super_gene_family character varying(128),
    gene_family character varying(128),
    gene_name character varying(128),
    gene_alias character varying(128),
    bac_locus character varying(128),
    gbi character varying(64),
    gb_locus character varying(128),
    tigr_annotation text,
    expert_annotation text,
    criteria text,
    people_id character varying(128),
    org_id character varying(128),
    pmid character varying(128),
    url text,
    url_name text
);


ALTER TABLE ara_family OWNER TO postgres;

--
-- Name: ara_gfp_ms; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ara_gfp_ms (
    agi character varying(16),
    locus character varying(16),
    gfp_all text,
    ms_all text
);


ALTER TABLE ara_gfp_ms OWNER TO postgres;

--
-- Name: ara_go_term; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ara_go_term (
    go_id character varying(12) NOT NULL,
    alt_id character varying(12),
    num_child integer,
    num_desc integer,
    namespace character varying(32),
    name text,
    is_a text,
    children text,
    path text,
    definition text
);


ALTER TABLE ara_go_term OWNER TO postgres;

--
-- Name: ara_interactome_all; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ara_interactome_all (
    locus character varying(16),
    locus_interact character varying(16),
    source character varying(32),
    database character varying(32),
    type character varying(32),
    author character varying(32),
    pmid character varying(64)
);


ALTER TABLE ara_interactome_all OWNER TO postgres;

--
-- Name: ara_interactome_unique; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ara_interactome_unique (
    locus character varying(16),
    locus_interact character varying(16)
);


ALTER TABLE ara_interactome_unique OWNER TO postgres;

--
-- Name: ara_intron; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ara_intron (
    agi character varying(16),
    locus character varying(16),
    intron_num smallint,
    lbound integer,
    rbound integer,
    sequence text
);


ALTER TABLE ara_intron OWNER TO postgres;

--
-- Name: ara_map; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ara_map (
    locus character varying(16),
    chromosome character(1),
    direction character(1),
    startpos integer,
    endpos integer
);


ALTER TABLE ara_map OWNER TO postgres;

--
-- Name: ara_myristoylation; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ara_myristoylation (
    locus character varying(12),
    evidence character varying(8)
);


ALTER TABLE ara_myristoylation OWNER TO postgres;

--
-- Name: ara_pmidlink; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ara_pmidlink (
    pmid bigint,
    url text
);


ALTER TABLE ara_pmidlink OWNER TO postgres;

--
-- Name: ara_prefix_info; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ara_prefix_info (
    prefix character varying(12),
    genecount integer
);


ALTER TABLE ara_prefix_info OWNER TO postgres;

--
-- Name: ara_properties; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ara_properties (
    agi character varying(16) NOT NULL,
    locus character varying(16),
    weight integer,
    isoelectric real,
    transmemcount smallint,
    transmempos text,
    genomepos character varying(64),
    interactioncount integer,
    introncount smallint
);


ALTER TABLE ara_properties OWNER TO postgres;

--
-- Name: ara_scop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ara_scop (
    agi character varying(16),
    locus character varying(16),
    lbound integer,
    rbound integer,
    e_value character varying(32),
    scop_id integer,
    description text,
    structure_type character varying(16)
);


ALTER TABLE ara_scop OWNER TO postgres;

--
-- Name: ara_sequence; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ara_sequence (
    agi character varying(16) NOT NULL,
    locus character varying(16),
    protein text,
    cds text,
    cdna text,
    genomic text,
    utr5 text,
    utr3 text
);


ALTER TABLE ara_sequence OWNER TO postgres;

--
-- Name: ara_signalp; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ara_signalp (
    agi character varying(16) NOT NULL,
    locus character varying(16),
    nn_cmax real,
    nn_cpos integer,
    nn_cd character(1),
    nn_ymax real,
    nn_ypos integer,
    nn_yd character(1),
    nn_smax real,
    nn_spos integer,
    nn_sd character(1),
    nn_smean real,
    nn_smeand character(1),
    nn_score real,
    nn_d character(1),
    hmm_type character(1),
    hmm_cmax real,
    hmm_cpos integer,
    hmm_cd character(1),
    hmm_sprob real,
    hmm_d character(1)
);


ALTER TABLE ara_signalp OWNER TO postgres;

--
-- Name: ara_targetp; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ara_targetp (
    agi character varying(16) NOT NULL,
    locus character varying(16),
    location character(1),
    rc integer,
    c_score real,
    m_score real,
    s_score real,
    o_score real
);


ALTER TABLE ara_targetp OWNER TO postgres;

--
-- Name: ara_users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ara_users (
    id integer NOT NULL,
    username character varying(32),
    password character varying(32),
    hotlist text,
    lists text,
    email character varying(32),
    confirm_email boolean
);


ALTER TABLE ara_users OWNER TO postgres;

--
-- Name: ara_users_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE ara_users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ara_users_id_seq OWNER TO postgres;

--
-- Name: ara_users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE ara_users_id_seq OWNED BY ara_users.id;


SET default_with_oids = false;

--
-- Name: blastwatch_queries; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE blastwatch_queries (
    blastwatch_queries_id integer NOT NULL,
    sp_person_id integer NOT NULL,
    sequence text NOT NULL,
    program character varying(10) NOT NULL,
    database character varying(50) NOT NULL,
    matrix character varying(10) NOT NULL,
    evalue double precision NOT NULL,
    num_results integer DEFAULT 0 NOT NULL,
    new_results boolean DEFAULT false NOT NULL
);


ALTER TABLE blastwatch_queries OWNER TO postgres;

--
-- Name: blastwatch_queries_blastwatch_queries_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE blastwatch_queries_blastwatch_queries_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE blastwatch_queries_blastwatch_queries_id_seq OWNER TO postgres;

--
-- Name: blastwatch_queries_blastwatch_queries_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE blastwatch_queries_blastwatch_queries_id_seq OWNED BY blastwatch_queries.blastwatch_queries_id;


--
-- Name: blastwatch_results; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE blastwatch_results (
    blastwatch_results_id integer NOT NULL,
    blastwatch_queries_id integer NOT NULL,
    query_id character varying(50) NOT NULL,
    subject_id character varying(50) NOT NULL,
    subject_start integer NOT NULL,
    subject_end integer NOT NULL,
    evalue double precision NOT NULL,
    score numeric NOT NULL
);


ALTER TABLE blastwatch_results OWNER TO postgres;

--
-- Name: blastwatch_results_blastwatch_results_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE blastwatch_results_blastwatch_results_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE blastwatch_results_blastwatch_results_id_seq OWNER TO postgres;

--
-- Name: blastwatch_results_blastwatch_results_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE blastwatch_results_blastwatch_results_id_seq OWNED BY blastwatch_results.blastwatch_results_id;


--
-- Name: breeding_programs; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW breeding_programs AS
 SELECT project.project_id AS breeding_program_id,
    project.name AS breeding_program_name
   FROM (project
     JOIN projectprop USING (project_id))
  WHERE (projectprop.type_id = ( SELECT cvterm.cvterm_id
           FROM cvterm
          WHERE ((cvterm.name)::text = 'breeding_program'::text)))
  GROUP BY project.project_id, project.name
  WITH NO DATA;


ALTER TABLE breeding_programs OWNER TO web_usr;

--
-- Name: breeding_programsxgenotyping_protocols; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW breeding_programsxgenotyping_protocols AS
 SELECT materialized_phenoview.breeding_program_id,
    materialized_genoview.genotyping_protocol_id
   FROM (materialized_phenoview
     JOIN materialized_genoview USING (accession_id))
  GROUP BY materialized_phenoview.breeding_program_id, materialized_genoview.genotyping_protocol_id
  WITH NO DATA;


ALTER TABLE breeding_programsxgenotyping_protocols OWNER TO web_usr;

--
-- Name: breeding_programsxlocations; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW breeding_programsxlocations AS
 SELECT materialized_phenoview.breeding_program_id,
    materialized_phenoview.location_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.breeding_program_id, materialized_phenoview.location_id
  WITH NO DATA;


ALTER TABLE breeding_programsxlocations OWNER TO web_usr;

--
-- Name: breeding_programsxplants; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW breeding_programsxplants AS
 SELECT materialized_phenoview.breeding_program_id,
    materialized_phenoview.plant_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.breeding_program_id, materialized_phenoview.plant_id
  WITH NO DATA;


ALTER TABLE breeding_programsxplants OWNER TO web_usr;

--
-- Name: breeding_programsxplots; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW breeding_programsxplots AS
 SELECT materialized_phenoview.breeding_program_id,
    materialized_phenoview.plot_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.breeding_program_id, materialized_phenoview.plot_id
  WITH NO DATA;


ALTER TABLE breeding_programsxplots OWNER TO web_usr;

--
-- Name: breeding_programsxtraits; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW breeding_programsxtraits AS
 SELECT materialized_phenoview.breeding_program_id,
    materialized_phenoview.trait_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.breeding_program_id, materialized_phenoview.trait_id
  WITH NO DATA;


ALTER TABLE breeding_programsxtraits OWNER TO web_usr;

--
-- Name: breeding_programsxtrial_designs; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW breeding_programsxtrial_designs AS
 SELECT materialized_phenoview.breeding_program_id,
    materialized_phenoview.trial_design_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.breeding_program_id, materialized_phenoview.trial_design_id
  WITH NO DATA;


ALTER TABLE breeding_programsxtrial_designs OWNER TO web_usr;

--
-- Name: breeding_programsxtrial_types; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW breeding_programsxtrial_types AS
 SELECT materialized_phenoview.breeding_program_id,
    materialized_phenoview.trial_type_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.breeding_program_id, materialized_phenoview.trial_type_id
  WITH NO DATA;


ALTER TABLE breeding_programsxtrial_types OWNER TO web_usr;

--
-- Name: breeding_programsxtrials; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW breeding_programsxtrials AS
 SELECT materialized_phenoview.breeding_program_id,
    materialized_phenoview.trial_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.breeding_program_id, materialized_phenoview.trial_id
  WITH NO DATA;


ALTER TABLE breeding_programsxtrials OWNER TO web_usr;

--
-- Name: breeding_programsxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW breeding_programsxyears AS
 SELECT materialized_phenoview.breeding_program_id,
    materialized_phenoview.year_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.breeding_program_id, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE breeding_programsxyears OWNER TO web_usr;

--
-- Name: bug; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE bug (
    bug_id integer NOT NULL,
    sp_person_id bigint,
    obsolete boolean,
    create_date timestamp with time zone,
    created_by bigint,
    modified_date timestamp with time zone,
    updated_by bigint,
    description text,
    status character varying(20),
    severity character varying(20),
    affected_page text,
    action text
);


ALTER TABLE bug OWNER TO postgres;

--
-- Name: bug_bug_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE bug_bug_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bug_bug_id_seq OWNER TO postgres;

--
-- Name: bug_bug_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE bug_bug_id_seq OWNED BY bug.bug_id;


--
-- Name: contact; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE contact (
    contact_id integer NOT NULL,
    type_id integer,
    name character varying(255) NOT NULL,
    description character varying(255)
);


ALTER TABLE contact OWNER TO postgres;

--
-- Name: TABLE contact; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE contact IS 'Model persons, institutes, groups, organizations, etc.';


--
-- Name: COLUMN contact.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN contact.type_id IS 'What type of contact is this?  E.g. "person", "lab".';


--
-- Name: contact_contact_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE contact_contact_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE contact_contact_id_seq OWNER TO postgres;

--
-- Name: contact_contact_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE contact_contact_id_seq OWNED BY contact.contact_id;


--
-- Name: contact_relationship; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE contact_relationship (
    contact_relationship_id integer NOT NULL,
    type_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL
);


ALTER TABLE contact_relationship OWNER TO postgres;

--
-- Name: TABLE contact_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE contact_relationship IS 'Model relationships between contacts';


--
-- Name: COLUMN contact_relationship.subject_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN contact_relationship.subject_id IS 'The subject of the subj-predicate-obj sentence. In a DAG, this corresponds to the child node.';


--
-- Name: COLUMN contact_relationship.object_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN contact_relationship.object_id IS 'The object of the subj-predicate-obj sentence. In a DAG, this corresponds to the parent node.';


--
-- Name: contact_relationship_contact_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE contact_relationship_contact_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE contact_relationship_contact_relationship_id_seq OWNER TO postgres;

--
-- Name: contact_relationship_contact_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE contact_relationship_contact_relationship_id_seq OWNED BY contact_relationship.contact_relationship_id;


--
-- Name: cv_cv_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cv_cv_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cv_cv_id_seq OWNER TO postgres;

--
-- Name: cv_cv_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cv_cv_id_seq OWNED BY cv.cv_id;


--
-- Name: cvterm_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cvterm_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cvterm_cvterm_id_seq OWNER TO postgres;

--
-- Name: cvterm_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cvterm_cvterm_id_seq OWNED BY cvterm.cvterm_id;


SET default_with_oids = true;

--
-- Name: cvterm_dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE cvterm_dbxref (
    cvterm_dbxref_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_for_definition integer DEFAULT 0 NOT NULL
);


ALTER TABLE cvterm_dbxref OWNER TO postgres;

--
-- Name: TABLE cvterm_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE cvterm_dbxref IS 'In addition to the primary
identifier (cvterm.dbxref_id) a cvterm can have zero or more secondary
identifiers/dbxrefs, which may refer to records in external
databases. The exact semantics of cvterm_dbxref are not fixed. For
example: the dbxref could be a pubmed ID that is pertinent to the
cvterm, or it could be an equivalent or similar term in another
ontology. For example, GO cvterms are typically linked to InterPro
IDs, even though the nature of the relationship between them is
largely one of statistical association. The dbxref may be have data
records attached in the same database instance, or it could be a
"hanging" dbxref pointing to some external database. NOTE: If the
desired objective is to link two cvterms together, and the nature of
the relation is known and holds for all instances of the subject
cvterm then consider instead using cvterm_relationship together with a
well-defined relation.';


--
-- Name: COLUMN cvterm_dbxref.is_for_definition; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvterm_dbxref.is_for_definition IS 'A
cvterm.definition should be supported by one or more references. If
this column is true, the dbxref is not for a term in an external db -
it is a dbxref for provenance information for the definition';


--
-- Name: cvterm_dbxref_cvterm_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cvterm_dbxref_cvterm_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cvterm_dbxref_cvterm_dbxref_id_seq OWNER TO postgres;

--
-- Name: cvterm_dbxref_cvterm_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cvterm_dbxref_cvterm_dbxref_id_seq OWNED BY cvterm_dbxref.cvterm_dbxref_id;


--
-- Name: cvterm_relationship; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE cvterm_relationship (
    cvterm_relationship_id integer NOT NULL,
    type_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL
);


ALTER TABLE cvterm_relationship OWNER TO postgres;

--
-- Name: TABLE cvterm_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE cvterm_relationship IS 'A relationship linking two
cvterms. Each cvterm_relationship constitutes an edge in the graph
defined by the collection of cvterms and cvterm_relationships. The
meaning of the cvterm_relationship depends on the definition of the
cvterm R refered to by type_id. However, in general the definitions
are such that the statement all SUBJs REL some OBJ is true. The
cvterm_relationship statement is about the subject, not the
object. For example "insect wing part_of thorax"';


--
-- Name: COLUMN cvterm_relationship.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvterm_relationship.type_id IS 'The nature of the
relationship between subject and object. Note that relations are also
housed in the cvterm table, typically from the OBO relationship
ontology, although other relationship types are allowed';


--
-- Name: COLUMN cvterm_relationship.subject_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvterm_relationship.subject_id IS 'the subject of
the subj-predicate-obj sentence. The cvterm_relationship is about the
subject. In a graph, this typically corresponds to the child node';


--
-- Name: COLUMN cvterm_relationship.object_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvterm_relationship.object_id IS 'the object of the
subj-predicate-obj sentence. The cvterm_relationship refers to the
object. In a graph, this typically corresponds to the parent node';


--
-- Name: cvterm_relationship_cvterm_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cvterm_relationship_cvterm_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cvterm_relationship_cvterm_relationship_id_seq OWNER TO postgres;

--
-- Name: cvterm_relationship_cvterm_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cvterm_relationship_cvterm_relationship_id_seq OWNED BY cvterm_relationship.cvterm_relationship_id;


--
-- Name: cvtermpath; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE cvtermpath (
    cvtermpath_id integer NOT NULL,
    type_id integer,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    cv_id integer NOT NULL,
    pathdistance integer
);


ALTER TABLE cvtermpath OWNER TO postgres;

--
-- Name: TABLE cvtermpath; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE cvtermpath IS 'The reflexive transitive closure of
the cvterm_relationship relation. For a full discussion, see the file
populating-cvtermpath.txt in this directory';


--
-- Name: COLUMN cvtermpath.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvtermpath.type_id IS 'The relationship type that
this is a closure over. If null, then this is a closure over ALL
relationship types. If non-null, then this references a relationship
cvterm - note that the closure will apply to both this relationship
AND the OBO_REL:is_a (subclass) relationship';


--
-- Name: COLUMN cvtermpath.cv_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvtermpath.cv_id IS 'Closures will mostly be within
one cv. If the closure of a relationship traverses a cv, then this
refers to the cv of the object_id cvterm';


--
-- Name: COLUMN cvtermpath.pathdistance; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvtermpath.pathdistance IS 'The number of steps
required to get from the subject cvterm to the object cvterm, counting
from zero (reflexive relationship)';


--
-- Name: cvtermpath_cvtermpath_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cvtermpath_cvtermpath_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cvtermpath_cvtermpath_id_seq OWNER TO postgres;

--
-- Name: cvtermpath_cvtermpath_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cvtermpath_cvtermpath_id_seq OWNED BY cvtermpath.cvtermpath_id;


--
-- Name: cvtermprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE cvtermprop (
    cvtermprop_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    type_id integer NOT NULL,
    value text DEFAULT ''::text NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE cvtermprop OWNER TO postgres;

--
-- Name: TABLE cvtermprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE cvtermprop IS 'Additional extensible properties can be attached to a cvterm using this table. Corresponds to -AnnotationProperty- in W3C OWL format';


--
-- Name: COLUMN cvtermprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvtermprop.type_id IS 'The name of the property/slot is a cvterm. The meaning of the property is defined in that cvterm';


--
-- Name: COLUMN cvtermprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvtermprop.value IS 'The value of the property, represented as text. Numeric values are converted to their text representation';


--
-- Name: COLUMN cvtermprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvtermprop.rank IS 'Property-Value ordering. Any
cvterm can have multiple values for any particular property type -
these are ordered in a list using rank, counting from zero. For
properties that are single-valued rather than multi-valued, the
default 0 value should be used';


--
-- Name: cvtermprop_cvtermprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cvtermprop_cvtermprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cvtermprop_cvtermprop_id_seq OWNER TO postgres;

--
-- Name: cvtermprop_cvtermprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cvtermprop_cvtermprop_id_seq OWNED BY cvtermprop.cvtermprop_id;


--
-- Name: cvtermsynonym; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE cvtermsynonym (
    cvtermsynonym_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    synonym character varying(1024) NOT NULL,
    type_id integer
);


ALTER TABLE cvtermsynonym OWNER TO postgres;

--
-- Name: TABLE cvtermsynonym; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE cvtermsynonym IS 'A cvterm actually represents a
distinct class or concept. A concept can be refered to by different
phrases or names. In addition to the primary name (cvterm.name) there
can be a number of alternative aliases or synonyms. For example, -T
cell- as a synonym for -T lymphocyte-';


--
-- Name: COLUMN cvtermsynonym.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN cvtermsynonym.type_id IS 'A synonym can be exact,
narrow or borader than';


--
-- Name: cvtermsynonym_cvtermsynonym_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cvtermsynonym_cvtermsynonym_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cvtermsynonym_cvtermsynonym_id_seq OWNER TO postgres;

--
-- Name: cvtermsynonym_cvtermsynonym_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cvtermsynonym_cvtermsynonym_id_seq OWNED BY cvtermsynonym.cvtermsynonym_id;


SET default_with_oids = false;

--
-- Name: cxgn_bac_pipeline_genbank_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE cxgn_bac_pipeline_genbank_log (
    id integer NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    "timestamp" timestamp without time zone DEFAULT now() NOT NULL,
    uname character varying(40) NOT NULL,
    host character varying(40) NOT NULL,
    progname character varying(80) NOT NULL,
    pid integer NOT NULL,
    search_key character varying(200),
    message text
);


ALTER TABLE cxgn_bac_pipeline_genbank_log OWNER TO postgres;

--
-- Name: cxgn_bac_pipeline_genbank_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cxgn_bac_pipeline_genbank_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cxgn_bac_pipeline_genbank_log_id_seq OWNER TO postgres;

--
-- Name: cxgn_bac_pipeline_genbank_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cxgn_bac_pipeline_genbank_log_id_seq OWNED BY cxgn_bac_pipeline_genbank_log.id;


--
-- Name: cxgn_bac_pipeline_loading_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE cxgn_bac_pipeline_loading_log (
    id integer NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    "timestamp" timestamp without time zone DEFAULT now() NOT NULL,
    uname character varying(40) NOT NULL,
    host character varying(40) NOT NULL,
    progname character varying(80) NOT NULL,
    pid integer NOT NULL,
    search_key character varying(200),
    message text
);


ALTER TABLE cxgn_bac_pipeline_loading_log OWNER TO postgres;

--
-- Name: cxgn_bac_pipeline_loading_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cxgn_bac_pipeline_loading_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cxgn_bac_pipeline_loading_log_id_seq OWNER TO postgres;

--
-- Name: cxgn_bac_pipeline_loading_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cxgn_bac_pipeline_loading_log_id_seq OWNED BY cxgn_bac_pipeline_loading_log.id;


--
-- Name: cxgn_bac_pipeline_processing_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE cxgn_bac_pipeline_processing_log (
    id integer NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    "timestamp" timestamp without time zone DEFAULT now() NOT NULL,
    uname character varying(40) NOT NULL,
    host character varying(40) NOT NULL,
    progname character varying(80) NOT NULL,
    pid integer NOT NULL,
    search_key character varying(200),
    message text
);


ALTER TABLE cxgn_bac_pipeline_processing_log OWNER TO postgres;

--
-- Name: cxgn_bac_pipeline_processing_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cxgn_bac_pipeline_processing_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cxgn_bac_pipeline_processing_log_id_seq OWNER TO postgres;

--
-- Name: cxgn_bac_pipeline_processing_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cxgn_bac_pipeline_processing_log_id_seq OWNED BY cxgn_bac_pipeline_processing_log.id;


--
-- Name: cxgn_indexedlog_test_feel_free_to_delete_me; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE cxgn_indexedlog_test_feel_free_to_delete_me (
    id integer NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    "timestamp" timestamp without time zone DEFAULT now() NOT NULL,
    uname character varying(40) NOT NULL,
    host character varying(40) NOT NULL,
    progname character varying(80),
    pid integer NOT NULL,
    search_key character varying(80),
    message text
);


ALTER TABLE cxgn_indexedlog_test_feel_free_to_delete_me OWNER TO postgres;

--
-- Name: cxgn_indexedlog_test_feel_free_to_delete_me_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE cxgn_indexedlog_test_feel_free_to_delete_me_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cxgn_indexedlog_test_feel_free_to_delete_me_id_seq OWNER TO postgres;

--
-- Name: cxgn_indexedlog_test_feel_free_to_delete_me_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE cxgn_indexedlog_test_feel_free_to_delete_me_id_seq OWNED BY cxgn_indexedlog_test_feel_free_to_delete_me.id;


--
-- Name: db_db_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE db_db_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE db_db_id_seq OWNER TO postgres;

--
-- Name: db_db_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE db_db_id_seq OWNED BY db.db_id;


--
-- Name: dbxref_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE dbxref_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dbxref_dbxref_id_seq OWNER TO postgres;

--
-- Name: dbxref_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE dbxref_dbxref_id_seq OWNED BY dbxref.dbxref_id;


SET default_with_oids = true;

--
-- Name: dbxrefprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE dbxrefprop (
    dbxrefprop_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    type_id integer NOT NULL,
    value text DEFAULT ''::text NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE dbxrefprop OWNER TO postgres;

--
-- Name: TABLE dbxrefprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE dbxrefprop IS 'Metadata about a dbxref. Note that this is not defined in the dbxref module, as it depends on the cvterm table. This table has a structure analagous to cvtermprop';


--
-- Name: dbxrefprop_dbxrefprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE dbxrefprop_dbxrefprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dbxrefprop_dbxrefprop_id_seq OWNER TO postgres;

--
-- Name: dbxrefprop_dbxrefprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE dbxrefprop_dbxrefprop_id_seq OWNED BY dbxrefprop.dbxrefprop_id;


SET default_with_oids = false;

--
-- Name: environment; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE environment (
    environment_id integer NOT NULL,
    uniquename text NOT NULL,
    description text
);


ALTER TABLE environment OWNER TO postgres;

--
-- Name: TABLE environment; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE environment IS 'The environmental component of a phenotype description.';


--
-- Name: environment_cvterm; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE environment_cvterm (
    environment_cvterm_id integer NOT NULL,
    environment_id integer NOT NULL,
    cvterm_id integer NOT NULL
);


ALTER TABLE environment_cvterm OWNER TO postgres;

--
-- Name: environment_cvterm_environment_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE environment_cvterm_environment_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE environment_cvterm_environment_cvterm_id_seq OWNER TO postgres;

--
-- Name: environment_cvterm_environment_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE environment_cvterm_environment_cvterm_id_seq OWNED BY environment_cvterm.environment_cvterm_id;


--
-- Name: environment_environment_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE environment_environment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE environment_environment_id_seq OWNER TO postgres;

--
-- Name: environment_environment_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE environment_environment_id_seq OWNED BY environment.environment_id;


SET default_with_oids = true;

--
-- Name: enzyme_restriction_sites; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE enzyme_restriction_sites (
    enzyme_restriction_sites_id integer NOT NULL,
    restriction_site text,
    enzyme_id integer
);


ALTER TABLE enzyme_restriction_sites OWNER TO postgres;

--
-- Name: enzyme_restriction_sites_enzyme_restriction_sites_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE enzyme_restriction_sites_enzyme_restriction_sites_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE enzyme_restriction_sites_enzyme_restriction_sites_id_seq OWNER TO postgres;

--
-- Name: enzyme_restriction_sites_enzyme_restriction_sites_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE enzyme_restriction_sites_enzyme_restriction_sites_id_seq OWNED BY enzyme_restriction_sites.enzyme_restriction_sites_id;


SET search_path = sgn, pg_catalog;

--
-- Name: family; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE family (
    family_id bigint NOT NULL,
    family_build_id bigint,
    family_annotation text,
    tree_log_file_location character varying,
    tree_file_location character varying,
    tree_taxa_number integer,
    tree_overlap_length integer,
    family_nr integer,
    member_count integer
);


ALTER TABLE family OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- Name: family; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW family AS
 SELECT family.family_id,
    family.family_build_id,
    family.family_annotation,
    family.tree_log_file_location,
    family.tree_file_location,
    family.tree_taxa_number,
    family.tree_overlap_length,
    family.family_nr,
    family.member_count
   FROM sgn.family;


ALTER TABLE family OWNER TO postgres;

SET search_path = sgn, pg_catalog;

--
-- Name: family_build; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE family_build (
    family_build_id bigint NOT NULL,
    group_id bigint,
    build_nr bigint,
    i_value double precision,
    build_date timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
    status character(1) DEFAULT 'C'::bpchar
);


ALTER TABLE family_build OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- Name: family_build; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW family_build AS
 SELECT family_build.family_build_id,
    family_build.group_id,
    family_build.build_nr,
    family_build.i_value,
    family_build.build_date,
    family_build.status
   FROM sgn.family_build;


ALTER TABLE family_build OWNER TO postgres;

SET search_path = sgn, pg_catalog;

--
-- Name: family_member; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE family_member (
    family_member_id bigint NOT NULL,
    cds_id bigint,
    organism_group_id bigint,
    family_id bigint,
    database_name character varying(20),
    sequence_name character varying(50),
    alignment_seq text
);


ALTER TABLE family_member OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- Name: family_member; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW family_member AS
 SELECT family_member.family_member_id,
    family_member.cds_id,
    family_member.organism_group_id,
    family_member.family_id,
    family_member.database_name,
    family_member.sequence_name,
    family_member.alignment_seq
   FROM sgn.family_member;


ALTER TABLE family_member OWNER TO postgres;

--
-- Name: feature_cvterm_dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE feature_cvterm_dbxref (
    feature_cvterm_dbxref_id integer NOT NULL,
    feature_cvterm_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE feature_cvterm_dbxref OWNER TO postgres;

--
-- Name: TABLE feature_cvterm_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_cvterm_dbxref IS 'Additional dbxrefs for an association. Rows in the feature_cvterm table may be backed up by dbxrefs. For example, a feature_cvterm association that was inferred via a protein-protein interaction may be backed by by refering to the dbxref for the alternate protein. Corresponds to the WITH column in a GO gene association file (but can also be used for other analagous associations). See http://www.geneontology.org/doc/GO.annotation.shtml#file for more details';


--
-- Name: feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq OWNER TO postgres;

--
-- Name: feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq OWNED BY feature_cvterm_dbxref.feature_cvterm_dbxref_id;


--
-- Name: feature_cvterm_feature_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_cvterm_feature_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE feature_cvterm_feature_cvterm_id_seq OWNER TO postgres;

--
-- Name: feature_cvterm_feature_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_cvterm_feature_cvterm_id_seq OWNED BY feature_cvterm.feature_cvterm_id;


--
-- Name: feature_cvterm_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE feature_cvterm_pub (
    feature_cvterm_pub_id integer NOT NULL,
    feature_cvterm_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE feature_cvterm_pub OWNER TO postgres;

--
-- Name: TABLE feature_cvterm_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_cvterm_pub IS 'Secondary pubs for an
association. Each feature_cvterm association is supported by a single
primary publication. Additional secondary pubs can be added using this
linking table (in a GO gene association file, these corresponding to
any IDs after the pipe symbol in the publications column';


--
-- Name: feature_cvterm_pub_feature_cvterm_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_cvterm_pub_feature_cvterm_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE feature_cvterm_pub_feature_cvterm_pub_id_seq OWNER TO postgres;

--
-- Name: feature_cvterm_pub_feature_cvterm_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_cvterm_pub_feature_cvterm_pub_id_seq OWNED BY feature_cvterm_pub.feature_cvterm_pub_id;


--
-- Name: feature_cvtermprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE feature_cvtermprop (
    feature_cvtermprop_id integer NOT NULL,
    feature_cvterm_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE feature_cvtermprop OWNER TO postgres;

--
-- Name: TABLE feature_cvtermprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_cvtermprop IS 'Extensible properties for
feature to cvterm associations. Examples: GO evidence codes;
qualifiers; metadata such as the date on which the entry was curated
and the source of the association. See the featureprop table for
meanings of type_id, value and rank';


--
-- Name: COLUMN feature_cvtermprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_cvtermprop.type_id IS 'The name of the
property/slot is a cvterm. The meaning of the property is defined in
that cvterm. cvterms may come from the OBO evidence code cv';


--
-- Name: COLUMN feature_cvtermprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_cvtermprop.value IS 'The value of the
property, represented as text. Numeric values are converted to their
text representation. This is less efficient than using native database
types, but is easier to query.';


--
-- Name: COLUMN feature_cvtermprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_cvtermprop.rank IS 'Property-Value
ordering. Any feature_cvterm can have multiple values for any particular
property type - these are ordered in a list using rank, counting from
zero. For properties that are single-valued rather than multi-valued,
the default 0 value should be used';


--
-- Name: feature_cvtermprop_feature_cvtermprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_cvtermprop_feature_cvtermprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE feature_cvtermprop_feature_cvtermprop_id_seq OWNER TO postgres;

--
-- Name: feature_cvtermprop_feature_cvtermprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_cvtermprop_feature_cvtermprop_id_seq OWNED BY feature_cvtermprop.feature_cvtermprop_id;


--
-- Name: feature_dbxref_feature_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_dbxref_feature_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE feature_dbxref_feature_dbxref_id_seq OWNER TO postgres;

--
-- Name: feature_dbxref_feature_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_dbxref_feature_dbxref_id_seq OWNED BY feature_dbxref.feature_dbxref_id;


--
-- Name: feature_feature_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_feature_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE feature_feature_id_seq OWNER TO postgres;

--
-- Name: feature_feature_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_feature_id_seq OWNED BY feature.feature_id;


SET default_with_oids = false;

--
-- Name: feature_genotype; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE feature_genotype (
    feature_genotype_id integer NOT NULL,
    feature_id integer NOT NULL,
    genotype_id integer NOT NULL,
    chromosome_id integer,
    rank integer NOT NULL,
    cgroup integer NOT NULL,
    cvterm_id integer NOT NULL
);


ALTER TABLE feature_genotype OWNER TO postgres;

--
-- Name: COLUMN feature_genotype.chromosome_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_genotype.chromosome_id IS 'A feature of SO type "chromosome".';


--
-- Name: COLUMN feature_genotype.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_genotype.rank IS 'rank can be used for
n-ploid organisms or to preserve order.';


--
-- Name: COLUMN feature_genotype.cgroup; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_genotype.cgroup IS 'Spatially distinguishable
group. group can be used for distinguishing the chromosomal groups,
for example (RNAi products and so on can be treated as different
groups, as they do not fall on a particular chromosome).';


--
-- Name: feature_genotype_feature_genotype_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_genotype_feature_genotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE feature_genotype_feature_genotype_id_seq OWNER TO postgres;

--
-- Name: feature_genotype_feature_genotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_genotype_feature_genotype_id_seq OWNED BY feature_genotype.feature_genotype_id;


--
-- Name: feature_pub_feature_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_pub_feature_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE feature_pub_feature_pub_id_seq OWNER TO postgres;

--
-- Name: feature_pub_feature_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_pub_feature_pub_id_seq OWNED BY feature_pub.feature_pub_id;


SET default_with_oids = true;

--
-- Name: feature_relationship; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE feature_relationship (
    feature_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE feature_relationship OWNER TO postgres;

--
-- Name: TABLE feature_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_relationship IS 'features can be arranged in
graphs, eg exon part_of transcript part_of gene; translation madeby
transcript if type is thought of as a verb, each arc makes a statement
[SUBJECT VERB OBJECT] object can also be thought of as parent
(containing feature), and subject as child (contained feature or
subfeature) -- we include the relationship rank/order, because even
though most of the time we can order things implicitly by sequence
coordinates, we cant always do this - eg transpliced genes.  its also
useful for quickly getting implicit introns';


--
-- Name: COLUMN feature_relationship.subject_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_relationship.subject_id IS 'the subject of the subj-predicate-obj sentence. This is typically the subfeature';


--
-- Name: COLUMN feature_relationship.object_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_relationship.object_id IS 'the object of the subj-predicate-obj sentence. This is typically the container feature';


--
-- Name: COLUMN feature_relationship.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_relationship.type_id IS 'relationship type between subject and object. This is a cvterm, typically from the OBO relationship ontology, although other relationship types are allowed. The most common relationship type is OBO_REL:part_of. Valid relationship types are constrained by the Sequence Ontology';


--
-- Name: COLUMN feature_relationship.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_relationship.value IS 'Additional notes/comments';


--
-- Name: COLUMN feature_relationship.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_relationship.rank IS 'The ordering of subject features with respect to the object feature may be important (for example, exon ordering on a transcript - not always derivable if you take trans spliced genes into consideration). rank is used to order these; starts from zero';


--
-- Name: feature_relationship_feature_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_relationship_feature_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE feature_relationship_feature_relationship_id_seq OWNER TO postgres;

--
-- Name: feature_relationship_feature_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_relationship_feature_relationship_id_seq OWNED BY feature_relationship.feature_relationship_id;


--
-- Name: feature_relationship_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE feature_relationship_pub (
    feature_relationship_pub_id integer NOT NULL,
    feature_relationship_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE feature_relationship_pub OWNER TO postgres;

--
-- Name: TABLE feature_relationship_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_relationship_pub IS 'Provenance. Attach optional evidence to a feature_relationship in the form of a publication';


--
-- Name: feature_relationship_pub_feature_relationship_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_relationship_pub_feature_relationship_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE feature_relationship_pub_feature_relationship_pub_id_seq OWNER TO postgres;

--
-- Name: feature_relationship_pub_feature_relationship_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_relationship_pub_feature_relationship_pub_id_seq OWNED BY feature_relationship_pub.feature_relationship_pub_id;


--
-- Name: feature_relationshipprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE feature_relationshipprop (
    feature_relationshipprop_id integer NOT NULL,
    feature_relationship_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE feature_relationshipprop OWNER TO postgres;

--
-- Name: TABLE feature_relationshipprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_relationshipprop IS 'Extensible properties
for feature_relationships. Analagous structure to featureprop. This
table is largely optional and not used with a high frequency. Typical
scenarios may be if one wishes to attach additional data to a
feature_relationship - for example to say that the
feature_relationship is only true in certain contexts';


--
-- Name: COLUMN feature_relationshipprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_relationshipprop.type_id IS 'The name of the
property/slot is a cvterm. The meaning of the property is defined in
that cvterm. Currently there is no standard ontology for
feature_relationship property types';


--
-- Name: COLUMN feature_relationshipprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_relationshipprop.value IS 'The value of the
property, represented as text. Numeric values are converted to their
text representation. This is less efficient than using native database
types, but is easier to query.';


--
-- Name: COLUMN feature_relationshipprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN feature_relationshipprop.rank IS 'Property-Value
ordering. Any feature_relationship can have multiple values for any particular
property type - these are ordered in a list using rank, counting from
zero. For properties that are single-valued rather than multi-valued,
the default 0 value should be used';


--
-- Name: feature_relationshipprop_feature_relationshipprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_relationshipprop_feature_relationshipprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE feature_relationshipprop_feature_relationshipprop_id_seq OWNER TO postgres;

--
-- Name: feature_relationshipprop_feature_relationshipprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_relationshipprop_feature_relationshipprop_id_seq OWNED BY feature_relationshipprop.feature_relationshipprop_id;


--
-- Name: feature_relationshipprop_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE feature_relationshipprop_pub (
    feature_relationshipprop_pub_id integer NOT NULL,
    feature_relationshipprop_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE feature_relationshipprop_pub OWNER TO postgres;

--
-- Name: TABLE feature_relationshipprop_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE feature_relationshipprop_pub IS 'Provenance for feature_relationshipprop';


--
-- Name: feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq OWNER TO postgres;

--
-- Name: feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq OWNED BY feature_relationshipprop_pub.feature_relationshipprop_pub_id;


--
-- Name: feature_synonym_feature_synonym_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_synonym_feature_synonym_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE feature_synonym_feature_synonym_id_seq OWNER TO postgres;

--
-- Name: feature_synonym_feature_synonym_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE feature_synonym_feature_synonym_id_seq OWNED BY feature_synonym.feature_synonym_id;


--
-- Name: feature_uniquename_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE feature_uniquename_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE feature_uniquename_seq OWNER TO postgres;

--
-- Name: featureloc_featureloc_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE featureloc_featureloc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE featureloc_featureloc_id_seq OWNER TO postgres;

--
-- Name: featureloc_featureloc_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE featureloc_featureloc_id_seq OWNED BY featureloc.featureloc_id;


--
-- Name: featureloc_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE featureloc_pub (
    featureloc_pub_id integer NOT NULL,
    featureloc_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE featureloc_pub OWNER TO postgres;

--
-- Name: TABLE featureloc_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE featureloc_pub IS 'Provenance of featureloc. Linking table between featurelocs and publications that mention them';


--
-- Name: featureloc_pub_featureloc_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE featureloc_pub_featureloc_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE featureloc_pub_featureloc_pub_id_seq OWNER TO postgres;

--
-- Name: featureloc_pub_featureloc_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE featureloc_pub_featureloc_pub_id_seq OWNED BY featureloc_pub.featureloc_pub_id;


--
-- Name: featureprop_featureprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE featureprop_featureprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE featureprop_featureprop_id_seq OWNER TO postgres;

--
-- Name: featureprop_featureprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE featureprop_featureprop_id_seq OWNED BY featureprop.featureprop_id;


--
-- Name: featureprop_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE featureprop_pub (
    featureprop_pub_id integer NOT NULL,
    featureprop_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE featureprop_pub OWNER TO postgres;

--
-- Name: TABLE featureprop_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE featureprop_pub IS 'Provenance. Any featureprop assignment can optionally be supported by a publication';


--
-- Name: featureprop_pub_featureprop_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE featureprop_pub_featureprop_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE featureprop_pub_featureprop_pub_id_seq OWNER TO postgres;

--
-- Name: featureprop_pub_featureprop_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE featureprop_pub_featureprop_pub_id_seq OWNED BY featureprop_pub.featureprop_pub_id;


--
-- Name: forward_amplicon_sequence_information; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE forward_amplicon_sequence_information (
    organism_name text,
    accession_id text,
    plant_number integer,
    ending text,
    cxgn_production_visible boolean,
    forward_amplicon_sequence_information_id integer NOT NULL
);


ALTER TABLE forward_amplicon_sequence_information OWNER TO postgres;

--
-- Name: forward_amplicon_sequence_inf_forward_amplicon_sequence_inf_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE forward_amplicon_sequence_inf_forward_amplicon_sequence_inf_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE forward_amplicon_sequence_inf_forward_amplicon_sequence_inf_seq OWNER TO postgres;

--
-- Name: forward_amplicon_sequence_inf_forward_amplicon_sequence_inf_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE forward_amplicon_sequence_inf_forward_amplicon_sequence_inf_seq OWNED BY forward_amplicon_sequence_information.forward_amplicon_sequence_information_id;


--
-- Name: forward_amplicon_sequence_markers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE forward_amplicon_sequence_markers (
    marker_name text,
    ending text,
    cxgn_production_visible boolean,
    forward_amplicon_sequence_markers_id integer NOT NULL
);


ALTER TABLE forward_amplicon_sequence_markers OWNER TO postgres;

--
-- Name: forward_amplicon_sequence_mar_forward_amplicon_sequence_mar_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE forward_amplicon_sequence_mar_forward_amplicon_sequence_mar_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE forward_amplicon_sequence_mar_forward_amplicon_sequence_mar_seq OWNER TO postgres;

--
-- Name: forward_amplicon_sequence_mar_forward_amplicon_sequence_mar_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE forward_amplicon_sequence_mar_forward_amplicon_sequence_mar_seq OWNED BY forward_amplicon_sequence_markers.forward_amplicon_sequence_markers_id;


--
-- Name: fpc_band; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE fpc_band (
    fpc_band_id integer NOT NULL,
    fpc_fingerprint_id integer NOT NULL,
    fragment_size integer,
    band_position integer,
    CONSTRAINT bandcheck CHECK (((band_position IS NULL) OR (band_position > 0))),
    CONSTRAINT datacheck CHECK (((fragment_size IS NOT NULL) OR (band_position IS NOT NULL))),
    CONSTRAINT fragcheck CHECK (((fragment_size IS NULL) OR (fragment_size > 0)))
);


ALTER TABLE fpc_band OWNER TO postgres;

--
-- Name: TABLE fpc_band; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE fpc_band IS 'each row is a band in a gel lane or capillary run';


--
-- Name: fpc_band_fpc_band_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE fpc_band_fpc_band_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE fpc_band_fpc_band_id_seq OWNER TO postgres;

--
-- Name: fpc_band_fpc_band_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE fpc_band_fpc_band_id_seq OWNED BY fpc_band.fpc_band_id;


SET default_with_oids = false;

--
-- Name: fpc_build; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE fpc_build (
    fpc_build_id integer NOT NULL,
    date date NOT NULL,
    file_base text NOT NULL,
    comment text,
    fpc_series_id integer NOT NULL
);


ALTER TABLE fpc_build OWNER TO postgres;

--
-- Name: TABLE fpc_build; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE fpc_build IS 'each row represents a run of the fpc contig building program, with a result file, linked to a bunch of fingerprints that it uses, and containing a bunch of fpc contigs';


--
-- Name: COLUMN fpc_build.file_base; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN fpc_build.file_base IS 'file basename relative to the base path for keeping fpc data.  the actual filenames are file_base.cor and file_base.fpc';


--
-- Name: fpc_build_fpc_build_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE fpc_build_fpc_build_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE fpc_build_fpc_build_id_seq OWNER TO postgres;

--
-- Name: fpc_build_fpc_build_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE fpc_build_fpc_build_id_seq OWNED BY fpc_build.fpc_build_id;


--
-- Name: fpc_build_fpc_fingerprint; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE fpc_build_fpc_fingerprint (
    fpc_build_fpc_fingerprint_id bigint NOT NULL,
    fpc_build_id integer,
    fpc_fingerprint_id bigint
);


ALTER TABLE fpc_build_fpc_fingerprint OWNER TO postgres;

--
-- Name: TABLE fpc_build_fpc_fingerprint; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE fpc_build_fpc_fingerprint IS 'links fpc fingerprints to the builds that use them';


--
-- Name: fpc_build_fpc_fingerprint_fpc_build_fpc_fingerprint_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE fpc_build_fpc_fingerprint_fpc_build_fpc_fingerprint_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE fpc_build_fpc_fingerprint_fpc_build_fpc_fingerprint_id_seq OWNER TO postgres;

--
-- Name: fpc_build_fpc_fingerprint_fpc_build_fpc_fingerprint_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE fpc_build_fpc_fingerprint_fpc_build_fpc_fingerprint_id_seq OWNED BY fpc_build_fpc_fingerprint.fpc_build_fpc_fingerprint_id;


--
-- Name: fpc_contig; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE fpc_contig (
    fpc_contig_id bigint NOT NULL,
    fpc_build_id integer NOT NULL,
    name character varying(20) NOT NULL
);


ALTER TABLE fpc_contig OWNER TO postgres;

--
-- Name: TABLE fpc_contig; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE fpc_contig IS 'each row is an contig in an fpc build, linked to clones it contains via  fpc_contig_clone table';


--
-- Name: fpc_contig_clone; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE fpc_contig_clone (
    fpc_contig_clone_id bigint NOT NULL,
    fpc_contig_id bigint NOT NULL,
    clone_id bigint NOT NULL,
    plausible boolean DEFAULT true NOT NULL
);


ALTER TABLE fpc_contig_clone OWNER TO postgres;

--
-- Name: TABLE fpc_contig_clone; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE fpc_contig_clone IS 'links fpc contigs with the clones that are a part of them';


--
-- Name: fpc_contig_clone_fpc_contig_clone_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE fpc_contig_clone_fpc_contig_clone_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE fpc_contig_clone_fpc_contig_clone_id_seq OWNER TO postgres;

--
-- Name: fpc_contig_clone_fpc_contig_clone_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE fpc_contig_clone_fpc_contig_clone_id_seq OWNED BY fpc_contig_clone.fpc_contig_clone_id;


--
-- Name: fpc_contig_fpc_contig_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE fpc_contig_fpc_contig_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE fpc_contig_fpc_contig_id_seq OWNER TO postgres;

--
-- Name: fpc_contig_fpc_contig_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE fpc_contig_fpc_contig_id_seq OWNED BY fpc_contig.fpc_contig_id;


SET default_with_oids = true;

--
-- Name: fpc_fingerprint; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE fpc_fingerprint (
    fpc_fingerprint_id integer NOT NULL,
    clone_id integer NOT NULL,
    gel_name character varying(30),
    enzyme_id integer NOT NULL
);


ALTER TABLE fpc_fingerprint OWNER TO postgres;

--
-- Name: TABLE fpc_fingerprint; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE fpc_fingerprint IS 'each row is a lane in a gel or a single capillary run of a single clone';


--
-- Name: fpc_fingerprint_fpc_fingerprint_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE fpc_fingerprint_fpc_fingerprint_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE fpc_fingerprint_fpc_fingerprint_id_seq OWNER TO postgres;

--
-- Name: fpc_fingerprint_fpc_fingerprint_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE fpc_fingerprint_fpc_fingerprint_id_seq OWNED BY fpc_fingerprint.fpc_fingerprint_id;


--
-- Name: fpc_series; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE fpc_series (
    fpc_series_id integer NOT NULL,
    name character varying(50)
);


ALTER TABLE fpc_series OWNER TO postgres;

--
-- Name: TABLE fpc_series; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE fpc_series IS 'each row here is one fpc build series, like "China FPC builds".  captures when different fpc builds are different versions of the same build';


--
-- Name: fpc_series_fpc_series_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE fpc_series_fpc_series_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE fpc_series_fpc_series_id_seq OWNER TO postgres;

--
-- Name: fpc_series_fpc_series_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE fpc_series_fpc_series_id_seq OWNED BY fpc_series.fpc_series_id;


--
-- Name: genotype_genotype_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE genotype_genotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genotype_genotype_id_seq OWNER TO postgres;

--
-- Name: genotype_genotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE genotype_genotype_id_seq OWNED BY genotype.genotype_id;


SET default_with_oids = false;

--
-- Name: genotypeprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE genotypeprop (
    genotypeprop_id integer NOT NULL,
    genotype_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE genotypeprop OWNER TO postgres;

--
-- Name: genotypeprop_genotypeprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE genotypeprop_genotypeprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE genotypeprop_genotypeprop_id_seq OWNER TO postgres;

--
-- Name: genotypeprop_genotypeprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE genotypeprop_genotypeprop_id_seq OWNED BY genotypeprop.genotypeprop_id;


--
-- Name: genotyping_protocols; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW genotyping_protocols AS
 SELECT nd_protocol.nd_protocol_id AS genotyping_protocol_id,
    nd_protocol.name AS genotyping_protocol_name
   FROM nd_protocol
  GROUP BY nd_protocol.nd_protocol_id, nd_protocol.name
  WITH NO DATA;


ALTER TABLE genotyping_protocols OWNER TO web_usr;

--
-- Name: genotyping_protocolsxlocations; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW genotyping_protocolsxlocations AS
 SELECT materialized_genoview.genotyping_protocol_id,
    materialized_phenoview.location_id
   FROM (materialized_genoview
     JOIN materialized_phenoview USING (accession_id))
  GROUP BY materialized_genoview.genotyping_protocol_id, materialized_phenoview.location_id
  WITH NO DATA;


ALTER TABLE genotyping_protocolsxlocations OWNER TO web_usr;

--
-- Name: genotyping_protocolsxplants; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW genotyping_protocolsxplants AS
 SELECT materialized_genoview.genotyping_protocol_id,
    materialized_phenoview.plant_id
   FROM (materialized_genoview
     JOIN materialized_phenoview USING (accession_id))
  GROUP BY materialized_genoview.genotyping_protocol_id, materialized_phenoview.plant_id
  WITH NO DATA;


ALTER TABLE genotyping_protocolsxplants OWNER TO web_usr;

--
-- Name: genotyping_protocolsxplots; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW genotyping_protocolsxplots AS
 SELECT materialized_genoview.genotyping_protocol_id,
    materialized_phenoview.plot_id
   FROM (materialized_genoview
     JOIN materialized_phenoview USING (accession_id))
  GROUP BY materialized_genoview.genotyping_protocol_id, materialized_phenoview.plot_id
  WITH NO DATA;


ALTER TABLE genotyping_protocolsxplots OWNER TO web_usr;

--
-- Name: genotyping_protocolsxtraits; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW genotyping_protocolsxtraits AS
 SELECT materialized_genoview.genotyping_protocol_id,
    materialized_phenoview.trait_id
   FROM (materialized_genoview
     JOIN materialized_phenoview USING (accession_id))
  GROUP BY materialized_genoview.genotyping_protocol_id, materialized_phenoview.trait_id
  WITH NO DATA;


ALTER TABLE genotyping_protocolsxtraits OWNER TO web_usr;

--
-- Name: genotyping_protocolsxtrial_designs; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW genotyping_protocolsxtrial_designs AS
 SELECT materialized_genoview.genotyping_protocol_id,
    materialized_phenoview.trial_design_id
   FROM (materialized_genoview
     JOIN materialized_phenoview USING (accession_id))
  GROUP BY materialized_genoview.genotyping_protocol_id, materialized_phenoview.trial_design_id
  WITH NO DATA;


ALTER TABLE genotyping_protocolsxtrial_designs OWNER TO web_usr;

--
-- Name: genotyping_protocolsxtrial_types; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW genotyping_protocolsxtrial_types AS
 SELECT materialized_genoview.genotyping_protocol_id,
    materialized_phenoview.trial_type_id
   FROM (materialized_genoview
     JOIN materialized_phenoview USING (accession_id))
  GROUP BY materialized_genoview.genotyping_protocol_id, materialized_phenoview.trial_type_id
  WITH NO DATA;


ALTER TABLE genotyping_protocolsxtrial_types OWNER TO web_usr;

--
-- Name: genotyping_protocolsxtrials; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW genotyping_protocolsxtrials AS
 SELECT materialized_genoview.genotyping_protocol_id,
    materialized_phenoview.trial_id
   FROM (materialized_genoview
     JOIN materialized_phenoview USING (accession_id))
  GROUP BY materialized_genoview.genotyping_protocol_id, materialized_phenoview.trial_id
  WITH NO DATA;


ALTER TABLE genotyping_protocolsxtrials OWNER TO web_usr;

--
-- Name: genotyping_protocolsxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW genotyping_protocolsxyears AS
 SELECT materialized_genoview.genotyping_protocol_id,
    materialized_phenoview.year_id
   FROM (materialized_genoview
     JOIN materialized_phenoview USING (accession_id))
  GROUP BY materialized_genoview.genotyping_protocol_id, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE genotyping_protocolsxyears OWNER TO web_usr;

--
-- Name: gff3atts; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW gff3atts AS
 SELECT fs.feature_id,
    'Ontology_term'::text AS type,
        CASE
            WHEN ((db.name)::text ~~ '%Gene Ontology%'::text) THEN (('GO:'::text || (dbx.accession)::text))::character varying
            WHEN ((db.name)::text ~~ 'Sequence Ontology%'::text) THEN (('SO:'::text || (dbx.accession)::text))::character varying
            ELSE ((((db.name)::text || ':'::text) || (dbx.accession)::text))::character varying
        END AS attribute
   FROM cvterm s,
    dbxref dbx,
    feature_cvterm fs,
    db
  WHERE ((fs.cvterm_id = s.cvterm_id) AND (s.dbxref_id = dbx.dbxref_id) AND (db.db_id = dbx.db_id))
UNION ALL
 SELECT fs.feature_id,
    'Dbxref'::text AS type,
    (((d.name)::text || ':'::text) || (s.accession)::text) AS attribute
   FROM dbxref s,
    feature_dbxref fs,
    db d
  WHERE ((fs.dbxref_id = s.dbxref_id) AND (s.db_id = d.db_id) AND ((d.name)::text <> 'GFF_source'::text))
UNION ALL
 SELECT f.feature_id,
    'Alias'::text AS type,
    s.name AS attribute
   FROM synonym s,
    feature_synonym fs,
    feature f
  WHERE ((fs.synonym_id = s.synonym_id) AND (f.feature_id = fs.feature_id) AND ((f.name)::text <> (s.name)::text) AND (f.uniquename <> (s.name)::text))
UNION ALL
 SELECT fp.feature_id,
    cv.name AS type,
    fp.value AS attribute
   FROM featureprop fp,
    cvterm cv
  WHERE (fp.type_id = cv.cvterm_id)
UNION ALL
 SELECT fs.feature_id,
    'pub'::text AS type,
    (((s.series_name)::text || ':'::text) || s.title) AS attribute
   FROM pub s,
    feature_pub fs
  WHERE (fs.pub_id = s.pub_id)
UNION ALL
 SELECT fr.subject_id AS feature_id,
    'Parent'::text AS type,
    parent.uniquename AS attribute
   FROM feature_relationship fr,
    feature parent
  WHERE (fr.object_id = parent.feature_id)
UNION ALL
 SELECT feature.feature_id,
    'ID'::text AS type,
    feature.uniquename AS attribute
   FROM feature
  WHERE (NOT (feature.type_id IN ( SELECT cvterm.cvterm_id
           FROM cvterm
          WHERE ((cvterm.name)::text = 'CDS'::text))))
UNION ALL
 SELECT feature.feature_id,
    'chado_feature_id'::text AS type,
    (feature.feature_id)::character varying AS attribute
   FROM feature
UNION ALL
 SELECT feature.feature_id,
    'Name'::text AS type,
    feature.name AS attribute
   FROM feature;


ALTER TABLE gff3atts OWNER TO postgres;

--
-- Name: gff3view; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW gff3view AS
 SELECT f.feature_id,
    sf.name AS ref,
    gffdbx.accession AS source,
    cv.name AS type,
    (fl.fmin + 1) AS fstart,
    fl.fmax AS fend,
    af.significance AS score,
    fl.strand,
    fl.phase,
    f.seqlen,
    f.name,
    f.organism_id
   FROM (((((feature f
     LEFT JOIN featureloc fl ON ((f.feature_id = fl.feature_id)))
     LEFT JOIN feature sf ON ((fl.srcfeature_id = sf.feature_id)))
     LEFT JOIN ( SELECT fd.feature_id,
            d.accession
           FROM ((feature_dbxref fd
             JOIN dbxref d USING (dbxref_id))
             JOIN db USING (db_id))
          WHERE ((db.name)::text = 'GFF_source'::text)) gffdbx ON ((f.feature_id = gffdbx.feature_id)))
     LEFT JOIN cvterm cv ON ((f.type_id = cv.cvterm_id)))
     LEFT JOIN analysisfeature af ON ((f.feature_id = af.feature_id)));


ALTER TABLE gff3view OWNER TO postgres;

--
-- Name: gff_meta; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE gff_meta (
    name character varying(100),
    hostname character varying(100),
    starttime timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE gff_meta OWNER TO postgres;

SET default_with_oids = true;

--
-- Name: glossary; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE glossary (
    glossary_id integer NOT NULL,
    term text NOT NULL,
    definition text NOT NULL
);


ALTER TABLE glossary OWNER TO postgres;

--
-- Name: glossary_glossary_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE glossary_glossary_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE glossary_glossary_id_seq OWNER TO postgres;

--
-- Name: glossary_glossary_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE glossary_glossary_id_seq OWNED BY glossary.glossary_id;


SET default_with_oids = false;

--
-- Name: itag_loading_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE itag_loading_log (
    id integer NOT NULL,
    deleted boolean DEFAULT false NOT NULL,
    "timestamp" timestamp without time zone DEFAULT now() NOT NULL,
    uname character varying(40) NOT NULL,
    host character varying(40) NOT NULL,
    progname character varying(80) NOT NULL,
    pid integer NOT NULL,
    search_key character varying(200),
    message text
);


ALTER TABLE itag_loading_log OWNER TO postgres;

--
-- Name: itag_loading_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE itag_loading_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE itag_loading_log_id_seq OWNER TO postgres;

--
-- Name: itag_loading_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE itag_loading_log_id_seq OWNED BY itag_loading_log.id;


--
-- Name: locations; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW locations AS
 SELECT nd_geolocation.nd_geolocation_id AS location_id,
    nd_geolocation.description AS location_name
   FROM nd_geolocation
  GROUP BY nd_geolocation.nd_geolocation_id, nd_geolocation.description
  WITH NO DATA;


ALTER TABLE locations OWNER TO web_usr;

--
-- Name: locationsxplants; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW locationsxplants AS
 SELECT materialized_phenoview.location_id,
    materialized_phenoview.plant_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.location_id, materialized_phenoview.plant_id
  WITH NO DATA;


ALTER TABLE locationsxplants OWNER TO web_usr;

--
-- Name: locationsxplots; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW locationsxplots AS
 SELECT materialized_phenoview.location_id,
    materialized_phenoview.plot_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.location_id, materialized_phenoview.plot_id
  WITH NO DATA;


ALTER TABLE locationsxplots OWNER TO web_usr;

--
-- Name: locationsxtraits; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW locationsxtraits AS
 SELECT materialized_phenoview.location_id,
    materialized_phenoview.trait_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.location_id, materialized_phenoview.trait_id
  WITH NO DATA;


ALTER TABLE locationsxtraits OWNER TO web_usr;

--
-- Name: locationsxtrial_designs; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW locationsxtrial_designs AS
 SELECT materialized_phenoview.location_id,
    materialized_phenoview.trial_design_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.location_id, materialized_phenoview.trial_design_id
  WITH NO DATA;


ALTER TABLE locationsxtrial_designs OWNER TO web_usr;

--
-- Name: locationsxtrial_types; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW locationsxtrial_types AS
 SELECT materialized_phenoview.location_id,
    materialized_phenoview.trial_type_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.location_id, materialized_phenoview.trial_type_id
  WITH NO DATA;


ALTER TABLE locationsxtrial_types OWNER TO web_usr;

--
-- Name: locationsxtrials; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW locationsxtrials AS
 SELECT materialized_phenoview.location_id,
    materialized_phenoview.trial_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.location_id, materialized_phenoview.trial_id
  WITH NO DATA;


ALTER TABLE locationsxtrials OWNER TO web_usr;

--
-- Name: locationsxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW locationsxyears AS
 SELECT materialized_phenoview.location_id,
    materialized_phenoview.year_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.location_id, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE locationsxyears OWNER TO web_usr;

SET default_with_oids = true;

--
-- Name: marker_names; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE marker_names (
    marker_id integer,
    name text
);


ALTER TABLE marker_names OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: materialized_view; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE materialized_view (
    materialized_view_id integer NOT NULL,
    last_update timestamp without time zone,
    refresh_time integer,
    name character varying(64),
    mv_schema character varying(64),
    mv_table character varying(128),
    mv_specs text,
    indexed text,
    query text
);


ALTER TABLE materialized_view OWNER TO postgres;

--
-- Name: materialized_view_materialized_view_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE materialized_view_materialized_view_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE materialized_view_materialized_view_id_seq OWNER TO postgres;

--
-- Name: materialized_view_materialized_view_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE materialized_view_materialized_view_id_seq OWNED BY materialized_view.materialized_view_id;


--
-- Name: matviews; Type: TABLE; Schema: public; Owner: web_usr
--

CREATE TABLE matviews (
    mv_id integer NOT NULL,
    mv_name name NOT NULL,
    mv_dependents name[],
    currently_refreshing boolean,
    last_refresh timestamp with time zone
);


ALTER TABLE matviews OWNER TO web_usr;

--
-- Name: matviews_mv_id_seq; Type: SEQUENCE; Schema: public; Owner: web_usr
--

CREATE SEQUENCE matviews_mv_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE matviews_mv_id_seq OWNER TO web_usr;

--
-- Name: matviews_mv_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: web_usr
--

ALTER SEQUENCE matviews_mv_id_seq OWNED BY matviews.mv_id;


--
-- Name: nd_experiment_contact; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE nd_experiment_contact (
    nd_experiment_contact_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    contact_id integer NOT NULL
);


ALTER TABLE nd_experiment_contact OWNER TO postgres;

--
-- Name: nd_experiment_contact_nd_experiment_contact_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_contact_nd_experiment_contact_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nd_experiment_contact_nd_experiment_contact_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_contact_nd_experiment_contact_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_contact_nd_experiment_contact_id_seq OWNED BY nd_experiment_contact.nd_experiment_contact_id;


--
-- Name: nd_experiment_dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE nd_experiment_dbxref (
    nd_experiment_dbxref_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE nd_experiment_dbxref OWNER TO postgres;

--
-- Name: TABLE nd_experiment_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_experiment_dbxref IS 'Cross-reference experiment to accessions, images, etc';


--
-- Name: nd_experiment_dbxref_nd_experiment_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_dbxref_nd_experiment_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nd_experiment_dbxref_nd_experiment_dbxref_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_dbxref_nd_experiment_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_dbxref_nd_experiment_dbxref_id_seq OWNED BY nd_experiment_dbxref.nd_experiment_dbxref_id;


--
-- Name: nd_experiment_genotype_nd_experiment_genotype_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_genotype_nd_experiment_genotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nd_experiment_genotype_nd_experiment_genotype_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_genotype_nd_experiment_genotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_genotype_nd_experiment_genotype_id_seq OWNED BY nd_experiment_genotype.nd_experiment_genotype_id;


--
-- Name: nd_experiment_nd_experiment_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_nd_experiment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nd_experiment_nd_experiment_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_nd_experiment_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_nd_experiment_id_seq OWNED BY nd_experiment.nd_experiment_id;


--
-- Name: nd_experiment_phenotype_nd_experiment_phenotype_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_phenotype_nd_experiment_phenotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nd_experiment_phenotype_nd_experiment_phenotype_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_phenotype_nd_experiment_phenotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_phenotype_nd_experiment_phenotype_id_seq OWNED BY nd_experiment_phenotype.nd_experiment_phenotype_id;


--
-- Name: nd_experiment_project_nd_experiment_project_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_project_nd_experiment_project_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nd_experiment_project_nd_experiment_project_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_project_nd_experiment_project_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_project_nd_experiment_project_id_seq OWNED BY nd_experiment_project.nd_experiment_project_id;


--
-- Name: nd_experiment_protocol_nd_experiment_protocol_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_protocol_nd_experiment_protocol_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nd_experiment_protocol_nd_experiment_protocol_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_protocol_nd_experiment_protocol_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_protocol_nd_experiment_protocol_id_seq OWNED BY nd_experiment_protocol.nd_experiment_protocol_id;


--
-- Name: nd_experiment_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE nd_experiment_pub (
    nd_experiment_pub_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE nd_experiment_pub OWNER TO postgres;

--
-- Name: TABLE nd_experiment_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_experiment_pub IS 'Linking nd_experiment(s) to publication(s)';


--
-- Name: nd_experiment_pub_nd_experiment_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_pub_nd_experiment_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nd_experiment_pub_nd_experiment_pub_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_pub_nd_experiment_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_pub_nd_experiment_pub_id_seq OWNED BY nd_experiment_pub.nd_experiment_pub_id;


--
-- Name: nd_experiment_stock_dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE nd_experiment_stock_dbxref (
    nd_experiment_stock_dbxref_id integer NOT NULL,
    nd_experiment_stock_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE nd_experiment_stock_dbxref OWNER TO postgres;

--
-- Name: TABLE nd_experiment_stock_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_experiment_stock_dbxref IS 'Cross-reference experiment_stock to accessions, images, etc';


--
-- Name: nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq OWNED BY nd_experiment_stock_dbxref.nd_experiment_stock_dbxref_id;


--
-- Name: nd_experiment_stock_nd_experiment_stock_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_stock_nd_experiment_stock_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nd_experiment_stock_nd_experiment_stock_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_stock_nd_experiment_stock_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_stock_nd_experiment_stock_id_seq OWNED BY nd_experiment_stock.nd_experiment_stock_id;


--
-- Name: nd_experiment_stockprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE nd_experiment_stockprop (
    nd_experiment_stockprop_id integer NOT NULL,
    nd_experiment_stock_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE nd_experiment_stockprop OWNER TO postgres;

--
-- Name: TABLE nd_experiment_stockprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_experiment_stockprop IS 'Property/value associations for experiment_stocks. This table can store the properties such as treatment';


--
-- Name: COLUMN nd_experiment_stockprop.nd_experiment_stock_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_experiment_stockprop.nd_experiment_stock_id IS 'The experiment_stock to which the property applies.';


--
-- Name: COLUMN nd_experiment_stockprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_experiment_stockprop.type_id IS 'The name of the property as a reference to a controlled vocabulary term.';


--
-- Name: COLUMN nd_experiment_stockprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_experiment_stockprop.value IS 'The value of the property.';


--
-- Name: COLUMN nd_experiment_stockprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_experiment_stockprop.rank IS 'The rank of the property value, if the property has an array of values.';


--
-- Name: nd_experiment_stockprop_nd_experiment_stockprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experiment_stockprop_nd_experiment_stockprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nd_experiment_stockprop_nd_experiment_stockprop_id_seq OWNER TO postgres;

--
-- Name: nd_experiment_stockprop_nd_experiment_stockprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experiment_stockprop_nd_experiment_stockprop_id_seq OWNED BY nd_experiment_stockprop.nd_experiment_stockprop_id;


--
-- Name: nd_experimentprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE nd_experimentprop (
    nd_experimentprop_id integer NOT NULL,
    nd_experiment_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE nd_experimentprop OWNER TO postgres;

--
-- Name: nd_experimentprop_nd_experimentprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_experimentprop_nd_experimentprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nd_experimentprop_nd_experimentprop_id_seq OWNER TO postgres;

--
-- Name: nd_experimentprop_nd_experimentprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_experimentprop_nd_experimentprop_id_seq OWNED BY nd_experimentprop.nd_experimentprop_id;


--
-- Name: nd_geolocation_nd_geolocation_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_geolocation_nd_geolocation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nd_geolocation_nd_geolocation_id_seq OWNER TO postgres;

--
-- Name: nd_geolocation_nd_geolocation_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_geolocation_nd_geolocation_id_seq OWNED BY nd_geolocation.nd_geolocation_id;


--
-- Name: nd_geolocationprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE nd_geolocationprop (
    nd_geolocationprop_id integer NOT NULL,
    nd_geolocation_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE nd_geolocationprop OWNER TO postgres;

--
-- Name: TABLE nd_geolocationprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_geolocationprop IS 'Property/value associations for geolocations. This table can store the properties such as location and environment';


--
-- Name: COLUMN nd_geolocationprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_geolocationprop.type_id IS 'The name of the property as a reference to a controlled vocabulary term.';


--
-- Name: COLUMN nd_geolocationprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_geolocationprop.value IS 'The value of the property.';


--
-- Name: COLUMN nd_geolocationprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_geolocationprop.rank IS 'The rank of the property value, if the property has an array of values.';


--
-- Name: nd_geolocationprop_nd_geolocationprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_geolocationprop_nd_geolocationprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nd_geolocationprop_nd_geolocationprop_id_seq OWNER TO postgres;

--
-- Name: nd_geolocationprop_nd_geolocationprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_geolocationprop_nd_geolocationprop_id_seq OWNED BY nd_geolocationprop.nd_geolocationprop_id;


--
-- Name: nd_protocol_nd_protocol_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_protocol_nd_protocol_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nd_protocol_nd_protocol_id_seq OWNER TO postgres;

--
-- Name: nd_protocol_nd_protocol_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_protocol_nd_protocol_id_seq OWNED BY nd_protocol.nd_protocol_id;


--
-- Name: nd_protocol_reagent; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE nd_protocol_reagent (
    nd_protocol_reagent_id integer NOT NULL,
    nd_protocol_id integer NOT NULL,
    reagent_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE nd_protocol_reagent OWNER TO postgres;

--
-- Name: nd_protocol_reagent_nd_protocol_reagent_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_protocol_reagent_nd_protocol_reagent_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nd_protocol_reagent_nd_protocol_reagent_id_seq OWNER TO postgres;

--
-- Name: nd_protocol_reagent_nd_protocol_reagent_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_protocol_reagent_nd_protocol_reagent_id_seq OWNED BY nd_protocol_reagent.nd_protocol_reagent_id;


--
-- Name: nd_protocolprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE nd_protocolprop (
    nd_protocolprop_id integer NOT NULL,
    nd_protocol_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE nd_protocolprop OWNER TO postgres;

--
-- Name: TABLE nd_protocolprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_protocolprop IS 'Property/value associations for protocol.';


--
-- Name: COLUMN nd_protocolprop.nd_protocol_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_protocolprop.nd_protocol_id IS 'The protocol to which the property applies.';


--
-- Name: COLUMN nd_protocolprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_protocolprop.type_id IS 'The name of the property as a reference to a controlled vocabulary term.';


--
-- Name: COLUMN nd_protocolprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_protocolprop.value IS 'The value of the property.';


--
-- Name: COLUMN nd_protocolprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_protocolprop.rank IS 'The rank of the property value, if the property has an array of values.';


--
-- Name: nd_protocolprop_nd_protocolprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_protocolprop_nd_protocolprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nd_protocolprop_nd_protocolprop_id_seq OWNER TO postgres;

--
-- Name: nd_protocolprop_nd_protocolprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_protocolprop_nd_protocolprop_id_seq OWNED BY nd_protocolprop.nd_protocolprop_id;


--
-- Name: nd_reagent; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE nd_reagent (
    nd_reagent_id integer NOT NULL,
    name character varying(80) NOT NULL,
    type_id integer NOT NULL,
    feature_id integer
);


ALTER TABLE nd_reagent OWNER TO postgres;

--
-- Name: TABLE nd_reagent; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_reagent IS 'A reagent such as a primer, an enzyme, an adapter oligo, a linker oligo. Reagents are used in genotyping experiments, or in any other kind of experiment.';


--
-- Name: COLUMN nd_reagent.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_reagent.name IS 'The name of the reagent. The name should be unique for a given type.';


--
-- Name: COLUMN nd_reagent.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_reagent.type_id IS 'The type of the reagent, for example linker oligomer, or forward primer.';


--
-- Name: COLUMN nd_reagent.feature_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_reagent.feature_id IS 'If the reagent is a primer, the feature that it corresponds to. More generally, the corresponding feature for any reagent that has a sequence that maps to another sequence.';


--
-- Name: nd_reagent_nd_reagent_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_reagent_nd_reagent_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nd_reagent_nd_reagent_id_seq OWNER TO postgres;

--
-- Name: nd_reagent_nd_reagent_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_reagent_nd_reagent_id_seq OWNED BY nd_reagent.nd_reagent_id;


--
-- Name: nd_reagent_relationship; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE nd_reagent_relationship (
    nd_reagent_relationship_id integer NOT NULL,
    subject_reagent_id integer NOT NULL,
    object_reagent_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE nd_reagent_relationship OWNER TO postgres;

--
-- Name: TABLE nd_reagent_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE nd_reagent_relationship IS 'Relationships between reagents. Some reagents form a group. i.e., they are used all together or not at all. Examples are adapter/linker/enzyme experiment reagents.';


--
-- Name: COLUMN nd_reagent_relationship.subject_reagent_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_reagent_relationship.subject_reagent_id IS 'The subject reagent in the relationship. In parent/child terminology, the subject is the child. For example, in "linkerA 3prime-overhang-linker enzymeA" linkerA is the subject, 3prime-overhand-linker is the type, and enzymeA is the object.';


--
-- Name: COLUMN nd_reagent_relationship.object_reagent_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_reagent_relationship.object_reagent_id IS 'The object reagent in the relationship. In parent/child terminology, the object is the parent. For example, in "linkerA 3prime-overhang-linker enzymeA" linkerA is the subject, 3prime-overhand-linker is the type, and enzymeA is the object.';


--
-- Name: COLUMN nd_reagent_relationship.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN nd_reagent_relationship.type_id IS 'The type (or predicate) of the relationship. For example, in "linkerA 3prime-overhang-linker enzymeA" linkerA is the subject, 3prime-overhand-linker is the type, and enzymeA is the object.';


--
-- Name: nd_reagent_relationship_nd_reagent_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_reagent_relationship_nd_reagent_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nd_reagent_relationship_nd_reagent_relationship_id_seq OWNER TO postgres;

--
-- Name: nd_reagent_relationship_nd_reagent_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_reagent_relationship_nd_reagent_relationship_id_seq OWNED BY nd_reagent_relationship.nd_reagent_relationship_id;


--
-- Name: nd_reagentprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE nd_reagentprop (
    nd_reagentprop_id integer NOT NULL,
    nd_reagent_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE nd_reagentprop OWNER TO postgres;

--
-- Name: nd_reagentprop_nd_reagentprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE nd_reagentprop_nd_reagentprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE nd_reagentprop_nd_reagentprop_id_seq OWNER TO postgres;

--
-- Name: nd_reagentprop_nd_reagentprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE nd_reagentprop_nd_reagentprop_id_seq OWNED BY nd_reagentprop.nd_reagentprop_id;


SET default_with_oids = true;

--
-- Name: organism; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE organism (
    organism_id integer NOT NULL,
    abbreviation character varying(255),
    genus character varying(255) NOT NULL,
    species character varying(255) NOT NULL,
    common_name character varying(255),
    comment text,
    genbank_taxon_id integer,
    sgn_organism_id integer,
    obsolete integer
);


ALTER TABLE organism OWNER TO postgres;

--
-- Name: TABLE organism; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE organism IS 'The organismal taxonomic
classification. Note that phylogenies are represented using the
phylogeny module, and taxonomies can be represented using the cvterm
module or the phylogeny module';


--
-- Name: COLUMN organism.species; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN organism.species IS 'A type of organism is always
uniquely identified by genus+species. When mapping from the NCBI
taxonomy names.dmp file, the unique-name column must be used where it
is present, as the name column is not always unique (eg environmental
samples). If a particular strain or subspecies is to be represented,
this is appended onto the species name. Follows standard NCBI taxonomy
pattern';


--
-- Name: organism_dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE organism_dbxref (
    organism_dbxref_id integer NOT NULL,
    organism_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE organism_dbxref OWNER TO postgres;

--
-- Name: organism_dbxref_organism_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE organism_dbxref_organism_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE organism_dbxref_organism_dbxref_id_seq OWNER TO postgres;

--
-- Name: organism_dbxref_organism_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE organism_dbxref_organism_dbxref_id_seq OWNED BY organism_dbxref.organism_dbxref_id;


--
-- Name: organism_organism_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE organism_organism_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE organism_organism_id_seq OWNER TO postgres;

--
-- Name: organism_organism_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE organism_organism_id_seq OWNED BY organism.organism_id;


--
-- Name: organism_relationship; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE organism_relationship (
    organism_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE organism_relationship OWNER TO postgres;

--
-- Name: organism_relationship_organism_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE organism_relationship_organism_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE organism_relationship_organism_relationship_id_seq OWNER TO postgres;

--
-- Name: organism_relationship_organism_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE organism_relationship_organism_relationship_id_seq OWNED BY organism_relationship.organism_relationship_id;


--
-- Name: organismpath; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE organismpath (
    organismpath_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL,
    pathdistance integer
);


ALTER TABLE organismpath OWNER TO postgres;

--
-- Name: organismpath_organismpath_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE organismpath_organismpath_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE organismpath_organismpath_id_seq OWNER TO postgres;

--
-- Name: organismpath_organismpath_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE organismpath_organismpath_id_seq OWNED BY organismpath.organismpath_id;


--
-- Name: organismprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE organismprop (
    organismprop_id integer NOT NULL,
    organism_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE organismprop OWNER TO postgres;

--
-- Name: TABLE organismprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE organismprop IS 'tag-value properties - follows standard chado model';


--
-- Name: organismprop_organismprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE organismprop_organismprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE organismprop_organismprop_id_seq OWNER TO postgres;

--
-- Name: organismprop_organismprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE organismprop_organismprop_id_seq OWNED BY organismprop.organismprop_id;


SET default_with_oids = false;

--
-- Name: phendesc; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE phendesc (
    phendesc_id integer NOT NULL,
    genotype_id integer NOT NULL,
    environment_id integer NOT NULL,
    description text NOT NULL,
    type_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE phendesc OWNER TO postgres;

--
-- Name: TABLE phendesc; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE phendesc IS 'A summary of a _set_ of phenotypic statements for any one gcontext made in any one publication.';


--
-- Name: phendesc_phendesc_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phendesc_phendesc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phendesc_phendesc_id_seq OWNER TO postgres;

--
-- Name: phendesc_phendesc_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phendesc_phendesc_id_seq OWNED BY phendesc.phendesc_id;


--
-- Name: phenotype_comparison; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE phenotype_comparison (
    phenotype_comparison_id integer NOT NULL,
    genotype1_id integer NOT NULL,
    environment1_id integer NOT NULL,
    genotype2_id integer NOT NULL,
    environment2_id integer NOT NULL,
    phenotype1_id integer NOT NULL,
    phenotype2_id integer,
    pub_id integer NOT NULL,
    organism_id integer NOT NULL
);


ALTER TABLE phenotype_comparison OWNER TO postgres;

--
-- Name: TABLE phenotype_comparison; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE phenotype_comparison IS 'Comparison of phenotypes e.g., genotype1/environment1/phenotype1 "non-suppressible" with respect to genotype2/environment2/phenotype2.';


--
-- Name: phenotype_comparison_cvterm; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE phenotype_comparison_cvterm (
    phenotype_comparison_cvterm_id integer NOT NULL,
    phenotype_comparison_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE phenotype_comparison_cvterm OWNER TO postgres;

--
-- Name: phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq OWNER TO postgres;

--
-- Name: phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq OWNED BY phenotype_comparison_cvterm.phenotype_comparison_cvterm_id;


--
-- Name: phenotype_comparison_phenotype_comparison_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phenotype_comparison_phenotype_comparison_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenotype_comparison_phenotype_comparison_id_seq OWNER TO postgres;

--
-- Name: phenotype_comparison_phenotype_comparison_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phenotype_comparison_phenotype_comparison_id_seq OWNED BY phenotype_comparison.phenotype_comparison_id;


--
-- Name: phenotype_cvterm; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE phenotype_cvterm (
    phenotype_cvterm_id integer NOT NULL,
    phenotype_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE phenotype_cvterm OWNER TO postgres;

--
-- Name: phenotype_cvterm_phenotype_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phenotype_cvterm_phenotype_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenotype_cvterm_phenotype_cvterm_id_seq OWNER TO postgres;

--
-- Name: phenotype_cvterm_phenotype_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phenotype_cvterm_phenotype_cvterm_id_seq OWNED BY phenotype_cvterm.phenotype_cvterm_id;


--
-- Name: phenotype_phenotype_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phenotype_phenotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenotype_phenotype_id_seq OWNER TO postgres;

--
-- Name: phenotype_phenotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phenotype_phenotype_id_seq OWNED BY phenotype.phenotype_id;


--
-- Name: phenotypeprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE phenotypeprop (
    phenotypeprop_id integer NOT NULL,
    phenotype_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE phenotypeprop OWNER TO postgres;

--
-- Name: TABLE phenotypeprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE phenotypeprop IS 'A phenotype can have any number of
slot-value property tags attached to it. This is an alternative to
hardcoding a list of columns in the relational schema, and is
completely extensible. There is a unique constraint, phenotypeprop_c1, for
the combination of phenotype_id, rank, and type_id. Multivalued property-value pairs must be differentiated by rank.';


--
-- Name: phenotypeprop_phenotypeprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phenotypeprop_phenotypeprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenotypeprop_phenotypeprop_id_seq OWNER TO postgres;

--
-- Name: phenotypeprop_phenotypeprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phenotypeprop_phenotypeprop_id_seq OWNED BY phenotypeprop.phenotypeprop_id;


--
-- Name: phenstatement; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE phenstatement (
    phenstatement_id integer NOT NULL,
    genotype_id integer NOT NULL,
    environment_id integer NOT NULL,
    phenotype_id integer NOT NULL,
    type_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE phenstatement OWNER TO postgres;

--
-- Name: TABLE phenstatement; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE phenstatement IS 'Phenotypes are things like "larval lethal".  Phenstatements are things like "dpp-1 is recessive larval lethal". So essentially phenstatement is a linking table expressing the relationship between genotype, environment, and phenotype.';


--
-- Name: phenstatement_phenstatement_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phenstatement_phenstatement_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phenstatement_phenstatement_id_seq OWNER TO postgres;

--
-- Name: phenstatement_phenstatement_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phenstatement_phenstatement_id_seq OWNED BY phenstatement.phenstatement_id;


--
-- Name: phylonode; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE phylonode (
    phylonode_id integer NOT NULL,
    phylotree_id integer NOT NULL,
    parent_phylonode_id integer,
    left_idx integer NOT NULL,
    right_idx integer NOT NULL,
    type_id integer,
    feature_id integer,
    label character varying(255),
    distance double precision
);


ALTER TABLE phylonode OWNER TO postgres;

--
-- Name: TABLE phylonode; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE phylonode IS 'This is the most pervasive
       element in the phylogeny module, cataloging the "phylonodes" of
       tree graphs. Edges are implied by the parent_phylonode_id
       reflexive closure. For all nodes in a nested set implementation the left and right index will be *between* the parents left and right indexes.';


--
-- Name: COLUMN phylonode.parent_phylonode_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN phylonode.parent_phylonode_id IS 'Root phylonode can have null parent_phylonode_id value.';


--
-- Name: COLUMN phylonode.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN phylonode.type_id IS 'Type: e.g. root, interior, leaf.';


--
-- Name: COLUMN phylonode.feature_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN phylonode.feature_id IS 'Phylonodes can have optional features attached to them e.g. a protein or nucleotide sequence usually attached to a leaf of the phylotree for non-leaf nodes, the feature may be a feature that is an instance of SO:match; this feature is the alignment of all leaf features beneath it.';


--
-- Name: phylonode_dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE phylonode_dbxref (
    phylonode_dbxref_id integer NOT NULL,
    phylonode_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE phylonode_dbxref OWNER TO postgres;

--
-- Name: TABLE phylonode_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE phylonode_dbxref IS 'For example, for orthology, paralogy group identifiers; could also be used for NCBI taxonomy; for sequences, refer to phylonode_feature, feature associated dbxrefs.';


--
-- Name: phylonode_dbxref_phylonode_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phylonode_dbxref_phylonode_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phylonode_dbxref_phylonode_dbxref_id_seq OWNER TO postgres;

--
-- Name: phylonode_dbxref_phylonode_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phylonode_dbxref_phylonode_dbxref_id_seq OWNED BY phylonode_dbxref.phylonode_dbxref_id;


--
-- Name: phylonode_organism; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE phylonode_organism (
    phylonode_organism_id integer NOT NULL,
    phylonode_id integer NOT NULL,
    organism_id integer NOT NULL
);


ALTER TABLE phylonode_organism OWNER TO postgres;

--
-- Name: TABLE phylonode_organism; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE phylonode_organism IS 'This linking table should only be used for nodes in taxonomy trees; it provides a mapping between the node and an organism. One node can have zero or one organisms, one organism can have zero or more nodes (although typically it should only have one in the standard NCBI taxonomy tree).';


--
-- Name: COLUMN phylonode_organism.phylonode_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN phylonode_organism.phylonode_id IS 'One phylonode cannot refer to >1 organism.';


--
-- Name: phylonode_organism_phylonode_organism_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phylonode_organism_phylonode_organism_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phylonode_organism_phylonode_organism_id_seq OWNER TO postgres;

--
-- Name: phylonode_organism_phylonode_organism_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phylonode_organism_phylonode_organism_id_seq OWNED BY phylonode_organism.phylonode_organism_id;


--
-- Name: phylonode_phylonode_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phylonode_phylonode_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phylonode_phylonode_id_seq OWNER TO postgres;

--
-- Name: phylonode_phylonode_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phylonode_phylonode_id_seq OWNED BY phylonode.phylonode_id;


--
-- Name: phylonode_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE phylonode_pub (
    phylonode_pub_id integer NOT NULL,
    phylonode_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE phylonode_pub OWNER TO postgres;

--
-- Name: phylonode_pub_phylonode_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phylonode_pub_phylonode_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phylonode_pub_phylonode_pub_id_seq OWNER TO postgres;

--
-- Name: phylonode_pub_phylonode_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phylonode_pub_phylonode_pub_id_seq OWNED BY phylonode_pub.phylonode_pub_id;


--
-- Name: phylonode_relationship; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE phylonode_relationship (
    phylonode_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL,
    rank integer,
    phylotree_id integer NOT NULL
);


ALTER TABLE phylonode_relationship OWNER TO postgres;

--
-- Name: TABLE phylonode_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE phylonode_relationship IS 'This is for 
relationships that are not strictly hierarchical; for example,
horizontal gene transfer. Most phylogenetic trees are strictly
hierarchical, nevertheless it is here for completeness.';


--
-- Name: phylonode_relationship_phylonode_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phylonode_relationship_phylonode_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phylonode_relationship_phylonode_relationship_id_seq OWNER TO postgres;

--
-- Name: phylonode_relationship_phylonode_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phylonode_relationship_phylonode_relationship_id_seq OWNED BY phylonode_relationship.phylonode_relationship_id;


--
-- Name: phylonodeprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE phylonodeprop (
    phylonodeprop_id integer NOT NULL,
    phylonode_id integer NOT NULL,
    type_id integer NOT NULL,
    value text DEFAULT ''::text NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE phylonodeprop OWNER TO postgres;

--
-- Name: COLUMN phylonodeprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN phylonodeprop.type_id IS 'type_id could designate phylonode hierarchy relationships, for example: species taxonomy (kingdom, order, family, genus, species), "ortholog/paralog", "fold/superfold", etc.';


--
-- Name: phylonodeprop_phylonodeprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phylonodeprop_phylonodeprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phylonodeprop_phylonodeprop_id_seq OWNER TO postgres;

--
-- Name: phylonodeprop_phylonodeprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phylonodeprop_phylonodeprop_id_seq OWNED BY phylonodeprop.phylonodeprop_id;


--
-- Name: phylotree; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE phylotree (
    phylotree_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    name character varying(255),
    type_id integer,
    analysis_id integer,
    comment text
);


ALTER TABLE phylotree OWNER TO postgres;

--
-- Name: TABLE phylotree; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE phylotree IS 'Global anchor for phylogenetic tree.';


--
-- Name: COLUMN phylotree.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN phylotree.type_id IS 'Type: protein, nucleotide, taxonomy, for example. The type should be any SO type, or "taxonomy".';


--
-- Name: phylotree_phylotree_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phylotree_phylotree_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phylotree_phylotree_id_seq OWNER TO postgres;

--
-- Name: phylotree_phylotree_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phylotree_phylotree_id_seq OWNED BY phylotree.phylotree_id;


--
-- Name: phylotree_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE phylotree_pub (
    phylotree_pub_id integer NOT NULL,
    phylotree_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE phylotree_pub OWNER TO postgres;

--
-- Name: TABLE phylotree_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE phylotree_pub IS 'Tracks citations global to the tree e.g. multiple sequence alignment supporting tree construction.';


--
-- Name: phylotree_pub_phylotree_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE phylotree_pub_phylotree_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phylotree_pub_phylotree_pub_id_seq OWNER TO postgres;

--
-- Name: phylotree_pub_phylotree_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE phylotree_pub_phylotree_pub_id_seq OWNED BY phylotree_pub.phylotree_pub_id;


--
-- Name: plants; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW plants AS
 SELECT stock.stock_id AS plant_id,
    stock.uniquename AS plant_name
   FROM stock
  WHERE (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM cvterm
          WHERE ((cvterm.name)::text = 'plant'::text)))
  GROUP BY stock.stock_id, stock.uniquename
  WITH NO DATA;


ALTER TABLE plants OWNER TO web_usr;

--
-- Name: plantsxplots; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW plantsxplots AS
 SELECT materialized_phenoview.plant_id,
    materialized_phenoview.plot_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.plant_id, materialized_phenoview.plot_id
  WITH NO DATA;


ALTER TABLE plantsxplots OWNER TO web_usr;

--
-- Name: plantsxtraits; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW plantsxtraits AS
 SELECT materialized_phenoview.plant_id,
    materialized_phenoview.trait_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.plant_id, materialized_phenoview.trait_id
  WITH NO DATA;


ALTER TABLE plantsxtraits OWNER TO web_usr;

--
-- Name: plantsxtrial_designs; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW plantsxtrial_designs AS
 SELECT materialized_phenoview.plant_id,
    materialized_phenoview.trial_design_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.plant_id, materialized_phenoview.trial_design_id
  WITH NO DATA;


ALTER TABLE plantsxtrial_designs OWNER TO web_usr;

--
-- Name: plantsxtrial_types; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW plantsxtrial_types AS
 SELECT materialized_phenoview.plant_id,
    materialized_phenoview.trial_type_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.plant_id, materialized_phenoview.trial_type_id
  WITH NO DATA;


ALTER TABLE plantsxtrial_types OWNER TO web_usr;

--
-- Name: plantsxtrials; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW plantsxtrials AS
 SELECT materialized_phenoview.plant_id,
    materialized_phenoview.trial_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.plant_id, materialized_phenoview.trial_id
  WITH NO DATA;


ALTER TABLE plantsxtrials OWNER TO web_usr;

--
-- Name: plantsxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW plantsxyears AS
 SELECT materialized_phenoview.plant_id,
    materialized_phenoview.year_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.plant_id, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE plantsxyears OWNER TO web_usr;

--
-- Name: plots; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW plots AS
 SELECT stock.stock_id AS plot_id,
    stock.uniquename AS plot_name
   FROM stock
  WHERE (stock.type_id = ( SELECT cvterm.cvterm_id
           FROM cvterm
          WHERE ((cvterm.name)::text = 'plot'::text)))
  GROUP BY stock.stock_id, stock.uniquename
  WITH NO DATA;


ALTER TABLE plots OWNER TO web_usr;

--
-- Name: plotsxtraits; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW plotsxtraits AS
 SELECT materialized_phenoview.plot_id,
    materialized_phenoview.trait_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.plot_id, materialized_phenoview.trait_id
  WITH NO DATA;


ALTER TABLE plotsxtraits OWNER TO web_usr;

--
-- Name: plotsxtrial_designs; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW plotsxtrial_designs AS
 SELECT materialized_phenoview.plot_id,
    materialized_phenoview.trial_design_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.plot_id, materialized_phenoview.trial_design_id
  WITH NO DATA;


ALTER TABLE plotsxtrial_designs OWNER TO web_usr;

--
-- Name: plotsxtrial_types; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW plotsxtrial_types AS
 SELECT materialized_phenoview.plot_id,
    materialized_phenoview.trial_type_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.plot_id, materialized_phenoview.trial_type_id
  WITH NO DATA;


ALTER TABLE plotsxtrial_types OWNER TO web_usr;

--
-- Name: plotsxtrials; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW plotsxtrials AS
 SELECT materialized_phenoview.plot_id,
    materialized_phenoview.trial_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.plot_id, materialized_phenoview.trial_id
  WITH NO DATA;


ALTER TABLE plotsxtrials OWNER TO web_usr;

--
-- Name: plotsxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW plotsxyears AS
 SELECT materialized_phenoview.plot_id,
    materialized_phenoview.year_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.plot_id, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE plotsxyears OWNER TO web_usr;

--
-- Name: project_contact; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE project_contact (
    project_contact_id integer NOT NULL,
    project_id integer NOT NULL,
    contact_id integer NOT NULL
);


ALTER TABLE project_contact OWNER TO postgres;

--
-- Name: TABLE project_contact; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE project_contact IS 'Linking project(s) to contact(s)';


--
-- Name: project_contact_project_contact_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE project_contact_project_contact_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE project_contact_project_contact_id_seq OWNER TO postgres;

--
-- Name: project_contact_project_contact_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE project_contact_project_contact_id_seq OWNED BY project_contact.project_contact_id;


--
-- Name: project_project_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE project_project_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE project_project_id_seq OWNER TO postgres;

--
-- Name: project_project_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE project_project_id_seq OWNED BY project.project_id;


--
-- Name: project_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE project_pub (
    project_pub_id integer NOT NULL,
    project_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE project_pub OWNER TO postgres;

--
-- Name: TABLE project_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE project_pub IS 'Linking project(s) to publication(s)';


--
-- Name: project_pub_project_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE project_pub_project_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE project_pub_project_pub_id_seq OWNER TO postgres;

--
-- Name: project_pub_project_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE project_pub_project_pub_id_seq OWNED BY project_pub.project_pub_id;


--
-- Name: project_relationship_project_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE project_relationship_project_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE project_relationship_project_relationship_id_seq OWNER TO postgres;

--
-- Name: project_relationship_project_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE project_relationship_project_relationship_id_seq OWNED BY project_relationship.project_relationship_id;


--
-- Name: projectprop_projectprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE projectprop_projectprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE projectprop_projectprop_id_seq OWNER TO postgres;

--
-- Name: projectprop_projectprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE projectprop_projectprop_id_seq OWNED BY projectprop.projectprop_id;


SET default_with_oids = true;

--
-- Name: pub_dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE pub_dbxref (
    pub_dbxref_id integer NOT NULL,
    pub_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL
);


ALTER TABLE pub_dbxref OWNER TO postgres;

--
-- Name: TABLE pub_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE pub_dbxref IS 'Handle links to eg, pubmed, biosis,
zoorec, OCLC, mdeline, ISSN, coden...';


--
-- Name: pub_dbxref_pub_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE pub_dbxref_pub_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pub_dbxref_pub_dbxref_id_seq OWNER TO postgres;

--
-- Name: pub_dbxref_pub_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE pub_dbxref_pub_dbxref_id_seq OWNED BY pub_dbxref.pub_dbxref_id;


--
-- Name: pub_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE pub_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pub_pub_id_seq OWNER TO postgres;

--
-- Name: pub_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE pub_pub_id_seq OWNED BY pub.pub_id;


--
-- Name: pub_relationship; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE pub_relationship (
    pub_relationship_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL
);


ALTER TABLE pub_relationship OWNER TO postgres;

--
-- Name: TABLE pub_relationship; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE pub_relationship IS 'Handle relationships between
publications, eg, when one publication makes others obsolete, when one
publication contains errata with respect to other publication(s), or
when one publication also appears in another pub (I think these three
are it - at least for fb)';


--
-- Name: pub_relationship_pub_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE pub_relationship_pub_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pub_relationship_pub_relationship_id_seq OWNER TO postgres;

--
-- Name: pub_relationship_pub_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE pub_relationship_pub_relationship_id_seq OWNED BY pub_relationship.pub_relationship_id;


SET default_with_oids = false;

--
-- Name: pubabstract; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE pubabstract (
    pubabstract_id integer NOT NULL,
    pub_id integer,
    abstract text,
    abstract_tsvector tsvector
);


ALTER TABLE pubabstract OWNER TO postgres;

--
-- Name: pubabstract_pubabstract_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE pubabstract_pubabstract_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pubabstract_pubabstract_id_seq OWNER TO postgres;

--
-- Name: pubabstract_pubabstract_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE pubabstract_pubabstract_id_seq OWNED BY pubabstract.pubabstract_id;


SET default_with_oids = true;

--
-- Name: pubauthor; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE pubauthor (
    pubauthor_id integer NOT NULL,
    pub_id integer NOT NULL,
    rank integer NOT NULL,
    editor boolean DEFAULT false,
    surname character varying(100) NOT NULL,
    givennames character varying(100),
    suffix character varying(100)
);


ALTER TABLE pubauthor OWNER TO postgres;

--
-- Name: TABLE pubauthor; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE pubauthor IS 'an author for a publication. Note the denormalisation (hence lack of _ in table name) - this is deliberate as it is in general too hard to assign IDs to authors.';


--
-- Name: COLUMN pubauthor.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN pubauthor.rank IS 'order of author in author list for this pub - order is important';


--
-- Name: COLUMN pubauthor.editor; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN pubauthor.editor IS 'indicates whether the author is an editor for linked publication. Note: this is a boolean field but does not follow the normal chado convention for naming booleans';


--
-- Name: COLUMN pubauthor.givennames; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN pubauthor.givennames IS 'first name, initials';


--
-- Name: COLUMN pubauthor.suffix; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN pubauthor.suffix IS 'Jr., Sr., etc';


--
-- Name: pubauthor_pubauthor_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE pubauthor_pubauthor_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pubauthor_pubauthor_id_seq OWNER TO postgres;

--
-- Name: pubauthor_pubauthor_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE pubauthor_pubauthor_id_seq OWNED BY pubauthor.pubauthor_id;


--
-- Name: pubprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE pubprop (
    pubprop_id integer NOT NULL,
    pub_id integer NOT NULL,
    type_id integer NOT NULL,
    value text NOT NULL,
    rank integer
);


ALTER TABLE pubprop OWNER TO postgres;

--
-- Name: TABLE pubprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE pubprop IS 'Property-value pairs for a pub. Follows standard chado pattern - see sequence module for details';


--
-- Name: pubprop_pubprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE pubprop_pubprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pubprop_pubprop_id_seq OWNER TO postgres;

--
-- Name: pubprop_pubprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE pubprop_pubprop_id_seq OWNED BY pubprop.pubprop_id;


SET default_with_oids = false;

--
-- Name: resource_file; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE resource_file (
    resource_file_id integer NOT NULL,
    name character varying(40) NOT NULL,
    expression text NOT NULL
);


ALTER TABLE resource_file OWNER TO postgres;

--
-- Name: TABLE resource_file; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE resource_file IS 'each row defines a composite dataset, downloadable at the url cxgn-resource://name, that is composed of other downloadable datasets, according to the expression column.  See CXGN::Tools::Wget for the accompanying code';


--
-- Name: resource_file_resource_file_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE resource_file_resource_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE resource_file_resource_file_id_seq OWNER TO postgres;

--
-- Name: resource_file_resource_file_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE resource_file_resource_file_id_seq OWNED BY resource_file.resource_file_id;


--
-- Name: signalp; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE signalp (
    signalp_id integer NOT NULL,
    cds_id bigint,
    nn_cmax real,
    nn_cpos smallint,
    nn_cd character(1),
    nn_ymax real,
    nn_ypos smallint,
    nn_yd character(1),
    nn_smax real,
    nn_spos smallint,
    nn_sd character(1),
    nn_smean real,
    nn_smeand character(1),
    nn_score real,
    nn_d character(1),
    hmm_type character(1),
    hmm_cmax real,
    hmm_cpos smallint,
    hmm_cd character(1),
    hmm_sprob real,
    hmm_d character(1)
);


ALTER TABLE signalp OWNER TO postgres;

--
-- Name: signalp_signalp_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE signalp_signalp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE signalp_signalp_id_seq OWNER TO postgres;

--
-- Name: signalp_signalp_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE signalp_signalp_id_seq OWNED BY signalp.signalp_id;


--
-- Name: stock_cvterm; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE stock_cvterm (
    stock_cvterm_id integer NOT NULL,
    stock_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer NOT NULL,
    rank integer DEFAULT 0 NOT NULL,
    is_not boolean DEFAULT false NOT NULL
);


ALTER TABLE stock_cvterm OWNER TO postgres;

--
-- Name: TABLE stock_cvterm; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stock_cvterm IS 'stock_cvterm links a stock to cvterms. This is for secondary cvterms; primary cvterms should use stock.type_id.';


--
-- Name: stock_cvterm_stock_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stock_cvterm_stock_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stock_cvterm_stock_cvterm_id_seq OWNER TO postgres;

--
-- Name: stock_cvterm_stock_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stock_cvterm_stock_cvterm_id_seq OWNED BY stock_cvterm.stock_cvterm_id;


--
-- Name: stock_cvtermprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE stock_cvtermprop (
    stock_cvtermprop_id integer NOT NULL,
    stock_cvterm_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE stock_cvtermprop OWNER TO postgres;

--
-- Name: TABLE stock_cvtermprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stock_cvtermprop IS 'Extensible properties for
stock to cvterm associations. Examples: GO evidence codes;
qualifiers; metadata such as the date on which the entry was curated
and the source of the association. See the stockprop table for
meanings of type_id, value and rank.';


--
-- Name: COLUMN stock_cvtermprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock_cvtermprop.type_id IS 'The name of the
property/slot is a cvterm. The meaning of the property is defined in
that cvterm. cvterms may come from the OBO evidence code cv.';


--
-- Name: COLUMN stock_cvtermprop.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock_cvtermprop.value IS 'The value of the
property, represented as text. Numeric values are converted to their
text representation. This is less efficient than using native database
types, but is easier to query.';


--
-- Name: COLUMN stock_cvtermprop.rank; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock_cvtermprop.rank IS 'Property-Value
ordering. Any stock_cvterm can have multiple values for any particular
property type - these are ordered in a list using rank, counting from
zero. For properties that are single-valued rather than multi-valued,
the default 0 value should be used.';


--
-- Name: stock_cvtermprop_stock_cvtermprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stock_cvtermprop_stock_cvtermprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stock_cvtermprop_stock_cvtermprop_id_seq OWNER TO postgres;

--
-- Name: stock_cvtermprop_stock_cvtermprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stock_cvtermprop_stock_cvtermprop_id_seq OWNED BY stock_cvtermprop.stock_cvtermprop_id;


--
-- Name: stock_dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE stock_dbxref (
    stock_dbxref_id integer NOT NULL,
    stock_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL
);


ALTER TABLE stock_dbxref OWNER TO postgres;

--
-- Name: TABLE stock_dbxref; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stock_dbxref IS 'stock_dbxref links a stock to dbxrefs. This is for secondary identifiers; primary identifiers should use stock.dbxref_id.';


--
-- Name: COLUMN stock_dbxref.is_current; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stock_dbxref.is_current IS 'The is_current boolean indicates whether the linked dbxref is the current -official- dbxref for the linked stock.';


--
-- Name: stock_dbxref_stock_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stock_dbxref_stock_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stock_dbxref_stock_dbxref_id_seq OWNER TO postgres;

--
-- Name: stock_dbxref_stock_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stock_dbxref_stock_dbxref_id_seq OWNED BY stock_dbxref.stock_dbxref_id;


--
-- Name: stock_dbxrefprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE stock_dbxrefprop (
    stock_dbxrefprop_id integer NOT NULL,
    stock_dbxref_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE stock_dbxrefprop OWNER TO postgres;

--
-- Name: TABLE stock_dbxrefprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stock_dbxrefprop IS 'A stock_dbxref can have any number of
slot-value property tags attached to it. This is useful for storing properties related to dbxref annotations of stocks, such as evidence codes, and references, and metadata, such as create/modify dates. This is an alternative to
hardcoding a list of columns in the relational schema, and is
completely extensible. There is a unique constraint, stock_dbxrefprop_c1, for
the combination of stock_dbxref_id, rank, and type_id. Multivalued property-value pairs must be differentiated by rank.';


--
-- Name: stock_dbxrefprop_stock_dbxrefprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stock_dbxrefprop_stock_dbxrefprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stock_dbxrefprop_stock_dbxrefprop_id_seq OWNER TO postgres;

--
-- Name: stock_dbxrefprop_stock_dbxrefprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stock_dbxrefprop_stock_dbxrefprop_id_seq OWNED BY stock_dbxrefprop.stock_dbxrefprop_id;


--
-- Name: stock_genotype; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE stock_genotype (
    stock_genotype_id integer NOT NULL,
    stock_id integer NOT NULL,
    genotype_id integer NOT NULL
);


ALTER TABLE stock_genotype OWNER TO postgres;

--
-- Name: TABLE stock_genotype; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stock_genotype IS 'Simple table linking a stock to
a genotype. Features with genotypes can be linked to stocks thru feature_genotype -> genotype -> stock_genotype -> stock.';


--
-- Name: stock_genotype_stock_genotype_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stock_genotype_stock_genotype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stock_genotype_stock_genotype_id_seq OWNER TO postgres;

--
-- Name: stock_genotype_stock_genotype_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stock_genotype_stock_genotype_id_seq OWNED BY stock_genotype.stock_genotype_id;


--
-- Name: stock_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE stock_pub (
    stock_pub_id integer NOT NULL,
    stock_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE stock_pub OWNER TO postgres;

--
-- Name: TABLE stock_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stock_pub IS 'Provenance. Linking table between stocks and, for example, a stocklist computer file.';


--
-- Name: stock_pub_stock_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stock_pub_stock_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stock_pub_stock_pub_id_seq OWNER TO postgres;

--
-- Name: stock_pub_stock_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stock_pub_stock_pub_id_seq OWNED BY stock_pub.stock_pub_id;


--
-- Name: stock_relationship_cvterm; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE stock_relationship_cvterm (
    stock_relationship_cvterm_id integer NOT NULL,
    stock_relationship_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer
);


ALTER TABLE stock_relationship_cvterm OWNER TO postgres;

--
-- Name: TABLE stock_relationship_cvterm; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stock_relationship_cvterm IS 'For germplasm maintenance and pedigree data, stock_relationship. type_id will record cvterms such as "is a female parent of", "a parent for mutation", "is a group_id of", "is a source_id of", etc The cvterms for higher categories such as "generative", "derivative" or "maintenance" can be stored in table stock_relationship_cvterm';


--
-- Name: stock_relationship_cvterm_stock_relationship_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stock_relationship_cvterm_stock_relationship_cvterm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stock_relationship_cvterm_stock_relationship_cvterm_id_seq OWNER TO postgres;

--
-- Name: stock_relationship_cvterm_stock_relationship_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stock_relationship_cvterm_stock_relationship_cvterm_id_seq OWNED BY stock_relationship_cvterm.stock_relationship_cvterm_id;


--
-- Name: stock_relationship_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE stock_relationship_pub (
    stock_relationship_pub_id integer NOT NULL,
    stock_relationship_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE stock_relationship_pub OWNER TO postgres;

--
-- Name: TABLE stock_relationship_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stock_relationship_pub IS 'Provenance. Attach optional evidence to a stock_relationship in the form of a publication.';


--
-- Name: stock_relationship_pub_stock_relationship_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stock_relationship_pub_stock_relationship_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stock_relationship_pub_stock_relationship_pub_id_seq OWNER TO postgres;

--
-- Name: stock_relationship_pub_stock_relationship_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stock_relationship_pub_stock_relationship_pub_id_seq OWNED BY stock_relationship_pub.stock_relationship_pub_id;


--
-- Name: stock_relationship_stock_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stock_relationship_stock_relationship_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stock_relationship_stock_relationship_id_seq OWNER TO postgres;

--
-- Name: stock_relationship_stock_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stock_relationship_stock_relationship_id_seq OWNED BY stock_relationship.stock_relationship_id;


--
-- Name: stock_stock_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stock_stock_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stock_stock_id_seq OWNER TO postgres;

--
-- Name: stock_stock_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stock_stock_id_seq OWNED BY stock.stock_id;


--
-- Name: stockcollection; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE stockcollection (
    stockcollection_id integer NOT NULL,
    type_id integer NOT NULL,
    contact_id integer,
    name character varying(255),
    uniquename text NOT NULL
);


ALTER TABLE stockcollection OWNER TO postgres;

--
-- Name: TABLE stockcollection; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stockcollection IS 'The lab or stock center distributing the stocks in their collection.';


--
-- Name: COLUMN stockcollection.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stockcollection.type_id IS 'type_id is the collection type cv.';


--
-- Name: COLUMN stockcollection.contact_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stockcollection.contact_id IS 'contact_id links to the contact information for the collection.';


--
-- Name: COLUMN stockcollection.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stockcollection.name IS 'name is the collection.';


--
-- Name: COLUMN stockcollection.uniquename; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stockcollection.uniquename IS 'uniqename is the value of the collection cv.';


--
-- Name: stockcollection_stock; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE stockcollection_stock (
    stockcollection_stock_id integer NOT NULL,
    stockcollection_id integer NOT NULL,
    stock_id integer NOT NULL
);


ALTER TABLE stockcollection_stock OWNER TO postgres;

--
-- Name: TABLE stockcollection_stock; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stockcollection_stock IS 'stockcollection_stock links
a stock collection to the stocks which are contained in the collection.';


--
-- Name: stockcollection_stock_stockcollection_stock_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stockcollection_stock_stockcollection_stock_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stockcollection_stock_stockcollection_stock_id_seq OWNER TO postgres;

--
-- Name: stockcollection_stock_stockcollection_stock_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stockcollection_stock_stockcollection_stock_id_seq OWNED BY stockcollection_stock.stockcollection_stock_id;


--
-- Name: stockcollection_stockcollection_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stockcollection_stockcollection_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stockcollection_stockcollection_id_seq OWNER TO postgres;

--
-- Name: stockcollection_stockcollection_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stockcollection_stockcollection_id_seq OWNED BY stockcollection.stockcollection_id;


--
-- Name: stockcollectionprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE stockcollectionprop (
    stockcollectionprop_id integer NOT NULL,
    stockcollection_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE stockcollectionprop OWNER TO postgres;

--
-- Name: TABLE stockcollectionprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stockcollectionprop IS 'The table stockcollectionprop
contains the value of the stock collection such as website/email URLs;
the value of the stock collection order URLs.';


--
-- Name: COLUMN stockcollectionprop.type_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN stockcollectionprop.type_id IS 'The cv for the type_id is "stockcollection property type".';


--
-- Name: stockcollectionprop_stockcollectionprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stockcollectionprop_stockcollectionprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stockcollectionprop_stockcollectionprop_id_seq OWNER TO postgres;

--
-- Name: stockcollectionprop_stockcollectionprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stockcollectionprop_stockcollectionprop_id_seq OWNED BY stockcollectionprop.stockcollectionprop_id;


--
-- Name: stockprop; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE stockprop (
    stockprop_id integer NOT NULL,
    stock_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE stockprop OWNER TO postgres;

--
-- Name: TABLE stockprop; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stockprop IS 'A stock can have any number of
slot-value property tags attached to it. This is an alternative to
hardcoding a list of columns in the relational schema, and is
completely extensible. There is a unique constraint, stockprop_c1, for
the combination of stock_id, rank, and type_id. Multivalued property-value pairs must be differentiated by rank.';


--
-- Name: stockprop_pub; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE stockprop_pub (
    stockprop_pub_id integer NOT NULL,
    stockprop_id integer NOT NULL,
    pub_id integer NOT NULL
);


ALTER TABLE stockprop_pub OWNER TO postgres;

--
-- Name: TABLE stockprop_pub; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE stockprop_pub IS 'Provenance. Any stockprop assignment can optionally be supported by a publication.';


--
-- Name: stockprop_pub_stockprop_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stockprop_pub_stockprop_pub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stockprop_pub_stockprop_pub_id_seq OWNER TO postgres;

--
-- Name: stockprop_pub_stockprop_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stockprop_pub_stockprop_pub_id_seq OWNED BY stockprop_pub.stockprop_pub_id;


--
-- Name: stockprop_stockprop_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE stockprop_stockprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stockprop_stockprop_id_seq OWNER TO postgres;

--
-- Name: stockprop_stockprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE stockprop_stockprop_id_seq OWNED BY stockprop.stockprop_id;


--
-- Name: synonym_synonym_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE synonym_synonym_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE synonym_synonym_id_seq OWNER TO postgres;

--
-- Name: synonym_synonym_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE synonym_synonym_id_seq OWNED BY synonym.synonym_id;


SET default_with_oids = true;

--
-- Name: tableinfo; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE tableinfo (
    tableinfo_id integer NOT NULL,
    name character varying(30) NOT NULL,
    primary_key_column character varying(30),
    is_view integer DEFAULT 0 NOT NULL,
    view_on_table_id integer,
    superclass_table_id integer,
    is_updateable integer DEFAULT 1 NOT NULL,
    modification_date date DEFAULT now() NOT NULL
);


ALTER TABLE tableinfo OWNER TO postgres;

--
-- Name: tableinfo_tableinfo_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE tableinfo_tableinfo_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tableinfo_tableinfo_id_seq OWNER TO postgres;

--
-- Name: tableinfo_tableinfo_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE tableinfo_tableinfo_id_seq OWNED BY tableinfo.tableinfo_id;


SET default_with_oids = false;

--
-- Name: tmp_cds_handler; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE tmp_cds_handler (
    cds_row_id integer NOT NULL,
    seq_id character varying(1024),
    gff_id character varying(1024),
    type character varying(1024) NOT NULL,
    fmin integer NOT NULL,
    fmax integer NOT NULL,
    object text NOT NULL
);


ALTER TABLE tmp_cds_handler OWNER TO postgres;

--
-- Name: tmp_cds_handler_cds_row_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE tmp_cds_handler_cds_row_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tmp_cds_handler_cds_row_id_seq OWNER TO postgres;

--
-- Name: tmp_cds_handler_cds_row_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE tmp_cds_handler_cds_row_id_seq OWNED BY tmp_cds_handler.cds_row_id;


--
-- Name: tmp_cds_handler_relationship; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE tmp_cds_handler_relationship (
    rel_row_id integer NOT NULL,
    cds_row_id integer,
    parent_id character varying(1024),
    grandparent_id character varying(1024)
);


ALTER TABLE tmp_cds_handler_relationship OWNER TO postgres;

--
-- Name: tmp_cds_handler_relationship_rel_row_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE tmp_cds_handler_relationship_rel_row_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tmp_cds_handler_relationship_rel_row_id_seq OWNER TO postgres;

--
-- Name: tmp_cds_handler_relationship_rel_row_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE tmp_cds_handler_relationship_rel_row_id_seq OWNED BY tmp_cds_handler_relationship.rel_row_id;


--
-- Name: tmp_gff_load_cache; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE tmp_gff_load_cache (
    feature_id integer,
    uniquename character varying(1000),
    type_id integer,
    organism_id integer
);


ALTER TABLE tmp_gff_load_cache OWNER TO postgres;

--
-- Name: traits; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW traits AS
 SELECT cvterm.cvterm_id AS trait_id,
    (((((cvterm.name)::text || '|'::text) || (db.name)::text) || ':'::text) || (dbxref.accession)::text) AS trait_name
   FROM ((cvterm
     JOIN dbxref ON ((cvterm.dbxref_id = dbxref.dbxref_id)))
     JOIN db ON ((dbxref.db_id = db.db_id)))
  WHERE ((cvterm.cvterm_id IN ( SELECT cvterm_relationship.subject_id
           FROM (cvterm_relationship
             JOIN cvterm cvterm_1 ON ((cvterm_relationship.subject_id = cvterm_1.cvterm_id)))
          WHERE (cvterm_relationship.type_id = ( SELECT cvterm_2.cvterm_id
                   FROM cvterm cvterm_2
                  WHERE ((cvterm_2.name)::text = 'VARIABLE_OF'::text)))
          GROUP BY cvterm_relationship.subject_id)) AND (db.db_id = ( SELECT dbxref_1.db_id
           FROM (((((stock
             JOIN nd_experiment_stock USING (stock_id))
             JOIN nd_experiment_phenotype USING (nd_experiment_id))
             JOIN phenotype USING (phenotype_id))
             JOIN cvterm cvterm_1 ON ((phenotype.cvalue_id = cvterm_1.cvterm_id)))
             JOIN dbxref dbxref_1 ON ((cvterm_1.dbxref_id = dbxref_1.dbxref_id)))
         LIMIT 1)))
  GROUP BY cvterm.cvterm_id, (((((cvterm.name)::text || '|'::text) || (db.name)::text) || ':'::text) || (dbxref.accession)::text)
  WITH NO DATA;


ALTER TABLE traits OWNER TO web_usr;

--
-- Name: traitsxtrial_designs; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW traitsxtrial_designs AS
 SELECT materialized_phenoview.trait_id,
    materialized_phenoview.trial_design_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.trait_id, materialized_phenoview.trial_design_id
  WITH NO DATA;


ALTER TABLE traitsxtrial_designs OWNER TO web_usr;

--
-- Name: traitsxtrial_types; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW traitsxtrial_types AS
 SELECT materialized_phenoview.trait_id,
    materialized_phenoview.trial_type_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.trait_id, materialized_phenoview.trial_type_id
  WITH NO DATA;


ALTER TABLE traitsxtrial_types OWNER TO web_usr;

--
-- Name: traitsxtrials; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW traitsxtrials AS
 SELECT materialized_phenoview.trait_id,
    materialized_phenoview.trial_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.trait_id, materialized_phenoview.trial_id
  WITH NO DATA;


ALTER TABLE traitsxtrials OWNER TO web_usr;

--
-- Name: traitsxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW traitsxyears AS
 SELECT materialized_phenoview.trait_id,
    materialized_phenoview.year_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.trait_id, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE traitsxyears OWNER TO web_usr;

--
-- Name: trial_designs; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW trial_designs AS
 SELECT projectprop.value AS trial_design_id,
    projectprop.value AS trial_design_name
   FROM (projectprop
     JOIN cvterm ON ((projectprop.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'design'::text)
  GROUP BY projectprop.value
  WITH NO DATA;


ALTER TABLE trial_designs OWNER TO web_usr;

--
-- Name: trial_designsxtrial_types; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW trial_designsxtrial_types AS
 SELECT materialized_phenoview.trial_design_id,
    materialized_phenoview.trial_type_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.trial_design_id, materialized_phenoview.trial_type_id
  WITH NO DATA;


ALTER TABLE trial_designsxtrial_types OWNER TO web_usr;

--
-- Name: trial_designsxtrials; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW trial_designsxtrials AS
 SELECT materialized_phenoview.trial_id,
    materialized_phenoview.trial_design_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.trial_id, materialized_phenoview.trial_design_id
  WITH NO DATA;


ALTER TABLE trial_designsxtrials OWNER TO web_usr;

--
-- Name: trial_designsxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW trial_designsxyears AS
 SELECT materialized_phenoview.trial_design_id,
    materialized_phenoview.year_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.trial_design_id, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE trial_designsxyears OWNER TO web_usr;

--
-- Name: trial_typesxtrials; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW trial_typesxtrials AS
 SELECT materialized_phenoview.trial_id,
    materialized_phenoview.trial_type_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.trial_id, materialized_phenoview.trial_type_id
  WITH NO DATA;


ALTER TABLE trial_typesxtrials OWNER TO web_usr;

--
-- Name: trial_typesxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW trial_typesxyears AS
 SELECT materialized_phenoview.trial_type_id,
    materialized_phenoview.year_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.trial_type_id, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE trial_typesxyears OWNER TO web_usr;

--
-- Name: trials; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW trials AS
 SELECT project.project_id AS trial_id,
    project.name AS trial_name
   FROM (project
     JOIN projectprop USING (project_id))
  WHERE ((projectprop.type_id IS DISTINCT FROM ( SELECT cvterm.cvterm_id
           FROM cvterm
          WHERE ((cvterm.name)::text = 'breeding_program'::text))) AND (projectprop.type_id IS DISTINCT FROM ( SELECT cvterm.cvterm_id
           FROM cvterm
          WHERE ((cvterm.name)::text = 'trial_folder'::text))))
  GROUP BY project.project_id, project.name
  WITH NO DATA;


ALTER TABLE trials OWNER TO web_usr;

--
-- Name: trialsxyears; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW trialsxyears AS
 SELECT materialized_phenoview.trial_id,
    materialized_phenoview.year_id
   FROM materialized_phenoview
  GROUP BY materialized_phenoview.trial_id, materialized_phenoview.year_id
  WITH NO DATA;


ALTER TABLE trialsxyears OWNER TO web_usr;

--
-- Name: unigene_dbxref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE unigene_dbxref (
    unigene_dbxref_id integer NOT NULL,
    unigene_id bigint NOT NULL,
    dbxref_id bigint NOT NULL
);


ALTER TABLE unigene_dbxref OWNER TO postgres;

--
-- Name: unigene_dbxref_unigene_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE unigene_dbxref_unigene_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE unigene_dbxref_unigene_dbxref_id_seq OWNER TO postgres;

--
-- Name: unigene_dbxref_unigene_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE unigene_dbxref_unigene_dbxref_id_seq OWNED BY unigene_dbxref.unigene_dbxref_id;


--
-- Name: unigene_relations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE unigene_relations (
    unigene_id bigint NOT NULL,
    superceded_by bigint,
    superceding_build_nr integer,
    superceding_organism text
);


ALTER TABLE unigene_relations OWNER TO postgres;

SET default_with_oids = true;

--
-- Name: unigene_signalp; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE unigene_signalp (
    unigene_id bigint NOT NULL,
    nn_cmax real,
    nn_cpos smallint,
    nn_cd character(1),
    nn_ymax real,
    nn_ypos smallint,
    nn_yd character(1),
    nn_smax real,
    nn_spos smallint,
    nn_sd character(1),
    nn_smean real,
    nn_smeand character(1),
    nn_score real,
    nn_d character(1),
    hmm_type character(1),
    hmm_cmax real,
    hmm_cpos smallint,
    hmm_cd character(1),
    hmm_sprob real,
    hmm_d character(1),
    cds_id bigint
);


ALTER TABLE unigene_signalp OWNER TO postgres;

--
-- Name: years; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW years AS
 SELECT projectprop.value AS year_id,
    projectprop.value AS year_name
   FROM projectprop
  WHERE (projectprop.type_id = ( SELECT cvterm.cvterm_id
           FROM cvterm
          WHERE ((cvterm.name)::text = 'project year'::text)))
  GROUP BY projectprop.value
  WITH NO DATA;


ALTER TABLE years OWNER TO web_usr;

SET search_path = sgn, pg_catalog;

--
-- Name: accession; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE accession (
    accession_id integer NOT NULL,
    organism_id bigint,
    common_name character varying(80),
    accession_name_id bigint,
    chado_organism_id integer,
    stock_id integer
);


ALTER TABLE accession OWNER TO postgres;

--
-- Name: accession_accession_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE accession_accession_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE accession_accession_id_seq OWNER TO postgres;

--
-- Name: accession_accession_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE accession_accession_id_seq OWNED BY accession.accession_id;


--
-- Name: accession_names; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE accession_names (
    accession_name_id bigint NOT NULL,
    accession_name character varying(255),
    accession_id bigint
);


ALTER TABLE accession_names OWNER TO postgres;

--
-- Name: accession_names_accession_name_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE accession_names_accession_name_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE accession_names_accession_name_id_seq OWNER TO postgres;

--
-- Name: accession_names_accession_name_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE accession_names_accession_name_id_seq OWNED BY accession_names.accession_name_id;


--
-- Name: annotation_target_type; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE annotation_target_type (
    annotation_target_type_id bigint NOT NULL,
    type_name character varying(25),
    type_description character varying(250),
    table_name character varying(250),
    index_field_name character varying(250)
);


ALTER TABLE annotation_target_type OWNER TO postgres;

--
-- Name: annotation_target_type_annotation_target_type_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE annotation_target_type_annotation_target_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE annotation_target_type_annotation_target_type_id_seq OWNER TO postgres;

--
-- Name: annotation_target_type_annotation_target_type_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE annotation_target_type_annotation_target_type_id_seq OWNED BY annotation_target_type.annotation_target_type_id;


--
-- Name: authors; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE authors (
    author_id integer NOT NULL,
    name text,
    institution text
);


ALTER TABLE authors OWNER TO postgres;

--
-- Name: authors_author_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE authors_author_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE authors_author_id_seq OWNER TO postgres;

--
-- Name: authors_author_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE authors_author_id_seq OWNED BY authors.author_id;


--
-- Name: blast_annotations; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE blast_annotations (
    blast_annotation_id integer NOT NULL,
    apply_id integer,
    apply_type integer,
    blast_target_id integer,
    n_hits integer,
    hits_stored integer,
    last_updated integer,
    host character varying(20),
    pid integer
);


ALTER TABLE blast_annotations OWNER TO postgres;

--
-- Name: blast_annotations_blast_annotation_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE blast_annotations_blast_annotation_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE blast_annotations_blast_annotation_id_seq OWNER TO postgres;

--
-- Name: blast_annotations_blast_annotation_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE blast_annotations_blast_annotation_id_seq OWNED BY blast_annotations.blast_annotation_id;


--
-- Name: blast_db; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE blast_db (
    blast_db_id integer NOT NULL,
    file_base character varying(120) NOT NULL,
    title character varying(80) NOT NULL,
    type character varying(80) NOT NULL,
    source_url character varying(255),
    lookup_url character varying(255),
    update_freq character varying(80) DEFAULT 'monthly'::character varying NOT NULL,
    info_url character varying(255),
    index_seqs boolean DEFAULT true NOT NULL,
    blast_db_group_id integer,
    web_interface_visible boolean DEFAULT false,
    description text,
    jbrowse_src character varying(80),
    CONSTRAINT blast_db_file_base_check CHECK (((file_base)::text !~~ '/%'::text)),
    CONSTRAINT blast_db_info_url_check CHECK (((info_url IS NULL) OR ((info_url)::text ~ similar_escape('(ftp|http|https)://%'::text, NULL::text)))),
    CONSTRAINT blast_db_lookup_url_check CHECK (((lookup_url IS NULL) OR ((lookup_url)::text ~ similar_escape('(ftp|http|https)://%%s%'::text, NULL::text)))),
    CONSTRAINT blast_db_source_url_check CHECK (((source_url IS NULL) OR ((source_url)::text ~ similar_escape('(ftp|http|https|cxgn-resource|file)://%'::text, NULL::text)))),
    CONSTRAINT blast_db_type_check CHECK ((((type)::text = 'protein'::text) OR ((type)::text = 'nucleotide'::text))),
    CONSTRAINT blast_db_update_freq_check CHECK ((((update_freq)::text = 'daily'::text) OR ((update_freq)::text = 'weekly'::text) OR ((update_freq)::text = 'monthly'::text) OR ((update_freq)::text = 'manual'::text)))
);


ALTER TABLE blast_db OWNER TO postgres;

--
-- Name: TABLE blast_db; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON TABLE blast_db IS 'This table holds metadata about the BLAST databases that we keep in stock.';


--
-- Name: COLUMN blast_db.file_base; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON COLUMN blast_db.file_base IS 'the basename of the blast db files, relative to the root of the databases repository.  A blast DB is usually composed of 3 files, all with a given basename, and with the extensions .[pn]in, .[pn]sq, and .[pn]hr.';


--
-- Name: COLUMN blast_db.index_seqs; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON COLUMN blast_db.index_seqs IS 'corresponds to formatdb -o option.  Set true if formatdb should be given a ''-o T''.  This is used only if you later want to fetch specific sequences out of this blast db.';


--
-- Name: COLUMN blast_db.blast_db_group_id; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON COLUMN blast_db.blast_db_group_id IS 'blast_db_group this belongs to, for displaying on web';


--
-- Name: COLUMN blast_db.web_interface_visible; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON COLUMN blast_db.web_interface_visible IS 'whether this blast DB is available for BLASTing via web interfaces';


SET default_with_oids = false;

--
-- Name: blast_db_blast_db_group; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE blast_db_blast_db_group (
    blast_db_blast_db_group_id integer NOT NULL,
    blast_db_id bigint,
    blast_db_group_id bigint
);


ALTER TABLE blast_db_blast_db_group OWNER TO postgres;

--
-- Name: blast_db_blast_db_group_blast_db_blast_db_group_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE blast_db_blast_db_group_blast_db_blast_db_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE blast_db_blast_db_group_blast_db_blast_db_group_id_seq OWNER TO postgres;

--
-- Name: blast_db_blast_db_group_blast_db_blast_db_group_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE blast_db_blast_db_group_blast_db_blast_db_group_id_seq OWNED BY blast_db_blast_db_group.blast_db_blast_db_group_id;


--
-- Name: blast_db_blast_db_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE blast_db_blast_db_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE blast_db_blast_db_id_seq OWNER TO postgres;

--
-- Name: blast_db_blast_db_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE blast_db_blast_db_id_seq OWNED BY blast_db.blast_db_id;


SET default_with_oids = true;

--
-- Name: blast_db_group; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE blast_db_group (
    blast_db_group_id integer NOT NULL,
    name character varying(50),
    ordinal integer
);


ALTER TABLE blast_db_group OWNER TO postgres;

--
-- Name: blast_db_group_blast_db_group_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE blast_db_group_blast_db_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE blast_db_group_blast_db_group_id_seq OWNER TO postgres;

--
-- Name: blast_db_group_blast_db_group_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE blast_db_group_blast_db_group_id_seq OWNED BY blast_db_group.blast_db_group_id;


SET default_with_oids = false;

--
-- Name: blast_db_organism; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE blast_db_organism (
    blast_db_organism_id integer NOT NULL,
    blast_db_id bigint,
    organism_id bigint
);


ALTER TABLE blast_db_organism OWNER TO postgres;

--
-- Name: blast_db_organism_blast_db_organism_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE blast_db_organism_blast_db_organism_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE blast_db_organism_blast_db_organism_id_seq OWNER TO postgres;

--
-- Name: blast_db_organism_blast_db_organism_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE blast_db_organism_blast_db_organism_id_seq OWNED BY blast_db_organism.blast_db_organism_id;


SET default_with_oids = true;

--
-- Name: blast_defline; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE blast_defline (
    defline_id integer NOT NULL,
    blast_target_id integer,
    target_db_id character varying(255),
    defline text,
    defline_fulltext tsvector,
    identifier_defline_fulltext tsvector
);


ALTER TABLE blast_defline OWNER TO postgres;

--
-- Name: blast_defline_defline_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE blast_defline_defline_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE blast_defline_defline_id_seq OWNER TO postgres;

--
-- Name: blast_defline_defline_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE blast_defline_defline_id_seq OWNED BY blast_defline.defline_id;


--
-- Name: blast_hits; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE blast_hits (
    blast_hit_id integer NOT NULL,
    blast_annotation_id integer,
    target_db_id character varying(255),
    evalue double precision,
    score double precision,
    identity_percentage double precision,
    apply_start bigint,
    apply_end bigint,
    defline_id integer
);


ALTER TABLE blast_hits OWNER TO postgres;

--
-- Name: blast_hits_blast_hit_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE blast_hits_blast_hit_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE blast_hits_blast_hit_id_seq OWNER TO postgres;

--
-- Name: blast_hits_blast_hit_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE blast_hits_blast_hit_id_seq OWNED BY blast_hits.blast_hit_id;


--
-- Name: blast_targets; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE blast_targets (
    blast_target_id integer NOT NULL,
    blast_program character varying(7),
    db_name character varying(80),
    db_path character varying(255),
    local_copy_timestamp integer
);


ALTER TABLE blast_targets OWNER TO postgres;

--
-- Name: blast_targets_blast_target_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE blast_targets_blast_target_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE blast_targets_blast_target_id_seq OWNER TO postgres;

--
-- Name: blast_targets_blast_target_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE blast_targets_blast_target_id_seq OWNED BY blast_targets.blast_target_id;


--
-- Name: cds; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE cds (
    cds_id bigint NOT NULL,
    unigene_id bigint,
    seq_text text,
    seq_edits text,
    protein_seq text,
    begin integer,
    "end" integer,
    forward_reverse character(1),
    run_id bigint,
    score integer,
    method character varying(20),
    frame character varying(2),
    preferred boolean,
    cds_seq text,
    protein_feature_id bigint
);


ALTER TABLE cds OWNER TO postgres;

--
-- Name: cds_cds_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE cds_cds_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cds_cds_id_seq OWNER TO postgres;

--
-- Name: cds_cds_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE cds_cds_id_seq OWNED BY cds.cds_id;


SET default_with_oids = false;

--
-- Name: chadoprop; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE chadoprop (
    chadoprop_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE chadoprop OWNER TO postgres;

--
-- Name: TABLE chadoprop; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON TABLE chadoprop IS 'This table is different from other prop tables in the database, as it is for storing information about the database itself, like schema version';


--
-- Name: COLUMN chadoprop.type_id; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON COLUMN chadoprop.type_id IS 'The name of the property or slot is a cvterm. The meaning of the property is defined in that cvterm.';


--
-- Name: COLUMN chadoprop.value; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON COLUMN chadoprop.value IS 'The value of the property, represented as text. Numeric values are converted to their text representation.';


--
-- Name: COLUMN chadoprop.rank; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON COLUMN chadoprop.rank IS 'Property-Value ordering. Any
cv can have multiple values for any particular property type -
these are ordered in a list using rank, counting from zero. For
properties that are single-valued rather than multi-valued, the
default 0 value should be used.';


--
-- Name: chadoprop_chadoprop_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE chadoprop_chadoprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE chadoprop_chadoprop_id_seq OWNER TO postgres;

--
-- Name: chadoprop_chadoprop_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE chadoprop_chadoprop_id_seq OWNED BY chadoprop.chadoprop_id;


SET default_with_oids = true;

--
-- Name: clone; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE clone (
    clone_id integer NOT NULL,
    library_id integer,
    clone_name character varying(50),
    clone_group_id integer
);


ALTER TABLE clone OWNER TO postgres;

--
-- Name: clone_clone_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE clone_clone_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE clone_clone_id_seq OWNER TO postgres;

--
-- Name: clone_clone_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE clone_clone_id_seq OWNED BY clone.clone_id;


--
-- Name: cloning_vector; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE cloning_vector (
    cloning_vector_id integer NOT NULL,
    name character varying(32),
    seq text
);


ALTER TABLE cloning_vector OWNER TO postgres;

--
-- Name: cloning_vector_cloning_vector_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE cloning_vector_cloning_vector_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cloning_vector_cloning_vector_id_seq OWNER TO postgres;

--
-- Name: cloning_vector_cloning_vector_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE cloning_vector_cloning_vector_id_seq OWNED BY cloning_vector.cloning_vector_id;


--
-- Name: common_name; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE common_name (
    common_name_id bigint NOT NULL,
    common_name character varying(255) NOT NULL
);


ALTER TABLE common_name OWNER TO postgres;

--
-- Name: common_name_common_name_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE common_name_common_name_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE common_name_common_name_id_seq OWNER TO postgres;

--
-- Name: common_name_common_name_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE common_name_common_name_id_seq OWNED BY common_name.common_name_id;


SET default_with_oids = false;

--
-- Name: common_nameprop; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE common_nameprop (
    common_nameprop_id integer NOT NULL,
    common_name_id integer NOT NULL,
    type_id integer NOT NULL,
    value character varying(32) NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE common_nameprop OWNER TO postgres;

--
-- Name: common_nameprop_common_nameprop_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE common_nameprop_common_nameprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE common_nameprop_common_nameprop_id_seq OWNER TO postgres;

--
-- Name: common_nameprop_common_nameprop_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE common_nameprop_common_nameprop_id_seq OWNED BY common_nameprop.common_nameprop_id;


SET default_with_oids = true;

--
-- Name: cos_markers; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE cos_markers (
    cos_marker_id integer NOT NULL,
    marker_id bigint DEFAULT (0)::bigint NOT NULL,
    est_read_id bigint DEFAULT (0)::bigint NOT NULL,
    cos_id character varying(10) DEFAULT ''::character varying NOT NULL,
    at_match character varying(25),
    bac_id bigint,
    at_position numeric(11,7),
    best_gb_prot_hit character varying(25),
    at_evalue character varying(25),
    at_identities numeric(11,3),
    mips_cat character varying(11),
    description text,
    comment text,
    tomato_copy_number character varying(11),
    gbprot_evalue character varying(25),
    gbprot_identities numeric(11,3)
);


ALTER TABLE cos_markers OWNER TO postgres;

--
-- Name: cos_markers_cos_marker_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE cos_markers_cos_marker_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cos_markers_cos_marker_id_seq OWNER TO postgres;

--
-- Name: cos_markers_cos_marker_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE cos_markers_cos_marker_id_seq OWNED BY cos_markers.cos_marker_id;


--
-- Name: cosii_ortholog; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE cosii_ortholog (
    cosii_unigene_id bigint NOT NULL,
    marker_id bigint,
    unigene_id integer,
    copies character varying(1),
    database_name character varying(11),
    sequence_name character varying(255),
    edited_sequence_id bigint,
    peptide_sequence_id bigint,
    introns text,
    CONSTRAINT cosii_ortholog_copies_check CHECK ((((copies)::text = 'S'::text) OR ((copies)::text = 'M'::text))),
    CONSTRAINT cosii_ortholog_database_name_check CHECK ((((database_name)::text = 'SGN'::text) OR ((database_name)::text = 'Arabidopsis'::text) OR ((database_name)::text = 'Coffee'::text)))
);


ALTER TABLE cosii_ortholog OWNER TO postgres;

--
-- Name: cosii_ortholog_cosii_unigene_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE cosii_ortholog_cosii_unigene_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cosii_ortholog_cosii_unigene_id_seq OWNER TO postgres;

--
-- Name: cosii_ortholog_cosii_unigene_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE cosii_ortholog_cosii_unigene_id_seq OWNED BY cosii_ortholog.cosii_unigene_id;


SET default_with_oids = false;

--
-- Name: cvprop; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE cvprop (
    cvprop_id integer NOT NULL,
    cv_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


ALTER TABLE cvprop OWNER TO postgres;

--
-- Name: TABLE cvprop; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON TABLE cvprop IS 'Additional extensible properties can be attached to a cv using this table.  A notable example would be the cv version';


--
-- Name: COLUMN cvprop.type_id; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON COLUMN cvprop.type_id IS 'The name of the property or slot is a cvterm. The meaning of the property is defined in that cvterm.';


--
-- Name: COLUMN cvprop.value; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON COLUMN cvprop.value IS 'The value of the property, represented as text. Numeric values are converted to their text representation.';


--
-- Name: COLUMN cvprop.rank; Type: COMMENT; Schema: sgn; Owner: postgres
--

COMMENT ON COLUMN cvprop.rank IS 'Property-Value ordering. Any
cv can have multiple values for any particular property type -
these are ordered in a list using rank, counting from zero. For
properties that are single-valued rather than multi-valued, the
default 0 value should be used.';


--
-- Name: cvprop_cvprop_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE cvprop_cvprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE cvprop_cvprop_id_seq OWNER TO postgres;

--
-- Name: cvprop_cvprop_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE cvprop_cvprop_id_seq OWNED BY cvprop.cvprop_id;


SET default_with_oids = true;

--
-- Name: deprecated_linkage_groups; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE deprecated_linkage_groups (
    lg_id bigint NOT NULL,
    map_id bigint,
    lg_order bigint,
    lg_name character varying(255)
);


ALTER TABLE deprecated_linkage_groups OWNER TO postgres;

--
-- Name: deprecated_linkage_groups_lg_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE deprecated_linkage_groups_lg_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deprecated_linkage_groups_lg_id_seq OWNER TO postgres;

--
-- Name: deprecated_linkage_groups_lg_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE deprecated_linkage_groups_lg_id_seq OWNED BY deprecated_linkage_groups.lg_id;


--
-- Name: deprecated_map_cross; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE deprecated_map_cross (
    map_cross_id integer NOT NULL,
    map_id bigint DEFAULT (0)::bigint NOT NULL,
    organism_id bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE deprecated_map_cross OWNER TO postgres;

--
-- Name: deprecated_map_cross_map_cross_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE deprecated_map_cross_map_cross_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deprecated_map_cross_map_cross_id_seq OWNER TO postgres;

--
-- Name: deprecated_map_cross_map_cross_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE deprecated_map_cross_map_cross_id_seq OWNED BY deprecated_map_cross.map_cross_id;


--
-- Name: deprecated_mapdata; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE deprecated_mapdata (
    loc_id integer NOT NULL,
    map_id bigint DEFAULT (0)::bigint NOT NULL,
    lg_id bigint,
    "offset" numeric(8,5),
    loc_type bigint DEFAULT (0)::bigint NOT NULL,
    loc_order bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE deprecated_mapdata OWNER TO postgres;

--
-- Name: deprecated_mapdata_loc_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE deprecated_mapdata_loc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deprecated_mapdata_loc_id_seq OWNER TO postgres;

--
-- Name: deprecated_mapdata_loc_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE deprecated_mapdata_loc_id_seq OWNED BY deprecated_mapdata.loc_id;


--
-- Name: deprecated_maps; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE deprecated_maps (
    map_id integer NOT NULL,
    legacy_id bigint DEFAULT (0)::bigint NOT NULL,
    short_name character varying(50) DEFAULT ''::character varying NOT NULL,
    long_name character varying(250) DEFAULT ''::character varying NOT NULL,
    number_chromosomes bigint DEFAULT (0)::bigint NOT NULL,
    default_threshold bigint DEFAULT (0)::bigint NOT NULL,
    header text NOT NULL,
    abstract text NOT NULL,
    genetic_cross character varying(250),
    population_type character varying(250),
    population_size bigint,
    seed_available bigint,
    seed_url character varying(250),
    deprecated_by bigint DEFAULT (0)::bigint,
    map_type character varying(7),
    CONSTRAINT maps_map_type_check CHECK ((((map_type)::text = 'genetic'::text) OR ((map_type)::text = 'fish'::text)))
);


ALTER TABLE deprecated_maps OWNER TO postgres;

--
-- Name: deprecated_maps_map_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE deprecated_maps_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deprecated_maps_map_id_seq OWNER TO postgres;

--
-- Name: deprecated_maps_map_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE deprecated_maps_map_id_seq OWNED BY deprecated_maps.map_id;


--
-- Name: deprecated_marker_confidences; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE deprecated_marker_confidences (
    confidence_id integer NOT NULL,
    confidence_name character varying(16),
    legacy_conf_id bigint,
    CONSTRAINT legacy_conf_id_not_null CHECK ((legacy_conf_id IS NOT NULL))
);


ALTER TABLE deprecated_marker_confidences OWNER TO postgres;

--
-- Name: deprecated_marker_confidences_confidence_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE deprecated_marker_confidences_confidence_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deprecated_marker_confidences_confidence_id_seq OWNER TO postgres;

--
-- Name: deprecated_marker_confidences_confidence_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE deprecated_marker_confidences_confidence_id_seq OWNED BY deprecated_marker_confidences.confidence_id;


--
-- Name: deprecated_marker_locations; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE deprecated_marker_locations (
    marker_location_id integer NOT NULL,
    marker_id bigint DEFAULT (0)::bigint NOT NULL,
    loc_id bigint DEFAULT (0)::bigint NOT NULL,
    confidence bigint DEFAULT (0)::bigint NOT NULL,
    order_in_loc bigint DEFAULT (0)::bigint NOT NULL,
    location_subscript character(2),
    mapmaker_id bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE deprecated_marker_locations OWNER TO postgres;

--
-- Name: deprecated_marker_locations_marker_location_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE deprecated_marker_locations_marker_location_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deprecated_marker_locations_marker_location_id_seq OWNER TO postgres;

--
-- Name: deprecated_marker_locations_marker_location_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE deprecated_marker_locations_marker_location_id_seq OWNED BY deprecated_marker_locations.marker_location_id;


--
-- Name: deprecated_marker_types; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE deprecated_marker_types (
    marker_type_id integer NOT NULL,
    type_name character varying(32),
    description text,
    marker_table character varying(128)
);


ALTER TABLE deprecated_marker_types OWNER TO postgres;

--
-- Name: deprecated_marker_types_marker_type_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE deprecated_marker_types_marker_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deprecated_marker_types_marker_type_id_seq OWNER TO postgres;

--
-- Name: deprecated_marker_types_marker_type_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE deprecated_marker_types_marker_type_id_seq OWNED BY deprecated_marker_types.marker_type_id;


--
-- Name: deprecated_markers; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE deprecated_markers (
    marker_id integer NOT NULL,
    marker_type bigint DEFAULT (0)::bigint NOT NULL,
    marker_name character varying(32) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE deprecated_markers OWNER TO postgres;

--
-- Name: deprecated_markers_marker_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE deprecated_markers_marker_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deprecated_markers_marker_id_seq OWNER TO postgres;

--
-- Name: deprecated_markers_marker_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE deprecated_markers_marker_id_seq OWNED BY deprecated_markers.marker_id;


--
-- Name: derived_from_source; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE derived_from_source (
    derived_from_source_id integer NOT NULL,
    source_name text,
    source_schema text,
    source_table text,
    source_col text
);


ALTER TABLE derived_from_source OWNER TO postgres;

--
-- Name: derived_from_source_derived_from_source_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE derived_from_source_derived_from_source_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE derived_from_source_derived_from_source_id_seq OWNER TO postgres;

--
-- Name: derived_from_source_derived_from_source_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE derived_from_source_derived_from_source_id_seq OWNED BY derived_from_source.derived_from_source_id;


--
-- Name: domain; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE domain (
    domain_id bigint NOT NULL,
    method_id bigint,
    domain_accession character varying(20),
    description text,
    interpro_id bigint,
    description_fulltext tsvector,
    dbxref_id bigint,
    metadata_id bigint
);


ALTER TABLE domain OWNER TO postgres;

--
-- Name: domain_domain_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE domain_domain_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE domain_domain_id_seq OWNER TO postgres;

--
-- Name: domain_domain_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE domain_domain_id_seq OWNED BY domain.domain_id;


--
-- Name: domain_match; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE domain_match (
    domain_match_id bigint NOT NULL,
    cds_id bigint,
    unigene_id bigint,
    domain_id bigint,
    match_begin integer,
    match_end integer,
    e_value character varying(10),
    hit_status character(1),
    run_id bigint,
    metadata_id bigint
);


ALTER TABLE domain_match OWNER TO postgres;

--
-- Name: domain_match_domain_match_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE domain_match_domain_match_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE domain_match_domain_match_id_seq OWNER TO postgres;

--
-- Name: domain_match_domain_match_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE domain_match_domain_match_id_seq OWNED BY domain_match.domain_match_id;


--
-- Name: enzyme_restriction_sites; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE enzyme_restriction_sites (
    enzyme_id integer,
    restriction_site text,
    enzyme_restriction_sites_id integer NOT NULL
);


ALTER TABLE enzyme_restriction_sites OWNER TO postgres;

--
-- Name: enzyme_restriction_sites_enzyme_restriction_sites_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE enzyme_restriction_sites_enzyme_restriction_sites_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE enzyme_restriction_sites_enzyme_restriction_sites_id_seq OWNER TO postgres;

--
-- Name: enzyme_restriction_sites_enzyme_restriction_sites_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE enzyme_restriction_sites_enzyme_restriction_sites_id_seq OWNED BY enzyme_restriction_sites.enzyme_restriction_sites_id;


--
-- Name: enzymes; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE enzymes (
    enzyme_id integer NOT NULL,
    enzyme_name character varying(32)
);


ALTER TABLE enzymes OWNER TO postgres;

--
-- Name: enzymes_enzyme_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE enzymes_enzyme_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE enzymes_enzyme_id_seq OWNER TO postgres;

--
-- Name: enzymes_enzyme_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE enzymes_enzyme_id_seq OWNED BY enzymes.enzyme_id;


--
-- Name: est; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE est (
    est_id integer NOT NULL,
    read_id integer,
    version integer,
    basecaller character varying(40),
    seq text,
    qscore text,
    call_positions text,
    status integer,
    flags bigint,
    date date,
    genbank_submission_date date,
    genbank_confirmed boolean
);


ALTER TABLE est OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: est_dbxref; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE est_dbxref (
    est_dbxref_id integer NOT NULL,
    est_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


ALTER TABLE est_dbxref OWNER TO postgres;

--
-- Name: est_dbxref_est_dbxref_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE est_dbxref_est_dbxref_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE est_dbxref_est_dbxref_id_seq OWNER TO postgres;

--
-- Name: est_dbxref_est_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE est_dbxref_est_dbxref_id_seq OWNED BY est_dbxref.est_dbxref_id;


--
-- Name: est_est_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE est_est_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE est_est_id_seq OWNER TO postgres;

--
-- Name: est_est_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE est_est_id_seq OWNED BY est.est_id;


SET default_with_oids = true;

--
-- Name: ests_mapped_by_clone; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE ests_mapped_by_clone (
    embc_id integer NOT NULL,
    marker_id bigint,
    clone_id bigint
);


ALTER TABLE ests_mapped_by_clone OWNER TO postgres;

--
-- Name: ests_mapped_by_clone_embc_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE ests_mapped_by_clone_embc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ests_mapped_by_clone_embc_id_seq OWNER TO postgres;

--
-- Name: ests_mapped_by_clone_embc_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE ests_mapped_by_clone_embc_id_seq OWNED BY ests_mapped_by_clone.embc_id;


--
-- Name: experiment_type; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE experiment_type (
    experiment_type_id bigint NOT NULL,
    name character varying(255),
    description text
);


ALTER TABLE experiment_type OWNER TO postgres;

--
-- Name: experiment_type_experiment_type_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE experiment_type_experiment_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE experiment_type_experiment_type_id_seq OWNER TO postgres;

--
-- Name: experiment_type_experiment_type_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE experiment_type_experiment_type_id_seq OWNED BY experiment_type.experiment_type_id;


--
-- Name: facility; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE facility (
    facility_id integer NOT NULL,
    submit_user_id integer,
    facility_moniker character varying(20),
    facility_shortname character varying(12),
    facility_name character varying(80),
    facility_contact character varying(80),
    facility_address text,
    funding_agency character varying(80),
    funding_comment text,
    sequencing_primers character varying(80),
    machine character varying(40),
    chemistry character varying(40),
    attribution_display text,
    sp_person_id integer
);


ALTER TABLE facility OWNER TO postgres;

--
-- Name: facility_facility_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE facility_facility_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE facility_facility_id_seq OWNER TO postgres;

--
-- Name: facility_facility_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE facility_facility_id_seq OWNED BY facility.facility_id;


--
-- Name: family_build_family_build_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE family_build_family_build_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE family_build_family_build_id_seq OWNER TO postgres;

--
-- Name: family_build_family_build_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE family_build_family_build_id_seq OWNED BY family_build.family_build_id;


--
-- Name: family_family_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE family_family_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE family_family_id_seq OWNER TO postgres;

--
-- Name: family_family_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE family_family_id_seq OWNED BY family.family_id;


--
-- Name: family_member_family_member_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE family_member_family_member_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE family_member_family_member_id_seq OWNER TO postgres;

--
-- Name: family_member_family_member_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE family_member_family_member_id_seq OWNED BY family_member.family_member_id;


--
-- Name: family_tree; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE family_tree (
    family_tree_id integer NOT NULL,
    family_id integer NOT NULL,
    tree_nr integer,
    newick_cds character varying,
    newick_unigene character varying
);


ALTER TABLE family_tree OWNER TO postgres;

--
-- Name: family_tree_family_tree_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE family_tree_family_tree_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE family_tree_family_tree_id_seq OWNER TO postgres;

--
-- Name: family_tree_family_tree_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE family_tree_family_tree_id_seq OWNED BY family_tree.family_tree_id;


--
-- Name: fish_chromatin_density_constants; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE fish_chromatin_density_constants (
    arm character varying(1) DEFAULT 'E'::character varying NOT NULL,
    density real,
    CONSTRAINT fish_chromatin_density_constants_arm_check CHECK ((((arm)::text = 'E'::text) OR ((arm)::text = 'H'::text)))
);


ALTER TABLE fish_chromatin_density_constants OWNER TO postgres;

--
-- Name: fish_experimenter; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE fish_experimenter (
    fish_experimenter_id integer NOT NULL,
    fish_experimenter_name character varying(20)
);


ALTER TABLE fish_experimenter OWNER TO postgres;

--
-- Name: fish_experimenter_fish_experimenter_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE fish_experimenter_fish_experimenter_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE fish_experimenter_fish_experimenter_id_seq OWNER TO postgres;

--
-- Name: fish_experimenter_fish_experimenter_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE fish_experimenter_fish_experimenter_id_seq OWNED BY fish_experimenter.fish_experimenter_id;


--
-- Name: fish_file; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE fish_file (
    fish_file_id bigint NOT NULL,
    filename character varying(255),
    fish_result_id bigint DEFAULT (0)::bigint NOT NULL
);


ALTER TABLE fish_file OWNER TO postgres;

--
-- Name: fish_file_fish_file_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE fish_file_fish_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE fish_file_fish_file_id_seq OWNER TO postgres;

--
-- Name: fish_file_fish_file_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE fish_file_fish_file_id_seq OWNED BY fish_file.fish_file_id;


--
-- Name: fish_image; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE fish_image (
    fish_image_id integer DEFAULT 0 NOT NULL,
    filename character varying(255),
    fish_result_id integer DEFAULT 0 NOT NULL
);


ALTER TABLE fish_image OWNER TO postgres;

--
-- Name: fish_karyotype_constants; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE fish_karyotype_constants (
    fish_experimenter_id integer NOT NULL,
    chromo_num smallint NOT NULL,
    chromo_arm text NOT NULL,
    arm_length numeric(5,2) NOT NULL,
    arm_eu_length numeric(5,2) NOT NULL,
    arm_het_length numeric(5,2) NOT NULL,
    CONSTRAINT chromo_arm_enum CHECK (((chromo_arm = 'P'::text) OR (chromo_arm = 'Q'::text)))
);


ALTER TABLE fish_karyotype_constants OWNER TO postgres;

--
-- Name: fish_karyotype_constants_old; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE fish_karyotype_constants_old (
    chromo_num smallint DEFAULT (0)::smallint NOT NULL,
    chromo_length real,
    chromo_arm_ratio real,
    short_arm_length real,
    short_arm_eu_length real,
    short_arm_het_length real,
    long_arm_length real,
    long_arm_eu_length real,
    long_arm_het_length real
);


ALTER TABLE fish_karyotype_constants_old OWNER TO postgres;

--
-- Name: fish_result; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE fish_result (
    fish_result_id bigint NOT NULL,
    map_id bigint NOT NULL,
    fish_experimenter_id integer NOT NULL,
    experiment_name character varying(10) NOT NULL,
    clone_id bigint NOT NULL,
    chromo_num smallint NOT NULL,
    chromo_arm character varying(1) NOT NULL,
    percent_from_centromere real NOT NULL,
    experiment_group character varying(12),
    attribution_id bigint,
    CONSTRAINT fish_result_chromo_arm_check CHECK ((((chromo_arm)::text = 'P'::text) OR ((chromo_arm)::text = 'Q'::text)))
);


ALTER TABLE fish_result OWNER TO postgres;

--
-- Name: fish_result_composite; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE fish_result_composite (
    fish_result_id bigint DEFAULT (0)::bigint NOT NULL,
    map_id bigint DEFAULT (0)::bigint NOT NULL,
    fish_experimenter_id integer,
    experiment_name character varying(10),
    clone_id bigint DEFAULT (0)::bigint NOT NULL,
    chromo_num smallint DEFAULT (0)::smallint NOT NULL,
    chromo_arm character varying(1) DEFAULT 'P'::character varying NOT NULL,
    percent_from_centromere real DEFAULT (0)::real NOT NULL,
    het_or_eu character varying(1),
    um_from_centromere real,
    um_from_arm_end real,
    um_from_arm_border real,
    mbp_from_arm_end real,
    mbp_from_centromere real,
    mbp_from_arm_border real,
    experiment_group character varying(12),
    CONSTRAINT fish_result_composite_chromo_arm_check CHECK ((((chromo_arm)::text = 'P'::text) OR ((chromo_arm)::text = 'Q'::text))),
    CONSTRAINT fish_result_composite_het_or_eu_check CHECK ((((het_or_eu)::text = 'H'::text) OR ((het_or_eu)::text = 'E'::text)))
);


ALTER TABLE fish_result_composite OWNER TO postgres;

--
-- Name: fish_result_fish_result_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE fish_result_fish_result_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE fish_result_fish_result_id_seq OWNER TO postgres;

--
-- Name: fish_result_fish_result_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE fish_result_fish_result_id_seq OWNED BY fish_result.fish_result_id;


SET default_with_oids = false;

--
-- Name: fish_result_image; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE fish_result_image (
    fish_result_image_id integer NOT NULL,
    image_id bigint,
    fish_result_id bigint
);


ALTER TABLE fish_result_image OWNER TO postgres;

--
-- Name: fish_result_image_fish_result_image_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE fish_result_image_fish_result_image_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE fish_result_image_fish_result_image_id_seq OWNER TO postgres;

--
-- Name: fish_result_image_fish_result_image_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE fish_result_image_fish_result_image_id_seq OWNED BY fish_result_image.fish_result_image_id;


SET default_with_oids = true;

--
-- Name: go; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE go (
    go_id bigint NOT NULL,
    go_accession character varying(20),
    description text,
    description_fulltext tsvector
);


ALTER TABLE go OWNER TO postgres;

--
-- Name: go_go_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE go_go_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE go_go_id_seq OWNER TO postgres;

--
-- Name: go_go_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE go_go_id_seq OWNED BY go.go_id;


--
-- Name: group_linkage; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE group_linkage (
    group_linkage_id integer NOT NULL,
    group_id integer,
    member_id integer,
    member_type bigint,
    member_value bytea
);


ALTER TABLE group_linkage OWNER TO postgres;

--
-- Name: group_linkage_group_linkage_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE group_linkage_group_linkage_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE group_linkage_group_linkage_id_seq OWNER TO postgres;

--
-- Name: group_linkage_group_linkage_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE group_linkage_group_linkage_id_seq OWNED BY group_linkage.group_linkage_id;


--
-- Name: groups; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE groups (
    group_id integer NOT NULL,
    type integer,
    comment text
);


ALTER TABLE groups OWNER TO postgres;

--
-- Name: groups_group_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE groups_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE groups_group_id_seq OWNER TO postgres;

--
-- Name: groups_group_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE groups_group_id_seq OWNED BY groups.group_id;


--
-- Name: id_linkage; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE id_linkage (
    id_linkage_id integer NOT NULL,
    link_id character varying(80),
    link_id_type integer,
    internal_id integer,
    internal_id_type integer
);


ALTER TABLE id_linkage OWNER TO postgres;

--
-- Name: id_linkage_id_linkage_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE id_linkage_id_linkage_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE id_linkage_id_linkage_id_seq OWNER TO postgres;

--
-- Name: id_linkage_id_linkage_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE id_linkage_id_linkage_id_seq OWNED BY id_linkage.id_linkage_id;


SET default_with_oids = false;

--
-- Name: il_info; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE il_info (
    ns_marker_id integer,
    sn_marker_id integer,
    map_id integer,
    map_version_id integer,
    population_id bigint,
    ns_position numeric(8,5),
    sn_position numeric(8,5),
    name character varying(100),
    ns_alias text,
    sn_alias text,
    lg_name text
);


ALTER TABLE il_info OWNER TO postgres;

SET default_with_oids = true;

--
-- Name: interpro; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE interpro (
    interpro_id bigint NOT NULL,
    interpro_accession character varying(20),
    description text,
    description_fulltext tsvector
);


ALTER TABLE interpro OWNER TO postgres;

--
-- Name: interpro_go; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE interpro_go (
    interpro_go_id bigint NOT NULL,
    interpro_accession character varying(20),
    go_accession character varying(20)
);


ALTER TABLE interpro_go OWNER TO postgres;

--
-- Name: interpro_go_interpro_go_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE interpro_go_interpro_go_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE interpro_go_interpro_go_id_seq OWNER TO postgres;

--
-- Name: interpro_go_interpro_go_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE interpro_go_interpro_go_id_seq OWNED BY interpro_go.interpro_go_id;


--
-- Name: interpro_interpro_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE interpro_interpro_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE interpro_interpro_id_seq OWNER TO postgres;

--
-- Name: interpro_interpro_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE interpro_interpro_id_seq OWNED BY interpro.interpro_id;


--
-- Name: library; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE library (
    library_id integer NOT NULL,
    type bigint,
    submit_user_id integer,
    library_name character varying(80),
    library_shortname character varying(16),
    authors character varying(255),
    organism_id integer,
    cultivar character varying(255),
    accession character varying(255),
    tissue character varying(255),
    development_stage character varying(255),
    treatment_conditions text,
    cloning_host character varying(80),
    vector character varying(80),
    rs1 character varying(12),
    rs2 character varying(12),
    cloning_kit character varying(255),
    comments text,
    contact_information text,
    order_routing_id bigint,
    sp_person_id integer,
    forward_adapter character varying,
    reverse_adapter character varying,
    obsolete boolean,
    modified_date timestamp with time zone,
    create_date timestamp with time zone,
    chado_organism_id integer
);


ALTER TABLE library OWNER TO postgres;

--
-- Name: library_library_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE library_library_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE library_library_id_seq OWNER TO postgres;

--
-- Name: library_library_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE library_library_id_seq OWNED BY library.library_id;


--
-- Name: linkage_group; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE linkage_group (
    lg_id integer NOT NULL,
    map_version_id integer,
    lg_order integer NOT NULL,
    lg_name text,
    north_location_id integer,
    south_location_id integer
);


ALTER TABLE linkage_group OWNER TO postgres;

--
-- Name: linkage_group_lg_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE linkage_group_lg_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE linkage_group_lg_id_seq OWNER TO postgres;

--
-- Name: linkage_group_lg_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE linkage_group_lg_id_seq OWNED BY linkage_group.lg_id;


--
-- Name: loc_types; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE loc_types (
    loc_type_id integer NOT NULL,
    type_code character varying(10) DEFAULT ''::character varying NOT NULL,
    type_name character varying(12) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE loc_types OWNER TO postgres;

--
-- Name: loc_types_loc_type_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE loc_types_loc_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE loc_types_loc_type_id_seq OWNER TO postgres;

--
-- Name: loc_types_loc_type_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE loc_types_loc_type_id_seq OWNED BY loc_types.loc_type_id;


--
-- Name: manual_annotations; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE manual_annotations (
    manual_annotations_id bigint NOT NULL,
    annotation_target_id bigint,
    annotation_target_type_id bigint,
    annotation_text text,
    author_id bigint,
    date_entered date,
    last_modified date,
    annotation_text_fulltext tsvector
);


ALTER TABLE manual_annotations OWNER TO postgres;

--
-- Name: manual_annotations_manual_annotations_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE manual_annotations_manual_annotations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE manual_annotations_manual_annotations_id_seq OWNER TO postgres;

--
-- Name: manual_annotations_manual_annotations_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE manual_annotations_manual_annotations_id_seq OWNED BY manual_annotations.manual_annotations_id;


--
-- Name: manual_censor_reasons; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE manual_censor_reasons (
    censor_id integer NOT NULL,
    reason text
);


ALTER TABLE manual_censor_reasons OWNER TO postgres;

--
-- Name: manual_censor_reasons_censor_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE manual_censor_reasons_censor_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE manual_censor_reasons_censor_id_seq OWNER TO postgres;

--
-- Name: manual_censor_reasons_censor_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE manual_censor_reasons_censor_id_seq OWNED BY manual_censor_reasons.censor_id;


--
-- Name: map; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE map (
    map_id integer NOT NULL,
    short_name text NOT NULL,
    long_name text,
    abstract text,
    map_type text,
    parent_1 integer,
    parent_2 integer,
    units text DEFAULT 'cM'::text,
    ancestor integer,
    population_id integer,
    parent1_stock_id bigint,
    parent2_stock_id bigint,
    population_stock_id bigint,
    CONSTRAINT map_map_type_check CHECK (((map_type = 'genetic'::text) OR (map_type = 'fish'::text) OR (map_type = 'sequence'::text) OR (map_type = 'QTL'::text))),
    CONSTRAINT map_units_check CHECK (((units = 'cM'::text) OR (units = 'Mb'::text)))
);


ALTER TABLE map OWNER TO postgres;

--
-- Name: map_map_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE map_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE map_map_id_seq OWNER TO postgres;

--
-- Name: map_map_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE map_map_id_seq OWNED BY map.map_id;


--
-- Name: map_version; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE map_version (
    map_version_id integer NOT NULL,
    map_id integer,
    date_loaded date,
    current_version boolean,
    default_threshold integer,
    has_il boolean,
    has_physical boolean,
    metadata_id integer
);


ALTER TABLE map_version OWNER TO postgres;

--
-- Name: map_version_map_version_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE map_version_map_version_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE map_version_map_version_id_seq OWNER TO postgres;

--
-- Name: map_version_map_version_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE map_version_map_version_id_seq OWNED BY map_version.map_version_id;


--
-- Name: marker; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE marker (
    marker_id integer NOT NULL,
    dummy_field boolean
);


ALTER TABLE marker OWNER TO postgres;

--
-- Name: marker_alias; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE marker_alias (
    alias_id integer NOT NULL,
    alias text NOT NULL,
    marker_id integer NOT NULL,
    preferred boolean DEFAULT true
);


ALTER TABLE marker_alias OWNER TO postgres;

--
-- Name: marker_alias_alias_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE marker_alias_alias_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE marker_alias_alias_id_seq OWNER TO postgres;

--
-- Name: marker_alias_alias_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE marker_alias_alias_id_seq OWNED BY marker_alias.alias_id;


--
-- Name: marker_collectible; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE marker_collectible (
    marker_collectible_dummy_id integer NOT NULL,
    marker_id integer NOT NULL,
    mc_id integer NOT NULL
);


ALTER TABLE marker_collectible OWNER TO postgres;

--
-- Name: marker_collectible_marker_collectible_dummy_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE marker_collectible_marker_collectible_dummy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE marker_collectible_marker_collectible_dummy_id_seq OWNER TO postgres;

--
-- Name: marker_collectible_marker_collectible_dummy_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE marker_collectible_marker_collectible_dummy_id_seq OWNED BY marker_collectible.marker_collectible_dummy_id;


--
-- Name: marker_collection; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE marker_collection (
    mc_id integer NOT NULL,
    mc_name text NOT NULL,
    mc_description text
);


ALTER TABLE marker_collection OWNER TO postgres;

--
-- Name: marker_collection_mc_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE marker_collection_mc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE marker_collection_mc_id_seq OWNER TO postgres;

--
-- Name: marker_collection_mc_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE marker_collection_mc_id_seq OWNED BY marker_collection.mc_id;


--
-- Name: marker_confidence; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE marker_confidence (
    confidence_id integer NOT NULL,
    confidence_name text
);


ALTER TABLE marker_confidence OWNER TO postgres;

--
-- Name: marker_confidence_confidence_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE marker_confidence_confidence_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE marker_confidence_confidence_id_seq OWNER TO postgres;

--
-- Name: marker_confidence_confidence_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE marker_confidence_confidence_id_seq OWNED BY marker_confidence.confidence_id;


--
-- Name: marker_derived_from; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE marker_derived_from (
    marker_derived_dummy_id integer NOT NULL,
    marker_id integer,
    derived_from_source_id integer,
    id_in_source integer
);


ALTER TABLE marker_derived_from OWNER TO postgres;

--
-- Name: marker_derived_from_marker_derived_dummy_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE marker_derived_from_marker_derived_dummy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE marker_derived_from_marker_derived_dummy_id_seq OWNER TO postgres;

--
-- Name: marker_derived_from_marker_derived_dummy_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE marker_derived_from_marker_derived_dummy_id_seq OWNED BY marker_derived_from.marker_derived_dummy_id;


--
-- Name: marker_experiment; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE marker_experiment (
    marker_experiment_id integer NOT NULL,
    marker_id integer,
    pcr_experiment_id integer,
    rflp_experiment_id integer,
    location_id integer,
    protocol text NOT NULL,
    CONSTRAINT marker_experiment_check CHECK (((rflp_experiment_id IS NOT NULL) OR (pcr_experiment_id IS NOT NULL) OR (location_id IS NOT NULL))),
    CONSTRAINT marker_experiment_check1 CHECK ((((pcr_experiment_id IS NOT NULL) AND (rflp_experiment_id IS NULL)) OR ((pcr_experiment_id IS NULL) AND (rflp_experiment_id IS NOT NULL)) OR ((pcr_experiment_id IS NULL) AND (rflp_experiment_id IS NULL) AND (location_id IS NOT NULL)))),
    CONSTRAINT marker_experiment_protocol_check CHECK (((protocol = 'AFLP'::text) OR (protocol = 'CAPS'::text) OR (protocol = 'RAPD'::text) OR (protocol = 'SNP'::text) OR (protocol = 'SSR'::text) OR (protocol = 'RFLP'::text) OR (protocol = 'PCR'::text) OR (protocol = 'dCAPS'::text) OR (protocol = 'DART'::text) OR (protocol = 'OPA'::text) OR (protocol = 'unknown'::text) OR (protocol = 'ASPE'::text) OR (protocol = 'INDEL'::text) OR (protocol = 'QTL'::text))),
    CONSTRAINT marker_experiment_rflp_protocol_consistency CHECK ((((protocol = 'RFLP'::text) AND (pcr_experiment_id IS NULL)) OR ((protocol <> 'RFLP'::text) AND (rflp_experiment_id IS NULL))))
);


ALTER TABLE marker_experiment OWNER TO postgres;

--
-- Name: marker_experiment_marker_experiment_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE marker_experiment_marker_experiment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE marker_experiment_marker_experiment_id_seq OWNER TO postgres;

--
-- Name: marker_experiment_marker_experiment_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE marker_experiment_marker_experiment_id_seq OWNED BY marker_experiment.marker_experiment_id;


--
-- Name: marker_location; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE marker_location (
    location_id integer NOT NULL,
    lg_id integer NOT NULL,
    map_version_id integer NOT NULL,
    "position" numeric(8,5) NOT NULL,
    confidence_id integer NOT NULL,
    subscript character(1),
    position_north numeric(8,5),
    position_south numeric(8,5),
    CONSTRAINT marker_location_subscript_check CHECK (((subscript = 'A'::bpchar) OR (subscript = 'B'::bpchar) OR (subscript = 'C'::bpchar) OR (subscript IS NULL)))
);


ALTER TABLE marker_location OWNER TO postgres;

--
-- Name: marker_location_location_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE marker_location_location_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE marker_location_location_id_seq OWNER TO postgres;

--
-- Name: marker_location_location_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE marker_location_location_id_seq OWNED BY marker_location.location_id;


--
-- Name: marker_marker_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE marker_marker_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE marker_marker_id_seq OWNER TO postgres;

--
-- Name: marker_marker_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE marker_marker_id_seq OWNED BY marker.marker_id;


--
-- Name: marker_to_map; Type: VIEW; Schema: sgn; Owner: postgres
--

CREATE VIEW marker_to_map AS
 SELECT m.marker_id,
    me.protocol,
    ml.location_id,
    linkage_group.lg_name,
    linkage_group.lg_order,
    ml."position",
    ml.confidence_id,
    ml.subscript,
    ml.map_version_id,
    map.map_id,
    map.parent_1,
    map.parent_2,
    map_version.current_version
   FROM (((((marker m
     LEFT JOIN marker_experiment me USING (marker_id))
     LEFT JOIN marker_location ml USING (location_id))
     LEFT JOIN map_version USING (map_version_id))
     LEFT JOIN map USING (map_id))
     LEFT JOIN linkage_group USING (lg_id))
  WHERE (map_version.current_version = true);


ALTER TABLE marker_to_map OWNER TO postgres;

SET default_with_oids = false;

--
-- Name: metadata; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE metadata (
    metadata_id bigint NOT NULL,
    create_date timestamp with time zone DEFAULT now(),
    create_person_id integer NOT NULL,
    modified_date timestamp with time zone,
    modified_person_id integer,
    previous_metadata_id integer,
    obsolete integer DEFAULT 0,
    obsolete_note character varying(250)
);


ALTER TABLE metadata OWNER TO postgres;

--
-- Name: metadata_metadata_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE metadata_metadata_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE metadata_metadata_id_seq OWNER TO postgres;

--
-- Name: metadata_metadata_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE metadata_metadata_id_seq OWNED BY metadata.metadata_id;


SET default_with_oids = true;

--
-- Name: microarray; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE microarray (
    microarray_id integer NOT NULL,
    chip_name character varying(80),
    release bigint,
    version bigint,
    spot_id character varying(20),
    content_specific_tag character varying(40),
    clone_id integer
);


ALTER TABLE microarray OWNER TO postgres;

--
-- Name: microarray_microarray_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE microarray_microarray_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE microarray_microarray_id_seq OWNER TO postgres;

--
-- Name: microarray_microarray_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE microarray_microarray_id_seq OWNED BY microarray.microarray_id;


--
-- Name: misc; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE misc (
    misc_unique_id integer NOT NULL,
    misc_id integer,
    name text,
    value bytea
);


ALTER TABLE misc OWNER TO postgres;

--
-- Name: misc_misc_unique_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE misc_misc_unique_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE misc_misc_unique_id_seq OWNER TO postgres;

--
-- Name: misc_misc_unique_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE misc_misc_unique_id_seq OWNED BY misc.misc_unique_id;


--
-- Name: organism; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE organism (
    organism_id integer NOT NULL,
    organism_name character varying(80),
    common_name_id bigint NOT NULL,
    organism_descrip text,
    specie_tax character varying(80),
    genus_tax integer,
    subfamily_tax integer,
    family_tax integer,
    order_tax integer,
    chr_n_gnmc integer,
    polypl_gnmc character varying(50),
    genom_size_gnmc character varying(50),
    genom_proj_gnmc text,
    est_attribution_tqmc text,
    chado_organism_id integer
);


ALTER TABLE organism OWNER TO postgres;

--
-- Name: organism_organism_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE organism_organism_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE organism_organism_id_seq OWNER TO postgres;

--
-- Name: organism_organism_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE organism_organism_id_seq OWNED BY organism.organism_id;


SET default_with_oids = false;

--
-- Name: organismgroup; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE organismgroup (
    organismgroup_id integer NOT NULL,
    name character varying(255),
    type character varying(32),
    CONSTRAINT organismgroup_type_check CHECK ((((type)::text = 'common name'::text) OR ((type)::text = 'unigene build'::text) OR ((type)::text = ''::text)))
);


ALTER TABLE organismgroup OWNER TO postgres;

--
-- Name: organismgroup_member; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE organismgroup_member (
    organismgroup_member_id integer NOT NULL,
    organismgroup_id integer,
    organism_id integer
);


ALTER TABLE organismgroup_member OWNER TO postgres;

--
-- Name: organismgroup_member_organismgroup_member_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE organismgroup_member_organismgroup_member_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE organismgroup_member_organismgroup_member_id_seq OWNER TO postgres;

--
-- Name: organismgroup_member_organismgroup_member_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE organismgroup_member_organismgroup_member_id_seq OWNED BY organismgroup_member.organismgroup_member_id;


--
-- Name: organismgroup_organismgroup_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE organismgroup_organismgroup_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE organismgroup_organismgroup_id_seq OWNER TO postgres;

--
-- Name: organismgroup_organismgroup_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE organismgroup_organismgroup_id_seq OWNED BY organismgroup.organismgroup_id;


SET default_with_oids = true;

--
-- Name: p_markers; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE p_markers (
    pid integer NOT NULL,
    marker_id bigint DEFAULT (0)::bigint NOT NULL,
    est_clone_id bigint DEFAULT (0)::bigint NOT NULL,
    p_mrkr_name character varying(32)
);


ALTER TABLE p_markers OWNER TO postgres;

--
-- Name: p_markers_pid_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE p_markers_pid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE p_markers_pid_seq OWNER TO postgres;

--
-- Name: p_markers_pid_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE p_markers_pid_seq OWNED BY p_markers.pid;


--
-- Name: pcr_exp_accession; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE pcr_exp_accession (
    pcr_exp_accession_id bigint NOT NULL,
    pcr_experiment_id bigint,
    accession_id bigint,
    stock_id bigint,
    CONSTRAINT experiment_not_null CHECK ((pcr_experiment_id IS NOT NULL))
);


ALTER TABLE pcr_exp_accession OWNER TO postgres;

--
-- Name: pcr_exp_accession_pcr_exp_accession_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE pcr_exp_accession_pcr_exp_accession_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pcr_exp_accession_pcr_exp_accession_id_seq OWNER TO postgres;

--
-- Name: pcr_exp_accession_pcr_exp_accession_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE pcr_exp_accession_pcr_exp_accession_id_seq OWNED BY pcr_exp_accession.pcr_exp_accession_id;


--
-- Name: pcr_experiment; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE pcr_experiment (
    pcr_experiment_id bigint NOT NULL,
    marker_id bigint,
    mg_concentration real,
    annealing_temp bigint,
    primer_id_fwd bigint,
    primer_id_rev bigint,
    subscript character varying(255),
    experiment_type_id bigint,
    map_id bigint,
    additional_enzymes character varying(1023),
    primer_type character varying(4),
    predicted boolean DEFAULT false,
    primer_id_pd bigint,
    accession_id character varying(7),
    stock_id integer,
    CONSTRAINT different_primers CHECK (((primer_id_fwd IS NULL) OR (primer_id_rev IS NULL) OR (NOT (primer_id_fwd = primer_id_rev)))),
    CONSTRAINT primer_type_enum CHECK ((((primer_type)::text = 'iUPA'::text) OR ((primer_type)::text = 'eUPA'::text) OR (primer_type IS NULL)))
);


ALTER TABLE pcr_experiment OWNER TO postgres;

--
-- Name: pcr_experiment_pcr_experiment_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE pcr_experiment_pcr_experiment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pcr_experiment_pcr_experiment_id_seq OWNER TO postgres;

--
-- Name: pcr_experiment_pcr_experiment_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE pcr_experiment_pcr_experiment_id_seq OWNED BY pcr_experiment.pcr_experiment_id;


SET default_with_oids = false;

--
-- Name: pcr_experiment_sequence; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE pcr_experiment_sequence (
    pcr_experiment_sequence_id integer NOT NULL,
    pcr_experiment_id integer NOT NULL,
    sequence_id integer NOT NULL,
    type_id integer
);


ALTER TABLE pcr_experiment_sequence OWNER TO postgres;

--
-- Name: pcr_experiment_sequence_pcr_experiment_sequence_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE pcr_experiment_sequence_pcr_experiment_sequence_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pcr_experiment_sequence_pcr_experiment_sequence_id_seq OWNER TO postgres;

--
-- Name: pcr_experiment_sequence_pcr_experiment_sequence_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE pcr_experiment_sequence_pcr_experiment_sequence_id_seq OWNED BY pcr_experiment_sequence.pcr_experiment_sequence_id;


SET default_with_oids = true;

--
-- Name: pcr_product; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE pcr_product (
    pcr_product_id bigint NOT NULL,
    pcr_exp_accession_id bigint,
    enzyme_id bigint,
    multiple_flag bigint,
    band_size bigint,
    predicted boolean DEFAULT false,
    CONSTRAINT band_size_or_multiple_check CHECK ((((band_size IS NOT NULL) OR (multiple_flag IS NOT NULL)) AND (NOT ((band_size IS NOT NULL) AND (multiple_flag IS NOT NULL))))),
    CONSTRAINT multiple_flag_null_or_1 CHECK (((multiple_flag = 1) OR (multiple_flag IS NULL))),
    CONSTRAINT pcr_exp_acc_not_null CHECK ((pcr_exp_accession_id IS NOT NULL))
);


ALTER TABLE pcr_product OWNER TO postgres;

--
-- Name: pcr_product_pcr_product_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE pcr_product_pcr_product_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pcr_product_pcr_product_id_seq OWNER TO postgres;

--
-- Name: pcr_product_pcr_product_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE pcr_product_pcr_product_id_seq OWNED BY pcr_product.pcr_product_id;


--
-- Name: primer_unigene_match; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE primer_unigene_match (
    primer_unigene_match_id integer NOT NULL,
    marker_id integer NOT NULL,
    unigene_id integer NOT NULL,
    primer_direction smallint,
    match_length integer,
    primer_match_start integer,
    primer_match_end integer,
    unigene_match_start integer,
    unigene_match_end integer,
    e_value double precision
);


ALTER TABLE primer_unigene_match OWNER TO postgres;

--
-- Name: primer_unigene_match_primer_unigene_match_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE primer_unigene_match_primer_unigene_match_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE primer_unigene_match_primer_unigene_match_id_seq OWNER TO postgres;

--
-- Name: primer_unigene_match_primer_unigene_match_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE primer_unigene_match_primer_unigene_match_id_seq OWNED BY primer_unigene_match.primer_unigene_match_id;


--
-- Name: qc_report; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE qc_report (
    qc_id integer NOT NULL,
    est_id integer DEFAULT 0 NOT NULL,
    basecaller character varying(40),
    qc_status bigint,
    vs_status bigint,
    qstart bigint,
    qend bigint,
    istart bigint,
    iend bigint,
    hqi_start bigint,
    hqi_length bigint,
    entropy real,
    expected_error real,
    quality_trim_threshold real,
    vector_tokens text
);


ALTER TABLE qc_report OWNER TO postgres;

--
-- Name: qc_report_qc_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE qc_report_qc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE qc_report_qc_id_seq OWNER TO postgres;

--
-- Name: qc_report_qc_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE qc_report_qc_id_seq OWNED BY qc_report.qc_id;


--
-- Name: rflp_markers; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE rflp_markers (
    rflp_id integer NOT NULL,
    marker_id bigint DEFAULT (0)::bigint NOT NULL,
    rflp_name character varying(64) DEFAULT ''::character varying NOT NULL,
    library_name character varying(64),
    clone_name character varying(16),
    vector character varying(32),
    cutting_site character varying(32),
    forward_seq_id bigint,
    reverse_seq_id bigint,
    insert_size bigint DEFAULT (0)::bigint NOT NULL,
    drug_resistance character varying(16),
    marker_prefix character varying(8),
    marker_suffix smallint,
    CONSTRAINT clone_name_not_null_check CHECK ((clone_name IS NOT NULL)),
    CONSTRAINT cutting_site_not_null_check CHECK ((cutting_site IS NOT NULL)),
    CONSTRAINT drug_resistance_not_null_check CHECK ((drug_resistance IS NOT NULL)),
    CONSTRAINT insert_size_not_null_check CHECK ((insert_size IS NOT NULL)),
    CONSTRAINT marker_prefix_not_null_check CHECK ((marker_prefix IS NOT NULL)),
    CONSTRAINT marker_suffix_not_null_check CHECK ((marker_suffix IS NOT NULL)),
    CONSTRAINT vector_not_null_check CHECK ((vector IS NOT NULL))
);


ALTER TABLE rflp_markers OWNER TO postgres;

--
-- Name: rflp_markers_rflp_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE rflp_markers_rflp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE rflp_markers_rflp_id_seq OWNER TO postgres;

--
-- Name: rflp_markers_rflp_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE rflp_markers_rflp_id_seq OWNED BY rflp_markers.rflp_id;


--
-- Name: rflp_sequences; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE rflp_sequences (
    seq_id integer NOT NULL,
    fasta_sequence text NOT NULL
);


ALTER TABLE rflp_sequences OWNER TO postgres;

--
-- Name: rflp_sequences_seq_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE rflp_sequences_seq_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE rflp_sequences_seq_id_seq OWNER TO postgres;

--
-- Name: rflp_sequences_seq_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE rflp_sequences_seq_id_seq OWNED BY rflp_sequences.seq_id;


--
-- Name: rflp_unigene_associations; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE rflp_unigene_associations (
    rflp_unigene_assoc_id integer NOT NULL,
    rflp_seq_id bigint,
    unigene_id bigint,
    e_val double precision,
    align_length bigint,
    query_start bigint,
    query_end bigint
);


ALTER TABLE rflp_unigene_associations OWNER TO postgres;

--
-- Name: rflp_unigene_associations_rflp_unigene_assoc_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE rflp_unigene_associations_rflp_unigene_assoc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE rflp_unigene_associations_rflp_unigene_assoc_id_seq OWNER TO postgres;

--
-- Name: rflp_unigene_associations_rflp_unigene_assoc_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE rflp_unigene_associations_rflp_unigene_assoc_id_seq OWNED BY rflp_unigene_associations.rflp_unigene_assoc_id;


--
-- Name: seqread; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE seqread (
    read_id integer NOT NULL,
    clone_id integer,
    facility_id integer,
    submitter_id integer,
    batch_id integer,
    primer character varying(50),
    direction character(1),
    trace_name character varying(50) NOT NULL,
    trace_location text,
    attribution_id integer,
    date timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
    censor_id integer
);


ALTER TABLE seqread OWNER TO postgres;

--
-- Name: seqread_read_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE seqread_read_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seqread_read_id_seq OWNER TO postgres;

--
-- Name: seqread_read_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE seqread_read_id_seq OWNED BY seqread.read_id;


--
-- Name: sequence; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE sequence (
    sequence_id bigint NOT NULL,
    sequence text
);


ALTER TABLE sequence OWNER TO postgres;

--
-- Name: sequence_sequence_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE sequence_sequence_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sequence_sequence_id_seq OWNER TO postgres;

--
-- Name: sequence_sequence_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE sequence_sequence_id_seq OWNED BY sequence.sequence_id;


SET default_with_oids = false;

--
-- Name: snp; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE snp (
    snp_id integer NOT NULL,
    marker_id integer,
    reference_nucleotide character varying(4),
    snp_nucleotide character varying(4) NOT NULL,
    confirmed boolean DEFAULT false,
    sequence_left_id integer,
    sequence_right_id integer,
    reference_stock_id integer,
    stock_id integer NOT NULL,
    metadata_id integer
);


ALTER TABLE snp OWNER TO postgres;

--
-- Name: snp_file; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE snp_file (
    snp_file_id integer NOT NULL,
    snp_id integer NOT NULL,
    file_id integer NOT NULL
);


ALTER TABLE snp_file OWNER TO postgres;

--
-- Name: snp_file_snp_file_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE snp_file_snp_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE snp_file_snp_file_id_seq OWNER TO postgres;

--
-- Name: snp_file_snp_file_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE snp_file_snp_file_id_seq OWNED BY snp_file.snp_file_id;


--
-- Name: snp_snp_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE snp_snp_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE snp_snp_id_seq OWNER TO postgres;

--
-- Name: snp_snp_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE snp_snp_id_seq OWNED BY snp.snp_id;


--
-- Name: snpprop; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE snpprop (
    snpprop_id integer NOT NULL,
    snp_id integer,
    value character varying(255) NOT NULL,
    rank integer,
    type_id integer
);


ALTER TABLE snpprop OWNER TO postgres;

--
-- Name: snpprop_snpprop_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE snpprop_snpprop_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE snpprop_snpprop_id_seq OWNER TO postgres;

--
-- Name: snpprop_snpprop_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE snpprop_snpprop_id_seq OWNED BY snpprop.snpprop_id;


SET default_with_oids = true;

--
-- Name: ssr; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE ssr (
    ssr_id integer NOT NULL,
    marker_id bigint DEFAULT (0)::bigint NOT NULL,
    ssr_name character varying(10),
    est_read_id bigint,
    start_primer character varying(100),
    end_primer character varying(100),
    pcr_product_ln bigint,
    tm_start_primer character varying(10),
    tm_end_primer character varying(10),
    ann_high character varying(10),
    ann_low character varying(10)
);


ALTER TABLE ssr OWNER TO postgres;

--
-- Name: ssr_primer_unigene_matches; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE ssr_primer_unigene_matches (
    ssr_primer_unigene_match_id integer NOT NULL,
    ssr_id bigint DEFAULT (0)::bigint NOT NULL,
    unigene_id bigint DEFAULT (0)::bigint NOT NULL,
    primer_direction smallint DEFAULT (0)::smallint NOT NULL,
    match_length bigint DEFAULT (0)::bigint NOT NULL,
    primer_match_start bigint DEFAULT (0)::bigint NOT NULL,
    primer_match_end bigint DEFAULT (0)::bigint NOT NULL,
    unigene_match_start bigint DEFAULT (0)::bigint NOT NULL,
    unigene_match_end bigint DEFAULT (0)::bigint NOT NULL,
    e_value character varying(32) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE ssr_primer_unigene_matches OWNER TO postgres;

--
-- Name: ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq OWNER TO postgres;

--
-- Name: ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq OWNED BY ssr_primer_unigene_matches.ssr_primer_unigene_match_id;


--
-- Name: ssr_repeats; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE ssr_repeats (
    repeat_id integer NOT NULL,
    ssr_id bigint DEFAULT (0)::bigint NOT NULL,
    repeat_motif character varying(32) DEFAULT ''::character varying NOT NULL,
    reapeat_nr bigint,
    marker_id integer NOT NULL
);


ALTER TABLE ssr_repeats OWNER TO postgres;

--
-- Name: ssr_repeats_repeat_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE ssr_repeats_repeat_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ssr_repeats_repeat_id_seq OWNER TO postgres;

--
-- Name: ssr_repeats_repeat_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE ssr_repeats_repeat_id_seq OWNED BY ssr_repeats.repeat_id;


--
-- Name: ssr_ssr_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE ssr_ssr_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ssr_ssr_id_seq OWNER TO postgres;

--
-- Name: ssr_ssr_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE ssr_ssr_id_seq OWNED BY ssr.ssr_id;


--
-- Name: submit_user; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE submit_user (
    submit_user_id integer NOT NULL,
    submit_code character varying(6),
    username character varying(20),
    password character varying(20),
    name character varying(80),
    email_address character varying(255),
    phone_number character varying(20),
    organization character varying(80),
    contact_information text,
    disabled bigint,
    confirm_code character varying(16),
    sp_person_id integer
);


ALTER TABLE submit_user OWNER TO postgres;

--
-- Name: submit_user_submit_user_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE submit_user_submit_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE submit_user_submit_user_id_seq OWNER TO postgres;

--
-- Name: submit_user_submit_user_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE submit_user_submit_user_id_seq OWNED BY submit_user.submit_user_id;


SET default_with_oids = false;

--
-- Name: taxonomy; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE taxonomy (
    tax_id integer NOT NULL,
    tax_name character varying(50) NOT NULL,
    tax_type character varying(50)
);


ALTER TABLE taxonomy OWNER TO postgres;

--
-- Name: taxonomy_tax_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE taxonomy_tax_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE taxonomy_tax_id_seq OWNER TO postgres;

--
-- Name: taxonomy_tax_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE taxonomy_tax_id_seq OWNED BY taxonomy.tax_id;


SET default_with_oids = true;

--
-- Name: temp_caps_correspondence; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE temp_caps_correspondence (
    tcc_id integer NOT NULL,
    old_marker_id integer,
    new_marker_id integer
);


ALTER TABLE temp_caps_correspondence OWNER TO postgres;

--
-- Name: temp_caps_correspondence_tcc_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE temp_caps_correspondence_tcc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE temp_caps_correspondence_tcc_id_seq OWNER TO postgres;

--
-- Name: temp_caps_correspondence_tcc_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE temp_caps_correspondence_tcc_id_seq OWNED BY temp_caps_correspondence.tcc_id;


--
-- Name: temp_map_correspondence; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE temp_map_correspondence (
    tmc_id integer NOT NULL,
    old_map_id integer,
    map_version_id integer
);


ALTER TABLE temp_map_correspondence OWNER TO postgres;

--
-- Name: temp_map_correspondence_tmc_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE temp_map_correspondence_tmc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE temp_map_correspondence_tmc_id_seq OWNER TO postgres;

--
-- Name: temp_map_correspondence_tmc_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE temp_map_correspondence_tmc_id_seq OWNED BY temp_map_correspondence.tmc_id;


--
-- Name: temp_marker_correspondence; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE temp_marker_correspondence (
    tmc_id integer NOT NULL,
    old_marker_id integer,
    new_marker_id integer
);


ALTER TABLE temp_marker_correspondence OWNER TO postgres;

--
-- Name: temp_marker_correspondence_tmc_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE temp_marker_correspondence_tmc_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE temp_marker_correspondence_tmc_id_seq OWNER TO postgres;

--
-- Name: temp_marker_correspondence_tmc_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE temp_marker_correspondence_tmc_id_seq OWNED BY temp_marker_correspondence.tmc_id;


--
-- Name: tigrtc_index; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE tigrtc_index (
    tcindex_id integer NOT NULL,
    index_name character varying(40)
);


ALTER TABLE tigrtc_index OWNER TO postgres;

--
-- Name: tigrtc_index_tcindex_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE tigrtc_index_tcindex_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tigrtc_index_tcindex_id_seq OWNER TO postgres;

--
-- Name: tigrtc_index_tcindex_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE tigrtc_index_tcindex_id_seq OWNED BY tigrtc_index.tcindex_id;


--
-- Name: tigrtc_membership; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE tigrtc_membership (
    tigrtc_membership_id integer NOT NULL,
    tc_id integer,
    tcindex_id integer,
    read_id integer
);


ALTER TABLE tigrtc_membership OWNER TO postgres;

--
-- Name: tigrtc_membership_tigrtc_membership_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE tigrtc_membership_tigrtc_membership_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tigrtc_membership_tigrtc_membership_id_seq OWNER TO postgres;

--
-- Name: tigrtc_membership_tigrtc_membership_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE tigrtc_membership_tigrtc_membership_id_seq OWNED BY tigrtc_membership.tigrtc_membership_id;


--
-- Name: tigrtc_tracking; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE tigrtc_tracking (
    tigrtc_tracking_id integer NOT NULL,
    tc_id integer,
    current_tc_id integer,
    tcindex_id integer
);


ALTER TABLE tigrtc_tracking OWNER TO postgres;

--
-- Name: tigrtc_tracking_tigrtc_tracking_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE tigrtc_tracking_tigrtc_tracking_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tigrtc_tracking_tigrtc_tracking_id_seq OWNER TO postgres;

--
-- Name: tigrtc_tracking_tigrtc_tracking_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE tigrtc_tracking_tigrtc_tracking_id_seq OWNED BY tigrtc_tracking.tigrtc_tracking_id;


--
-- Name: tm_markers; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE tm_markers (
    tm_id integer NOT NULL,
    marker_id bigint DEFAULT (0)::bigint NOT NULL,
    tm_name character varying(32) DEFAULT ''::character varying NOT NULL,
    old_cos_id character varying(32),
    seq_id bigint,
    est_read_id bigint,
    comment text
);


ALTER TABLE tm_markers OWNER TO postgres;

--
-- Name: tm_markers_sequences; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE tm_markers_sequences (
    tm_marker_seq_id bigint DEFAULT (0)::bigint NOT NULL,
    tm_id bigint,
    sequence text,
    comment text
);


ALTER TABLE tm_markers_sequences OWNER TO postgres;

--
-- Name: tm_markers_tm_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE tm_markers_tm_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE tm_markers_tm_id_seq OWNER TO postgres;

--
-- Name: tm_markers_tm_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE tm_markers_tm_id_seq OWNED BY tm_markers.tm_id;


--
-- Name: trim_feature; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE trim_feature (
    feature_id integer NOT NULL,
    est_id integer,
    start bigint,
    "end" bigint,
    type bigint,
    value bytea
);


ALTER TABLE trim_feature OWNER TO postgres;

--
-- Name: trim_feature_feature_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE trim_feature_feature_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE trim_feature_feature_id_seq OWNER TO postgres;

--
-- Name: trim_feature_feature_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE trim_feature_feature_id_seq OWNED BY trim_feature.feature_id;


--
-- Name: trim_feature_types; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE trim_feature_types (
    trim_type_id integer NOT NULL,
    comment text
);


ALTER TABLE trim_feature_types OWNER TO postgres;

--
-- Name: trim_feature_types_trim_type_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE trim_feature_types_trim_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE trim_feature_types_trim_type_id_seq OWNER TO postgres;

--
-- Name: trim_feature_types_trim_type_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE trim_feature_types_trim_type_id_seq OWNED BY trim_feature_types.trim_type_id;


--
-- Name: types; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE types (
    type_id integer NOT NULL,
    comment text
);


ALTER TABLE types OWNER TO postgres;

--
-- Name: types_type_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE types_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE types_type_id_seq OWNER TO postgres;

--
-- Name: types_type_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE types_type_id_seq OWNED BY types.type_id;


--
-- Name: unigene; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE unigene (
    unigene_id integer NOT NULL,
    unigene_build_id integer,
    consensi_id integer,
    cluster_no bigint,
    contig_no bigint,
    nr_members bigint,
    database_name character varying DEFAULT 'SGN'::character varying NOT NULL,
    sequence_name bigint NOT NULL,
    CONSTRAINT unigene_database_name_check CHECK ((((database_name)::text = 'SGN'::text) OR ((database_name)::text = 'CGN'::text))),
    CONSTRAINT unigene_nr_members_iff_consensi_id CHECK ((((nr_members > 1) AND (consensi_id IS NOT NULL)) OR ((nr_members = 1) AND (consensi_id IS NULL))))
);


ALTER TABLE unigene OWNER TO postgres;

--
-- Name: unigene_build; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE unigene_build (
    unigene_build_id integer NOT NULL,
    source_data_group_id integer,
    organism_group_id integer,
    build_nr integer DEFAULT 0 NOT NULL,
    build_date date DEFAULT now(),
    method_id integer,
    status character(1),
    comment text,
    superseding_build_id integer,
    next_build_id integer,
    latest_build_id integer,
    blast_db_id integer,
    CONSTRAINT unigene_build_status_check CHECK (((status = 'C'::bpchar) OR (status = 'D'::bpchar) OR (status = 'P'::bpchar)))
);


ALTER TABLE unigene_build OWNER TO postgres;

--
-- Name: unigene_build_unigene_build_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE unigene_build_unigene_build_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE unigene_build_unigene_build_id_seq OWNER TO postgres;

--
-- Name: unigene_build_unigene_build_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE unigene_build_unigene_build_id_seq OWNED BY unigene_build.unigene_build_id;


--
-- Name: unigene_consensi; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE unigene_consensi (
    consensi_id integer NOT NULL,
    seq text,
    qscores text
);


ALTER TABLE unigene_consensi OWNER TO postgres;

--
-- Name: unigene_consensi_consensi_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE unigene_consensi_consensi_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE unigene_consensi_consensi_id_seq OWNER TO postgres;

--
-- Name: unigene_consensi_consensi_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE unigene_consensi_consensi_id_seq OWNED BY unigene_consensi.consensi_id;


--
-- Name: unigene_member; Type: TABLE; Schema: sgn; Owner: postgres
--

CREATE TABLE unigene_member (
    unigene_member_id integer NOT NULL,
    unigene_id integer DEFAULT 0 NOT NULL,
    est_id integer,
    start bigint,
    stop bigint,
    qstart bigint,
    qend bigint,
    dir character(1)
);


ALTER TABLE unigene_member OWNER TO postgres;

--
-- Name: unigene_member_unigene_member_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE unigene_member_unigene_member_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE unigene_member_unigene_member_id_seq OWNER TO postgres;

--
-- Name: unigene_member_unigene_member_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE unigene_member_unigene_member_id_seq OWNED BY unigene_member.unigene_member_id;


--
-- Name: unigene_unigene_id_seq; Type: SEQUENCE; Schema: sgn; Owner: postgres
--

CREATE SEQUENCE unigene_unigene_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE unigene_unigene_id_seq OWNER TO postgres;

--
-- Name: unigene_unigene_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn; Owner: postgres
--

ALTER SEQUENCE unigene_unigene_id_seq OWNED BY unigene.unigene_id;


SET search_path = sgn_people, pg_catalog;

--
-- Name: bac_status; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE bac_status (
    bac_status_id bigint NOT NULL,
    bac_id bigint,
    person_id bigint,
    status character varying(13),
    genbank_status character varying(5),
    "timestamp" timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
    CONSTRAINT chk_bac_status_genbank_status CHECK ((((genbank_status)::text = 'htgs1'::text) OR ((genbank_status)::text = 'htgs2'::text) OR ((genbank_status)::text = 'htgs3'::text) OR ((genbank_status)::text = 'htgs4'::text) OR ((genbank_status)::text = ''::text) OR (genbank_status IS NULL))),
    CONSTRAINT chk_bac_status_status CHECK ((((status)::text = 'not_sequenced'::text) OR ((status)::text = 'in_progress'::text) OR ((status)::text = 'complete'::text) OR ((status)::text = ''::text) OR (status IS NULL)))
);


ALTER TABLE bac_status OWNER TO postgres;

--
-- Name: bac_status_bac_status_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE bac_status_bac_status_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bac_status_bac_status_id_seq OWNER TO postgres;

--
-- Name: bac_status_bac_status_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE bac_status_bac_status_id_seq OWNED BY bac_status.bac_status_id;


--
-- Name: bac_status_log; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE bac_status_log (
    bac_status_log_id bigint NOT NULL,
    bac_id bigint,
    person_id bigint,
    status character varying(13),
    genbank_status character varying(5),
    "timestamp" timestamp(6) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
    CONSTRAINT chk_bac_status_log_genbank_status CHECK ((((genbank_status)::text = 'htgs1'::text) OR ((genbank_status)::text = 'htgs2'::text) OR ((genbank_status)::text = 'htgs3'::text) OR ((genbank_status)::text = 'htgs4'::text) OR ((genbank_status)::text = ''::text) OR (genbank_status IS NULL))),
    CONSTRAINT chk_bac_status_log_status CHECK ((((status)::text = 'not_sequenced'::text) OR ((status)::text = 'in_progress'::text) OR ((status)::text = 'complete'::text) OR ((status)::text = ''::text) OR (status IS NULL)))
);


ALTER TABLE bac_status_log OWNER TO postgres;

--
-- Name: bac_status_log_bac_status_log_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE bac_status_log_bac_status_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE bac_status_log_bac_status_log_id_seq OWNER TO postgres;

--
-- Name: bac_status_log_bac_status_log_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE bac_status_log_bac_status_log_id_seq OWNED BY bac_status_log.bac_status_log_id;


--
-- Name: clone_il_mapping_bin_log; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE clone_il_mapping_bin_log (
    sp_clone_il_mapping_bin_log_id integer NOT NULL,
    genotype_region_id integer,
    sp_person_id integer,
    clone_id integer,
    is_current boolean DEFAULT true,
    created timestamp without time zone DEFAULT now(),
    chromosome integer,
    notes text
);


ALTER TABLE clone_il_mapping_bin_log OWNER TO postgres;

--
-- Name: TABLE clone_il_mapping_bin_log; Type: COMMENT; Schema: sgn_people; Owner: postgres
--

COMMENT ON TABLE clone_il_mapping_bin_log IS 'linking table showing which phenome.genotype_region a given clone has been mapped to. also provides a modification history with its is_current and created columns';


--
-- Name: clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq OWNER TO postgres;

--
-- Name: clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq OWNED BY clone_il_mapping_bin_log.sp_clone_il_mapping_bin_log_id;


--
-- Name: clone_validation_log; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE clone_validation_log (
    clone_validation_log_id integer NOT NULL,
    sp_person_id integer,
    clone_id integer,
    val_overgo boolean DEFAULT false NOT NULL,
    val_bac_ends boolean DEFAULT false NOT NULL,
    is_current boolean DEFAULT true,
    created timestamp without time zone DEFAULT now()
);


ALTER TABLE clone_validation_log OWNER TO postgres;

--
-- Name: TABLE clone_validation_log; Type: COMMENT; Schema: sgn_people; Owner: postgres
--

COMMENT ON TABLE clone_validation_log IS 'table showing which clones have been validated by a variety of methods.  columns may be added to this without warning.  details about each validation experiment should be written into the comment field on the detail page for the clone';


--
-- Name: clone_validation_log_clone_validation_log_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE clone_validation_log_clone_validation_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE clone_validation_log_clone_validation_log_id_seq OWNER TO postgres;

--
-- Name: clone_validation_log_clone_validation_log_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE clone_validation_log_clone_validation_log_id_seq OWNED BY clone_validation_log.clone_validation_log_id;


--
-- Name: clone_verification_log; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE clone_verification_log (
    clone_verification_log_id integer NOT NULL,
    sp_person_id integer,
    clone_id integer,
    ver_int_read boolean DEFAULT false NOT NULL,
    ver_bac_end boolean DEFAULT false NOT NULL,
    is_current boolean DEFAULT true,
    created timestamp without time zone DEFAULT now()
);


ALTER TABLE clone_verification_log OWNER TO postgres;

--
-- Name: TABLE clone_verification_log; Type: COMMENT; Schema: sgn_people; Owner: postgres
--

COMMENT ON TABLE clone_verification_log IS 'table showing which clones have been validated by a variety of methods.  columns may be added to this without warning.  details about each validation experiment should be written into the comment field on the detail page for the clone';


--
-- Name: clone_verification_log_clone_verification_log_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE clone_verification_log_clone_verification_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE clone_verification_log_clone_verification_log_id_seq OWNER TO postgres;

--
-- Name: clone_verification_log_clone_verification_log_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE clone_verification_log_clone_verification_log_id_seq OWNED BY clone_verification_log.clone_verification_log_id;


--
-- Name: forum_post; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE forum_post (
    forum_post_id integer NOT NULL,
    person_id bigint,
    post_text text,
    parent_post_id bigint,
    forum_topic_id integer,
    subject character varying(255),
    post_time timestamp(0) without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL
);


ALTER TABLE forum_post OWNER TO postgres;

--
-- Name: forum_post_forum_post_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE forum_post_forum_post_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE forum_post_forum_post_id_seq OWNER TO postgres;

--
-- Name: forum_post_forum_post_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE forum_post_forum_post_id_seq OWNED BY forum_post.forum_post_id;


--
-- Name: forum_topic; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE forum_topic (
    forum_topic_id integer NOT NULL,
    person_id bigint,
    topic_name character varying(255),
    parent_topic bigint,
    topic_class character varying(255),
    page_type character varying(10),
    page_object_id bigint,
    topic_description text,
    sort_order character varying(10),
    CONSTRAINT person_id_check CHECK ((person_id IS NOT NULL))
);


ALTER TABLE forum_topic OWNER TO postgres;

--
-- Name: forum_topic_forum_topic_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE forum_topic_forum_topic_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE forum_topic_forum_topic_id_seq OWNER TO postgres;

--
-- Name: forum_topic_forum_topic_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE forum_topic_forum_topic_id_seq OWNED BY forum_topic.forum_topic_id;


--
-- Name: list; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE list (
    list_id bigint NOT NULL,
    is_hotlist boolean DEFAULT false,
    sent_by integer,
    name character varying(128),
    description text,
    owner integer,
    type_id bigint,
    is_public boolean DEFAULT false NOT NULL
);


ALTER TABLE list OWNER TO postgres;

--
-- Name: list_item; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE list_item (
    list_item_id bigint NOT NULL,
    content text,
    list_id integer
);


ALTER TABLE list_item OWNER TO postgres;

--
-- Name: list_item_list_item_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE list_item_list_item_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE list_item_list_item_id_seq OWNER TO postgres;

--
-- Name: list_item_list_item_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE list_item_list_item_id_seq OWNED BY list_item.list_item_id;


--
-- Name: list_list_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE list_list_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE list_list_id_seq OWNER TO postgres;

--
-- Name: list_list_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE list_list_id_seq OWNED BY list.list_id;


--
-- Name: sp_clone_il_mapping_segment_log; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sp_clone_il_mapping_segment_log (
    sp_clone_il_mapping_segment_log_id integer NOT NULL,
    individual_id integer,
    sp_person_id integer,
    clone_id integer,
    is_current boolean DEFAULT true,
    created timestamp without time zone DEFAULT now()
);


ALTER TABLE sp_clone_il_mapping_segment_log OWNER TO postgres;

--
-- Name: TABLE sp_clone_il_mapping_segment_log; Type: COMMENT; Schema: sgn_people; Owner: postgres
--

COMMENT ON TABLE sp_clone_il_mapping_segment_log IS 'linking table showing which phenome.individual IL line a given clone has been mapped to. also provides a modification history with is_current and created columns';


--
-- Name: sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq OWNER TO postgres;

--
-- Name: sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq OWNED BY sp_clone_il_mapping_segment_log.sp_clone_il_mapping_segment_log_id;


--
-- Name: sp_group; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sp_group (
    sp_group_id integer NOT NULL,
    name character varying NOT NULL,
    description text
);


ALTER TABLE sp_group OWNER TO postgres;

--
-- Name: sp_group_member; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sp_group_member (
    sp_person_id bigint,
    sp_group_id bigint,
    status character varying DEFAULT 'active'::character varying NOT NULL
);


ALTER TABLE sp_group_member OWNER TO postgres;

--
-- Name: sp_group_sp_group_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sp_group_sp_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sp_group_sp_group_id_seq OWNER TO postgres;

--
-- Name: sp_group_sp_group_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sp_group_sp_group_id_seq OWNED BY sp_group.sp_group_id;


--
-- Name: sp_login_old; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sp_login_old (
    sp_login_id integer NOT NULL,
    username character varying(255),
    private_email character varying(255),
    pending_email character varying(255),
    password character varying(255),
    confirm_code character varying(20),
    disabled bigint,
    user_type character varying(9) DEFAULT 'user'::character varying,
    CONSTRAINT chk_sp_login_user_type CHECK ((((user_type)::text = 'user'::text) OR ((user_type)::text = 'submitter'::text) OR ((user_type)::text = 'curator'::text) OR ((user_type)::text = 'sequencer'::text) OR ((user_type)::text = ''::text) OR (user_type IS NULL)))
);


ALTER TABLE sp_login_old OWNER TO postgres;

--
-- Name: sp_login_old_sp_login_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sp_login_old_sp_login_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sp_login_old_sp_login_id_seq OWNER TO postgres;

--
-- Name: sp_login_old_sp_login_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sp_login_old_sp_login_id_seq OWNED BY sp_login_old.sp_login_id;


--
-- Name: sp_organisms; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sp_organisms (
    organism_id integer NOT NULL,
    organism_name character varying(255)
);


ALTER TABLE sp_organisms OWNER TO postgres;

--
-- Name: sp_organisms_organism_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sp_organisms_organism_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sp_organisms_organism_id_seq OWNER TO postgres;

--
-- Name: sp_organisms_organism_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sp_organisms_organism_id_seq OWNED BY sp_organisms.organism_id;


--
-- Name: sp_organization; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sp_organization (
    sp_organization_id integer NOT NULL,
    name character varying(255) NOT NULL,
    department character varying(255),
    unit character varying(255),
    address text,
    country character varying(255),
    phone_number character varying(40),
    fax character varying(40),
    contact_email character varying(255),
    webpage character varying(255),
    description text,
    upload_account_name character varying(40),
    shortname character varying(20) NOT NULL,
    CONSTRAINT sp_organization_shortname_check CHECK (((shortname IS NULL) OR (lower((shortname)::text) = (shortname)::text)))
);


ALTER TABLE sp_organization OWNER TO postgres;

--
-- Name: sp_organization_person; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sp_organization_person (
    sp_organization_person_id integer NOT NULL,
    sp_organization_id bigint,
    sp_person_id bigint
);


ALTER TABLE sp_organization_person OWNER TO postgres;

--
-- Name: sp_organization_person_sp_organization_person_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sp_organization_person_sp_organization_person_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sp_organization_person_sp_organization_person_id_seq OWNER TO postgres;

--
-- Name: sp_organization_person_sp_organization_person_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sp_organization_person_sp_organization_person_id_seq OWNED BY sp_organization_person.sp_organization_person_id;


--
-- Name: sp_organization_sp_organization_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sp_organization_sp_organization_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sp_organization_sp_organization_id_seq OWNER TO postgres;

--
-- Name: sp_organization_sp_organization_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sp_organization_sp_organization_id_seq OWNED BY sp_organization.sp_organization_id;


--
-- Name: sp_papers; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sp_papers (
    sp_paper_id integer NOT NULL,
    person_id integer DEFAULT 0 NOT NULL,
    title text,
    author_list text,
    journal text,
    volume bigint,
    pages character varying(16),
    keywords text
);


ALTER TABLE sp_papers OWNER TO postgres;

--
-- Name: sp_papers_sp_paper_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sp_papers_sp_paper_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sp_papers_sp_paper_id_seq OWNER TO postgres;

--
-- Name: sp_papers_sp_paper_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sp_papers_sp_paper_id_seq OWNED BY sp_papers.sp_paper_id;


--
-- Name: sp_person; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sp_person (
    sp_person_id integer NOT NULL,
    censor bigint DEFAULT 0,
    salutation character varying(8),
    last_name character varying(63),
    first_name character varying(63),
    organization character varying(255),
    address text,
    country character varying(255),
    phone_number character varying(40),
    fax character varying(40),
    contact_email character varying(255),
    webpage character varying(255),
    research_keywords text,
    user_format character varying(8),
    research_interests text,
    formatted_interests text,
    contact_update date,
    research_update date,
    sp_login_id bigint,
    username character varying(255),
    private_email character varying(255),
    pending_email character varying(255),
    password character varying(255),
    confirm_code character varying(20),
    disabled character varying(20),
    user_type character varying(20) DEFAULT 'user'::character varying,
    cookie_string text,
    last_access_time timestamp without time zone DEFAULT now(),
    user_prefs character varying(4096),
    developer_settings character varying(4096),
    CONSTRAINT first_name_check CHECK ((first_name IS NOT NULL)),
    CONSTRAINT if_disabled_no_cookie_for_you CHECK ((((disabled IS NOT NULL) AND (cookie_string IS NULL)) OR (disabled IS NULL))),
    CONSTRAINT last_name_check CHECK ((last_name IS NOT NULL)),
    CONSTRAINT user_type_not_null CHECK ((user_type IS NOT NULL))
);


ALTER TABLE sp_person OWNER TO postgres;

--
-- Name: sp_person_organisms; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sp_person_organisms (
    sp_person_organisms_id integer NOT NULL,
    sp_person_id bigint,
    organism_id integer DEFAULT 0 NOT NULL
);


ALTER TABLE sp_person_organisms OWNER TO postgres;

--
-- Name: sp_person_organisms_sp_person_organisms_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sp_person_organisms_sp_person_organisms_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sp_person_organisms_sp_person_organisms_id_seq OWNER TO postgres;

--
-- Name: sp_person_organisms_sp_person_organisms_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sp_person_organisms_sp_person_organisms_id_seq OWNED BY sp_person_organisms.sp_person_organisms_id;


SET default_with_oids = false;

--
-- Name: sp_person_roles; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sp_person_roles (
    sp_person_role_id integer NOT NULL,
    sp_person_id bigint,
    sp_role_id bigint
);


ALTER TABLE sp_person_roles OWNER TO postgres;

--
-- Name: sp_person_roles_sp_person_role_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sp_person_roles_sp_person_role_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sp_person_roles_sp_person_role_id_seq OWNER TO postgres;

--
-- Name: sp_person_roles_sp_person_role_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sp_person_roles_sp_person_role_id_seq OWNED BY sp_person_roles.sp_person_role_id;


--
-- Name: sp_person_sp_person_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sp_person_sp_person_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sp_person_sp_person_id_seq OWNER TO postgres;

--
-- Name: sp_person_sp_person_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sp_person_sp_person_id_seq OWNED BY sp_person.sp_person_id;


SET default_with_oids = true;

--
-- Name: sp_project; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sp_project (
    sp_project_id integer NOT NULL,
    name character varying(80),
    description text
);


ALTER TABLE sp_project OWNER TO postgres;

--
-- Name: sp_project_il_mapping_clone_log; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sp_project_il_mapping_clone_log (
    sp_project_il_mapping_clone_log_id integer NOT NULL,
    sp_project_id integer,
    sp_person_id integer,
    clone_id integer,
    is_current boolean DEFAULT true,
    created timestamp without time zone DEFAULT now()
);


ALTER TABLE sp_project_il_mapping_clone_log OWNER TO postgres;

--
-- Name: TABLE sp_project_il_mapping_clone_log; Type: COMMENT; Schema: sgn_people; Owner: postgres
--

COMMENT ON TABLE sp_project_il_mapping_clone_log IS 'linking table showing which sp_project is currently assigned to map a given clone to the zamir IL lines.  also provides a modification history with is_current and created columns';


--
-- Name: sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq OWNER TO postgres;

--
-- Name: sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq OWNED BY sp_project_il_mapping_clone_log.sp_project_il_mapping_clone_log_id;


--
-- Name: sp_project_organization; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sp_project_organization (
    sp_project_organization_id integer NOT NULL,
    sp_project_id bigint,
    sp_organization_id bigint
);


ALTER TABLE sp_project_organization OWNER TO postgres;

--
-- Name: sp_project_organization_sp_project_organization_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sp_project_organization_sp_project_organization_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sp_project_organization_sp_project_organization_id_seq OWNER TO postgres;

--
-- Name: sp_project_organization_sp_project_organization_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sp_project_organization_sp_project_organization_id_seq OWNED BY sp_project_organization.sp_project_organization_id;


--
-- Name: sp_project_person; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sp_project_person (
    sp_project_person_id integer NOT NULL,
    sp_project_id bigint,
    sp_person_id bigint,
    type character varying(6),
    CONSTRAINT chk_sp_project_person_type CHECK ((((type)::text = 'PI'::text) OR ((type)::text = 'co-PI'::text) OR ((type)::text = 'Member'::text) OR ((type)::text = ''::text) OR (type IS NULL)))
);


ALTER TABLE sp_project_person OWNER TO postgres;

--
-- Name: sp_project_person_sp_project_person_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sp_project_person_sp_project_person_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sp_project_person_sp_project_person_id_seq OWNER TO postgres;

--
-- Name: sp_project_person_sp_project_person_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sp_project_person_sp_project_person_id_seq OWNED BY sp_project_person.sp_project_person_id;


--
-- Name: sp_project_sp_project_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sp_project_sp_project_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sp_project_sp_project_id_seq OWNER TO postgres;

--
-- Name: sp_project_sp_project_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sp_project_sp_project_id_seq OWNED BY sp_project.sp_project_id;


SET default_with_oids = false;

--
-- Name: sp_roles; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE sp_roles (
    sp_role_id integer NOT NULL,
    name character varying(20)
);


ALTER TABLE sp_roles OWNER TO postgres;

--
-- Name: sp_roles_sp_role_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE sp_roles_sp_role_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sp_roles_sp_role_id_seq OWNER TO postgres;

--
-- Name: sp_roles_sp_role_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE sp_roles_sp_role_id_seq OWNED BY sp_roles.sp_role_id;


--
-- Name: user_map; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE user_map (
    user_map_id integer NOT NULL,
    short_name character varying(40),
    long_name character varying(100),
    abstract text,
    is_public boolean,
    parent1_accession_id bigint,
    parent1 character varying(100),
    parent2_accession_id bigint,
    parent2 character varying(100),
    sp_person_id bigint,
    obsolete boolean,
    modified_date timestamp with time zone,
    create_date timestamp with time zone
);


ALTER TABLE user_map OWNER TO postgres;

--
-- Name: user_map_data; Type: TABLE; Schema: sgn_people; Owner: postgres
--

CREATE TABLE user_map_data (
    user_map_data_id integer NOT NULL,
    user_map_id bigint,
    marker_name character varying(50),
    protocol character varying(50),
    marker_id bigint,
    linkage_group character varying(20),
    "position" numeric(20,4),
    confidence character varying(20),
    sp_person_id bigint,
    obsolete boolean,
    modified_date timestamp with time zone,
    create_date timestamp with time zone
);


ALTER TABLE user_map_data OWNER TO postgres;

--
-- Name: user_map_data_user_map_data_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE user_map_data_user_map_data_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE user_map_data_user_map_data_id_seq OWNER TO postgres;

--
-- Name: user_map_data_user_map_data_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE user_map_data_user_map_data_id_seq OWNED BY user_map_data.user_map_data_id;


--
-- Name: user_map_user_map_id_seq; Type: SEQUENCE; Schema: sgn_people; Owner: postgres
--

CREATE SEQUENCE user_map_user_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE user_map_user_map_id_seq OWNER TO postgres;

--
-- Name: user_map_user_map_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_people; Owner: postgres
--

ALTER SEQUENCE user_map_user_map_id_seq OWNED BY user_map.user_map_id;


SET search_path = sgn_submit, pg_catalog;

SET default_with_oids = true;

--
-- Name: facility; Type: TABLE; Schema: sgn_submit; Owner: postgres
--

CREATE TABLE facility (
    facility_id integer NOT NULL,
    submit_user_id integer,
    facility_moniker character varying(20),
    facility_shortname character varying(12),
    facility_name character varying(80),
    facility_contact character varying(80),
    facility_address text,
    funding_agency character varying(80),
    funding_comment text,
    sequencing_primers character varying(80),
    machine character varying(40),
    chemistry character varying(40),
    attribution_display text,
    sp_person_id integer
);


ALTER TABLE facility OWNER TO postgres;

--
-- Name: facility_facility_id_seq; Type: SEQUENCE; Schema: sgn_submit; Owner: postgres
--

CREATE SEQUENCE facility_facility_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE facility_facility_id_seq OWNER TO postgres;

--
-- Name: facility_facility_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_submit; Owner: postgres
--

ALTER SEQUENCE facility_facility_id_seq OWNED BY facility.facility_id;


--
-- Name: library; Type: TABLE; Schema: sgn_submit; Owner: postgres
--

CREATE TABLE library (
    library_id integer NOT NULL,
    type bigint,
    submit_user_id integer,
    library_name character varying(80),
    library_shortname character varying(16),
    authors character varying(255),
    organism_id integer,
    cultivar character varying(255),
    accession character varying(255),
    tissue character varying(255),
    development_stage character varying(255),
    treatment_conditions text,
    cloning_host character varying(80),
    vector character varying(80),
    rs1 character varying(12),
    rs2 character varying(12),
    cloning_kit character varying(255),
    comments text,
    contact_information text,
    order_routing_id bigint,
    sp_person_id integer,
    forward_adapter character varying,
    reverse_adapter character varying
);


ALTER TABLE library OWNER TO postgres;

--
-- Name: library_library_id_seq; Type: SEQUENCE; Schema: sgn_submit; Owner: postgres
--

CREATE SEQUENCE library_library_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE library_library_id_seq OWNER TO postgres;

--
-- Name: library_library_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_submit; Owner: postgres
--

ALTER SEQUENCE library_library_id_seq OWNED BY library.library_id;


--
-- Name: seqread; Type: TABLE; Schema: sgn_submit; Owner: postgres
--

CREATE TABLE seqread (
    submit_read_id integer NOT NULL,
    library_id integer DEFAULT 0 NOT NULL,
    facility_id integer DEFAULT 0 NOT NULL,
    trace_name character varying(80),
    clone_name character varying(80),
    direction character(1),
    location character varying(255),
    read_id integer
);


ALTER TABLE seqread OWNER TO postgres;

--
-- Name: seqread_submit_read_id_seq; Type: SEQUENCE; Schema: sgn_submit; Owner: postgres
--

CREATE SEQUENCE seqread_submit_read_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seqread_submit_read_id_seq OWNER TO postgres;

--
-- Name: seqread_submit_read_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_submit; Owner: postgres
--

ALTER SEQUENCE seqread_submit_read_id_seq OWNED BY seqread.submit_read_id;


--
-- Name: submit_user; Type: TABLE; Schema: sgn_submit; Owner: postgres
--

CREATE TABLE submit_user (
    submit_user_id integer NOT NULL,
    submit_code character varying(6),
    username character varying(20),
    password character varying(20),
    name character varying(80),
    email_address character varying(255),
    phone_number character varying(20),
    organization character varying(80),
    contact_information text,
    disabled bigint,
    confirm_code character varying(16),
    sp_person_id integer
);


ALTER TABLE submit_user OWNER TO postgres;

--
-- Name: submit_user_submit_user_id_seq; Type: SEQUENCE; Schema: sgn_submit; Owner: postgres
--

CREATE SEQUENCE submit_user_submit_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE submit_user_submit_user_id_seq OWNER TO postgres;

--
-- Name: submit_user_submit_user_id_seq; Type: SEQUENCE OWNED BY; Schema: sgn_submit; Owner: postgres
--

ALTER SEQUENCE submit_user_submit_user_id_seq OWNED BY submit_user.submit_user_id;


SET search_path = tomato_gff, pg_catalog;

--
-- Name: fattribute; Type: TABLE; Schema: tomato_gff; Owner: postgres
--

CREATE TABLE fattribute (
    fattribute_id integer NOT NULL,
    fattribute_name character varying(255) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE fattribute OWNER TO postgres;

--
-- Name: fattribute_fattribute_id_seq; Type: SEQUENCE; Schema: tomato_gff; Owner: postgres
--

CREATE SEQUENCE fattribute_fattribute_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE fattribute_fattribute_id_seq OWNER TO postgres;

--
-- Name: fattribute_fattribute_id_seq; Type: SEQUENCE OWNED BY; Schema: tomato_gff; Owner: postgres
--

ALTER SEQUENCE fattribute_fattribute_id_seq OWNED BY fattribute.fattribute_id;


--
-- Name: fattribute_to_feature; Type: TABLE; Schema: tomato_gff; Owner: postgres
--

CREATE TABLE fattribute_to_feature (
    fid integer DEFAULT 0 NOT NULL,
    fattribute_id integer DEFAULT 0 NOT NULL,
    fattribute_value text
);


ALTER TABLE fattribute_to_feature OWNER TO postgres;

--
-- Name: fdata; Type: TABLE; Schema: tomato_gff; Owner: postgres
--

CREATE TABLE fdata (
    fid integer NOT NULL,
    fref character varying(100) DEFAULT ''::character varying NOT NULL,
    fstart integer DEFAULT 0 NOT NULL,
    fstop integer DEFAULT 0 NOT NULL,
    fbin double precision DEFAULT (0)::double precision NOT NULL,
    ftypeid integer DEFAULT 0 NOT NULL,
    fscore double precision,
    fstrand character varying(3),
    fphase character varying(3),
    gid integer DEFAULT 0 NOT NULL,
    ftarget_start integer,
    ftarget_stop integer,
    CONSTRAINT chk_fdata_fphase CHECK ((((fphase)::text = '0'::text) OR ((fphase)::text = '1'::text) OR ((fphase)::text = '2'::text))),
    CONSTRAINT chk_fdata_fstrand CHECK ((((fstrand)::text = '+'::text) OR ((fstrand)::text = '-'::text)))
);


ALTER TABLE fdata OWNER TO postgres;

--
-- Name: fdata_fid_seq; Type: SEQUENCE; Schema: tomato_gff; Owner: postgres
--

CREATE SEQUENCE fdata_fid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE fdata_fid_seq OWNER TO postgres;

--
-- Name: fdata_fid_seq; Type: SEQUENCE OWNED BY; Schema: tomato_gff; Owner: postgres
--

ALTER SEQUENCE fdata_fid_seq OWNED BY fdata.fid;


--
-- Name: fdna; Type: TABLE; Schema: tomato_gff; Owner: postgres
--

CREATE TABLE fdna (
    fref character varying(100) DEFAULT ''::character varying NOT NULL,
    foffset integer DEFAULT 0 NOT NULL,
    fdna bytea
);


ALTER TABLE fdna OWNER TO postgres;

--
-- Name: fgroup; Type: TABLE; Schema: tomato_gff; Owner: postgres
--

CREATE TABLE fgroup (
    gid integer NOT NULL,
    gclass character varying(100),
    gname character varying(100)
);


ALTER TABLE fgroup OWNER TO postgres;

--
-- Name: fgroup_gid_seq; Type: SEQUENCE; Schema: tomato_gff; Owner: postgres
--

CREATE SEQUENCE fgroup_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE fgroup_gid_seq OWNER TO postgres;

--
-- Name: fgroup_gid_seq; Type: SEQUENCE OWNED BY; Schema: tomato_gff; Owner: postgres
--

ALTER SEQUENCE fgroup_gid_seq OWNED BY fgroup.gid;


--
-- Name: fmeta; Type: TABLE; Schema: tomato_gff; Owner: postgres
--

CREATE TABLE fmeta (
    fname character varying(255) DEFAULT ''::character varying NOT NULL,
    fvalue character varying(255) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE fmeta OWNER TO postgres;

--
-- Name: ftype; Type: TABLE; Schema: tomato_gff; Owner: postgres
--

CREATE TABLE ftype (
    ftypeid integer NOT NULL,
    fmethod character varying(100) DEFAULT ''::character varying NOT NULL,
    fsource character varying(100)
);


ALTER TABLE ftype OWNER TO postgres;

--
-- Name: ftype_ftypeid_seq; Type: SEQUENCE; Schema: tomato_gff; Owner: postgres
--

CREATE SEQUENCE ftype_ftypeid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ftype_ftypeid_seq OWNER TO postgres;

--
-- Name: ftype_ftypeid_seq; Type: SEQUENCE OWNED BY; Schema: tomato_gff; Owner: postgres
--

ALTER SEQUENCE ftype_ftypeid_seq OWNED BY ftype.ftypeid;


SET search_path = annotation, pg_catalog;

--
-- Name: annot_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation ALTER COLUMN annot_id SET DEFAULT nextval('annotation_annot_id_seq'::regclass);


--
-- Name: comment_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY comment ALTER COLUMN comment_id SET DEFAULT nextval('comment_comment_id_seq'::regclass);


--
-- Name: ca_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY comp_analysis ALTER COLUMN ca_id SET DEFAULT nextval('comp_analysis_ca_id_seq'::regclass);


--
-- Name: db_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY dblist ALTER COLUMN db_id SET DEFAULT nextval('dblist_db_id_seq'::regclass);


--
-- Name: dbxref_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY dbxref ALTER COLUMN dbxref_id SET DEFAULT nextval('dbxref_dbxref_id_seq'::regclass);


--
-- Name: f_set_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY feature_set ALTER COLUMN f_set_id SET DEFAULT nextval('feature_set_f_set_id_seq'::regclass);


--
-- Name: f_span_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY feature_span ALTER COLUMN f_span_id SET DEFAULT nextval('feature_span_f_span_id_seq'::regclass);


--
-- Name: organism_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY organism ALTER COLUMN organism_id SET DEFAULT nextval('organism_organism_id_seq'::regclass);


--
-- Name: output_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY output ALTER COLUMN output_id SET DEFAULT nextval('output_output_id_seq'::regclass);


--
-- Name: person_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY person ALTER COLUMN person_id SET DEFAULT nextval('person_person_id_seq'::regclass);


--
-- Name: program_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY program ALTER COLUMN program_id SET DEFAULT nextval('program_program_id_seq'::regclass);


--
-- Name: property_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY property ALTER COLUMN property_id SET DEFAULT nextval('property_property_id_seq'::regclass);


--
-- Name: r_set_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY result_set ALTER COLUMN r_set_id SET DEFAULT nextval('result_set_r_set_id_seq'::regclass);


--
-- Name: r_span_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY result_span ALTER COLUMN r_span_id SET DEFAULT nextval('result_span_r_span_id_seq'::regclass);


--
-- Name: seq_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY seq ALTER COLUMN seq_id SET DEFAULT nextval('seq_seq_id_seq'::regclass);


--
-- Name: seq_err_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY seq_error ALTER COLUMN seq_err_id SET DEFAULT nextval('seq_error_seq_err_id_seq'::regclass);


--
-- Name: seq_rel_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY seq_relationship ALTER COLUMN seq_rel_id SET DEFAULT nextval('seq_relationship_seq_rel_id_seq'::regclass);


--
-- Name: synonym_id; Type: DEFAULT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY synonym ALTER COLUMN synonym_id SET DEFAULT nextval('synonym_synonym_id_seq'::regclass);


SET search_path = biosource, pg_catalog;

--
-- Name: protocol_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_protocol ALTER COLUMN protocol_id SET DEFAULT nextval('bs_protocol_protocol_id_seq'::regclass);


--
-- Name: protocol_pub_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_protocol_pub ALTER COLUMN protocol_pub_id SET DEFAULT nextval('bs_protocol_pub_protocol_pub_id_seq'::regclass);


--
-- Name: protocol_step_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_protocol_step ALTER COLUMN protocol_step_id SET DEFAULT nextval('bs_protocol_step_protocol_step_id_seq'::regclass);


--
-- Name: protocol_step_dbxref_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_protocol_step_dbxref ALTER COLUMN protocol_step_dbxref_id SET DEFAULT nextval('bs_protocol_step_dbxref_protocol_step_dbxref_id_seq'::regclass);


--
-- Name: sample_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample ALTER COLUMN sample_id SET DEFAULT nextval('bs_sample_sample_id_seq'::regclass);


--
-- Name: sample_cvterm_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_cvterm ALTER COLUMN sample_cvterm_id SET DEFAULT nextval('bs_sample_cvterm_sample_cvterm_id_seq'::regclass);


--
-- Name: sample_dbxref_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_dbxref ALTER COLUMN sample_dbxref_id SET DEFAULT nextval('bs_sample_dbxref_sample_dbxref_id_seq'::regclass);


--
-- Name: sample_element_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element ALTER COLUMN sample_element_id SET DEFAULT nextval('bs_sample_element_sample_element_id_seq'::regclass);


--
-- Name: sample_element_cvterm_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element_cvterm ALTER COLUMN sample_element_cvterm_id SET DEFAULT nextval('bs_sample_element_cvterm_sample_element_cvterm_id_seq'::regclass);


--
-- Name: sample_element_dbxref_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element_dbxref ALTER COLUMN sample_element_dbxref_id SET DEFAULT nextval('bs_sample_element_dbxref_sample_element_dbxref_id_seq'::regclass);


--
-- Name: sample_element_file_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element_file ALTER COLUMN sample_element_file_id SET DEFAULT nextval('bs_sample_element_file_sample_element_file_id_seq'::regclass);


--
-- Name: sample_element_relation_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element_relation ALTER COLUMN sample_element_relation_id SET DEFAULT nextval('bs_sample_element_relation_sample_element_relation_id_seq'::regclass);


--
-- Name: sample_file_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_file ALTER COLUMN sample_file_id SET DEFAULT nextval('bs_sample_file_sample_file_id_seq'::regclass);


--
-- Name: sample_pub_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_pub ALTER COLUMN sample_pub_id SET DEFAULT nextval('bs_sample_pub_sample_pub_id_seq'::regclass);


--
-- Name: sample_relationship_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_relationship ALTER COLUMN sample_relationship_id SET DEFAULT nextval('bs_sample_relationship_sample_relationship_id_seq'::regclass);


--
-- Name: tool_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_tool ALTER COLUMN tool_id SET DEFAULT nextval('bs_tool_tool_id_seq'::regclass);


--
-- Name: tool_pub_id; Type: DEFAULT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_tool_pub ALTER COLUMN tool_pub_id SET DEFAULT nextval('bs_tool_pub_tool_pub_id_seq'::regclass);


SET search_path = gem, pg_catalog;

--
-- Name: cluster_analysis_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_cluster_analysis ALTER COLUMN cluster_analysis_id SET DEFAULT nextval('ge_cluster_analysis_cluster_analysis_id_seq'::regclass);


--
-- Name: cluster_member_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_cluster_member ALTER COLUMN cluster_member_id SET DEFAULT nextval('ge_cluster_member_cluster_member_id_seq'::regclass);


--
-- Name: cluster_profile_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_cluster_profile ALTER COLUMN cluster_profile_id SET DEFAULT nextval('ge_cluster_profile_cluster_profile_id_seq'::regclass);


--
-- Name: correlation_analysis_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_correlation_analysis ALTER COLUMN correlation_analysis_id SET DEFAULT nextval('ge_correlation_analysis_correlation_analysis_id_seq'::regclass);


--
-- Name: correlation_member_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_correlation_member ALTER COLUMN correlation_member_id SET DEFAULT nextval('ge_correlation_member_correlation_member_id_seq'::regclass);


--
-- Name: data_analysis_process_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_data_analysis_process ALTER COLUMN data_analysis_process_id SET DEFAULT nextval('ge_data_analysis_process_data_analysis_process_id_seq'::regclass);


--
-- Name: diff_expression_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_diff_expression ALTER COLUMN diff_expression_id SET DEFAULT nextval('ge_diff_expression_diff_expression_id_seq'::regclass);


--
-- Name: experiment_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experiment ALTER COLUMN experiment_id SET DEFAULT nextval('ge_experiment_experiment_id_seq'::regclass);


--
-- Name: experiment_analysis_group_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experiment_analysis_group ALTER COLUMN experiment_analysis_group_id SET DEFAULT nextval('ge_experiment_analysis_group_experiment_analysis_group_id_seq'::regclass);


--
-- Name: experiment_analysis_member_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experiment_analysis_member ALTER COLUMN experiment_analysis_member_id SET DEFAULT nextval('ge_experiment_analysis_member_experiment_analysis_member_id_seq'::regclass);


--
-- Name: experiment_dbxref_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experiment_dbxref ALTER COLUMN experiment_dbxref_id SET DEFAULT nextval('ge_experiment_dbxref_experiment_dbxref_id_seq'::regclass);


--
-- Name: experimental_design_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experimental_design ALTER COLUMN experimental_design_id SET DEFAULT nextval('ge_experimental_design_experimental_design_id_seq'::regclass);


--
-- Name: experimental_design_dbxref_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experimental_design_dbxref ALTER COLUMN experimental_design_dbxref_id SET DEFAULT nextval('ge_experimental_design_dbxref_experimental_design_dbxref_id_seq'::regclass);


--
-- Name: experimental_design_pub_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experimental_design_pub ALTER COLUMN experimental_design_pub_id SET DEFAULT nextval('ge_experimental_design_pub_experimental_design_pub_id_seq'::regclass);


--
-- Name: expression_by_experiment_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_expression_by_experiment ALTER COLUMN expression_by_experiment_id SET DEFAULT nextval('ge_expression_by_experiment_expression_by_experiment_id_seq'::regclass);


--
-- Name: fluorescanning_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_fluorescanning ALTER COLUMN fluorescanning_id SET DEFAULT nextval('ge_fluorescanning_fluorescanning_id_seq'::regclass);


--
-- Name: hybridization_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_hybridization ALTER COLUMN hybridization_id SET DEFAULT nextval('ge_hybridization_hybridization_id_seq'::regclass);


--
-- Name: platform_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_platform ALTER COLUMN platform_id SET DEFAULT nextval('ge_platform_platform_id_seq'::regclass);


--
-- Name: platform_dbxref_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_platform_dbxref ALTER COLUMN platform_dbxref_id SET DEFAULT nextval('ge_platform_dbxref_platform_dbxref_id_seq'::regclass);


--
-- Name: platform_design_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_platform_design ALTER COLUMN platform_design_id SET DEFAULT nextval('ge_platform_design_platform_design_id_seq'::regclass);


--
-- Name: platform_pub_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_platform_pub ALTER COLUMN platform_pub_id SET DEFAULT nextval('ge_platform_pub_platform_pub_id_seq'::regclass);


--
-- Name: probe_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_probe ALTER COLUMN probe_id SET DEFAULT nextval('ge_probe_probe_id_seq'::regclass);


--
-- Name: probe_expression_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_probe_expression ALTER COLUMN probe_expression_id SET DEFAULT nextval('ge_probe_expression_probe_expression_id_seq'::regclass);


--
-- Name: probe_spot_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_probe_spot ALTER COLUMN probe_spot_id SET DEFAULT nextval('ge_probe_spot_probe_spot_id_seq'::regclass);


--
-- Name: probe_spot_coordinate_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_probe_spot_coordinate ALTER COLUMN probe_spot_coordinate_id SET DEFAULT nextval('ge_probe_spot_coordinate_probe_spot_coordinate_id_seq'::regclass);


--
-- Name: profile_element_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_profile_element ALTER COLUMN profile_element_id SET DEFAULT nextval('ge_profile_element_profile_element_id_seq'::regclass);


--
-- Name: target_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_target ALTER COLUMN target_id SET DEFAULT nextval('ge_target_target_id_seq'::regclass);


--
-- Name: target_dbxref_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_target_dbxref ALTER COLUMN target_dbxref_id SET DEFAULT nextval('ge_target_dbxref_target_dbxref_id_seq'::regclass);


--
-- Name: target_element_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_target_element ALTER COLUMN target_element_id SET DEFAULT nextval('ge_target_element_target_element_id_seq'::regclass);


--
-- Name: technology_type_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_technology_type ALTER COLUMN technology_type_id SET DEFAULT nextval('ge_technology_type_technology_type_id_seq'::regclass);


--
-- Name: template_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template ALTER COLUMN template_id SET DEFAULT nextval('ge_template_template_id_seq'::regclass);


--
-- Name: template_dbiref_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_dbiref ALTER COLUMN template_dbiref_id SET DEFAULT nextval('ge_template_dbiref_template_dbiref_id_seq'::regclass);


--
-- Name: template_dbxref_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_dbxref ALTER COLUMN template_dbxref_id SET DEFAULT nextval('ge_template_dbxref_template_dbxref_id_seq'::regclass);


--
-- Name: template_diff_expression_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_diff_expression ALTER COLUMN template_diff_expression_id SET DEFAULT nextval('ge_template_diff_expression_template_diff_expression_id_seq'::regclass);


--
-- Name: template_expression_id; Type: DEFAULT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_expression ALTER COLUMN template_expression_id SET DEFAULT nextval('ge_template_expression_template_expression_id_seq'::regclass);


SET search_path = genomic, pg_catalog;

--
-- Name: blast_defline_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY blast_defline ALTER COLUMN blast_defline_id SET DEFAULT nextval('blast_defline_blast_defline_id_seq'::regclass);


--
-- Name: blast_hit_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY blast_hit ALTER COLUMN blast_hit_id SET DEFAULT nextval('blast_hit_blast_hit_id_seq'::regclass);


--
-- Name: blast_query_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY blast_query ALTER COLUMN blast_query_id SET DEFAULT nextval('blast_query_blast_query_id_seq'::regclass);


--
-- Name: chromat_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY chromat ALTER COLUMN chromat_id SET DEFAULT nextval('chromat_chromat_id_seq'::regclass);


--
-- Name: clone_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY clone ALTER COLUMN clone_id SET DEFAULT nextval('clone_clone_id_seq'::regclass);


--
-- Name: clone_feature_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY clone_feature ALTER COLUMN clone_feature_id SET DEFAULT nextval('clone_feature_clone_feature_id_seq'::regclass);


--
-- Name: clone_type_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY clone_type ALTER COLUMN clone_type_id SET DEFAULT nextval('clone_type_clone_type_id_seq'::regclass);


--
-- Name: genbank_submission_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genbank_submission ALTER COLUMN genbank_submission_id SET DEFAULT nextval('genbank_submission_genbank_submission_id_seq'::regclass);


--
-- Name: gss_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY gss ALTER COLUMN gss_id SET DEFAULT nextval('gss_gss_id_seq'::regclass);


--
-- Name: gss_submitted_to_genbank_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY gss_submitted_to_genbank ALTER COLUMN gss_submitted_to_genbank_id SET DEFAULT nextval('gss_submitted_to_genbank_gss_submitted_to_genbank_id_seq'::regclass);


--
-- Name: library_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY library ALTER COLUMN library_id SET DEFAULT nextval('library_library_id_seq'::regclass);


--
-- Name: library_annotation_db_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY library_annotation_db ALTER COLUMN library_annotation_db_id SET DEFAULT nextval('library_annotation_db_library_annotation_db_id_seq'::regclass);


--
-- Name: library_shortname_abbreviation_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY library_shortname_abbreviation ALTER COLUMN library_shortname_abbreviation_id SET DEFAULT nextval('library_shortname_abbreviatio_library_shortname_abbreviatio_seq'::regclass);


--
-- Name: qc_report_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY qc_report ALTER COLUMN qc_report_id SET DEFAULT nextval('qc_report_qc_report_id_seq'::regclass);


--
-- Name: query_source_type_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY query_source_type ALTER COLUMN query_source_type_id SET DEFAULT nextval('query_source_type_query_source_type_id_seq'::regclass);


--
-- Name: read_class_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY read_class ALTER COLUMN read_class_id SET DEFAULT nextval('read_class_read_class_id_seq'::regclass);


--
-- Name: sequencing_primer_id; Type: DEFAULT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY sequencing_primer ALTER COLUMN sequencing_primer_id SET DEFAULT nextval('sequencing_primer_sequencing_primer_id_seq'::regclass);


SET search_path = insitu, pg_catalog;

--
-- Name: experiment_id; Type: DEFAULT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY experiment ALTER COLUMN experiment_id SET DEFAULT nextval('experiment_experiment_id_seq'::regclass);


--
-- Name: experiment_image_id; Type: DEFAULT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY experiment_image ALTER COLUMN experiment_image_id SET DEFAULT nextval('experiment_image_experiment_image_id_seq'::regclass);


--
-- Name: experiment_tag_id; Type: DEFAULT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY experiment_tag ALTER COLUMN experiment_tag_id SET DEFAULT nextval('experiment_tag_experiment_tag_id_seq'::regclass);


--
-- Name: is_organism_id; Type: DEFAULT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY is_organism ALTER COLUMN is_organism_id SET DEFAULT nextval('is_organism_is_organism_id_seq'::regclass);


--
-- Name: probe_id; Type: DEFAULT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY probe ALTER COLUMN probe_id SET DEFAULT nextval('probe_probe_id_seq'::regclass);


--
-- Name: tag_id; Type: DEFAULT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY tag ALTER COLUMN tag_id SET DEFAULT nextval('tag_tag_id_seq'::regclass);


SET search_path = metadata, pg_catalog;

--
-- Name: attribution_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY attribution ALTER COLUMN attribution_id SET DEFAULT nextval('attribution_attribution_id_seq'::regclass);


--
-- Name: attribution_to_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY attribution_to ALTER COLUMN attribution_to_id SET DEFAULT nextval('attribution_to_attribution_to_id_seq'::regclass);


--
-- Name: comment_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY comments ALTER COLUMN comment_id SET DEFAULT nextval('comments_comment_id_seq'::regclass);


--
-- Name: dbipath_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_dbipath ALTER COLUMN dbipath_id SET DEFAULT nextval('md_dbipath_dbipath_id_seq'::regclass);


--
-- Name: dbiref_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_dbiref ALTER COLUMN dbiref_id SET DEFAULT nextval('md_dbiref_dbiref_id_seq'::regclass);


--
-- Name: dbversion_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_dbversion ALTER COLUMN dbversion_id SET DEFAULT nextval('md_dbversion_dbversion_id_seq'::regclass);


--
-- Name: file_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_files ALTER COLUMN file_id SET DEFAULT nextval('md_files_file_id_seq'::regclass);


--
-- Name: groupmember_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_groupmembers ALTER COLUMN groupmember_id SET DEFAULT nextval('md_groupmembers_groupmember_id_seq'::regclass);


--
-- Name: group_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_groups ALTER COLUMN group_id SET DEFAULT nextval('md_groups_group_id_seq'::regclass);


--
-- Name: image_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_image ALTER COLUMN image_id SET DEFAULT nextval('md_image_image_id_seq'::regclass);


--
-- Name: md_image_organism_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_image_organism ALTER COLUMN md_image_organism_id SET DEFAULT nextval('md_image_organism_md_image_organism_id_seq'::regclass);


--
-- Name: metadata_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_metadata ALTER COLUMN metadata_id SET DEFAULT nextval('md_metadata_metadata_id_seq'::regclass);


--
-- Name: tag_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_tag ALTER COLUMN tag_id SET DEFAULT nextval('md_tag_tag_id_seq'::regclass);


--
-- Name: tag_image_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_tag_image ALTER COLUMN tag_image_id SET DEFAULT nextval('md_tag_image_tag_image_id_seq'::regclass);


--
-- Name: role_id; Type: DEFAULT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY roles ALTER COLUMN role_id SET DEFAULT nextval('roles_role_id_seq'::regclass);


SET search_path = pheno_population, pg_catalog;

--
-- Name: dp_id; Type: DEFAULT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY data_points ALTER COLUMN dp_id SET DEFAULT nextval('data_points_dp_id_seq'::regclass);


--
-- Name: gen_id; Type: DEFAULT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY genotypes ALTER COLUMN gen_id SET DEFAULT nextval('genotypes_gen_id_seq'::regclass);


--
-- Name: image_id; Type: DEFAULT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY images ALTER COLUMN image_id SET DEFAULT nextval('images_image_id_seq'::regclass);


--
-- Name: loc_id; Type: DEFAULT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY locations ALTER COLUMN loc_id SET DEFAULT nextval('locations_loc_id_seq'::regclass);


--
-- Name: organ_id; Type: DEFAULT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY organs ALTER COLUMN organ_id SET DEFAULT nextval('organs_organ_id_seq'::regclass);


--
-- Name: plant_id; Type: DEFAULT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY plants ALTER COLUMN plant_id SET DEFAULT nextval('plants_plant_id_seq'::regclass);


--
-- Name: pop_id; Type: DEFAULT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY populations ALTER COLUMN pop_id SET DEFAULT nextval('populations_pop_id_seq'::regclass);


--
-- Name: prop_id; Type: DEFAULT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY properties ALTER COLUMN prop_id SET DEFAULT nextval('properties_prop_id_seq'::regclass);


--
-- Name: sample_id; Type: DEFAULT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY samples ALTER COLUMN sample_id SET DEFAULT nextval('samples_sample_id_seq'::regclass);


--
-- Name: source_id; Type: DEFAULT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY sources ALTER COLUMN source_id SET DEFAULT nextval('sources_source_id_seq'::regclass);


SET search_path = phenome, pg_catalog;

--
-- Name: allele_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY allele ALTER COLUMN allele_id SET DEFAULT nextval('allele_allele_id_seq'::regclass);


--
-- Name: allele_alias_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY allele_alias ALTER COLUMN allele_alias_id SET DEFAULT nextval('allele_alias_allele_alias_id_seq'::regclass);


--
-- Name: allele_dbxref_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY allele_dbxref ALTER COLUMN allele_dbxref_id SET DEFAULT nextval('allele_dbxref_allele_dbxref_id_seq'::regclass);


--
-- Name: allele_history_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY allele_history ALTER COLUMN allele_history_id SET DEFAULT nextval('allele_history_allele_history_id_seq'::regclass);


--
-- Name: cross_type_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY cross_type ALTER COLUMN cross_type_id SET DEFAULT nextval('cross_type_cross_type_id_seq'::regclass);


--
-- Name: dbxref_type_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY dbxref_type ALTER COLUMN dbxref_type_id SET DEFAULT nextval('dbxref_type_dbxref_type_id_seq'::regclass);


--
-- Name: genotype_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY genotype ALTER COLUMN genotype_id SET DEFAULT nextval('genotype_genotype_id_seq'::regclass);


--
-- Name: genotype_experiment_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY genotype_experiment ALTER COLUMN genotype_experiment_id SET DEFAULT nextval('genotype_experiment_genotype_experiment_id_seq'::regclass);


--
-- Name: genotype_region_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY genotype_region ALTER COLUMN genotype_region_id SET DEFAULT nextval('genotype_region_genotype_region_id_seq'::regclass);


--
-- Name: germplasm_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY germplasm ALTER COLUMN germplasm_id SET DEFAULT nextval('germplasm_germplasm_id_seq'::regclass);


--
-- Name: individual_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual ALTER COLUMN individual_id SET DEFAULT nextval('individual_individual_id_seq'::regclass);


--
-- Name: individual_alias_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_alias ALTER COLUMN individual_alias_id SET DEFAULT nextval('individual_alias_individual_alias_id_seq'::regclass);


--
-- Name: individual_allele_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_allele ALTER COLUMN individual_allele_id SET DEFAULT nextval('individual_allele_individual_allele_id_seq'::regclass);


--
-- Name: individual_dbxref_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref ALTER COLUMN individual_dbxref_id SET DEFAULT nextval('individual_dbxref_individual_dbxref_id_seq'::regclass);


--
-- Name: individual_dbxref_evidence_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref_evidence ALTER COLUMN individual_dbxref_evidence_id SET DEFAULT nextval('individual_dbxref_evidence_individual_dbxref_evidence_id_seq'::regclass);


--
-- Name: individual_dbxref_evidence_history_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref_evidence_history ALTER COLUMN individual_dbxref_evidence_history_id SET DEFAULT nextval('individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq'::regclass);


--
-- Name: individual_history_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_history ALTER COLUMN individual_history_id SET DEFAULT nextval('individual_history_individual_history_id_seq'::regclass);


--
-- Name: individual_image_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_image ALTER COLUMN individual_image_id SET DEFAULT nextval('individual_image_individual_image_id_seq'::regclass);


--
-- Name: individual_locus_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_locus ALTER COLUMN individual_locus_id SET DEFAULT nextval('individual_locus_individual_locus_id_seq'::regclass);


--
-- Name: is_public_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY is_public ALTER COLUMN is_public_id SET DEFAULT nextval('is_public_is_public_id_seq'::regclass);


--
-- Name: locus_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus ALTER COLUMN locus_id SET DEFAULT nextval('locus_locus_id_seq'::regclass);


--
-- Name: locus2locus_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus2locus ALTER COLUMN locus2locus_id SET DEFAULT nextval('locus2locus_locus2locus_id_seq'::regclass);


--
-- Name: locus_alias_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_alias ALTER COLUMN locus_alias_id SET DEFAULT nextval('locus_alias_locus_alias_id_seq'::regclass);


--
-- Name: locus_dbxref_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref ALTER COLUMN locus_dbxref_id SET DEFAULT nextval('locus_dbxref_locus_dbxref_id_seq'::regclass);


--
-- Name: locus_dbxref_evidence_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref_evidence ALTER COLUMN locus_dbxref_evidence_id SET DEFAULT nextval('locus_dbxref_evidence_locus_dbxref_evidence_id_seq'::regclass);


--
-- Name: locus_dbxref_evidence_history_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref_evidence_history ALTER COLUMN locus_dbxref_evidence_history_id SET DEFAULT nextval('locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq'::regclass);


--
-- Name: locus_history_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_history ALTER COLUMN locus_history_id SET DEFAULT nextval('locus_history_locus_history_id_seq'::regclass);


--
-- Name: locus_image_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_image ALTER COLUMN locus_image_id SET DEFAULT nextval('locus_image_locus_image_id_seq'::regclass);


--
-- Name: locus_marker_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_marker ALTER COLUMN locus_marker_id SET DEFAULT nextval('locus_marker_locus_marker_id_seq'::regclass);


--
-- Name: locus_owner_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_owner ALTER COLUMN locus_owner_id SET DEFAULT nextval('locus_owner_locus_owner_id_seq'::regclass);


--
-- Name: locus_registry_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_registry ALTER COLUMN locus_registry_id SET DEFAULT nextval('locus_registry_locus_registry_id_seq'::regclass);


--
-- Name: locus_unigene_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_unigene ALTER COLUMN locus_unigene_id SET DEFAULT nextval('locus_unigene_locus_unigene_id_seq'::regclass);


--
-- Name: locusgroup_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locusgroup ALTER COLUMN locusgroup_id SET DEFAULT nextval('locusgroup_locusgroup_id_seq'::regclass);


--
-- Name: locusgroup_member_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locusgroup_member ALTER COLUMN locusgroup_member_id SET DEFAULT nextval('locusgroup_member_locusgroup_member_id_seq'::regclass);


--
-- Name: nd_experiment_md_files_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_md_files ALTER COLUMN nd_experiment_md_files_id SET DEFAULT nextval('nd_experiment_md_files_nd_experiment_md_files_id_seq'::regclass);


--
-- Name: phenotype_user_trait_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenotype_user_trait ALTER COLUMN phenotype_user_trait_id SET DEFAULT nextval('phenotype_user_trait_phenotype_user_trait_id_seq'::regclass);


--
-- Name: polymorphic_fragment_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY polymorphic_fragment ALTER COLUMN polymorphic_fragment_id SET DEFAULT nextval('polymorphic_fragment_polymorphic_fragment_id_seq'::regclass);


--
-- Name: population_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY population ALTER COLUMN population_id SET DEFAULT nextval('population_population_id_seq'::regclass);


--
-- Name: population_dbxref_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY population_dbxref ALTER COLUMN population_dbxref_id SET DEFAULT nextval('population_dbxref_population_dbxref_id_seq'::regclass);


--
-- Name: pub_curator_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY pub_curator ALTER COLUMN pub_curator_id SET DEFAULT nextval('pub_curator_pub_curator_id_seq'::regclass);


--
-- Name: registry_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY registry ALTER COLUMN registry_id SET DEFAULT nextval('registry_registry_id_seq'::regclass);


--
-- Name: stock_allele_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY stock_allele ALTER COLUMN stock_allele_id SET DEFAULT nextval('stock_allele_stock_allele_id_seq'::regclass);


--
-- Name: stock_image_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY stock_image ALTER COLUMN stock_image_id SET DEFAULT nextval('stock_image_stock_image_id_seq'::regclass);


--
-- Name: stock_owner_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY stock_owner ALTER COLUMN stock_owner_id SET DEFAULT nextval('stock_owner_stock_owner_id_seq'::regclass);


--
-- Name: il_bin_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY tomato_il_bin ALTER COLUMN il_bin_id SET DEFAULT nextval('tomato_il_bin_il_bin_id_seq'::regclass);


--
-- Name: tomato_term_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY tomato_term ALTER COLUMN tomato_term_id SET DEFAULT nextval('tomato_term_tomato_term_id_seq'::regclass);


--
-- Name: tomato_term2term_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY tomato_term2term ALTER COLUMN tomato_term2term_id SET DEFAULT nextval('tomato_term2term_tomato_term2term_id_seq'::regclass);


--
-- Name: unit_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY unit ALTER COLUMN unit_id SET DEFAULT nextval('unit_unit_id_seq'::regclass);


--
-- Name: user_trait_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY user_trait ALTER COLUMN user_trait_id SET DEFAULT nextval('user_trait_user_trait_id_seq'::regclass);


--
-- Name: user_trait_unit_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY user_trait_unit ALTER COLUMN user_trait_unit_id SET DEFAULT nextval('user_trait_unit_user_trait_unit_id_seq'::regclass);


--
-- Name: variant_id; Type: DEFAULT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY variant ALTER COLUMN variant_id SET DEFAULT nextval('variant_variant_id_seq'::regclass);


SET search_path = physical, pg_catalog;

--
-- Name: bap_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY ba_plausibility ALTER COLUMN bap_id SET DEFAULT nextval('ba_plausibility_bap_id_seq'::regclass);


--
-- Name: bac_assoc_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY bac_associations ALTER COLUMN bac_assoc_id SET DEFAULT nextval('bac_associations_bac_assoc_id_seq'::regclass);


--
-- Name: consensus_seq_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY bac_consensus_sequences ALTER COLUMN consensus_seq_id SET DEFAULT nextval('bac_consensus_sequences_consensus_seq_id_seq'::regclass);


--
-- Name: bac_contig_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY bac_contigs ALTER COLUMN bac_contig_id SET DEFAULT nextval('bac_contigs_bac_contig_id_seq'::regclass);


--
-- Name: end_seq_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY bac_end_sequences ALTER COLUMN end_seq_id SET DEFAULT nextval('bac_end_sequences_end_seq_id_seq'::regclass);


--
-- Name: bac_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY bacs ALTER COLUMN bac_id SET DEFAULT nextval('bacs_bac_id_seq'::regclass);


--
-- Name: computational_assoc_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY computational_associations ALTER COLUMN computational_assoc_id SET DEFAULT nextval('computational_associations_computational_assoc_id_seq'::regclass);


--
-- Name: contig_size_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY contig_sizes ALTER COLUMN contig_size_id SET DEFAULT nextval('contig_sizes_contig_size_id_seq'::regclass);


--
-- Name: dp_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY deprecated_probes ALTER COLUMN dp_id SET DEFAULT nextval('deprecated_probes_dp_id_seq'::regclass);


--
-- Name: fpc_datum_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY fpc_data ALTER COLUMN fpc_datum_id SET DEFAULT nextval('fpc_data_fpc_datum_id_seq'::regclass);


--
-- Name: fpc_version; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY fpc_version ALTER COLUMN fpc_version SET DEFAULT nextval('fpc_version_fpc_version_seq'::regclass);


--
-- Name: manual_assoc_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY manual_associations ALTER COLUMN manual_assoc_id SET DEFAULT nextval('manual_associations_manual_assoc_id_seq'::regclass);


--
-- Name: oap_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY oa_plausibility ALTER COLUMN oap_id SET DEFAULT nextval('oa_plausibility_oap_id_seq'::regclass);


--
-- Name: overgo_assoc_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY overgo_associations ALTER COLUMN overgo_assoc_id SET DEFAULT nextval('overgo_associations_overgo_assoc_id_seq'::regclass);


--
-- Name: plate_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY overgo_plates ALTER COLUMN plate_id SET DEFAULT nextval('overgo_plates_plate_id_seq'::regclass);


--
-- Name: result_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY overgo_results ALTER COLUMN result_id SET DEFAULT nextval('overgo_results_result_id_seq'::regclass);


--
-- Name: overgo_version; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY overgo_version ALTER COLUMN overgo_version SET DEFAULT nextval('overgo_version_overgo_version_seq'::regclass);


--
-- Name: overgo_probe_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY probe_markers ALTER COLUMN overgo_probe_id SET DEFAULT nextval('probe_markers_overgo_probe_id_seq'::regclass);


--
-- Name: species_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY species ALTER COLUMN species_id SET DEFAULT nextval('species_species_id_seq'::regclass);


--
-- Name: tacg_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY tentative_association_conflict_groups ALTER COLUMN tacg_id SET DEFAULT nextval('tentative_association_conflict_groups_tacg_id_seq'::regclass);


--
-- Name: tentative_assoc_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY tentative_overgo_associations ALTER COLUMN tentative_assoc_id SET DEFAULT nextval('tentative_overgo_associations_tentative_assoc_id_seq'::regclass);


--
-- Name: user_id; Type: DEFAULT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY users ALTER COLUMN user_id SET DEFAULT nextval('users_user_id_seq'::regclass);


SET search_path = public, pg_catalog;

--
-- Name: analysis_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysis ALTER COLUMN analysis_id SET DEFAULT nextval('analysis_analysis_id_seq'::regclass);


--
-- Name: analysisfeature_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysisfeature ALTER COLUMN analysisfeature_id SET DEFAULT nextval('analysisfeature_analysisfeature_id_seq'::regclass);


--
-- Name: analysisprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysisprop ALTER COLUMN analysisprop_id SET DEFAULT nextval('analysisprop_analysisprop_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ara_users ALTER COLUMN id SET DEFAULT nextval('ara_users_id_seq'::regclass);


--
-- Name: blastwatch_queries_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY blastwatch_queries ALTER COLUMN blastwatch_queries_id SET DEFAULT nextval('blastwatch_queries_blastwatch_queries_id_seq'::regclass);


--
-- Name: blastwatch_results_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY blastwatch_results ALTER COLUMN blastwatch_results_id SET DEFAULT nextval('blastwatch_results_blastwatch_results_id_seq'::regclass);


--
-- Name: bug_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bug ALTER COLUMN bug_id SET DEFAULT nextval('bug_bug_id_seq'::regclass);


--
-- Name: contact_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY contact ALTER COLUMN contact_id SET DEFAULT nextval('contact_contact_id_seq'::regclass);


--
-- Name: contact_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY contact_relationship ALTER COLUMN contact_relationship_id SET DEFAULT nextval('contact_relationship_contact_relationship_id_seq'::regclass);


--
-- Name: cv_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cv ALTER COLUMN cv_id SET DEFAULT nextval('cv_cv_id_seq'::regclass);


--
-- Name: cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm ALTER COLUMN cvterm_id SET DEFAULT nextval('cvterm_cvterm_id_seq'::regclass);


--
-- Name: cvterm_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm_dbxref ALTER COLUMN cvterm_dbxref_id SET DEFAULT nextval('cvterm_dbxref_cvterm_dbxref_id_seq'::regclass);


--
-- Name: cvterm_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm_relationship ALTER COLUMN cvterm_relationship_id SET DEFAULT nextval('cvterm_relationship_cvterm_relationship_id_seq'::regclass);


--
-- Name: cvtermpath_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermpath ALTER COLUMN cvtermpath_id SET DEFAULT nextval('cvtermpath_cvtermpath_id_seq'::regclass);


--
-- Name: cvtermprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermprop ALTER COLUMN cvtermprop_id SET DEFAULT nextval('cvtermprop_cvtermprop_id_seq'::regclass);


--
-- Name: cvtermsynonym_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermsynonym ALTER COLUMN cvtermsynonym_id SET DEFAULT nextval('cvtermsynonym_cvtermsynonym_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cxgn_bac_pipeline_genbank_log ALTER COLUMN id SET DEFAULT nextval('cxgn_bac_pipeline_genbank_log_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cxgn_bac_pipeline_loading_log ALTER COLUMN id SET DEFAULT nextval('cxgn_bac_pipeline_loading_log_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cxgn_bac_pipeline_processing_log ALTER COLUMN id SET DEFAULT nextval('cxgn_bac_pipeline_processing_log_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cxgn_indexedlog_test_feel_free_to_delete_me ALTER COLUMN id SET DEFAULT nextval('cxgn_indexedlog_test_feel_free_to_delete_me_id_seq'::regclass);


--
-- Name: db_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY db ALTER COLUMN db_id SET DEFAULT nextval('db_db_id_seq'::regclass);


--
-- Name: dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dbxref ALTER COLUMN dbxref_id SET DEFAULT nextval('dbxref_dbxref_id_seq'::regclass);


--
-- Name: dbxrefprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dbxrefprop ALTER COLUMN dbxrefprop_id SET DEFAULT nextval('dbxrefprop_dbxrefprop_id_seq'::regclass);


--
-- Name: environment_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY environment ALTER COLUMN environment_id SET DEFAULT nextval('environment_environment_id_seq'::regclass);


--
-- Name: environment_cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY environment_cvterm ALTER COLUMN environment_cvterm_id SET DEFAULT nextval('environment_cvterm_environment_cvterm_id_seq'::regclass);


--
-- Name: enzyme_restriction_sites_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY enzyme_restriction_sites ALTER COLUMN enzyme_restriction_sites_id SET DEFAULT nextval('enzyme_restriction_sites_enzyme_restriction_sites_id_seq'::regclass);


--
-- Name: feature_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature ALTER COLUMN feature_id SET DEFAULT nextval('feature_feature_id_seq'::regclass);


--
-- Name: feature_cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm ALTER COLUMN feature_cvterm_id SET DEFAULT nextval('feature_cvterm_feature_cvterm_id_seq'::regclass);


--
-- Name: feature_cvterm_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm_dbxref ALTER COLUMN feature_cvterm_dbxref_id SET DEFAULT nextval('feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq'::regclass);


--
-- Name: feature_cvterm_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm_pub ALTER COLUMN feature_cvterm_pub_id SET DEFAULT nextval('feature_cvterm_pub_feature_cvterm_pub_id_seq'::regclass);


--
-- Name: feature_cvtermprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvtermprop ALTER COLUMN feature_cvtermprop_id SET DEFAULT nextval('feature_cvtermprop_feature_cvtermprop_id_seq'::regclass);


--
-- Name: feature_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_dbxref ALTER COLUMN feature_dbxref_id SET DEFAULT nextval('feature_dbxref_feature_dbxref_id_seq'::regclass);


--
-- Name: feature_genotype_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_genotype ALTER COLUMN feature_genotype_id SET DEFAULT nextval('feature_genotype_feature_genotype_id_seq'::regclass);


--
-- Name: feature_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_pub ALTER COLUMN feature_pub_id SET DEFAULT nextval('feature_pub_feature_pub_id_seq'::regclass);


--
-- Name: feature_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationship ALTER COLUMN feature_relationship_id SET DEFAULT nextval('feature_relationship_feature_relationship_id_seq'::regclass);


--
-- Name: feature_relationship_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationship_pub ALTER COLUMN feature_relationship_pub_id SET DEFAULT nextval('feature_relationship_pub_feature_relationship_pub_id_seq'::regclass);


--
-- Name: feature_relationshipprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationshipprop ALTER COLUMN feature_relationshipprop_id SET DEFAULT nextval('feature_relationshipprop_feature_relationshipprop_id_seq'::regclass);


--
-- Name: feature_relationshipprop_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationshipprop_pub ALTER COLUMN feature_relationshipprop_pub_id SET DEFAULT nextval('feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq'::regclass);


--
-- Name: feature_synonym_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_synonym ALTER COLUMN feature_synonym_id SET DEFAULT nextval('feature_synonym_feature_synonym_id_seq'::regclass);


--
-- Name: featureloc_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureloc ALTER COLUMN featureloc_id SET DEFAULT nextval('featureloc_featureloc_id_seq'::regclass);


--
-- Name: featureloc_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureloc_pub ALTER COLUMN featureloc_pub_id SET DEFAULT nextval('featureloc_pub_featureloc_pub_id_seq'::regclass);


--
-- Name: featureprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureprop ALTER COLUMN featureprop_id SET DEFAULT nextval('featureprop_featureprop_id_seq'::regclass);


--
-- Name: featureprop_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureprop_pub ALTER COLUMN featureprop_pub_id SET DEFAULT nextval('featureprop_pub_featureprop_pub_id_seq'::regclass);


--
-- Name: forward_amplicon_sequence_information_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY forward_amplicon_sequence_information ALTER COLUMN forward_amplicon_sequence_information_id SET DEFAULT nextval('forward_amplicon_sequence_inf_forward_amplicon_sequence_inf_seq'::regclass);


--
-- Name: forward_amplicon_sequence_markers_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY forward_amplicon_sequence_markers ALTER COLUMN forward_amplicon_sequence_markers_id SET DEFAULT nextval('forward_amplicon_sequence_mar_forward_amplicon_sequence_mar_seq'::regclass);


--
-- Name: fpc_band_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_band ALTER COLUMN fpc_band_id SET DEFAULT nextval('fpc_band_fpc_band_id_seq'::regclass);


--
-- Name: fpc_build_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_build ALTER COLUMN fpc_build_id SET DEFAULT nextval('fpc_build_fpc_build_id_seq'::regclass);


--
-- Name: fpc_build_fpc_fingerprint_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_build_fpc_fingerprint ALTER COLUMN fpc_build_fpc_fingerprint_id SET DEFAULT nextval('fpc_build_fpc_fingerprint_fpc_build_fpc_fingerprint_id_seq'::regclass);


--
-- Name: fpc_contig_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_contig ALTER COLUMN fpc_contig_id SET DEFAULT nextval('fpc_contig_fpc_contig_id_seq'::regclass);


--
-- Name: fpc_contig_clone_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_contig_clone ALTER COLUMN fpc_contig_clone_id SET DEFAULT nextval('fpc_contig_clone_fpc_contig_clone_id_seq'::regclass);


--
-- Name: fpc_fingerprint_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_fingerprint ALTER COLUMN fpc_fingerprint_id SET DEFAULT nextval('fpc_fingerprint_fpc_fingerprint_id_seq'::regclass);


--
-- Name: fpc_series_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_series ALTER COLUMN fpc_series_id SET DEFAULT nextval('fpc_series_fpc_series_id_seq'::regclass);


--
-- Name: genotype_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY genotype ALTER COLUMN genotype_id SET DEFAULT nextval('genotype_genotype_id_seq'::regclass);


--
-- Name: genotypeprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY genotypeprop ALTER COLUMN genotypeprop_id SET DEFAULT nextval('genotypeprop_genotypeprop_id_seq'::regclass);


--
-- Name: glossary_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY glossary ALTER COLUMN glossary_id SET DEFAULT nextval('glossary_glossary_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY itag_loading_log ALTER COLUMN id SET DEFAULT nextval('itag_loading_log_id_seq'::regclass);


--
-- Name: materialized_view_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY materialized_view ALTER COLUMN materialized_view_id SET DEFAULT nextval('materialized_view_materialized_view_id_seq'::regclass);


--
-- Name: mv_id; Type: DEFAULT; Schema: public; Owner: web_usr
--

ALTER TABLE ONLY matviews ALTER COLUMN mv_id SET DEFAULT nextval('matviews_mv_id_seq'::regclass);


--
-- Name: nd_experiment_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment ALTER COLUMN nd_experiment_id SET DEFAULT nextval('nd_experiment_nd_experiment_id_seq'::regclass);


--
-- Name: nd_experiment_contact_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_contact ALTER COLUMN nd_experiment_contact_id SET DEFAULT nextval('nd_experiment_contact_nd_experiment_contact_id_seq'::regclass);


--
-- Name: nd_experiment_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_dbxref ALTER COLUMN nd_experiment_dbxref_id SET DEFAULT nextval('nd_experiment_dbxref_nd_experiment_dbxref_id_seq'::regclass);


--
-- Name: nd_experiment_genotype_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_genotype ALTER COLUMN nd_experiment_genotype_id SET DEFAULT nextval('nd_experiment_genotype_nd_experiment_genotype_id_seq'::regclass);


--
-- Name: nd_experiment_phenotype_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_phenotype ALTER COLUMN nd_experiment_phenotype_id SET DEFAULT nextval('nd_experiment_phenotype_nd_experiment_phenotype_id_seq'::regclass);


--
-- Name: nd_experiment_project_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_project ALTER COLUMN nd_experiment_project_id SET DEFAULT nextval('nd_experiment_project_nd_experiment_project_id_seq'::regclass);


--
-- Name: nd_experiment_protocol_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_protocol ALTER COLUMN nd_experiment_protocol_id SET DEFAULT nextval('nd_experiment_protocol_nd_experiment_protocol_id_seq'::regclass);


--
-- Name: nd_experiment_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_pub ALTER COLUMN nd_experiment_pub_id SET DEFAULT nextval('nd_experiment_pub_nd_experiment_pub_id_seq'::regclass);


--
-- Name: nd_experiment_stock_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stock ALTER COLUMN nd_experiment_stock_id SET DEFAULT nextval('nd_experiment_stock_nd_experiment_stock_id_seq'::regclass);


--
-- Name: nd_experiment_stock_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stock_dbxref ALTER COLUMN nd_experiment_stock_dbxref_id SET DEFAULT nextval('nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq'::regclass);


--
-- Name: nd_experiment_stockprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stockprop ALTER COLUMN nd_experiment_stockprop_id SET DEFAULT nextval('nd_experiment_stockprop_nd_experiment_stockprop_id_seq'::regclass);


--
-- Name: nd_experimentprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experimentprop ALTER COLUMN nd_experimentprop_id SET DEFAULT nextval('nd_experimentprop_nd_experimentprop_id_seq'::regclass);


--
-- Name: nd_geolocation_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_geolocation ALTER COLUMN nd_geolocation_id SET DEFAULT nextval('nd_geolocation_nd_geolocation_id_seq'::regclass);


--
-- Name: nd_geolocationprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_geolocationprop ALTER COLUMN nd_geolocationprop_id SET DEFAULT nextval('nd_geolocationprop_nd_geolocationprop_id_seq'::regclass);


--
-- Name: nd_protocol_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocol ALTER COLUMN nd_protocol_id SET DEFAULT nextval('nd_protocol_nd_protocol_id_seq'::regclass);


--
-- Name: nd_protocol_reagent_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocol_reagent ALTER COLUMN nd_protocol_reagent_id SET DEFAULT nextval('nd_protocol_reagent_nd_protocol_reagent_id_seq'::regclass);


--
-- Name: nd_protocolprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocolprop ALTER COLUMN nd_protocolprop_id SET DEFAULT nextval('nd_protocolprop_nd_protocolprop_id_seq'::regclass);


--
-- Name: nd_reagent_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagent ALTER COLUMN nd_reagent_id SET DEFAULT nextval('nd_reagent_nd_reagent_id_seq'::regclass);


--
-- Name: nd_reagent_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagent_relationship ALTER COLUMN nd_reagent_relationship_id SET DEFAULT nextval('nd_reagent_relationship_nd_reagent_relationship_id_seq'::regclass);


--
-- Name: nd_reagentprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagentprop ALTER COLUMN nd_reagentprop_id SET DEFAULT nextval('nd_reagentprop_nd_reagentprop_id_seq'::regclass);


--
-- Name: organism_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organism ALTER COLUMN organism_id SET DEFAULT nextval('organism_organism_id_seq'::regclass);


--
-- Name: organism_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organism_dbxref ALTER COLUMN organism_dbxref_id SET DEFAULT nextval('organism_dbxref_organism_dbxref_id_seq'::regclass);


--
-- Name: organism_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organism_relationship ALTER COLUMN organism_relationship_id SET DEFAULT nextval('organism_relationship_organism_relationship_id_seq'::regclass);


--
-- Name: organismpath_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organismpath ALTER COLUMN organismpath_id SET DEFAULT nextval('organismpath_organismpath_id_seq'::regclass);


--
-- Name: organismprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organismprop ALTER COLUMN organismprop_id SET DEFAULT nextval('organismprop_organismprop_id_seq'::regclass);


--
-- Name: phendesc_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phendesc ALTER COLUMN phendesc_id SET DEFAULT nextval('phendesc_phendesc_id_seq'::regclass);


--
-- Name: phenotype_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype ALTER COLUMN phenotype_id SET DEFAULT nextval('phenotype_phenotype_id_seq'::regclass);


--
-- Name: phenotype_comparison_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison ALTER COLUMN phenotype_comparison_id SET DEFAULT nextval('phenotype_comparison_phenotype_comparison_id_seq'::regclass);


--
-- Name: phenotype_comparison_cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison_cvterm ALTER COLUMN phenotype_comparison_cvterm_id SET DEFAULT nextval('phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq'::regclass);


--
-- Name: phenotype_cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_cvterm ALTER COLUMN phenotype_cvterm_id SET DEFAULT nextval('phenotype_cvterm_phenotype_cvterm_id_seq'::regclass);


--
-- Name: phenotypeprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotypeprop ALTER COLUMN phenotypeprop_id SET DEFAULT nextval('phenotypeprop_phenotypeprop_id_seq'::regclass);


--
-- Name: phenstatement_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenstatement ALTER COLUMN phenstatement_id SET DEFAULT nextval('phenstatement_phenstatement_id_seq'::regclass);


--
-- Name: phylonode_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode ALTER COLUMN phylonode_id SET DEFAULT nextval('phylonode_phylonode_id_seq'::regclass);


--
-- Name: phylonode_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_dbxref ALTER COLUMN phylonode_dbxref_id SET DEFAULT nextval('phylonode_dbxref_phylonode_dbxref_id_seq'::regclass);


--
-- Name: phylonode_organism_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_organism ALTER COLUMN phylonode_organism_id SET DEFAULT nextval('phylonode_organism_phylonode_organism_id_seq'::regclass);


--
-- Name: phylonode_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_pub ALTER COLUMN phylonode_pub_id SET DEFAULT nextval('phylonode_pub_phylonode_pub_id_seq'::regclass);


--
-- Name: phylonode_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_relationship ALTER COLUMN phylonode_relationship_id SET DEFAULT nextval('phylonode_relationship_phylonode_relationship_id_seq'::regclass);


--
-- Name: phylonodeprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonodeprop ALTER COLUMN phylonodeprop_id SET DEFAULT nextval('phylonodeprop_phylonodeprop_id_seq'::regclass);


--
-- Name: phylotree_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylotree ALTER COLUMN phylotree_id SET DEFAULT nextval('phylotree_phylotree_id_seq'::regclass);


--
-- Name: phylotree_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylotree_pub ALTER COLUMN phylotree_pub_id SET DEFAULT nextval('phylotree_pub_phylotree_pub_id_seq'::regclass);


--
-- Name: project_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project ALTER COLUMN project_id SET DEFAULT nextval('project_project_id_seq'::regclass);


--
-- Name: project_contact_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_contact ALTER COLUMN project_contact_id SET DEFAULT nextval('project_contact_project_contact_id_seq'::regclass);


--
-- Name: project_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_pub ALTER COLUMN project_pub_id SET DEFAULT nextval('project_pub_project_pub_id_seq'::regclass);


--
-- Name: project_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_relationship ALTER COLUMN project_relationship_id SET DEFAULT nextval('project_relationship_project_relationship_id_seq'::regclass);


--
-- Name: projectprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY projectprop ALTER COLUMN projectprop_id SET DEFAULT nextval('projectprop_projectprop_id_seq'::regclass);


--
-- Name: pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub ALTER COLUMN pub_id SET DEFAULT nextval('pub_pub_id_seq'::regclass);


--
-- Name: pub_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub_dbxref ALTER COLUMN pub_dbxref_id SET DEFAULT nextval('pub_dbxref_pub_dbxref_id_seq'::regclass);


--
-- Name: pub_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub_relationship ALTER COLUMN pub_relationship_id SET DEFAULT nextval('pub_relationship_pub_relationship_id_seq'::regclass);


--
-- Name: pubabstract_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pubabstract ALTER COLUMN pubabstract_id SET DEFAULT nextval('pubabstract_pubabstract_id_seq'::regclass);


--
-- Name: pubauthor_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pubauthor ALTER COLUMN pubauthor_id SET DEFAULT nextval('pubauthor_pubauthor_id_seq'::regclass);


--
-- Name: pubprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pubprop ALTER COLUMN pubprop_id SET DEFAULT nextval('pubprop_pubprop_id_seq'::regclass);


--
-- Name: resource_file_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY resource_file ALTER COLUMN resource_file_id SET DEFAULT nextval('resource_file_resource_file_id_seq'::regclass);


--
-- Name: signalp_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY signalp ALTER COLUMN signalp_id SET DEFAULT nextval('signalp_signalp_id_seq'::regclass);


--
-- Name: stock_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock ALTER COLUMN stock_id SET DEFAULT nextval('stock_stock_id_seq'::regclass);


--
-- Name: stock_cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_cvterm ALTER COLUMN stock_cvterm_id SET DEFAULT nextval('stock_cvterm_stock_cvterm_id_seq'::regclass);


--
-- Name: stock_cvtermprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_cvtermprop ALTER COLUMN stock_cvtermprop_id SET DEFAULT nextval('stock_cvtermprop_stock_cvtermprop_id_seq'::regclass);


--
-- Name: stock_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_dbxref ALTER COLUMN stock_dbxref_id SET DEFAULT nextval('stock_dbxref_stock_dbxref_id_seq'::regclass);


--
-- Name: stock_dbxrefprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_dbxrefprop ALTER COLUMN stock_dbxrefprop_id SET DEFAULT nextval('stock_dbxrefprop_stock_dbxrefprop_id_seq'::regclass);


--
-- Name: stock_genotype_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_genotype ALTER COLUMN stock_genotype_id SET DEFAULT nextval('stock_genotype_stock_genotype_id_seq'::regclass);


--
-- Name: stock_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_pub ALTER COLUMN stock_pub_id SET DEFAULT nextval('stock_pub_stock_pub_id_seq'::regclass);


--
-- Name: stock_relationship_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship ALTER COLUMN stock_relationship_id SET DEFAULT nextval('stock_relationship_stock_relationship_id_seq'::regclass);


--
-- Name: stock_relationship_cvterm_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship_cvterm ALTER COLUMN stock_relationship_cvterm_id SET DEFAULT nextval('stock_relationship_cvterm_stock_relationship_cvterm_id_seq'::regclass);


--
-- Name: stock_relationship_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship_pub ALTER COLUMN stock_relationship_pub_id SET DEFAULT nextval('stock_relationship_pub_stock_relationship_pub_id_seq'::regclass);


--
-- Name: stockcollection_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollection ALTER COLUMN stockcollection_id SET DEFAULT nextval('stockcollection_stockcollection_id_seq'::regclass);


--
-- Name: stockcollection_stock_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollection_stock ALTER COLUMN stockcollection_stock_id SET DEFAULT nextval('stockcollection_stock_stockcollection_stock_id_seq'::regclass);


--
-- Name: stockcollectionprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollectionprop ALTER COLUMN stockcollectionprop_id SET DEFAULT nextval('stockcollectionprop_stockcollectionprop_id_seq'::regclass);


--
-- Name: stockprop_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockprop ALTER COLUMN stockprop_id SET DEFAULT nextval('stockprop_stockprop_id_seq'::regclass);


--
-- Name: stockprop_pub_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockprop_pub ALTER COLUMN stockprop_pub_id SET DEFAULT nextval('stockprop_pub_stockprop_pub_id_seq'::regclass);


--
-- Name: synonym_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY synonym ALTER COLUMN synonym_id SET DEFAULT nextval('synonym_synonym_id_seq'::regclass);


--
-- Name: tableinfo_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tableinfo ALTER COLUMN tableinfo_id SET DEFAULT nextval('tableinfo_tableinfo_id_seq'::regclass);


--
-- Name: cds_row_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tmp_cds_handler ALTER COLUMN cds_row_id SET DEFAULT nextval('tmp_cds_handler_cds_row_id_seq'::regclass);


--
-- Name: rel_row_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tmp_cds_handler_relationship ALTER COLUMN rel_row_id SET DEFAULT nextval('tmp_cds_handler_relationship_rel_row_id_seq'::regclass);


--
-- Name: unigene_dbxref_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY unigene_dbxref ALTER COLUMN unigene_dbxref_id SET DEFAULT nextval('unigene_dbxref_unigene_dbxref_id_seq'::regclass);


SET search_path = sgn, pg_catalog;

--
-- Name: accession_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY accession ALTER COLUMN accession_id SET DEFAULT nextval('accession_accession_id_seq'::regclass);


--
-- Name: accession_name_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY accession_names ALTER COLUMN accession_name_id SET DEFAULT nextval('accession_names_accession_name_id_seq'::regclass);


--
-- Name: annotation_target_type_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY annotation_target_type ALTER COLUMN annotation_target_type_id SET DEFAULT nextval('annotation_target_type_annotation_target_type_id_seq'::regclass);


--
-- Name: author_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY authors ALTER COLUMN author_id SET DEFAULT nextval('authors_author_id_seq'::regclass);


--
-- Name: blast_annotation_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_annotations ALTER COLUMN blast_annotation_id SET DEFAULT nextval('blast_annotations_blast_annotation_id_seq'::regclass);


--
-- Name: blast_db_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_db ALTER COLUMN blast_db_id SET DEFAULT nextval('blast_db_blast_db_id_seq'::regclass);


--
-- Name: blast_db_blast_db_group_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_db_blast_db_group ALTER COLUMN blast_db_blast_db_group_id SET DEFAULT nextval('blast_db_blast_db_group_blast_db_blast_db_group_id_seq'::regclass);


--
-- Name: blast_db_group_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_db_group ALTER COLUMN blast_db_group_id SET DEFAULT nextval('blast_db_group_blast_db_group_id_seq'::regclass);


--
-- Name: blast_db_organism_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_db_organism ALTER COLUMN blast_db_organism_id SET DEFAULT nextval('blast_db_organism_blast_db_organism_id_seq'::regclass);


--
-- Name: defline_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_defline ALTER COLUMN defline_id SET DEFAULT nextval('blast_defline_defline_id_seq'::regclass);


--
-- Name: blast_hit_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_hits ALTER COLUMN blast_hit_id SET DEFAULT nextval('blast_hits_blast_hit_id_seq'::regclass);


--
-- Name: blast_target_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_targets ALTER COLUMN blast_target_id SET DEFAULT nextval('blast_targets_blast_target_id_seq'::regclass);


--
-- Name: cds_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY cds ALTER COLUMN cds_id SET DEFAULT nextval('cds_cds_id_seq'::regclass);


--
-- Name: chadoprop_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY chadoprop ALTER COLUMN chadoprop_id SET DEFAULT nextval('chadoprop_chadoprop_id_seq'::regclass);


--
-- Name: clone_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY clone ALTER COLUMN clone_id SET DEFAULT nextval('clone_clone_id_seq'::regclass);


--
-- Name: cloning_vector_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY cloning_vector ALTER COLUMN cloning_vector_id SET DEFAULT nextval('cloning_vector_cloning_vector_id_seq'::regclass);


--
-- Name: common_name_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY common_name ALTER COLUMN common_name_id SET DEFAULT nextval('common_name_common_name_id_seq'::regclass);


--
-- Name: common_nameprop_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY common_nameprop ALTER COLUMN common_nameprop_id SET DEFAULT nextval('common_nameprop_common_nameprop_id_seq'::regclass);


--
-- Name: cos_marker_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY cos_markers ALTER COLUMN cos_marker_id SET DEFAULT nextval('cos_markers_cos_marker_id_seq'::regclass);


--
-- Name: cosii_unigene_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY cosii_ortholog ALTER COLUMN cosii_unigene_id SET DEFAULT nextval('cosii_ortholog_cosii_unigene_id_seq'::regclass);


--
-- Name: cvprop_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY cvprop ALTER COLUMN cvprop_id SET DEFAULT nextval('cvprop_cvprop_id_seq'::regclass);


--
-- Name: lg_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_linkage_groups ALTER COLUMN lg_id SET DEFAULT nextval('deprecated_linkage_groups_lg_id_seq'::regclass);


--
-- Name: map_cross_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_map_cross ALTER COLUMN map_cross_id SET DEFAULT nextval('deprecated_map_cross_map_cross_id_seq'::regclass);


--
-- Name: loc_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_mapdata ALTER COLUMN loc_id SET DEFAULT nextval('deprecated_mapdata_loc_id_seq'::regclass);


--
-- Name: map_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_maps ALTER COLUMN map_id SET DEFAULT nextval('deprecated_maps_map_id_seq'::regclass);


--
-- Name: confidence_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_marker_confidences ALTER COLUMN confidence_id SET DEFAULT nextval('deprecated_marker_confidences_confidence_id_seq'::regclass);


--
-- Name: marker_location_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_marker_locations ALTER COLUMN marker_location_id SET DEFAULT nextval('deprecated_marker_locations_marker_location_id_seq'::regclass);


--
-- Name: marker_type_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_marker_types ALTER COLUMN marker_type_id SET DEFAULT nextval('deprecated_marker_types_marker_type_id_seq'::regclass);


--
-- Name: marker_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_markers ALTER COLUMN marker_id SET DEFAULT nextval('deprecated_markers_marker_id_seq'::regclass);


--
-- Name: derived_from_source_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY derived_from_source ALTER COLUMN derived_from_source_id SET DEFAULT nextval('derived_from_source_derived_from_source_id_seq'::regclass);


--
-- Name: domain_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY domain ALTER COLUMN domain_id SET DEFAULT nextval('domain_domain_id_seq'::regclass);


--
-- Name: domain_match_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY domain_match ALTER COLUMN domain_match_id SET DEFAULT nextval('domain_match_domain_match_id_seq'::regclass);


--
-- Name: enzyme_restriction_sites_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY enzyme_restriction_sites ALTER COLUMN enzyme_restriction_sites_id SET DEFAULT nextval('enzyme_restriction_sites_enzyme_restriction_sites_id_seq'::regclass);


--
-- Name: enzyme_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY enzymes ALTER COLUMN enzyme_id SET DEFAULT nextval('enzymes_enzyme_id_seq'::regclass);


--
-- Name: est_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY est ALTER COLUMN est_id SET DEFAULT nextval('est_est_id_seq'::regclass);


--
-- Name: est_dbxref_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY est_dbxref ALTER COLUMN est_dbxref_id SET DEFAULT nextval('est_dbxref_est_dbxref_id_seq'::regclass);


--
-- Name: embc_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY ests_mapped_by_clone ALTER COLUMN embc_id SET DEFAULT nextval('ests_mapped_by_clone_embc_id_seq'::regclass);


--
-- Name: experiment_type_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY experiment_type ALTER COLUMN experiment_type_id SET DEFAULT nextval('experiment_type_experiment_type_id_seq'::regclass);


--
-- Name: facility_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY facility ALTER COLUMN facility_id SET DEFAULT nextval('facility_facility_id_seq'::regclass);


--
-- Name: family_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY family ALTER COLUMN family_id SET DEFAULT nextval('family_family_id_seq'::regclass);


--
-- Name: family_build_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY family_build ALTER COLUMN family_build_id SET DEFAULT nextval('family_build_family_build_id_seq'::regclass);


--
-- Name: family_member_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY family_member ALTER COLUMN family_member_id SET DEFAULT nextval('family_member_family_member_id_seq'::regclass);


--
-- Name: family_tree_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY family_tree ALTER COLUMN family_tree_id SET DEFAULT nextval('family_tree_family_tree_id_seq'::regclass);


--
-- Name: fish_experimenter_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY fish_experimenter ALTER COLUMN fish_experimenter_id SET DEFAULT nextval('fish_experimenter_fish_experimenter_id_seq'::regclass);


--
-- Name: fish_file_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY fish_file ALTER COLUMN fish_file_id SET DEFAULT nextval('fish_file_fish_file_id_seq'::regclass);


--
-- Name: fish_result_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY fish_result ALTER COLUMN fish_result_id SET DEFAULT nextval('fish_result_fish_result_id_seq'::regclass);


--
-- Name: fish_result_image_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY fish_result_image ALTER COLUMN fish_result_image_id SET DEFAULT nextval('fish_result_image_fish_result_image_id_seq'::regclass);


--
-- Name: go_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY go ALTER COLUMN go_id SET DEFAULT nextval('go_go_id_seq'::regclass);


--
-- Name: group_linkage_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY group_linkage ALTER COLUMN group_linkage_id SET DEFAULT nextval('group_linkage_group_linkage_id_seq'::regclass);


--
-- Name: group_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY groups ALTER COLUMN group_id SET DEFAULT nextval('groups_group_id_seq'::regclass);


--
-- Name: id_linkage_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY id_linkage ALTER COLUMN id_linkage_id SET DEFAULT nextval('id_linkage_id_linkage_id_seq'::regclass);


--
-- Name: interpro_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY interpro ALTER COLUMN interpro_id SET DEFAULT nextval('interpro_interpro_id_seq'::regclass);


--
-- Name: interpro_go_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY interpro_go ALTER COLUMN interpro_go_id SET DEFAULT nextval('interpro_go_interpro_go_id_seq'::regclass);


--
-- Name: library_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY library ALTER COLUMN library_id SET DEFAULT nextval('library_library_id_seq'::regclass);


--
-- Name: lg_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY linkage_group ALTER COLUMN lg_id SET DEFAULT nextval('linkage_group_lg_id_seq'::regclass);


--
-- Name: loc_type_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY loc_types ALTER COLUMN loc_type_id SET DEFAULT nextval('loc_types_loc_type_id_seq'::regclass);


--
-- Name: manual_annotations_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY manual_annotations ALTER COLUMN manual_annotations_id SET DEFAULT nextval('manual_annotations_manual_annotations_id_seq'::regclass);


--
-- Name: censor_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY manual_censor_reasons ALTER COLUMN censor_id SET DEFAULT nextval('manual_censor_reasons_censor_id_seq'::regclass);


--
-- Name: map_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY map ALTER COLUMN map_id SET DEFAULT nextval('map_map_id_seq'::regclass);


--
-- Name: map_version_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY map_version ALTER COLUMN map_version_id SET DEFAULT nextval('map_version_map_version_id_seq'::regclass);


--
-- Name: marker_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker ALTER COLUMN marker_id SET DEFAULT nextval('marker_marker_id_seq'::regclass);


--
-- Name: alias_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_alias ALTER COLUMN alias_id SET DEFAULT nextval('marker_alias_alias_id_seq'::regclass);


--
-- Name: marker_collectible_dummy_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_collectible ALTER COLUMN marker_collectible_dummy_id SET DEFAULT nextval('marker_collectible_marker_collectible_dummy_id_seq'::regclass);


--
-- Name: mc_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_collection ALTER COLUMN mc_id SET DEFAULT nextval('marker_collection_mc_id_seq'::regclass);


--
-- Name: confidence_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_confidence ALTER COLUMN confidence_id SET DEFAULT nextval('marker_confidence_confidence_id_seq'::regclass);


--
-- Name: marker_derived_dummy_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_derived_from ALTER COLUMN marker_derived_dummy_id SET DEFAULT nextval('marker_derived_from_marker_derived_dummy_id_seq'::regclass);


--
-- Name: marker_experiment_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_experiment ALTER COLUMN marker_experiment_id SET DEFAULT nextval('marker_experiment_marker_experiment_id_seq'::regclass);


--
-- Name: location_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_location ALTER COLUMN location_id SET DEFAULT nextval('marker_location_location_id_seq'::regclass);


--
-- Name: metadata_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY metadata ALTER COLUMN metadata_id SET DEFAULT nextval('metadata_metadata_id_seq'::regclass);


--
-- Name: microarray_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY microarray ALTER COLUMN microarray_id SET DEFAULT nextval('microarray_microarray_id_seq'::regclass);


--
-- Name: misc_unique_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY misc ALTER COLUMN misc_unique_id SET DEFAULT nextval('misc_misc_unique_id_seq'::regclass);


--
-- Name: organism_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY organism ALTER COLUMN organism_id SET DEFAULT nextval('organism_organism_id_seq'::regclass);


--
-- Name: organismgroup_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY organismgroup ALTER COLUMN organismgroup_id SET DEFAULT nextval('organismgroup_organismgroup_id_seq'::regclass);


--
-- Name: organismgroup_member_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY organismgroup_member ALTER COLUMN organismgroup_member_id SET DEFAULT nextval('organismgroup_member_organismgroup_member_id_seq'::regclass);


--
-- Name: pid; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY p_markers ALTER COLUMN pid SET DEFAULT nextval('p_markers_pid_seq'::regclass);


--
-- Name: pcr_exp_accession_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_exp_accession ALTER COLUMN pcr_exp_accession_id SET DEFAULT nextval('pcr_exp_accession_pcr_exp_accession_id_seq'::regclass);


--
-- Name: pcr_experiment_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_experiment ALTER COLUMN pcr_experiment_id SET DEFAULT nextval('pcr_experiment_pcr_experiment_id_seq'::regclass);


--
-- Name: pcr_experiment_sequence_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_experiment_sequence ALTER COLUMN pcr_experiment_sequence_id SET DEFAULT nextval('pcr_experiment_sequence_pcr_experiment_sequence_id_seq'::regclass);


--
-- Name: pcr_product_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_product ALTER COLUMN pcr_product_id SET DEFAULT nextval('pcr_product_pcr_product_id_seq'::regclass);


--
-- Name: primer_unigene_match_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY primer_unigene_match ALTER COLUMN primer_unigene_match_id SET DEFAULT nextval('primer_unigene_match_primer_unigene_match_id_seq'::regclass);


--
-- Name: qc_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY qc_report ALTER COLUMN qc_id SET DEFAULT nextval('qc_report_qc_id_seq'::regclass);


--
-- Name: rflp_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY rflp_markers ALTER COLUMN rflp_id SET DEFAULT nextval('rflp_markers_rflp_id_seq'::regclass);


--
-- Name: seq_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY rflp_sequences ALTER COLUMN seq_id SET DEFAULT nextval('rflp_sequences_seq_id_seq'::regclass);


--
-- Name: rflp_unigene_assoc_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY rflp_unigene_associations ALTER COLUMN rflp_unigene_assoc_id SET DEFAULT nextval('rflp_unigene_associations_rflp_unigene_assoc_id_seq'::regclass);


--
-- Name: read_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY seqread ALTER COLUMN read_id SET DEFAULT nextval('seqread_read_id_seq'::regclass);


--
-- Name: sequence_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sequence ALTER COLUMN sequence_id SET DEFAULT nextval('sequence_sequence_id_seq'::regclass);


--
-- Name: snp_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY snp ALTER COLUMN snp_id SET DEFAULT nextval('snp_snp_id_seq'::regclass);


--
-- Name: snp_file_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY snp_file ALTER COLUMN snp_file_id SET DEFAULT nextval('snp_file_snp_file_id_seq'::regclass);


--
-- Name: snpprop_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY snpprop ALTER COLUMN snpprop_id SET DEFAULT nextval('snpprop_snpprop_id_seq'::regclass);


--
-- Name: ssr_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY ssr ALTER COLUMN ssr_id SET DEFAULT nextval('ssr_ssr_id_seq'::regclass);


--
-- Name: ssr_primer_unigene_match_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY ssr_primer_unigene_matches ALTER COLUMN ssr_primer_unigene_match_id SET DEFAULT nextval('ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq'::regclass);


--
-- Name: repeat_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY ssr_repeats ALTER COLUMN repeat_id SET DEFAULT nextval('ssr_repeats_repeat_id_seq'::regclass);


--
-- Name: submit_user_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY submit_user ALTER COLUMN submit_user_id SET DEFAULT nextval('submit_user_submit_user_id_seq'::regclass);


--
-- Name: tax_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY taxonomy ALTER COLUMN tax_id SET DEFAULT nextval('taxonomy_tax_id_seq'::regclass);


--
-- Name: tcc_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY temp_caps_correspondence ALTER COLUMN tcc_id SET DEFAULT nextval('temp_caps_correspondence_tcc_id_seq'::regclass);


--
-- Name: tmc_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY temp_map_correspondence ALTER COLUMN tmc_id SET DEFAULT nextval('temp_map_correspondence_tmc_id_seq'::regclass);


--
-- Name: tmc_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY temp_marker_correspondence ALTER COLUMN tmc_id SET DEFAULT nextval('temp_marker_correspondence_tmc_id_seq'::regclass);


--
-- Name: tcindex_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY tigrtc_index ALTER COLUMN tcindex_id SET DEFAULT nextval('tigrtc_index_tcindex_id_seq'::regclass);


--
-- Name: tigrtc_membership_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY tigrtc_membership ALTER COLUMN tigrtc_membership_id SET DEFAULT nextval('tigrtc_membership_tigrtc_membership_id_seq'::regclass);


--
-- Name: tigrtc_tracking_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY tigrtc_tracking ALTER COLUMN tigrtc_tracking_id SET DEFAULT nextval('tigrtc_tracking_tigrtc_tracking_id_seq'::regclass);


--
-- Name: tm_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY tm_markers ALTER COLUMN tm_id SET DEFAULT nextval('tm_markers_tm_id_seq'::regclass);


--
-- Name: feature_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY trim_feature ALTER COLUMN feature_id SET DEFAULT nextval('trim_feature_feature_id_seq'::regclass);


--
-- Name: trim_type_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY trim_feature_types ALTER COLUMN trim_type_id SET DEFAULT nextval('trim_feature_types_trim_type_id_seq'::regclass);


--
-- Name: type_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY types ALTER COLUMN type_id SET DEFAULT nextval('types_type_id_seq'::regclass);


--
-- Name: unigene_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY unigene ALTER COLUMN unigene_id SET DEFAULT nextval('unigene_unigene_id_seq'::regclass);


--
-- Name: unigene_build_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY unigene_build ALTER COLUMN unigene_build_id SET DEFAULT nextval('unigene_build_unigene_build_id_seq'::regclass);


--
-- Name: consensi_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY unigene_consensi ALTER COLUMN consensi_id SET DEFAULT nextval('unigene_consensi_consensi_id_seq'::regclass);


--
-- Name: unigene_member_id; Type: DEFAULT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY unigene_member ALTER COLUMN unigene_member_id SET DEFAULT nextval('unigene_member_unigene_member_id_seq'::regclass);


SET search_path = sgn_people, pg_catalog;

--
-- Name: bac_status_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY bac_status ALTER COLUMN bac_status_id SET DEFAULT nextval('bac_status_bac_status_id_seq'::regclass);


--
-- Name: bac_status_log_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY bac_status_log ALTER COLUMN bac_status_log_id SET DEFAULT nextval('bac_status_log_bac_status_log_id_seq'::regclass);


--
-- Name: sp_clone_il_mapping_bin_log_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY clone_il_mapping_bin_log ALTER COLUMN sp_clone_il_mapping_bin_log_id SET DEFAULT nextval('clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq'::regclass);


--
-- Name: clone_validation_log_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY clone_validation_log ALTER COLUMN clone_validation_log_id SET DEFAULT nextval('clone_validation_log_clone_validation_log_id_seq'::regclass);


--
-- Name: clone_verification_log_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY clone_verification_log ALTER COLUMN clone_verification_log_id SET DEFAULT nextval('clone_verification_log_clone_verification_log_id_seq'::regclass);


--
-- Name: forum_post_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY forum_post ALTER COLUMN forum_post_id SET DEFAULT nextval('forum_post_forum_post_id_seq'::regclass);


--
-- Name: forum_topic_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY forum_topic ALTER COLUMN forum_topic_id SET DEFAULT nextval('forum_topic_forum_topic_id_seq'::regclass);


--
-- Name: list_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY list ALTER COLUMN list_id SET DEFAULT nextval('list_list_id_seq'::regclass);


--
-- Name: list_item_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY list_item ALTER COLUMN list_item_id SET DEFAULT nextval('list_item_list_item_id_seq'::regclass);


--
-- Name: sp_clone_il_mapping_segment_log_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_clone_il_mapping_segment_log ALTER COLUMN sp_clone_il_mapping_segment_log_id SET DEFAULT nextval('sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq'::regclass);


--
-- Name: sp_group_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_group ALTER COLUMN sp_group_id SET DEFAULT nextval('sp_group_sp_group_id_seq'::regclass);


--
-- Name: sp_login_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_login_old ALTER COLUMN sp_login_id SET DEFAULT nextval('sp_login_old_sp_login_id_seq'::regclass);


--
-- Name: organism_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_organisms ALTER COLUMN organism_id SET DEFAULT nextval('sp_organisms_organism_id_seq'::regclass);


--
-- Name: sp_organization_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_organization ALTER COLUMN sp_organization_id SET DEFAULT nextval('sp_organization_sp_organization_id_seq'::regclass);


--
-- Name: sp_organization_person_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_organization_person ALTER COLUMN sp_organization_person_id SET DEFAULT nextval('sp_organization_person_sp_organization_person_id_seq'::regclass);


--
-- Name: sp_paper_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_papers ALTER COLUMN sp_paper_id SET DEFAULT nextval('sp_papers_sp_paper_id_seq'::regclass);


--
-- Name: sp_person_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_person ALTER COLUMN sp_person_id SET DEFAULT nextval('sp_person_sp_person_id_seq'::regclass);


--
-- Name: sp_person_organisms_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_person_organisms ALTER COLUMN sp_person_organisms_id SET DEFAULT nextval('sp_person_organisms_sp_person_organisms_id_seq'::regclass);


--
-- Name: sp_person_role_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_person_roles ALTER COLUMN sp_person_role_id SET DEFAULT nextval('sp_person_roles_sp_person_role_id_seq'::regclass);


--
-- Name: sp_project_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_project ALTER COLUMN sp_project_id SET DEFAULT nextval('sp_project_sp_project_id_seq'::regclass);


--
-- Name: sp_project_il_mapping_clone_log_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_project_il_mapping_clone_log ALTER COLUMN sp_project_il_mapping_clone_log_id SET DEFAULT nextval('sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq'::regclass);


--
-- Name: sp_project_organization_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_project_organization ALTER COLUMN sp_project_organization_id SET DEFAULT nextval('sp_project_organization_sp_project_organization_id_seq'::regclass);


--
-- Name: sp_project_person_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_project_person ALTER COLUMN sp_project_person_id SET DEFAULT nextval('sp_project_person_sp_project_person_id_seq'::regclass);


--
-- Name: sp_role_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_roles ALTER COLUMN sp_role_id SET DEFAULT nextval('sp_roles_sp_role_id_seq'::regclass);


--
-- Name: user_map_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY user_map ALTER COLUMN user_map_id SET DEFAULT nextval('user_map_user_map_id_seq'::regclass);


--
-- Name: user_map_data_id; Type: DEFAULT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY user_map_data ALTER COLUMN user_map_data_id SET DEFAULT nextval('user_map_data_user_map_data_id_seq'::regclass);


SET search_path = sgn_submit, pg_catalog;

--
-- Name: facility_id; Type: DEFAULT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY facility ALTER COLUMN facility_id SET DEFAULT nextval('facility_facility_id_seq'::regclass);


--
-- Name: library_id; Type: DEFAULT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY library ALTER COLUMN library_id SET DEFAULT nextval('library_library_id_seq'::regclass);


--
-- Name: submit_read_id; Type: DEFAULT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY seqread ALTER COLUMN submit_read_id SET DEFAULT nextval('seqread_submit_read_id_seq'::regclass);


--
-- Name: submit_user_id; Type: DEFAULT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY submit_user ALTER COLUMN submit_user_id SET DEFAULT nextval('submit_user_submit_user_id_seq'::regclass);


SET search_path = tomato_gff, pg_catalog;

--
-- Name: fattribute_id; Type: DEFAULT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY fattribute ALTER COLUMN fattribute_id SET DEFAULT nextval('fattribute_fattribute_id_seq'::regclass);


--
-- Name: fid; Type: DEFAULT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY fdata ALTER COLUMN fid SET DEFAULT nextval('fdata_fid_seq'::regclass);


--
-- Name: gid; Type: DEFAULT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY fgroup ALTER COLUMN gid SET DEFAULT nextval('fgroup_gid_seq'::regclass);


--
-- Name: ftypeid; Type: DEFAULT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY ftype ALTER COLUMN ftypeid SET DEFAULT nextval('ftype_ftypeid_seq'::regclass);


SET search_path = annotation, pg_catalog;

--
-- Data for Name: annotation; Type: TABLE DATA; Schema: annotation; Owner: postgres
--

COPY annotation (annot_id, id, name, type, date, person_id, "timestamp", version, history_id) FROM stdin;
\.


--
-- Name: annotation_annot_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('annotation_annot_id_seq', 1, false);


--
-- Data for Name: comment; Type: TABLE DATA; Schema: annotation; Owner: postgres
--

COPY comment (comment_id, text, person_id, date, table_name, table_id) FROM stdin;
\.


--
-- Name: comment_comment_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('comment_comment_id_seq', 1, false);


--
-- Data for Name: comp_analysis; Type: TABLE DATA; Schema: annotation; Owner: postgres
--

COPY comp_analysis (ca_id, program_id, db_id, date, person_id, "timestamp", version) FROM stdin;
\.


--
-- Name: comp_analysis_ca_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('comp_analysis_ca_id_seq', 1, false);


--
-- Data for Name: dblist; Type: TABLE DATA; Schema: annotation; Owner: postgres
--

COPY dblist (db_id, name) FROM stdin;
\.


--
-- Name: dblist_db_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('dblist_db_id_seq', 1, false);


--
-- Data for Name: dbxref; Type: TABLE DATA; Schema: annotation; Owner: postgres
--

COPY dbxref (dbxref_id, db_id, db_key, table_name, table_id) FROM stdin;
\.


--
-- Name: dbxref_dbxref_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('dbxref_dbxref_id_seq', 1, false);


--
-- Data for Name: feature_set; Type: TABLE DATA; Schema: annotation; Owner: postgres
--

COPY feature_set (f_set_id, annot_id, name, type, cdna_seq_id, cds_seq_id, prot_seq_id, description, date, person_id, "timestamp", version, history_id) FROM stdin;
\.


--
-- Name: feature_set_f_set_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('feature_set_f_set_id_seq', 1, false);


--
-- Data for Name: feature_span; Type: TABLE DATA; Schema: annotation; Owner: postgres
--

COPY feature_span (f_span_id, f_set_id, type) FROM stdin;
\.


--
-- Name: feature_span_f_span_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('feature_span_f_span_id_seq', 1, false);


--
-- Data for Name: organism; Type: TABLE DATA; Schema: annotation; Owner: postgres
--

COPY organism (organism_id, name) FROM stdin;
\.


--
-- Name: organism_organism_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('organism_organism_id_seq', 1, false);


--
-- Data for Name: output; Type: TABLE DATA; Schema: annotation; Owner: postgres
--

COPY output (output_id, r_span_id, type, value) FROM stdin;
\.


--
-- Name: output_output_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('output_output_id_seq', 1, false);


--
-- Data for Name: person; Type: TABLE DATA; Schema: annotation; Owner: postgres
--

COPY person (person_id, name) FROM stdin;
\.


--
-- Name: person_person_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('person_person_id_seq', 1, false);


--
-- Data for Name: program; Type: TABLE DATA; Schema: annotation; Owner: postgres
--

COPY program (program_id, name) FROM stdin;
\.


--
-- Name: program_program_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('program_program_id_seq', 1, false);


--
-- Data for Name: property; Type: TABLE DATA; Schema: annotation; Owner: postgres
--

COPY property (property_id, type, value, table_name, table_id) FROM stdin;
\.


--
-- Name: property_property_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('property_property_id_seq', 1, false);


--
-- Data for Name: result_set; Type: TABLE DATA; Schema: annotation; Owner: postgres
--

COPY result_set (r_set_id, ca_id, name, "timestamp") FROM stdin;
\.


--
-- Name: result_set_r_set_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('result_set_r_set_id_seq', 1, false);


--
-- Data for Name: result_span; Type: TABLE DATA; Schema: annotation; Owner: postgres
--

COPY result_span (r_span_id, r_set_id, type, score, output_id) FROM stdin;
\.


--
-- Name: result_span_r_span_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('result_span_r_span_id_seq', 1, false);


--
-- Data for Name: seq; Type: TABLE DATA; Schema: annotation; Owner: postgres
--

COPY seq (seq_id, id, version, length, md5checksum, name, description, organism_id, type, residues, genbank_gi, person_id, clone_id) FROM stdin;
\.


--
-- Data for Name: seq_error; Type: TABLE DATA; Schema: annotation; Owner: postgres
--

COPY seq_error (seq_err_id, seq_id, type, "position") FROM stdin;
\.


--
-- Name: seq_error_seq_err_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('seq_error_seq_err_id_seq', 1, false);


--
-- Data for Name: seq_relationship; Type: TABLE DATA; Schema: annotation; Owner: postgres
--

COPY seq_relationship (seq_rel_id, seq_id, type, alignment, start, "end", strand, table_name, table_id) FROM stdin;
\.


--
-- Name: seq_relationship_seq_rel_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('seq_relationship_seq_rel_id_seq', 1, false);


--
-- Name: seq_seq_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('seq_seq_id_seq', 1, false);


--
-- Data for Name: synonym; Type: TABLE DATA; Schema: annotation; Owner: postgres
--

COPY synonym (synonym_id, name, table_name, table_id) FROM stdin;
\.


--
-- Name: synonym_synonym_id_seq; Type: SEQUENCE SET; Schema: annotation; Owner: postgres
--

SELECT pg_catalog.setval('synonym_synonym_id_seq', 1, false);


SET search_path = biosource, pg_catalog;

--
-- Data for Name: bs_protocol; Type: TABLE DATA; Schema: biosource; Owner: postgres
--

COPY bs_protocol (protocol_id, protocol_name, protocol_type, description, metadata_id) FROM stdin;
\.


--
-- Name: bs_protocol_protocol_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('bs_protocol_protocol_id_seq', 1, false);


--
-- Data for Name: bs_protocol_pub; Type: TABLE DATA; Schema: biosource; Owner: postgres
--

COPY bs_protocol_pub (protocol_pub_id, protocol_id, pub_id, metadata_id) FROM stdin;
\.


--
-- Name: bs_protocol_pub_protocol_pub_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('bs_protocol_pub_protocol_pub_id_seq', 1, false);


--
-- Data for Name: bs_protocol_step; Type: TABLE DATA; Schema: biosource; Owner: postgres
--

COPY bs_protocol_step (protocol_step_id, protocol_id, step, action, execution, tool_id, begin_date, end_date, location, metadata_id) FROM stdin;
\.


--
-- Data for Name: bs_protocol_step_dbxref; Type: TABLE DATA; Schema: biosource; Owner: postgres
--

COPY bs_protocol_step_dbxref (protocol_step_dbxref_id, protocol_step_id, dbxref_id, metadata_id) FROM stdin;
\.


--
-- Name: bs_protocol_step_dbxref_protocol_step_dbxref_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('bs_protocol_step_dbxref_protocol_step_dbxref_id_seq', 1, false);


--
-- Name: bs_protocol_step_protocol_step_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('bs_protocol_step_protocol_step_id_seq', 1, false);


--
-- Data for Name: bs_sample; Type: TABLE DATA; Schema: biosource; Owner: postgres
--

COPY bs_sample (sample_id, sample_name, sample_type, alternative_name, type_id, description, organism_id, stock_id, protocol_id, contact_id, metadata_id) FROM stdin;
\.


--
-- Data for Name: bs_sample_cvterm; Type: TABLE DATA; Schema: biosource; Owner: postgres
--

COPY bs_sample_cvterm (sample_cvterm_id, sample_id, cvterm_id, metadata_id) FROM stdin;
\.


--
-- Name: bs_sample_cvterm_sample_cvterm_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('bs_sample_cvterm_sample_cvterm_id_seq', 1, false);


--
-- Data for Name: bs_sample_dbxref; Type: TABLE DATA; Schema: biosource; Owner: postgres
--

COPY bs_sample_dbxref (sample_dbxref_id, sample_id, dbxref_id, metadata_id) FROM stdin;
\.


--
-- Name: bs_sample_dbxref_sample_dbxref_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('bs_sample_dbxref_sample_dbxref_id_seq', 1, false);


--
-- Data for Name: bs_sample_element; Type: TABLE DATA; Schema: biosource; Owner: postgres
--

COPY bs_sample_element (sample_element_id, sample_element_name, alternative_name, sample_id, description, organism_id, stock_id, protocol_id, metadata_id) FROM stdin;
\.


--
-- Data for Name: bs_sample_element_cvterm; Type: TABLE DATA; Schema: biosource; Owner: postgres
--

COPY bs_sample_element_cvterm (sample_element_cvterm_id, sample_element_id, cvterm_id, metadata_id) FROM stdin;
\.


--
-- Name: bs_sample_element_cvterm_sample_element_cvterm_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('bs_sample_element_cvterm_sample_element_cvterm_id_seq', 1, false);


--
-- Data for Name: bs_sample_element_dbxref; Type: TABLE DATA; Schema: biosource; Owner: postgres
--

COPY bs_sample_element_dbxref (sample_element_dbxref_id, sample_element_id, dbxref_id, metadata_id) FROM stdin;
\.


--
-- Name: bs_sample_element_dbxref_sample_element_dbxref_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('bs_sample_element_dbxref_sample_element_dbxref_id_seq', 1, false);


--
-- Data for Name: bs_sample_element_file; Type: TABLE DATA; Schema: biosource; Owner: postgres
--

COPY bs_sample_element_file (sample_element_file_id, sample_element_id, file_id, metadata_id) FROM stdin;
\.


--
-- Name: bs_sample_element_file_sample_element_file_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('bs_sample_element_file_sample_element_file_id_seq', 1, false);


--
-- Data for Name: bs_sample_element_relation; Type: TABLE DATA; Schema: biosource; Owner: postgres
--

COPY bs_sample_element_relation (sample_element_relation_id, sample_element_id_a, sample_element_id_b, relation_type, metadata_id) FROM stdin;
\.


--
-- Name: bs_sample_element_relation_sample_element_relation_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('bs_sample_element_relation_sample_element_relation_id_seq', 1, false);


--
-- Name: bs_sample_element_sample_element_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('bs_sample_element_sample_element_id_seq', 1, false);


--
-- Data for Name: bs_sample_file; Type: TABLE DATA; Schema: biosource; Owner: postgres
--

COPY bs_sample_file (sample_file_id, sample_id, file_id, metadata_id) FROM stdin;
\.


--
-- Name: bs_sample_file_sample_file_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('bs_sample_file_sample_file_id_seq', 1, false);


--
-- Data for Name: bs_sample_pub; Type: TABLE DATA; Schema: biosource; Owner: postgres
--

COPY bs_sample_pub (sample_pub_id, sample_id, pub_id, metadata_id) FROM stdin;
\.


--
-- Name: bs_sample_pub_sample_pub_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('bs_sample_pub_sample_pub_id_seq', 1, false);


--
-- Data for Name: bs_sample_relationship; Type: TABLE DATA; Schema: biosource; Owner: postgres
--

COPY bs_sample_relationship (sample_relationship_id, subject_id, object_id, type_id, value, rank, metadata_id) FROM stdin;
\.


--
-- Name: bs_sample_relationship_sample_relationship_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('bs_sample_relationship_sample_relationship_id_seq', 1, false);


--
-- Name: bs_sample_sample_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('bs_sample_sample_id_seq', 1, false);


--
-- Data for Name: bs_tool; Type: TABLE DATA; Schema: biosource; Owner: postgres
--

COPY bs_tool (tool_id, tool_name, tool_version, tool_type, tool_description, tool_weblink, file_id, metadata_id) FROM stdin;
\.


--
-- Data for Name: bs_tool_pub; Type: TABLE DATA; Schema: biosource; Owner: postgres
--

COPY bs_tool_pub (tool_pub_id, tool_id, pub_id, metadata_id) FROM stdin;
\.


--
-- Name: bs_tool_pub_tool_pub_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('bs_tool_pub_tool_pub_id_seq', 1, false);


--
-- Name: bs_tool_tool_id_seq; Type: SEQUENCE SET; Schema: biosource; Owner: postgres
--

SELECT pg_catalog.setval('bs_tool_tool_id_seq', 1, false);


SET search_path = gem, pg_catalog;

--
-- Data for Name: ge_cluster_analysis; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_cluster_analysis (cluster_analysis_id, experiment_analysis_group_id, methodology, protocol_id, description, correlation_analysis_id, metadata_id) FROM stdin;
\.


--
-- Name: ge_cluster_analysis_cluster_analysis_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_cluster_analysis_cluster_analysis_id_seq', 1, false);


--
-- Data for Name: ge_cluster_member; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_cluster_member (cluster_member_id, template_id, cluster_profile_id, metadata_id) FROM stdin;
\.


--
-- Name: ge_cluster_member_cluster_member_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_cluster_member_cluster_member_id_seq', 1, false);


--
-- Data for Name: ge_cluster_profile; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_cluster_profile (cluster_profile_id, cluster_analysis_id, member_nr, file_id, metadata_id) FROM stdin;
\.


--
-- Name: ge_cluster_profile_cluster_profile_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_cluster_profile_cluster_profile_id_seq', 1, false);


--
-- Data for Name: ge_correlation_analysis; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_correlation_analysis (correlation_analysis_id, experiment_analysis_group_id, methodology, description, metadata_id) FROM stdin;
\.


--
-- Name: ge_correlation_analysis_correlation_analysis_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_correlation_analysis_correlation_analysis_id_seq', 1, false);


--
-- Data for Name: ge_correlation_member; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_correlation_member (correlation_member_id, correlation_analysis_id, template_a_id, template_b_id, correlation_value, correlation_type, dataset_id, metadata_id) FROM stdin;
\.


--
-- Name: ge_correlation_member_correlation_member_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_correlation_member_correlation_member_id_seq', 1, false);


--
-- Data for Name: ge_data_analysis_process; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_data_analysis_process (data_analysis_process_id, process_type, target_id, source_dataset_id, result_dataset_id, file_id, metadata_id) FROM stdin;
\.


--
-- Name: ge_data_analysis_process_data_analysis_process_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_data_analysis_process_data_analysis_process_id_seq', 1, false);


--
-- Data for Name: ge_diff_expression; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_diff_expression (diff_expression_id, experiment_analysis_group_id, method, stat_significance_cutoff, stat_significance_type, metadata_id) FROM stdin;
\.


--
-- Name: ge_diff_expression_diff_expression_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_diff_expression_diff_expression_id_seq', 1, false);


--
-- Data for Name: ge_experiment; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_experiment (experiment_id, experiment_name, experimental_design_id, replicates_nr, colour_nr, description, contact_id, metadata_id) FROM stdin;
\.


--
-- Data for Name: ge_experiment_analysis_group; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_experiment_analysis_group (experiment_analysis_group_id, group_name, group_description, metadata_id) FROM stdin;
\.


--
-- Name: ge_experiment_analysis_group_experiment_analysis_group_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_experiment_analysis_group_experiment_analysis_group_id_seq', 1, false);


--
-- Data for Name: ge_experiment_analysis_member; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_experiment_analysis_member (experiment_analysis_member_id, experiment_analysis_group_id, experiment_id, metadata_id) FROM stdin;
\.


--
-- Name: ge_experiment_analysis_member_experiment_analysis_member_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_experiment_analysis_member_experiment_analysis_member_id_seq', 1, false);


--
-- Data for Name: ge_experiment_dbxref; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_experiment_dbxref (experiment_dbxref_id, experiment_id, dbxref_id, metadata_id) FROM stdin;
\.


--
-- Name: ge_experiment_dbxref_experiment_dbxref_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_experiment_dbxref_experiment_dbxref_id_seq', 1, false);


--
-- Name: ge_experiment_experiment_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_experiment_experiment_id_seq', 1, false);


--
-- Data for Name: ge_experimental_design; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_experimental_design (experimental_design_id, experimental_design_name, description, design_type, metadata_id) FROM stdin;
\.


--
-- Data for Name: ge_experimental_design_dbxref; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_experimental_design_dbxref (experimental_design_dbxref_id, experimental_design_id, dbxref_id, metadata_id) FROM stdin;
\.


--
-- Name: ge_experimental_design_dbxref_experimental_design_dbxref_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_experimental_design_dbxref_experimental_design_dbxref_id_seq', 1, false);


--
-- Name: ge_experimental_design_experimental_design_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_experimental_design_experimental_design_id_seq', 1, false);


--
-- Data for Name: ge_experimental_design_pub; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_experimental_design_pub (experimental_design_pub_id, experimental_design_id, pub_id, metadata_id) FROM stdin;
\.


--
-- Name: ge_experimental_design_pub_experimental_design_pub_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_experimental_design_pub_experimental_design_pub_id_seq', 1, false);


--
-- Data for Name: ge_expression_by_experiment; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_expression_by_experiment (expression_by_experiment_id, experiment_id, template_id, replicates_used, mean, median, standard_desviation, coefficient_of_variance, dataset_id, metadata_id) FROM stdin;
\.


--
-- Name: ge_expression_by_experiment_expression_by_experiment_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_expression_by_experiment_expression_by_experiment_id_seq', 1, false);


--
-- Data for Name: ge_fluorescanning; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_fluorescanning (fluorescanning_id, hybridization_id, protocol_id, file_id, dbxref_id, metadata_id) FROM stdin;
\.


--
-- Name: ge_fluorescanning_fluorescanning_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_fluorescanning_fluorescanning_id_seq', 1, false);


--
-- Data for Name: ge_hybridization; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_hybridization (hybridization_id, target_id, platform_id, platform_batch, protocol_id, metadata_id) FROM stdin;
\.


--
-- Name: ge_hybridization_hybridization_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_hybridization_hybridization_id_seq', 1, false);


--
-- Data for Name: ge_platform; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_platform (platform_id, technology_type_id, platform_name, description, contact_id, metadata_id) FROM stdin;
\.


--
-- Data for Name: ge_platform_dbxref; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_platform_dbxref (platform_dbxref_id, platform_id, dbxref_id, metadata_id) FROM stdin;
\.


--
-- Name: ge_platform_dbxref_platform_dbxref_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_platform_dbxref_platform_dbxref_id_seq', 1, false);


--
-- Data for Name: ge_platform_design; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_platform_design (platform_design_id, platform_id, sample_id, metadata_id) FROM stdin;
\.


--
-- Name: ge_platform_design_platform_design_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_platform_design_platform_design_id_seq', 1, false);


--
-- Name: ge_platform_platform_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_platform_platform_id_seq', 1, false);


--
-- Data for Name: ge_platform_pub; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_platform_pub (platform_pub_id, platform_id, pub_id, metadata_id) FROM stdin;
\.


--
-- Name: ge_platform_pub_platform_pub_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_platform_pub_platform_pub_id_seq', 1, false);


--
-- Data for Name: ge_probe; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_probe (probe_id, platform_id, probe_name, probe_type, sequence_file_id, template_id, template_start, template_end, metadata_id) FROM stdin;
\.


--
-- Data for Name: ge_probe_expression; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_probe_expression (probe_expression_id, target_element_id, probe_id, signal, signal_type, background, background_type, flag, dataset_id, metadata_id) FROM stdin;
\.


--
-- Name: ge_probe_expression_probe_expression_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_probe_expression_probe_expression_id_seq', 1, false);


--
-- Name: ge_probe_probe_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_probe_probe_id_seq', 1, false);


--
-- Data for Name: ge_probe_spot; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_probe_spot (probe_spot_id, probe_id, spot_name, metadata_id) FROM stdin;
\.


--
-- Data for Name: ge_probe_spot_coordinate; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_probe_spot_coordinate (probe_spot_coordinate_id, probe_spot_id, coordinate_type, coordinate_value, metadata_id) FROM stdin;
\.


--
-- Name: ge_probe_spot_coordinate_probe_spot_coordinate_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_probe_spot_coordinate_probe_spot_coordinate_id_seq', 1, false);


--
-- Name: ge_probe_spot_probe_spot_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_probe_spot_probe_spot_id_seq', 1, false);


--
-- Data for Name: ge_profile_element; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_profile_element (profile_element_id, cluster_profile_id, experiment_id, experiment_predefined_position, element_mean_value, element_median_value, element_sd, element_type, previous_element_ratio, metadata_id) FROM stdin;
\.


--
-- Name: ge_profile_element_profile_element_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_profile_element_profile_element_id_seq', 1, false);


--
-- Data for Name: ge_target; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_target (target_id, target_name, experiment_id, metadata_id) FROM stdin;
\.


--
-- Data for Name: ge_target_dbxref; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_target_dbxref (target_dbxref_id, target_id, dbxref_id, metadata_id) FROM stdin;
\.


--
-- Name: ge_target_dbxref_target_dbxref_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_target_dbxref_target_dbxref_id_seq', 1, false);


--
-- Data for Name: ge_target_element; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_target_element (target_element_id, target_element_name, target_id, sample_id, protocol_id, dye, metadata_id) FROM stdin;
\.


--
-- Name: ge_target_element_target_element_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_target_element_target_element_id_seq', 1, false);


--
-- Name: ge_target_target_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_target_target_id_seq', 1, false);


--
-- Data for Name: ge_technology_type; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_technology_type (technology_type_id, technology_name, description, metadata_id) FROM stdin;
\.


--
-- Name: ge_technology_type_technology_type_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_technology_type_technology_type_id_seq', 1, false);


--
-- Data for Name: ge_template; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_template (template_id, template_name, template_type, platform_id, metadata_id) FROM stdin;
\.


--
-- Data for Name: ge_template_dbiref; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_template_dbiref (template_dbiref_id, template_id, dbiref_id, metadata_id) FROM stdin;
\.


--
-- Name: ge_template_dbiref_template_dbiref_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_template_dbiref_template_dbiref_id_seq', 1, false);


--
-- Data for Name: ge_template_dbxref; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_template_dbxref (template_dbxref_id, template_id, dbxref_id, metadata_id) FROM stdin;
\.


--
-- Name: ge_template_dbxref_template_dbxref_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_template_dbxref_template_dbxref_id_seq', 1, false);


--
-- Data for Name: ge_template_diff_expression; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_template_diff_expression (template_diff_expression_id, diff_expression_id, template_id, stat_value, stat_type, dataset_id, metadata_id) FROM stdin;
\.


--
-- Name: ge_template_diff_expression_template_diff_expression_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_template_diff_expression_template_diff_expression_id_seq', 1, false);


--
-- Data for Name: ge_template_expression; Type: TABLE DATA; Schema: gem; Owner: postgres
--

COPY ge_template_expression (template_expression_id, hybridization_id, template_id, template_signal, template_signal_type, statistical_value, statistical_value_type, flag, dataset_id, metadata_id) FROM stdin;
\.


--
-- Name: ge_template_expression_template_expression_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_template_expression_template_expression_id_seq', 1, false);


--
-- Name: ge_template_template_id_seq; Type: SEQUENCE SET; Schema: gem; Owner: postgres
--

SELECT pg_catalog.setval('ge_template_template_id_seq', 1, false);


SET search_path = genomic, pg_catalog;

--
-- Data for Name: blast_defline; Type: TABLE DATA; Schema: genomic; Owner: postgres
--

COPY blast_defline (blast_defline_id, blast_db_id, identifier, defline, identifier_defline_fulltext) FROM stdin;
\.


--
-- Name: blast_defline_blast_defline_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('blast_defline_blast_defline_id_seq', 1, false);


--
-- Data for Name: blast_hit; Type: TABLE DATA; Schema: genomic; Owner: postgres
--

COPY blast_hit (blast_hit_id, blast_query_id, identifier, evalue, score, identity_percentage, align_start, align_end, blast_defline_id) FROM stdin;
\.


--
-- Name: blast_hit_blast_hit_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('blast_hit_blast_hit_id_seq', 1, false);


--
-- Data for Name: blast_query; Type: TABLE DATA; Schema: genomic; Owner: postgres
--

COPY blast_query (blast_query_id, source_id, query_source_type_id, blast_db_id, total_hits, stored_hits, last_updated) FROM stdin;
\.


--
-- Name: blast_query_blast_query_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('blast_query_blast_query_id_seq', 1, false);


--
-- Data for Name: chromat; Type: TABLE DATA; Schema: genomic; Owner: postgres
--

COPY chromat (chromat_id, clone_id, primer, direction, filename, subpath, date, censor_id, read_class_id) FROM stdin;
\.


--
-- Name: chromat_chromat_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('chromat_chromat_id_seq', 1, false);


--
-- Data for Name: clone; Type: TABLE DATA; Schema: genomic; Owner: postgres
--

COPY clone (clone_id, library_id, clone_type_id, platenum, wellrow, wellcol, genbank_accession, bad_clone, estimated_length) FROM stdin;
\.


--
-- Name: clone_clone_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('clone_clone_id_seq', 1, false);


--
-- Data for Name: clone_feature; Type: TABLE DATA; Schema: genomic; Owner: postgres
--

COPY clone_feature (clone_feature_id, clone_id, feature_id) FROM stdin;
\.


--
-- Data for Name: clone_feature_backup; Type: TABLE DATA; Schema: genomic; Owner: postgres
--

COPY clone_feature_backup (clone_feature_id, clone_id, feature_id) FROM stdin;
\.


--
-- Name: clone_feature_clone_feature_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('clone_feature_clone_feature_id_seq', 1, false);


--
-- Data for Name: clone_type; Type: TABLE DATA; Schema: genomic; Owner: postgres
--

COPY clone_type (clone_type_id, name, shortname) FROM stdin;
\.


--
-- Name: clone_type_clone_type_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('clone_type_clone_type_id_seq', 1, false);


--
-- Data for Name: genbank_submission; Type: TABLE DATA; Schema: genomic; Owner: postgres
--

COPY genbank_submission (genbank_submission_id, date_generated, date_sent, submitted_by, ncbi_reply_date) FROM stdin;
\.


--
-- Name: genbank_submission_genbank_submission_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('genbank_submission_genbank_submission_id_seq', 1, false);


--
-- Data for Name: gss; Type: TABLE DATA; Schema: genomic; Owner: postgres
--

COPY gss (gss_id, chromat_id, version, basecaller, seq, qual, call_positions, status, flags, date) FROM stdin;
\.


--
-- Name: gss_gss_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('gss_gss_id_seq', 1, false);


--
-- Data for Name: gss_submitted_to_genbank; Type: TABLE DATA; Schema: genomic; Owner: postgres
--

COPY gss_submitted_to_genbank (gss_submitted_to_genbank_id, genbank_submission_id, gss_id, genbank_identifier, genbank_dbgss_id) FROM stdin;
\.


--
-- Name: gss_submitted_to_genbank_gss_submitted_to_genbank_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('gss_submitted_to_genbank_gss_submitted_to_genbank_id_seq', 1, false);


--
-- Data for Name: library; Type: TABLE DATA; Schema: genomic; Owner: postgres
--

COPY library (library_id, clone_type_id, name, shortname, accession_id, subclone_of, cloning_host, rs1, rs2, vector_ligation_1, vector_ligation_2, vector, left_primer_id, right_primer_id, organism_id) FROM stdin;
\.


--
-- Data for Name: library_annotation_db; Type: TABLE DATA; Schema: genomic; Owner: postgres
--

COPY library_annotation_db (library_annotation_db_id, library_id, blast_db_id, is_contaminant) FROM stdin;
\.


--
-- Name: library_annotation_db_library_annotation_db_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('library_annotation_db_library_annotation_db_id_seq', 1, false);


--
-- Name: library_library_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('library_library_id_seq', 1, false);


--
-- Name: library_shortname_abbreviatio_library_shortname_abbreviatio_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('library_shortname_abbreviatio_library_shortname_abbreviatio_seq', 1, false);


--
-- Data for Name: library_shortname_abbreviation; Type: TABLE DATA; Schema: genomic; Owner: postgres
--

COPY library_shortname_abbreviation (library_shortname_abbreviation_id, library_id, abbreviation) FROM stdin;
\.


--
-- Data for Name: qc_report; Type: TABLE DATA; Schema: genomic; Owner: postgres
--

COPY qc_report (qc_report_id, gss_id, vs_status, qstart, qend, istart, iend, hqi_start, hqi_length, entropy, expected_error, qual_trim_threshold, vector_tokens) FROM stdin;
\.


--
-- Name: qc_report_qc_report_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('qc_report_qc_report_id_seq', 1, false);


--
-- Data for Name: query_source_type; Type: TABLE DATA; Schema: genomic; Owner: postgres
--

COPY query_source_type (query_source_type_id, name, shortname) FROM stdin;
\.


--
-- Name: query_source_type_query_source_type_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('query_source_type_query_source_type_id_seq', 1, false);


--
-- Data for Name: read_class; Type: TABLE DATA; Schema: genomic; Owner: postgres
--

COPY read_class (read_class_id, class_name) FROM stdin;
\.


--
-- Name: read_class_read_class_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('read_class_read_class_id_seq', 1, false);


--
-- Data for Name: sequencing_primer; Type: TABLE DATA; Schema: genomic; Owner: postgres
--

COPY sequencing_primer (sequencing_primer_id, name) FROM stdin;
\.


--
-- Name: sequencing_primer_sequencing_primer_id_seq; Type: SEQUENCE SET; Schema: genomic; Owner: postgres
--

SELECT pg_catalog.setval('sequencing_primer_sequencing_primer_id_seq', 1, false);


SET search_path = insitu, pg_catalog;

--
-- Data for Name: ex_tag; Type: TABLE DATA; Schema: insitu; Owner: postgres
--

COPY ex_tag (experiment_id, tag_id) FROM stdin;
\.


--
-- Data for Name: experiment; Type: TABLE DATA; Schema: insitu; Owner: postgres
--

COPY experiment (experiment_id, name, date, is_organism_id, tissue, stage, probe_id, description, user_id, obsolete, type) FROM stdin;
\.


--
-- Name: experiment_experiment_id_seq; Type: SEQUENCE SET; Schema: insitu; Owner: postgres
--

SELECT pg_catalog.setval('experiment_experiment_id_seq', 1, false);


--
-- Data for Name: experiment_image; Type: TABLE DATA; Schema: insitu; Owner: postgres
--

COPY experiment_image (experiment_image_id, image_id, experiment_id, obsolete, sp_person_id, create_date, modified_date) FROM stdin;
\.


--
-- Name: experiment_image_experiment_image_id_seq; Type: SEQUENCE SET; Schema: insitu; Owner: postgres
--

SELECT pg_catalog.setval('experiment_image_experiment_image_id_seq', 1, false);


--
-- Data for Name: experiment_tag; Type: TABLE DATA; Schema: insitu; Owner: postgres
--

COPY experiment_tag (experiment_tag_id, tag_id, experiment_id, sp_person_id, modified_date, create_date, obsolete) FROM stdin;
\.


--
-- Name: experiment_tag_experiment_tag_id_seq; Type: SEQUENCE SET; Schema: insitu; Owner: postgres
--

SELECT pg_catalog.setval('experiment_tag_experiment_tag_id_seq', 1, false);


--
-- Data for Name: image_tag; Type: TABLE DATA; Schema: insitu; Owner: postgres
--

COPY image_tag (image_id, tag_id) FROM stdin;
\.


--
-- Data for Name: is_organism; Type: TABLE DATA; Schema: insitu; Owner: postgres
--

COPY is_organism (is_organism_id, name, common_name, description, user_id) FROM stdin;
\.


--
-- Name: is_organism_is_organism_id_seq; Type: SEQUENCE SET; Schema: insitu; Owner: postgres
--

SELECT pg_catalog.setval('is_organism_is_organism_id_seq', 1, false);


--
-- Data for Name: probe; Type: TABLE DATA; Schema: insitu; Owner: postgres
--

COPY probe (probe_id, name, sequence, clone, link_desc, link, primer1, primer1_seq, primer2, primer2_seq, user_id, obsolete, dbxref_type_id, antibody, identifier) FROM stdin;
\.


--
-- Name: probe_probe_id_seq; Type: SEQUENCE SET; Schema: insitu; Owner: postgres
--

SELECT pg_catalog.setval('probe_probe_id_seq', 1, false);


--
-- Data for Name: tag; Type: TABLE DATA; Schema: insitu; Owner: postgres
--

COPY tag (tag_id, name, description, user_id) FROM stdin;
\.


--
-- Data for Name: tag_implication; Type: TABLE DATA; Schema: insitu; Owner: postgres
--

COPY tag_implication (tag_id, implied_id) FROM stdin;
\.


--
-- Name: tag_tag_id_seq; Type: SEQUENCE SET; Schema: insitu; Owner: postgres
--

SELECT pg_catalog.setval('tag_tag_id_seq', 1, false);


SET search_path = metadata, pg_catalog;

--
-- Data for Name: attribution; Type: TABLE DATA; Schema: metadata; Owner: postgres
--

COPY attribution (attribution_id, database_name, table_name, primary_key_column_name, row_id) FROM stdin;
\.


--
-- Name: attribution_attribution_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('attribution_attribution_id_seq', 1, false);


--
-- Data for Name: attribution_to; Type: TABLE DATA; Schema: metadata; Owner: postgres
--

COPY attribution_to (attribution_to_id, attribution_id, person_id, organization_id, project_id, role_id) FROM stdin;
\.


--
-- Name: attribution_to_attribution_to_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('attribution_to_attribution_to_id_seq', 1, false);


--
-- Data for Name: comments; Type: TABLE DATA; Schema: metadata; Owner: postgres
--

COPY comments (comment_id, attribution_id, comment_text) FROM stdin;
\.


--
-- Name: comments_comment_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('comments_comment_id_seq', 1, false);


--
-- Data for Name: md_dbipath; Type: TABLE DATA; Schema: metadata; Owner: postgres
--

COPY md_dbipath (dbipath_id, column_name, table_name, schema_name, metadata_id) FROM stdin;
\.


--
-- Name: md_dbipath_dbipath_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('md_dbipath_dbipath_id_seq', 1, false);


--
-- Data for Name: md_dbiref; Type: TABLE DATA; Schema: metadata; Owner: postgres
--

COPY md_dbiref (dbiref_id, iref_accession, dbipath_id, metadata_id) FROM stdin;
\.


--
-- Name: md_dbiref_dbiref_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('md_dbiref_dbiref_id_seq', 1, false);


--
-- Data for Name: md_dbversion; Type: TABLE DATA; Schema: metadata; Owner: postgres
--

COPY md_dbversion (dbversion_id, patch_name, patch_description, metadata_id) FROM stdin;
46	UpdateStockSynonymCvterms	This patch will find_or_create a cvterm name stock_synonym\nwith cv of stock_property and dbxref of autocreated:stock_synonym\nThen all stockprop of type_id matching the word synonym will be associated with \nthe stock_synonym cvterm\nthis is important for making stock synonyms unified across the different databases and eliminating redundancy of cvterms with name = synonym\n	56
47	UpdateOrganismSynonymCvterms	This patch will find_or_create a cvterm name organism_synonym\nwith cv of organism_property and dbxref of autocreated:organism_synonym\nThen all organismprops of type_id matching the word synonym will be associated with \nthe organism_synonym cvterm\nthis is important for making organism synonyms unified across the different databases and eliminating redundancy of cvterms with name = synonym\n	57
48	DeleteNullLocalSynonyms	This patch will find cvterms with name ilike synonyms and cv.name \nlocal or null and will delete those.\nthis is important for using only synonyms with an explicit cvterm.name and cv.name.\n	58
49	AddSystemCvterms	Description of this patch goes here\n	59
\.


--
-- Name: md_dbversion_dbversion_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('md_dbversion_dbversion_id_seq', 49, true);


--
-- Data for Name: md_files; Type: TABLE DATA; Schema: metadata; Owner: postgres
--

COPY md_files (file_id, basename, dirname, filetype, alt_filename, comment, md5checksum, metadata_id, urlsource, urlsource_md5checksum) FROM stdin;
\.


--
-- Name: md_files_file_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('md_files_file_id_seq', 4, true);


--
-- Data for Name: md_groupmembers; Type: TABLE DATA; Schema: metadata; Owner: postgres
--

COPY md_groupmembers (groupmember_id, group_id, dbiref_id, metadata_id) FROM stdin;
\.


--
-- Name: md_groupmembers_groupmember_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('md_groupmembers_groupmember_id_seq', 1, false);


--
-- Data for Name: md_groups; Type: TABLE DATA; Schema: metadata; Owner: postgres
--

COPY md_groups (group_id, group_name, group_type, group_description, metadata_id) FROM stdin;
\.


--
-- Name: md_groups_group_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('md_groups_group_id_seq', 1, false);


--
-- Data for Name: md_image; Type: TABLE DATA; Schema: metadata; Owner: postgres
--

COPY md_image (image_id, name, description, original_filename, file_ext, sp_person_id, modified_date, create_date, obsolete, md5sum) FROM stdin;
\.


--
-- Name: md_image_image_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('md_image_image_id_seq', 2424, true);


--
-- Data for Name: md_image_organism; Type: TABLE DATA; Schema: metadata; Owner: postgres
--

COPY md_image_organism (md_image_organism_id, image_id, organism_id, sp_person_id, obsolete) FROM stdin;
\.


--
-- Name: md_image_organism_md_image_organism_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('md_image_organism_md_image_organism_id_seq', 1, false);


--
-- Data for Name: md_metadata; Type: TABLE DATA; Schema: metadata; Owner: postgres
--

COPY md_metadata (metadata_id, create_date, create_person_id, modified_date, modified_person_id, modification_note, previous_metadata_id, obsolete, obsolete_note, permission_id) FROM stdin;
56	2017-06-14 23:32:41.301278+00	43	\N	\N	\N	\N	0	\N	\N
57	2017-06-14 23:32:54.877234+00	43	\N	\N	\N	\N	0	\N	\N
58	2017-06-14 23:33:00.493347+00	43	\N	\N	\N	\N	0	\N	\N
59	2017-06-15 19:23:29.538874+00	43	\N	\N	\N	\N	0	\N	\N
\.


--
-- Name: md_metadata_metadata_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('md_metadata_metadata_id_seq', 59, true);


--
-- Data for Name: md_tag; Type: TABLE DATA; Schema: metadata; Owner: postgres
--

COPY md_tag (tag_id, name, description, sp_person_id, modified_date, create_date, obsolete) FROM stdin;
\.


--
-- Data for Name: md_tag_image; Type: TABLE DATA; Schema: metadata; Owner: postgres
--

COPY md_tag_image (tag_image_id, image_id, tag_id, obsolete, sp_person_id, create_date, modified_date) FROM stdin;
\.


--
-- Name: md_tag_image_tag_image_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('md_tag_image_tag_image_id_seq', 1, false);


--
-- Name: md_tag_tag_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('md_tag_tag_id_seq', 1, false);


--
-- Data for Name: roles; Type: TABLE DATA; Schema: metadata; Owner: postgres
--

COPY roles (role_id, role_name, role_description) FROM stdin;
\.


--
-- Name: roles_role_id_seq; Type: SEQUENCE SET; Schema: metadata; Owner: postgres
--

SELECT pg_catalog.setval('roles_role_id_seq', 1, false);


SET search_path = pheno_population, pg_catalog;

--
-- Data for Name: data_points; Type: TABLE DATA; Schema: pheno_population; Owner: postgres
--

COPY data_points (dp_id, sample_id, prop_id, source_id, image_id, value) FROM stdin;
\.


--
-- Name: data_points_dp_id_seq; Type: SEQUENCE SET; Schema: pheno_population; Owner: postgres
--

SELECT pg_catalog.setval('data_points_dp_id_seq', 1, false);


--
-- Data for Name: genotypes; Type: TABLE DATA; Schema: pheno_population; Owner: postgres
--

COPY genotypes (gen_id, gen_name, pop_id, annotation) FROM stdin;
\.


--
-- Name: genotypes_gen_id_seq; Type: SEQUENCE SET; Schema: pheno_population; Owner: postgres
--

SELECT pg_catalog.setval('genotypes_gen_id_seq', 1, false);


--
-- Data for Name: images; Type: TABLE DATA; Schema: pheno_population; Owner: postgres
--

COPY images (image_id, filepath, sample_id, source_id, annotation) FROM stdin;
\.


--
-- Name: images_image_id_seq; Type: SEQUENCE SET; Schema: pheno_population; Owner: postgres
--

SELECT pg_catalog.setval('images_image_id_seq', 1, false);


--
-- Data for Name: locations; Type: TABLE DATA; Schema: pheno_population; Owner: postgres
--

COPY locations (loc_id, institution, environment, year, annotation) FROM stdin;
\.


--
-- Name: locations_loc_id_seq; Type: SEQUENCE SET; Schema: pheno_population; Owner: postgres
--

SELECT pg_catalog.setval('locations_loc_id_seq', 1, false);


--
-- Data for Name: organs; Type: TABLE DATA; Schema: pheno_population; Owner: postgres
--

COPY organs (organ_id, organ_name) FROM stdin;
\.


--
-- Name: organs_organ_id_seq; Type: SEQUENCE SET; Schema: pheno_population; Owner: postgres
--

SELECT pg_catalog.setval('organs_organ_id_seq', 1, false);


--
-- Data for Name: plants; Type: TABLE DATA; Schema: pheno_population; Owner: postgres
--

COPY plants (plant_id, plant_name, gen_id, loc_id) FROM stdin;
\.


--
-- Name: plants_plant_id_seq; Type: SEQUENCE SET; Schema: pheno_population; Owner: postgres
--

SELECT pg_catalog.setval('plants_plant_id_seq', 1, false);


--
-- Data for Name: populations; Type: TABLE DATA; Schema: pheno_population; Owner: postgres
--

COPY populations (pop_id, pedigree, annotation) FROM stdin;
\.


--
-- Name: populations_pop_id_seq; Type: SEQUENCE SET; Schema: pheno_population; Owner: postgres
--

SELECT pg_catalog.setval('populations_pop_id_seq', 1, false);


--
-- Data for Name: properties; Type: TABLE DATA; Schema: pheno_population; Owner: postgres
--

COPY properties (prop_id, prop_name, organ_id, unit_name, unit_precision, annotation) FROM stdin;
\.


--
-- Name: properties_prop_id_seq; Type: SEQUENCE SET; Schema: pheno_population; Owner: postgres
--

SELECT pg_catalog.setval('properties_prop_id_seq', 1, false);


--
-- Data for Name: samples; Type: TABLE DATA; Schema: pheno_population; Owner: postgres
--

COPY samples (sample_id, sample_name, sample_group, organ_id, plant_id, annotation) FROM stdin;
\.


--
-- Name: samples_sample_id_seq; Type: SEQUENCE SET; Schema: pheno_population; Owner: postgres
--

SELECT pg_catalog.setval('samples_sample_id_seq', 1, false);


--
-- Data for Name: sources; Type: TABLE DATA; Schema: pheno_population; Owner: postgres
--

COPY sources (source_id, author, location, source_date) FROM stdin;
\.


--
-- Name: sources_source_id_seq; Type: SEQUENCE SET; Schema: pheno_population; Owner: postgres
--

SELECT pg_catalog.setval('sources_source_id_seq', 1, false);


SET search_path = phenome, pg_catalog;

--
-- Data for Name: allele; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY allele (allele_id, locus_id, allele_symbol, allele_name, mode_of_inheritance, allele_synonym, allele_phenotype, allele_notes, obsolete, sp_person_id, create_date, modified_date, updated_by, is_default, sequence) FROM stdin;
\.


--
-- Data for Name: allele_alias; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY allele_alias (allele_alias_id, alias, allele_id, preferred, obsolete, sp_person_id, create_date, modified_date) FROM stdin;
\.


--
-- Name: allele_alias_allele_alias_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('allele_alias_allele_alias_id_seq', 1, false);


--
-- Name: allele_allele_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('allele_allele_id_seq', 1, true);


--
-- Data for Name: allele_dbxref; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY allele_dbxref (allele_dbxref_id, allele_id, dbxref_id, obsolete, sp_person_id, create_date, modified_date) FROM stdin;
\.


--
-- Name: allele_dbxref_allele_dbxref_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('allele_dbxref_allele_dbxref_id_seq', 1, false);


--
-- Data for Name: allele_history; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY allele_history (allele_history_id, allele_id, locus_id, allele_symbol, allele_name, mode_of_inheritance, allele_phenotype, sp_person_id, updated_by, obsolete, create_date, sequence) FROM stdin;
\.


--
-- Name: allele_history_allele_history_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('allele_history_allele_history_id_seq', 1, false);


--
-- Data for Name: cross_type; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY cross_type (cross_type_id, cross_type) FROM stdin;
\.


--
-- Name: cross_type_cross_type_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('cross_type_cross_type_id_seq', 1, false);


--
-- Data for Name: cvterm_pub_ranking; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY cvterm_pub_ranking (cvterm_id, pub_id, rank, match_type, headline) FROM stdin;
\.


--
-- Data for Name: dbxref_type; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY dbxref_type (dbxref_type_id, dbxref_type_name, dbxref_type_definition, dbxref_type_url) FROM stdin;
\.


--
-- Name: dbxref_type_dbxref_type_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('dbxref_type_dbxref_type_id_seq', 1, false);


--
-- Data for Name: genotype; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY genotype (genotype_id, individual_id, experiment_name, reference_map_id, background_accession_id, preferred, sp_person_id, modified_date, create_date, obsolete, genotype_experiment_id, stock_id) FROM stdin;
\.


--
-- Data for Name: genotype_experiment; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY genotype_experiment (genotype_experiment_id, experiment_name, reference_map_id, background_accession_id, preferred, sp_person_id, modified_date, create_date, obsolete) FROM stdin;
\.


--
-- Name: genotype_experiment_genotype_experiment_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('genotype_experiment_genotype_experiment_id_seq', 1, false);


--
-- Name: genotype_genotype_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('genotype_genotype_id_seq', 1, false);


--
-- Data for Name: genotype_region; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY genotype_region (genotype_region_id, genotype_id, marker_id_nn, marker_id_ns, marker_id_sn, marker_id_ss, zygocity_code, lg_id, type, name, sp_person_id, modified_date, create_date, obsolete) FROM stdin;
\.


--
-- Name: genotype_region_genotype_region_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('genotype_region_genotype_region_id_seq', 1, false);


--
-- Data for Name: germplasm; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY germplasm (germplasm_id, germplasm_type, individual_id, description, dbxref_id, sp_person_id, create_date, modified_date, obsolete) FROM stdin;
\.


--
-- Name: germplasm_germplasm_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('germplasm_germplasm_id_seq', 1, false);


--
-- Data for Name: individual; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY individual (individual_id, name, description, sp_person_id, create_date, modified_date, obsolete, population_id, updated_by, common_name_id, accession_id, stock_id) FROM stdin;
\.


--
-- Data for Name: individual_alias; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY individual_alias (individual_alias_id, alias, individual_id, preferred, obsolete, sp_person_id, create_date, modified_date) FROM stdin;
\.


--
-- Name: individual_alias_individual_alias_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('individual_alias_individual_alias_id_seq', 1, false);


--
-- Data for Name: individual_allele; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY individual_allele (individual_allele_id, individual_id, allele_id, sp_person_id, create_date, modified_date, obsolete) FROM stdin;
\.


--
-- Name: individual_allele_individual_allele_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('individual_allele_individual_allele_id_seq', 1, false);


--
-- Data for Name: individual_dbxref; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY individual_dbxref (individual_dbxref_id, individual_id, dbxref_id, obsolete, sp_person_id, create_date, modified_date) FROM stdin;
\.


--
-- Data for Name: individual_dbxref_evidence; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY individual_dbxref_evidence (individual_dbxref_evidence_id, individual_dbxref_id, relationship_type, evidence_code, evidence_description, evidence_with, reference_id, sp_person_id, updated_by, create_date, modified_date, obsolete) FROM stdin;
\.


--
-- Name: individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq', 1, false);


--
-- Data for Name: individual_dbxref_evidence_history; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY individual_dbxref_evidence_history (individual_dbxref_evidence_history_id, individual_dbxref_evidence_id, individual_dbxref_id, relationship_type, evidence_code, evidence_description, evidence_with, reference_id, sp_person_id, updated_by, create_date, modified_date, obsolete) FROM stdin;
\.


--
-- Name: individual_dbxref_evidence_individual_dbxref_evidence_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('individual_dbxref_evidence_individual_dbxref_evidence_id_seq', 1, false);


--
-- Name: individual_dbxref_individual_dbxref_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('individual_dbxref_individual_dbxref_id_seq', 1, false);


--
-- Data for Name: individual_history; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY individual_history (individual_history_id, individual_id, name, description, population_id, sp_person_id, updated_by, obsolete, create_date) FROM stdin;
\.


--
-- Name: individual_history_individual_history_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('individual_history_individual_history_id_seq', 1, false);


--
-- Data for Name: individual_image; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY individual_image (individual_image_id, image_id, individual_id, obsolete, sp_person_id, create_date, modified_date) FROM stdin;
\.


--
-- Name: individual_image_individual_image_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('individual_image_individual_image_id_seq', 1, false);


--
-- Name: individual_individual_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('individual_individual_id_seq', 1, false);


--
-- Data for Name: individual_locus; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY individual_locus (individual_locus_id, individual_id, locus_id, sp_person_id, create_date, modified_date, obsolete) FROM stdin;
\.


--
-- Name: individual_locus_individual_locus_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('individual_locus_individual_locus_id_seq', 1, false);


--
-- Data for Name: is_public; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY is_public (is_public_id, population_id, is_public, owner_id) FROM stdin;
\.


--
-- Name: is_public_is_public_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('is_public_is_public_id_seq', 1, false);


--
-- Data for Name: locus; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY locus (locus_id, locus_name, locus_symbol, original_symbol, gene_activity, locus_notes, obsolete, sp_person_id, create_date, modified_date, description, linkage_group, lg_arm, common_name_id, updated_by, locus, organism_id) FROM stdin;
\.


--
-- Data for Name: locus2locus; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY locus2locus (locus2locus_id, subject_id, object_id, relationship_id, evidence_id, reference_id, sp_person_id, obsolete, modified_date, create_date) FROM stdin;
\.


--
-- Name: locus2locus_locus2locus_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('locus2locus_locus2locus_id_seq', 1, false);


--
-- Data for Name: locus_alias; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY locus_alias (locus_alias_id, alias, locus_id, preferred, obsolete, sp_person_id, create_date, modified_date) FROM stdin;
\.


--
-- Name: locus_alias_locus_alias_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('locus_alias_locus_alias_id_seq', 1, true);


--
-- Data for Name: locus_dbxref; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY locus_dbxref (locus_dbxref_id, locus_id, dbxref_id, obsolete, sp_person_id, create_date, modified_date) FROM stdin;
\.


--
-- Data for Name: locus_dbxref_evidence; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY locus_dbxref_evidence (locus_dbxref_evidence_id, locus_dbxref_id, relationship_type_id, evidence_code_id, evidence_description_id, evidence_with, reference_id, sp_person_id, updated_by, create_date, modified_date, obsolete) FROM stdin;
\.


--
-- Data for Name: locus_dbxref_evidence_history; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY locus_dbxref_evidence_history (locus_dbxref_evidence_history_id, locus_dbxref_evidence_id, locus_dbxref_id, relationship_type, evidence_code, evidence_description, evidence_with, reference_id, sp_person_id, updated_by, create_date, modified_date, obsolete) FROM stdin;
\.


--
-- Name: locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq', 1, false);


--
-- Name: locus_dbxref_evidence_locus_dbxref_evidence_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('locus_dbxref_evidence_locus_dbxref_evidence_id_seq', 1, false);


--
-- Name: locus_dbxref_locus_dbxref_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('locus_dbxref_locus_dbxref_id_seq', 1, false);


--
-- Data for Name: locus_history; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY locus_history (locus_history_id, locus_id, locus_name, locus_symbol, original_symbol, gene_activity, locus_description, locus_notes, linkage_group, lg_arm, sp_person_id, updated_by, obsolete, create_date) FROM stdin;
\.


--
-- Name: locus_history_locus_history_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('locus_history_locus_history_id_seq', 3, true);


--
-- Data for Name: locus_image; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY locus_image (locus_image_id, image_id, locus_id, obsolete, sp_person_id, create_date, modified_date) FROM stdin;
\.


--
-- Name: locus_image_locus_image_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('locus_image_locus_image_id_seq', 1, false);


--
-- Name: locus_locus_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('locus_locus_id_seq', 3, true);


--
-- Data for Name: locus_marker; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY locus_marker (locus_marker_id, locus_id, marker_id, obsolete, sp_person_id, create_date, modified_date) FROM stdin;
\.


--
-- Name: locus_marker_locus_marker_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('locus_marker_locus_marker_id_seq', 1, false);


--
-- Data for Name: locus_owner; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY locus_owner (locus_owner_id, locus_id, sp_person_id, granted_by, obsolete, create_date, modified_date) FROM stdin;
\.


--
-- Name: locus_owner_locus_owner_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('locus_owner_locus_owner_id_seq', 1, true);


--
-- Data for Name: locus_pub_ranking; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY locus_pub_ranking (locus_id, pub_id, rank, match_type, headline) FROM stdin;
\.


--
-- Data for Name: locus_pub_ranking_validate; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY locus_pub_ranking_validate (locus_id, pub_id, validate) FROM stdin;
\.


--
-- Data for Name: locus_registry; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY locus_registry (locus_registry_id, locus_id, registry_id, sp_person_id, create_date, modified_date, obsolete) FROM stdin;
\.


--
-- Name: locus_registry_locus_registry_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('locus_registry_locus_registry_id_seq', 1, false);


--
-- Data for Name: locus_unigene; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY locus_unigene (locus_unigene_id, locus_id, unigene_id, obsolete, sp_person_id, create_date, modified_date) FROM stdin;
\.


--
-- Name: locus_unigene_locus_unigene_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('locus_unigene_locus_unigene_id_seq', 1, false);


--
-- Data for Name: locusgroup; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY locusgroup (locusgroup_id, locusgroup_name, relationship_id, sp_person_id, create_date, modified_date, obsolete) FROM stdin;
\.


--
-- Name: locusgroup_locusgroup_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('locusgroup_locusgroup_id_seq', 1, false);


--
-- Data for Name: locusgroup_member; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY locusgroup_member (locusgroup_member_id, locusgroup_id, locus_id, direction, evidence_id, reference_id, sp_person_id, create_date, modified_date, obsolete) FROM stdin;
\.


--
-- Name: locusgroup_member_locusgroup_member_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('locusgroup_member_locusgroup_member_id_seq', 1, false);


--
-- Data for Name: nd_experiment_md_files; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY nd_experiment_md_files (nd_experiment_md_files_id, nd_experiment_id, file_id) FROM stdin;
\.


--
-- Name: nd_experiment_md_files_nd_experiment_md_files_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_md_files_nd_experiment_md_files_id_seq', 3305, true);


--
-- Data for Name: phenotype_user_trait; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY phenotype_user_trait (phenotype_user_trait_id, user_trait_id, phenotype_id) FROM stdin;
\.


--
-- Name: phenotype_user_trait_phenotype_user_trait_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('phenotype_user_trait_phenotype_user_trait_id_seq', 1, false);


--
-- Data for Name: polymorphic_fragment; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY polymorphic_fragment (polymorphic_fragment_id, genotype_id, flanking_marker1_id, flanking_marker2_id, zygocity, linkage_group, type, sp_person_id, modified_date, create_date, obsolete) FROM stdin;
\.


--
-- Name: polymorphic_fragment_polymorphic_fragment_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('polymorphic_fragment_polymorphic_fragment_id_seq', 1, false);


--
-- Data for Name: population; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY population (population_id, name, description, person_id, sp_person_id, create_date, modified_date, background_accession_id, obsolete, cross_type_id, female_parent_id, male_parent_id, recurrent_parent_id, donor_parent_id, comment, web_uploaded, common_name_id, stock_id) FROM stdin;
\.


--
-- Data for Name: population_dbxref; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY population_dbxref (population_dbxref_id, population_id, dbxref_id, obsolete, sp_person_id, create_date, modified_date) FROM stdin;
\.


--
-- Name: population_dbxref_population_dbxref_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('population_dbxref_population_dbxref_id_seq', 1, false);


--
-- Name: population_population_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('population_population_id_seq', 1, false);


--
-- Data for Name: pub_curator; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY pub_curator (pub_curator_id, pub_id, sp_person_id, status, date_stored, date_curated, curated_by, assigned_to) FROM stdin;
\.


--
-- Name: pub_curator_pub_curator_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('pub_curator_pub_curator_id_seq', 1, false);


--
-- Data for Name: registry; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY registry (registry_id, symbol, name, description, origin, sp_person_id, updated_by, create_date, modified_date, status) FROM stdin;
\.


--
-- Name: registry_registry_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('registry_registry_id_seq', 1, false);


--
-- Data for Name: stock_allele; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY stock_allele (stock_allele_id, stock_id, allele_id, metadata_id) FROM stdin;
\.


--
-- Name: stock_allele_stock_allele_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('stock_allele_stock_allele_id_seq', 1, false);


--
-- Data for Name: stock_image; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY stock_image (stock_image_id, stock_id, image_id, metadata_id) FROM stdin;
\.


--
-- Name: stock_image_stock_image_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('stock_image_stock_image_id_seq', 2424, true);


--
-- Data for Name: stock_owner; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY stock_owner (stock_owner_id, stock_id, sp_person_id, metadata_id) FROM stdin;
\.


--
-- Name: stock_owner_stock_owner_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('stock_owner_stock_owner_id_seq', 152758, true);


--
-- Data for Name: tomato_il_bin; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY tomato_il_bin (il_bin_id, chromosome, name, n_marker_n, n_marker_s, s_marker_n, s_marker_s) FROM stdin;
\.


--
-- Name: tomato_il_bin_il_bin_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('tomato_il_bin_il_bin_id_seq', 1, false);


--
-- Data for Name: tomato_term; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY tomato_term (tomato_term_id, tomato_term_name, tomato_term_type, tomato_term_acc, is_obsolete, is_root) FROM stdin;
\.


--
-- Data for Name: tomato_term2term; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY tomato_term2term (tomato_term2term_id, relationship_type_id, term1_id, term2_id, complete) FROM stdin;
\.


--
-- Name: tomato_term2term_tomato_term2term_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('tomato_term2term_tomato_term2term_id_seq', 1, false);


--
-- Name: tomato_term_tomato_term_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('tomato_term_tomato_term_id_seq', 1, false);


--
-- Data for Name: unit; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY unit (unit_id, name) FROM stdin;
\.


--
-- Name: unit_unit_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('unit_unit_id_seq', 1, false);


--
-- Data for Name: user_trait; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY user_trait (user_trait_id, cv_id, name, definition, dbxref_id, sp_person_id) FROM stdin;
\.


--
-- Data for Name: user_trait_unit; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY user_trait_unit (user_trait_unit_id, user_trait_id, unit_id, population_id) FROM stdin;
\.


--
-- Name: user_trait_unit_user_trait_unit_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('user_trait_unit_user_trait_unit_id_seq', 1, false);


--
-- Name: user_trait_user_trait_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('user_trait_user_trait_id_seq', 1, false);


--
-- Data for Name: variant; Type: TABLE DATA; Schema: phenome; Owner: postgres
--

COPY variant (variant_id, locus_id, variant_name, variant_gi, variant_notes) FROM stdin;
\.


--
-- Name: variant_variant_id_seq; Type: SEQUENCE SET; Schema: phenome; Owner: postgres
--

SELECT pg_catalog.setval('variant_variant_id_seq', 1, false);


SET search_path = physical, pg_catalog;

--
-- Data for Name: ba_plausibility; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY ba_plausibility (bap_id, bac_assoc_id, map_id, plausible) FROM stdin;
\.


--
-- Name: ba_plausibility_bap_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('ba_plausibility_bap_id_seq', 1, false);


--
-- Data for Name: bac_associations; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY bac_associations (bac_assoc_id, bac_id, bac_contig_id, plausible) FROM stdin;
\.


--
-- Name: bac_associations_bac_assoc_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('bac_associations_bac_assoc_id_seq', 1, false);


--
-- Data for Name: bac_consensus_sequences; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY bac_consensus_sequences (consensus_seq_id, fasta_sequence, bac_id, tracefile, consensus_seq_name, length, includes_sp6_end, includes_t7_end) FROM stdin;
\.


--
-- Name: bac_consensus_sequences_consensus_seq_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('bac_consensus_sequences_consensus_seq_id_seq', 1, false);


--
-- Data for Name: bac_contigs; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY bac_contigs (bac_contig_id, contig_name, fpc_version) FROM stdin;
\.


--
-- Name: bac_contigs_bac_contig_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('bac_contigs_bac_contig_id_seq', 1, false);


--
-- Data for Name: bac_end_sequences; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY bac_end_sequences (end_seq_id, end_id, fasta_sequence, tracefile, length) FROM stdin;
\.


--
-- Name: bac_end_sequences_end_seq_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('bac_end_sequences_end_seq_id_seq', 1, false);


--
-- Data for Name: bac_marker_matches; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY bac_marker_matches (marker_id, alias, confidence_id, lg_id, lg_name, lg_order, "position", bac_id, arizona_clone_name, cornell_clone_name, estimated_length, number_of_bacs, contig_name, fpc_version, association_type) FROM stdin;
\.


--
-- Data for Name: bacs; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY bacs (bac_id, cornell_clone_name, arizona_clone_name, species_id, sp6_end_seq_id, t7_end_seq_id, genbank_accession, bad_clone, estimated_length, library_id) FROM stdin;
\.


--
-- Name: bacs_bac_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('bacs_bac_id_seq', 1, false);


--
-- Data for Name: computational_associations; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY computational_associations (computational_assoc_id, marker_id, clone_id, e_value, q_start, q_end, s_start, s_end, identity, score, parameters) FROM stdin;
\.


--
-- Name: computational_associations_computational_assoc_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('computational_associations_computational_assoc_id_seq', 1, false);


--
-- Data for Name: contig_sizes; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY contig_sizes (contig_size_id, bac_contig_id, contig_size) FROM stdin;
\.


--
-- Name: contig_sizes_contig_size_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('contig_sizes_contig_size_id_seq', 1, false);


--
-- Data for Name: deprecated_probes; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY deprecated_probes (dp_id, overgo_version, overgo_probe_id) FROM stdin;
\.


--
-- Name: deprecated_probes_dp_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('deprecated_probes_dp_id_seq', 1, false);


--
-- Data for Name: fpc_data; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY fpc_data (fpc_datum_id, bac_id, bac_name, gel_number, map_ctg_left, map_ctg_right, map_ends_left, map_ends_right, creation_date, modification_date, bac_contig_id_left, bac_contig_id_right) FROM stdin;
\.


--
-- Name: fpc_data_fpc_datum_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('fpc_data_fpc_datum_id_seq', 1, false);


--
-- Data for Name: fpc_version; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY fpc_version (fpc_version, updated_on, updated_by, fpcfile, current, comments) FROM stdin;
\.


--
-- Name: fpc_version_fpc_version_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('fpc_version_fpc_version_seq', 1, false);


--
-- Data for Name: manual_associations; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY manual_associations (manual_assoc_id, marker_id, clone_id, pubmed_id, sp_person_id, comment) FROM stdin;
\.


--
-- Name: manual_associations_manual_assoc_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('manual_associations_manual_assoc_id_seq', 1, false);


--
-- Data for Name: oa_plausibility; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY oa_plausibility (oap_id, overgo_assoc_id, map_id, plausible) FROM stdin;
\.


--
-- Name: oa_plausibility_oap_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('oa_plausibility_oap_id_seq', 1, false);


--
-- Data for Name: overgo_associations; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY overgo_associations (overgo_assoc_id, overgo_version, overgo_probe_id, bac_id, plausible) FROM stdin;
\.


--
-- Name: overgo_associations_overgo_assoc_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('overgo_associations_overgo_assoc_id_seq', 1, false);


--
-- Data for Name: overgo_plates; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY overgo_plates (plate_id, plate_number, row_max, col_max, plate_size, empty_wells) FROM stdin;
\.


--
-- Name: overgo_plates_plate_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('overgo_plates_plate_id_seq', 1, false);


--
-- Data for Name: overgo_results; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY overgo_results (result_id, overgo_plate_id, overgo_pool, bac_id) FROM stdin;
\.


--
-- Name: overgo_results_result_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('overgo_results_result_id_seq', 1, false);


--
-- Data for Name: overgo_version; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY overgo_version (overgo_version, updated_on, updated_by, current, comments) FROM stdin;
\.


--
-- Name: overgo_version_overgo_version_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('overgo_version_overgo_version_seq', 1, false);


--
-- Data for Name: plausible_bacs_in_all_contigs; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY plausible_bacs_in_all_contigs (overgo_assoc_id, overgo_version, overgo_probe_id, bac_id, overgo_plausible, overgo_map, bac_assoc_id, bac_contig_id, contig_name, fpc_version, bac_plausible, bac_map) FROM stdin;
\.


--
-- Data for Name: probe_markers; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY probe_markers (overgo_probe_id, overgo_plate_id, overgo_plate_row, overgo_plate_col, marker_id, overgo_seq_a, overgo_seq_b, overgo_seq_ab, marker_seq) FROM stdin;
\.


--
-- Name: probe_markers_overgo_probe_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('probe_markers_overgo_probe_id_seq', 1, false);


--
-- Data for Name: species; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY species (species_id, short_name, long_name) FROM stdin;
\.


--
-- Name: species_species_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('species_species_id_seq', 1, false);


--
-- Data for Name: tentative_association_conflict_groups; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY tentative_association_conflict_groups (tacg_id, conflict_group_id, tentative_assoc_id) FROM stdin;
\.


--
-- Name: tentative_association_conflict_groups_tacg_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('tentative_association_conflict_groups_tacg_id_seq', 1, false);


--
-- Data for Name: tentative_overgo_associations; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY tentative_overgo_associations (tentative_assoc_id, overgo_version, overgo_probe_id, bac_id) FROM stdin;
\.


--
-- Name: tentative_overgo_associations_tentative_assoc_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('tentative_overgo_associations_tentative_assoc_id_seq', 1, false);


--
-- Data for Name: users; Type: TABLE DATA; Schema: physical; Owner: postgres
--

COPY users (user_id, full_name, net_id) FROM stdin;
\.


--
-- Name: users_user_id_seq; Type: SEQUENCE SET; Schema: physical; Owner: postgres
--

SELECT pg_catalog.setval('users_user_id_seq', 1, false);


SET search_path = public, pg_catalog;

--
-- Data for Name: analysis; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY analysis (analysis_id, name, description, program, programversion, algorithm, sourcename, sourceversion, sourceuri, timeexecuted) FROM stdin;
\.


--
-- Name: analysis_analysis_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('analysis_analysis_id_seq', 1, false);


--
-- Data for Name: analysisfeature; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY analysisfeature (analysisfeature_id, feature_id, analysis_id, rawscore, normscore, significance, identity) FROM stdin;
\.


--
-- Name: analysisfeature_analysisfeature_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('analysisfeature_analysisfeature_id_seq', 1, false);


--
-- Data for Name: analysisprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY analysisprop (analysisprop_id, analysis_id, type_id, value) FROM stdin;
\.


--
-- Name: analysisprop_analysisprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('analysisprop_analysisprop_id_seq', 1, false);


--
-- Data for Name: ara_annotation; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ara_annotation (agi, locus, genbank_gi, gb_prot_id, gb_mrna_id, uniprot_id, tair_annotation, symbol, aliases, localization, process, function, localization_evidence, process_evidence, function_evidence, fulltext) FROM stdin;
\.


--
-- Data for Name: ara_domain; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ara_domain (agi, locus, prot_length, app_name, dom_id, dom_desc, dom_start, dom_end, e_value, interpro_id, interpro_dom, run_date) FROM stdin;
\.


--
-- Data for Name: ara_evidef; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ara_evidef (code, description, longdescription) FROM stdin;
\.


--
-- Data for Name: ara_family; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ara_family (locus, super_gene_family, gene_family, gene_name, gene_alias, bac_locus, gbi, gb_locus, tigr_annotation, expert_annotation, criteria, people_id, org_id, pmid, url, url_name) FROM stdin;
\.


--
-- Data for Name: ara_gfp_ms; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ara_gfp_ms (agi, locus, gfp_all, ms_all) FROM stdin;
\.


--
-- Data for Name: ara_go_term; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ara_go_term (go_id, alt_id, num_child, num_desc, namespace, name, is_a, children, path, definition) FROM stdin;
\.


--
-- Data for Name: ara_interactome_all; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ara_interactome_all (locus, locus_interact, source, database, type, author, pmid) FROM stdin;
\.


--
-- Data for Name: ara_interactome_unique; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ara_interactome_unique (locus, locus_interact) FROM stdin;
\.


--
-- Data for Name: ara_intron; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ara_intron (agi, locus, intron_num, lbound, rbound, sequence) FROM stdin;
\.


--
-- Data for Name: ara_map; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ara_map (locus, chromosome, direction, startpos, endpos) FROM stdin;
\.


--
-- Data for Name: ara_myristoylation; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ara_myristoylation (locus, evidence) FROM stdin;
\.


--
-- Data for Name: ara_pmidlink; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ara_pmidlink (pmid, url) FROM stdin;
\.


--
-- Data for Name: ara_prefix_info; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ara_prefix_info (prefix, genecount) FROM stdin;
\.


--
-- Data for Name: ara_properties; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ara_properties (agi, locus, weight, isoelectric, transmemcount, transmempos, genomepos, interactioncount, introncount) FROM stdin;
\.


--
-- Data for Name: ara_scop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ara_scop (agi, locus, lbound, rbound, e_value, scop_id, description, structure_type) FROM stdin;
\.


--
-- Data for Name: ara_sequence; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ara_sequence (agi, locus, protein, cds, cdna, genomic, utr5, utr3) FROM stdin;
\.


--
-- Data for Name: ara_signalp; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ara_signalp (agi, locus, nn_cmax, nn_cpos, nn_cd, nn_ymax, nn_ypos, nn_yd, nn_smax, nn_spos, nn_sd, nn_smean, nn_smeand, nn_score, nn_d, hmm_type, hmm_cmax, hmm_cpos, hmm_cd, hmm_sprob, hmm_d) FROM stdin;
\.


--
-- Data for Name: ara_targetp; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ara_targetp (agi, locus, location, rc, c_score, m_score, s_score, o_score) FROM stdin;
\.


--
-- Data for Name: ara_users; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ara_users (id, username, password, hotlist, lists, email, confirm_email) FROM stdin;
\.


--
-- Name: ara_users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('ara_users_id_seq', 1, false);


--
-- Data for Name: blastwatch_queries; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY blastwatch_queries (blastwatch_queries_id, sp_person_id, sequence, program, database, matrix, evalue, num_results, new_results) FROM stdin;
\.


--
-- Name: blastwatch_queries_blastwatch_queries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('blastwatch_queries_blastwatch_queries_id_seq', 1, false);


--
-- Data for Name: blastwatch_results; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY blastwatch_results (blastwatch_results_id, blastwatch_queries_id, query_id, subject_id, subject_start, subject_end, evalue, score) FROM stdin;
\.


--
-- Name: blastwatch_results_blastwatch_results_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('blastwatch_results_blastwatch_results_id_seq', 1, false);


--
-- Data for Name: bug; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY bug (bug_id, sp_person_id, obsolete, create_date, created_by, modified_date, updated_by, description, status, severity, affected_page, action) FROM stdin;
\.


--
-- Name: bug_bug_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('bug_bug_id_seq', 1, false);


--
-- Data for Name: contact; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY contact (contact_id, type_id, name, description) FROM stdin;
\.


--
-- Name: contact_contact_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('contact_contact_id_seq', 1, false);


--
-- Data for Name: contact_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY contact_relationship (contact_relationship_id, type_id, subject_id, object_id) FROM stdin;
\.


--
-- Name: contact_relationship_contact_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('contact_relationship_contact_relationship_id_seq', 1, false);


--
-- Data for Name: cv; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cv (cv_id, name, definition) FROM stdin;
56	calendar	\N
57	experiment_type	\N
58	genotype_property	\N
59	geolocations_property	\N
60	list_types	\N
61	local	\N
62	nd_experiment_property	\N
63	organism_property	\N
64	project_property	\N
65	project_relationship	\N
66	project_type	\N
67	stock_property	\N
68	stock_relationship	\N
69	stock_type	\N
70	trait_property	\N
71	trial_type	\N
72	trial type	
75	composable_cvs	\N
76	protocol_property	\N
77	cvterm_property	\N
\.


--
-- Name: cv_cv_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cv_cv_id_seq', 77, true);


--
-- Data for Name: cvterm; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cvterm (cvterm_id, cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype) FROM stdin;
77130	56	Fertilizer Event	\N	210033	0	0
77131	56	Genotyping Event	\N	210034	0	0
77132	56	Harvest Event	\N	210035	0	0
77133	56	Meeting Event	\N	210036	0	0
77134	56	Phenotyping Event	\N	210037	0	0
77135	56	Planning Event	\N	210038	0	0
77136	56	Planting Event	\N	210039	0	0
77137	56	Presentation Event	\N	210040	0	0
77138	57	 pedigree experiment	\N	210041	0	0
77139	57	cross_experiment	\N	210042	0	0
77140	57	field_layout	\N	210043	0	0
77141	57	genotyping_experiment	\N	210044	0	0
77142	57	genotyping_layout	\N	210045	0	0
77143	57	phenotyping_experiment	\N	210046	0	0
77144	58	igd number	\N	210047	0	0
77145	58	infinium array	\N	210048	0	0
77146	58	snp genotyping	\N	210049	0	0
77147	59	geolocation address	\N	210050	0	0
77148	59	geolocation year	\N	210051	0	0
77149	60	accessions	\N	210052	0	0
77150	60	crosses	\N	210053	0	0
77151	60	dataset	\N	210054	0	0
77152	60	locations	\N	210055	0	0
77153	60	locus_ids	\N	210056	0	0
77154	60	numbers	\N	210057	0	0
77155	60	plots	\N	210058	0	0
77156	60	populations	\N	210059	0	0
77157	60	traits	\N	210060	0	0
77158	60	trials	\N	210061	0	0
77159	60	unigene_ids	\N	210062	0	0
77160	60	vector_constructs	\N	210063	0	0
77161	60	years	\N	210064	0	0
77162	61	date	\N	210065	0	0
77163	61	months after planting	\N	210066	0	0
77164	61	operator	\N	210067	0	0
77165	61	organism_sequencing_metadata	\N	210068	0	0
77166	61	sp_person_id	\N	210069	0	0
77167	61	time	\N	210070	0	0
77168	61	visible_to_role	\N	210071	0	0
77169	62	cross_name	\N	210072	0	0
77170	62	cross_type	\N	210073	0	0
77171	62	date_of_embryo_rescue	\N	210074	0	0
77172	62	date_of_harvest	\N	210075	0	0
77173	62	date_of_pollination	\N	210076	0	0
77174	62	date_of_seed_extraction	\N	210077	0	0
77175	62	days_from_extraction_to_embryo_rescue	\N	210078	0	0
77176	62	days_from_harvest_to_extraction	\N	210079	0	0
77177	62	days_to_maturity	\N	210080	0	0
77178	62	genotyping_project_name	\N	210081	0	0
77179	62	genotyping_user_id	\N	210082	0	0
77180	62	number_of_embryos_contaminated	\N	210083	0	0
77181	62	number_of_embryos_germinated	\N	210084	0	0
77182	62	number_of_embryos_rescued	\N	210085	0	0
77183	62	number_of_flowers	\N	210086	0	0
77184	62	number_of_fruits	\N	210087	0	0
77185	62	number_of_nonviable_seeds	\N	210088	0	0
77186	62	number_of_progeny	\N	210089	0	0
77187	62	number_of_seedlings_transplanted	\N	210090	0	0
77188	62	number_of_seeds	\N	210091	0	0
77189	62	number_of_seeds_extracted	\N	210092	0	0
77190	62	number_of_seeds_germinated	\N	210093	0	0
77191	62	number_of_seeds_planted	\N	210094	0	0
77192	62	number_of_viable_seeds	\N	210095	0	0
77193	63	organism_synonym	\N	210096	0	0
77194	64	breeding_program	\N	210097	0	0
77195	64	data_agreement	\N	210098	0	0
77196	64	design	\N	210099	0	0
77197	64	genomic selection	\N	210100	0	0
77198	64	harvest_date	\N	210101	0	0
77199	64	marker_count	\N	210102	0	0
77200	64	planting_date	\N	210103	0	0
77201	64	population type	\N	210104	0	0
77202	64	project fertilizer date	\N	210105	0	0
77203	64	project first harvest date	\N	210106	0	0
77204	64	project harvest date	\N	210107	0	0
77205	64	project harvested plants	\N	210108	0	0
77206	64	project last harvest date	\N	210109	0	0
77207	64	project location	\N	210110	0	0
77208	64	project planting date	\N	210111	0	0
77209	64	project sowing date	\N	210112	0	0
77210	64	project sown plants	\N	210113	0	0
77211	64	project transplanting date	\N	210114	0	0
77212	64	project year	\N	210115	0	0
77213	64	project_has_plant_entries	\N	210116	0	0
77214	64	trial_folder	\N	210117	0	0
77215	64	folder_for_trials	\N	210118	0	0
77216	64	folder_for_crosses	\N	210119	0	0
77217	65	breeding_program_trial_relationship	\N	210120	0	0
77218	66	Advanced Yeld Trials	\N	210121	0	0
77219	66	Advanced Yield Trial	\N	210122	0	0
77220	66	Clonal Evaluation	\N	210123	0	0
77221	66	Preliminary Yield Trial	\N	210124	0	0
77222	66	Preliminary Yield Trials	\N	210125	0	0
77223	66	Regional Trials	\N	210126	0	0
77224	66	Seed Multiplication	\N	210127	0	0
77225	66	Seedling Nursery	\N	210128	0	0
77226	66	Uniform Yield Trial	\N	210129	0	0
77227	66	Variety Release Trial	\N	210130	0	0
77228	67	block	\N	210131	0	0
77229	67	col_number	\N	210132	0	0
77230	67	igd_synonym	\N	210133	0	0
77231	67	is a control	\N	210134	0	0
77232	67	location_code	\N	210135	0	0
77233	67	organization	\N	210136	0	0
77234	67	plant_index_number	\N	210137	0	0
77235	67	plot number	\N	210138	0	0
77236	67	range	\N	210139	0	0
77237	67	replicate	\N	210140	0	0
77238	67	row_number	\N	210141	0	0
77239	67	stock_synonym	\N	210142	0	0
77240	67	T1	\N	210143	0	0
77241	67	T2	\N	210144	0	0
77242	67	transgenic	\N	210145	0	0
77243	68	cross_relationship	\N	210146	0	0
77244	68	female_parent	\N	210147	0	0
77245	68	male_parent	\N	210148	0	0
77246	68	member_of	\N	210149	0	0
77247	68	offspring_of	\N	210150	0	0
77248	68	plant_of	\N	210151	0	0
77249	68	plot_of	\N	210152	0	0
77250	68	tissue_sample_of	\N	210153	0	0
77251	69	accession	\N	210154	0	0
77252	69	backcross population	\N	210155	0	0
77253	69	cross	\N	210156	0	0
77254	69	f2 population	\N	210157	0	0
77255	69	mutant population	\N	210158	0	0
77256	69	plant	\N	210159	0	0
77257	69	plot	\N	210160	0	0
77258	69	population	\N	210161	0	0
77259	69	tissue_sample	\N	210162	0	0
77260	69	training population	\N	210163	0	0
77261	69	vector_construct	\N	210164	0	0
77262	70	trait_categories	\N	210165	0	0
77263	70	trait_default_value	\N	210166	0	0
77264	70	trait_details	\N	210167	0	0
77265	70	trait_format	\N	210168	0	0
77266	70	trait_maximum	\N	210169	0	0
77267	70	trait_minimum	\N	210170	0	0
77268	71	crossing_trial	\N	210171	0	0
77269	71	genotyping_trial	\N	210172	0	0
77270	71	phenotyping_trial	\N	210173	0	0
77272	75	trait_ontology	\N	210177	0	0
77273	75	composed_trait_ontology	\N	210178	0	0
77274	75	object_ontology	\N	210179	0	0
77275	75	attribute_ontology	\N	210180	0	0
77276	75	method_ontology	\N	210181	0	0
77277	75	unit_ontology	\N	210182	0	0
77278	75	time_ontology	\N	210183	0	0
77279	57	pedigree experiment	\N	210184	0	0
77280	57	seedlot_experiment	\N	210185	0	0
77281	67	accession number	\N	210186	0	0
77282	67	PUI	\N	210187	0	0
77283	67	donor	\N	210188	0	0
77284	67	donor institute	\N	210189	0	0
77285	67	donor PUI	\N	210190	0	0
77286	67	seed source	\N	210191	0	0
77287	67	institute code	\N	210192	0	0
77288	67	institute name	\N	210193	0	0
77289	67	biological status of accession code	\N	210194	0	0
77290	67	country of origin	\N	210195	0	0
77291	67	type of germplasm storage code	\N	210196	0	0
77292	67	entry number	\N	210197	0	0
77293	67	acquisition date	\N	210198	0	0
77294	76	published date	\N	210199	0	0
77295	76	protocol type	\N	210200	0	0
77296	76	protocol unit	\N	210201	0	0
77297	76	protocol comment	\N	210202	0	0
77298	77	uri	\N	210203	0	0
77299	77	datatype	\N	210204	0	0
77300	77	code	\N	210205	0	0
77301	68	collection_of	\N	210206	0	0
77302	68	seed transaction	\N	210207	0	0
77303	63	species authority	\N	210208	0	0
77304	63	subtaxa	\N	210209	0	0
77305	63	subtaxa authority	\N	210210	0	0
77306	59	country_name	\N	210211	0	0
77307	59	country_code	\N	210212	0	0
77308	59	abbreviation	\N	210213	0	0
77309	59	location_type	\N	210214	0	0
77310	59	annual_total_precipitation	\N	210215	0	0
77311	59	continent	\N	210216	0	0
77312	59	annual_mean_temperature	\N	210217	0	0
77313	59	adm1	\N	210218	0	0
77314	59	adm2	\N	210219	0	0
77315	59	adm3	\N	210220	0	0
77316	59	local_name	\N	210221	0	0
77317	59	region	\N	210222	0	0
77318	59	alternative_name	\N	210223	0	0
77319	69	seedlot	\N	210224	0	0
77320	64	active	\N	210225	0	0
77321	64	breeding_program_abbreviation	\N	210226	0	0
\.


--
-- Name: cvterm_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cvterm_cvterm_id_seq', 77321, true);


--
-- Data for Name: cvterm_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cvterm_dbxref (cvterm_dbxref_id, cvterm_id, dbxref_id, is_for_definition) FROM stdin;
\.


--
-- Name: cvterm_dbxref_cvterm_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cvterm_dbxref_cvterm_dbxref_id_seq', 1, false);


--
-- Data for Name: cvterm_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cvterm_relationship (cvterm_relationship_id, type_id, subject_id, object_id) FROM stdin;
\.


--
-- Name: cvterm_relationship_cvterm_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cvterm_relationship_cvterm_relationship_id_seq', 110595, true);


--
-- Data for Name: cvtermpath; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cvtermpath (cvtermpath_id, type_id, subject_id, object_id, cv_id, pathdistance) FROM stdin;
\.


--
-- Name: cvtermpath_cvtermpath_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cvtermpath_cvtermpath_id_seq', 1794576, true);


--
-- Data for Name: cvtermprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cvtermprop (cvtermprop_id, cvterm_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: cvtermprop_cvtermprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cvtermprop_cvtermprop_id_seq', 8079, true);


--
-- Data for Name: cvtermsynonym; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cvtermsynonym (cvtermsynonym_id, cvterm_id, synonym, type_id) FROM stdin;
\.


--
-- Name: cvtermsynonym_cvtermsynonym_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cvtermsynonym_cvtermsynonym_id_seq', 145387, true);


--
-- Data for Name: cxgn_bac_pipeline_genbank_log; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cxgn_bac_pipeline_genbank_log (id, deleted, "timestamp", uname, host, progname, pid, search_key, message) FROM stdin;
\.


--
-- Name: cxgn_bac_pipeline_genbank_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cxgn_bac_pipeline_genbank_log_id_seq', 1, false);


--
-- Data for Name: cxgn_bac_pipeline_loading_log; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cxgn_bac_pipeline_loading_log (id, deleted, "timestamp", uname, host, progname, pid, search_key, message) FROM stdin;
\.


--
-- Name: cxgn_bac_pipeline_loading_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cxgn_bac_pipeline_loading_log_id_seq', 1, false);


--
-- Data for Name: cxgn_bac_pipeline_processing_log; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cxgn_bac_pipeline_processing_log (id, deleted, "timestamp", uname, host, progname, pid, search_key, message) FROM stdin;
\.


--
-- Name: cxgn_bac_pipeline_processing_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cxgn_bac_pipeline_processing_log_id_seq', 1, false);


--
-- Data for Name: cxgn_indexedlog_test_feel_free_to_delete_me; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY cxgn_indexedlog_test_feel_free_to_delete_me (id, deleted, "timestamp", uname, host, progname, pid, search_key, message) FROM stdin;
\.


--
-- Name: cxgn_indexedlog_test_feel_free_to_delete_me_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('cxgn_indexedlog_test_feel_free_to_delete_me_id_seq', 1, false);


--
-- Data for Name: db; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY db (db_id, name, description, urlprefix, url) FROM stdin;
277	null	\N	\N	\N
\.


--
-- Name: db_db_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('db_db_id_seq', 277, true);


--
-- Data for Name: dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY dbxref (dbxref_id, db_id, accession, version, description) FROM stdin;
210033	277	autocreated:Fertilizer Event		\N
210034	277	autocreated:Genotyping Event		\N
210035	277	autocreated:Harvest Event		\N
210036	277	autocreated:Meeting Event		\N
210037	277	autocreated:Phenotyping Event		\N
210038	277	autocreated:Planning Event		\N
210039	277	autocreated:Planting Event		\N
210040	277	autocreated:Presentation Event		\N
210041	277	autocreated: pedigree experiment		\N
210042	277	autocreated:cross_experiment		\N
210043	277	autocreated:field_layout		\N
210044	277	autocreated:genotyping_experiment		\N
210045	277	autocreated:genotyping_layout		\N
210046	277	autocreated:phenotyping_experiment		\N
210047	277	autocreated:igd number		\N
210048	277	autocreated:infinium array		\N
210049	277	autocreated:snp genotyping		\N
210050	277	autocreated:geolocation address		\N
210051	277	autocreated:geolocation year		\N
210052	277	autocreated:accessions		\N
210053	277	autocreated:crosses		\N
210054	277	autocreated:dataset		\N
210055	277	autocreated:locations		\N
210056	277	autocreated:locus_ids		\N
210057	277	autocreated:numbers		\N
210058	277	autocreated:plots		\N
210059	277	autocreated:populations		\N
210060	277	autocreated:traits		\N
210061	277	autocreated:trials		\N
210062	277	autocreated:unigene_ids		\N
210063	277	autocreated:vector_constructs		\N
210064	277	autocreated:years		\N
210065	277	autocreated:date		\N
210066	277	autocreated:months after planting		\N
210067	277	autocreated:operator		\N
210068	277	autocreated:organism_sequencing_metadata		\N
210069	277	autocreated:sp_person_id		\N
210070	277	autocreated:time		\N
210071	277	autocreated:visible_to_role		\N
210072	277	autocreated:cross_name		\N
210073	277	autocreated:cross_type		\N
210074	277	autocreated:date_of_embryo_rescue		\N
210075	277	autocreated:date_of_harvest		\N
210076	277	autocreated:date_of_pollination		\N
210077	277	autocreated:date_of_seed_extraction		\N
210078	277	autocreated:days_from_extraction_to_embryo_rescue		\N
210079	277	autocreated:days_from_harvest_to_extraction		\N
210080	277	autocreated:days_to_maturity		\N
210081	277	autocreated:genotyping_project_name		\N
210082	277	autocreated:genotyping_user_id		\N
210083	277	autocreated:number_of_embryos_contaminated		\N
210084	277	autocreated:number_of_embryos_germinated		\N
210085	277	autocreated:number_of_embryos_rescued		\N
210086	277	autocreated:number_of_flowers		\N
210087	277	autocreated:number_of_fruits		\N
210088	277	autocreated:number_of_nonviable_seeds		\N
210089	277	autocreated:number_of_progeny		\N
210090	277	autocreated:number_of_seedlings_transplanted		\N
210091	277	autocreated:number_of_seeds		\N
210092	277	autocreated:number_of_seeds_extracted		\N
210093	277	autocreated:number_of_seeds_germinated		\N
210094	277	autocreated:number_of_seeds_planted		\N
210095	277	autocreated:number_of_viable_seeds		\N
210096	277	autocreated:organism_synonym		\N
210097	277	autocreated:breeding_program		\N
210098	277	autocreated:data_agreement		\N
210099	277	autocreated:design		\N
210100	277	autocreated:genomic selection		\N
210101	277	autocreated:harvest_date		\N
210102	277	autocreated:marker_count		\N
210103	277	autocreated:planting_date		\N
210104	277	autocreated:population type		\N
210105	277	autocreated:project fertilizer date		\N
210106	277	autocreated:project first harvest date		\N
210107	277	autocreated:project harvest date		\N
210108	277	autocreated:project harvested plants		\N
210109	277	autocreated:project last harvest date		\N
210110	277	autocreated:project location		\N
210111	277	autocreated:project planting date		\N
210112	277	autocreated:project sowing date		\N
210113	277	autocreated:project sown plants		\N
210114	277	autocreated:project transplanting date		\N
210115	277	autocreated:project year		\N
210116	277	autocreated:project_has_plant_entries		\N
210117	277	autocreated:trial_folder		\N
210118	277	autocreated:folder_for_trials		\N
210119	277	autocreated:folder_for_crosses		\N
210120	277	autocreated:breeding_program_trial_relationship		\N
210121	277	autocreated:Advanced Yeld Trials		\N
210122	277	autocreated:Advanced Yield Trial		\N
210123	277	autocreated:Clonal Evaluation		\N
210124	277	autocreated:Preliminary Yield Trial		\N
210125	277	autocreated:Preliminary Yield Trials		\N
210126	277	autocreated:Regional Trials		\N
210127	277	autocreated:Seed Multiplication		\N
210128	277	autocreated:Seedling Nursery		\N
210129	277	autocreated:Uniform Yield Trial		\N
210130	277	autocreated:Variety Release Trial		\N
210131	277	autocreated:block		\N
210132	277	autocreated:col_number		\N
210133	277	autocreated:igd_synonym		\N
210134	277	autocreated:is a control		\N
210135	277	autocreated:location_code		\N
210136	277	autocreated:organization		\N
210137	277	autocreated:plant_index_number		\N
210138	277	autocreated:plot number		\N
210139	277	autocreated:range		\N
210140	277	autocreated:replicate		\N
210141	277	autocreated:row_number		\N
210142	277	autocreated:stock_synonym		\N
210143	277	autocreated:T1		\N
210144	277	autocreated:T2		\N
210145	277	autocreated:transgenic		\N
210146	277	autocreated:cross_relationship		\N
210147	277	autocreated:female_parent		\N
210148	277	autocreated:male_parent		\N
210149	277	autocreated:member_of		\N
210150	277	autocreated:offspring_of		\N
210151	277	autocreated:plant_of		\N
210152	277	autocreated:plot_of		\N
210153	277	autocreated:tissue_sample_of		\N
210154	277	autocreated:accession		\N
210155	277	autocreated:backcross population		\N
210156	277	autocreated:cross		\N
210157	277	autocreated:f2 population		\N
210158	277	autocreated:mutant population		\N
210159	277	autocreated:plant		\N
210160	277	autocreated:plot		\N
210161	277	autocreated:population		\N
210162	277	autocreated:tissue_sample		\N
210163	277	autocreated:training population		\N
210164	277	autocreated:vector_construct		\N
210165	277	autocreated:trait_categories		\N
210166	277	autocreated:trait_default_value		\N
210167	277	autocreated:trait_details		\N
210168	277	autocreated:trait_format		\N
210169	277	autocreated:trait_maximum		\N
210170	277	autocreated:trait_minimum		\N
210171	277	autocreated:crossing_trial		\N
210172	277	autocreated:genotyping_trial		\N
210173	277	autocreated:phenotyping_trial		\N
210177	277	autocreated:trait_ontology		\N
210178	277	autocreated:composed_trait_ontology		\N
210179	277	autocreated:object_ontology		\N
210180	277	autocreated:attribute_ontology		\N
210181	277	autocreated:method_ontology		\N
210182	277	autocreated:unit_ontology		\N
210183	277	autocreated:time_ontology		\N
210184	277	autocreated:pedigree experiment		\N
210185	277	autocreated:seedlot_experiment		\N
210186	277	autocreated:accession number		\N
210187	277	autocreated:PUI		\N
210188	277	autocreated:donor		\N
210189	277	autocreated:donor institute		\N
210190	277	autocreated:donor PUI		\N
210191	277	autocreated:seed source		\N
210192	277	autocreated:institute code		\N
210193	277	autocreated:institute name		\N
210194	277	autocreated:biological status of accession code		\N
210195	277	autocreated:country of origin		\N
210196	277	autocreated:type of germplasm storage code		\N
210197	277	autocreated:entry number		\N
210198	277	autocreated:acquisition date		\N
210199	277	autocreated:published date		\N
210200	277	autocreated:protocol type		\N
210201	277	autocreated:protocol unit		\N
210202	277	autocreated:protocol comment		\N
210203	277	autocreated:uri		\N
210204	277	autocreated:datatype		\N
210205	277	autocreated:code		\N
210206	277	autocreated:collection_of		\N
210207	277	autocreated:seed transaction		\N
210208	277	autocreated:species authority		\N
210209	277	autocreated:subtaxa		\N
210210	277	autocreated:subtaxa authority		\N
210211	277	autocreated:country_name		\N
210212	277	autocreated:country_code		\N
210213	277	autocreated:abbreviation		\N
210214	277	autocreated:location_type		\N
210215	277	autocreated:annual_total_precipitation		\N
210216	277	autocreated:continent		\N
210217	277	autocreated:annual_mean_temperature		\N
210218	277	autocreated:adm1		\N
210219	277	autocreated:adm2		\N
210220	277	autocreated:adm3		\N
210221	277	autocreated:local_name		\N
210222	277	autocreated:region		\N
210223	277	autocreated:alternative_name		\N
210224	277	autocreated:seedlot		\N
210225	277	autocreated:active		\N
210226	277	autocreated:breeding_program_abbreviation		\N
\.


--
-- Name: dbxref_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('dbxref_dbxref_id_seq', 210226, true);


--
-- Data for Name: dbxrefprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY dbxrefprop (dbxrefprop_id, dbxref_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: dbxrefprop_dbxrefprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('dbxrefprop_dbxrefprop_id_seq', 1, false);


--
-- Data for Name: environment; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY environment (environment_id, uniquename, description) FROM stdin;
\.


--
-- Data for Name: environment_cvterm; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY environment_cvterm (environment_cvterm_id, environment_id, cvterm_id) FROM stdin;
\.


--
-- Name: environment_cvterm_environment_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('environment_cvterm_environment_cvterm_id_seq', 1, false);


--
-- Name: environment_environment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('environment_environment_id_seq', 1, false);


--
-- Data for Name: enzyme_restriction_sites; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY enzyme_restriction_sites (enzyme_restriction_sites_id, restriction_site, enzyme_id) FROM stdin;
\.


--
-- Name: enzyme_restriction_sites_enzyme_restriction_sites_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('enzyme_restriction_sites_enzyme_restriction_sites_id_seq', 1, false);


--
-- Data for Name: feature; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature (feature_id, dbxref_id, organism_id, name, uniquename, residues, seqlen, md5checksum, type_id, is_analysis, is_obsolete, timeaccessioned, timelastmodified) FROM stdin;
\.


--
-- Data for Name: feature_cvterm; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_cvterm (feature_cvterm_id, feature_id, cvterm_id, pub_id, is_not, rank) FROM stdin;
\.


--
-- Data for Name: feature_cvterm_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_cvterm_dbxref (feature_cvterm_dbxref_id, feature_cvterm_id, dbxref_id) FROM stdin;
\.


--
-- Name: feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq', 1, false);


--
-- Name: feature_cvterm_feature_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_cvterm_feature_cvterm_id_seq', 1, false);


--
-- Data for Name: feature_cvterm_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_cvterm_pub (feature_cvterm_pub_id, feature_cvterm_id, pub_id) FROM stdin;
\.


--
-- Name: feature_cvterm_pub_feature_cvterm_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_cvterm_pub_feature_cvterm_pub_id_seq', 1, false);


--
-- Data for Name: feature_cvtermprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_cvtermprop (feature_cvtermprop_id, feature_cvterm_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: feature_cvtermprop_feature_cvtermprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_cvtermprop_feature_cvtermprop_id_seq', 1, false);


--
-- Data for Name: feature_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_dbxref (feature_dbxref_id, feature_id, dbxref_id, is_current) FROM stdin;
\.


--
-- Name: feature_dbxref_feature_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_dbxref_feature_dbxref_id_seq', 1, false);


--
-- Name: feature_feature_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_feature_id_seq', 1, false);


--
-- Data for Name: feature_genotype; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_genotype (feature_genotype_id, feature_id, genotype_id, chromosome_id, rank, cgroup, cvterm_id) FROM stdin;
\.


--
-- Name: feature_genotype_feature_genotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_genotype_feature_genotype_id_seq', 1, false);


--
-- Data for Name: feature_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_pub (feature_pub_id, feature_id, pub_id) FROM stdin;
\.


--
-- Name: feature_pub_feature_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_pub_feature_pub_id_seq', 1, false);


--
-- Data for Name: feature_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_relationship (feature_relationship_id, subject_id, object_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: feature_relationship_feature_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_relationship_feature_relationship_id_seq', 1, false);


--
-- Data for Name: feature_relationship_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_relationship_pub (feature_relationship_pub_id, feature_relationship_id, pub_id) FROM stdin;
\.


--
-- Name: feature_relationship_pub_feature_relationship_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_relationship_pub_feature_relationship_pub_id_seq', 1, false);


--
-- Data for Name: feature_relationshipprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_relationshipprop (feature_relationshipprop_id, feature_relationship_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: feature_relationshipprop_feature_relationshipprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_relationshipprop_feature_relationshipprop_id_seq', 1, false);


--
-- Data for Name: feature_relationshipprop_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_relationshipprop_pub (feature_relationshipprop_pub_id, feature_relationshipprop_id, pub_id) FROM stdin;
\.


--
-- Name: feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq', 1, false);


--
-- Data for Name: feature_synonym; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY feature_synonym (feature_synonym_id, synonym_id, feature_id, pub_id, is_current, is_internal) FROM stdin;
\.


--
-- Name: feature_synonym_feature_synonym_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_synonym_feature_synonym_id_seq', 1, false);


--
-- Name: feature_uniquename_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('feature_uniquename_seq', 1, false);


--
-- Data for Name: featureloc; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY featureloc (featureloc_id, feature_id, srcfeature_id, fmin, is_fmin_partial, fmax, is_fmax_partial, strand, phase, residue_info, locgroup, rank) FROM stdin;
\.


--
-- Name: featureloc_featureloc_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('featureloc_featureloc_id_seq', 1, false);


--
-- Data for Name: featureloc_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY featureloc_pub (featureloc_pub_id, featureloc_id, pub_id) FROM stdin;
\.


--
-- Name: featureloc_pub_featureloc_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('featureloc_pub_featureloc_pub_id_seq', 1, false);


--
-- Data for Name: featureprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY featureprop (featureprop_id, feature_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: featureprop_featureprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('featureprop_featureprop_id_seq', 1, false);


--
-- Data for Name: featureprop_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY featureprop_pub (featureprop_pub_id, featureprop_id, pub_id) FROM stdin;
\.


--
-- Name: featureprop_pub_featureprop_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('featureprop_pub_featureprop_pub_id_seq', 1, false);


--
-- Name: forward_amplicon_sequence_inf_forward_amplicon_sequence_inf_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('forward_amplicon_sequence_inf_forward_amplicon_sequence_inf_seq', 1, false);


--
-- Data for Name: forward_amplicon_sequence_information; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY forward_amplicon_sequence_information (organism_name, accession_id, plant_number, ending, cxgn_production_visible, forward_amplicon_sequence_information_id) FROM stdin;
\.


--
-- Name: forward_amplicon_sequence_mar_forward_amplicon_sequence_mar_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('forward_amplicon_sequence_mar_forward_amplicon_sequence_mar_seq', 1, false);


--
-- Data for Name: forward_amplicon_sequence_markers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY forward_amplicon_sequence_markers (marker_name, ending, cxgn_production_visible, forward_amplicon_sequence_markers_id) FROM stdin;
\.


--
-- Data for Name: fpc_band; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY fpc_band (fpc_band_id, fpc_fingerprint_id, fragment_size, band_position) FROM stdin;
\.


--
-- Name: fpc_band_fpc_band_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('fpc_band_fpc_band_id_seq', 1, false);


--
-- Data for Name: fpc_build; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY fpc_build (fpc_build_id, date, file_base, comment, fpc_series_id) FROM stdin;
\.


--
-- Name: fpc_build_fpc_build_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('fpc_build_fpc_build_id_seq', 1, false);


--
-- Data for Name: fpc_build_fpc_fingerprint; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY fpc_build_fpc_fingerprint (fpc_build_fpc_fingerprint_id, fpc_build_id, fpc_fingerprint_id) FROM stdin;
\.


--
-- Name: fpc_build_fpc_fingerprint_fpc_build_fpc_fingerprint_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('fpc_build_fpc_fingerprint_fpc_build_fpc_fingerprint_id_seq', 1, false);


--
-- Data for Name: fpc_contig; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY fpc_contig (fpc_contig_id, fpc_build_id, name) FROM stdin;
\.


--
-- Data for Name: fpc_contig_clone; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY fpc_contig_clone (fpc_contig_clone_id, fpc_contig_id, clone_id, plausible) FROM stdin;
\.


--
-- Name: fpc_contig_clone_fpc_contig_clone_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('fpc_contig_clone_fpc_contig_clone_id_seq', 1, false);


--
-- Name: fpc_contig_fpc_contig_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('fpc_contig_fpc_contig_id_seq', 1, false);


--
-- Data for Name: fpc_fingerprint; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY fpc_fingerprint (fpc_fingerprint_id, clone_id, gel_name, enzyme_id) FROM stdin;
\.


--
-- Name: fpc_fingerprint_fpc_fingerprint_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('fpc_fingerprint_fpc_fingerprint_id_seq', 1, false);


--
-- Data for Name: fpc_series; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY fpc_series (fpc_series_id, name) FROM stdin;
\.


--
-- Name: fpc_series_fpc_series_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('fpc_series_fpc_series_id_seq', 1, false);


--
-- Data for Name: genotype; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY genotype (genotype_id, name, uniquename, description, type_id) FROM stdin;
\.


--
-- Name: genotype_genotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('genotype_genotype_id_seq', 1063, true);


--
-- Data for Name: genotypeprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY genotypeprop (genotypeprop_id, genotype_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: genotypeprop_genotypeprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('genotypeprop_genotypeprop_id_seq', 2156, true);


--
-- Data for Name: gff_meta; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY gff_meta (name, hostname, starttime) FROM stdin;
\.


--
-- Data for Name: glossary; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY glossary (glossary_id, term, definition) FROM stdin;
\.


--
-- Name: glossary_glossary_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('glossary_glossary_id_seq', 1, false);


--
-- Data for Name: itag_loading_log; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY itag_loading_log (id, deleted, "timestamp", uname, host, progname, pid, search_key, message) FROM stdin;
\.


--
-- Name: itag_loading_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('itag_loading_log_id_seq', 1, false);


--
-- Data for Name: marker_names; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY marker_names (marker_id, name) FROM stdin;
\.


--
-- Data for Name: materialized_view; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY materialized_view (materialized_view_id, last_update, refresh_time, name, mv_schema, mv_table, mv_specs, indexed, query) FROM stdin;
\.


--
-- Name: materialized_view_materialized_view_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('materialized_view_materialized_view_id_seq', 1, false);


--
-- Data for Name: matviews; Type: TABLE DATA; Schema: public; Owner: web_usr
--

COPY matviews (mv_id, mv_name, mv_dependents, currently_refreshing, last_refresh) FROM stdin;
\.


--
-- Name: matviews_mv_id_seq; Type: SEQUENCE SET; Schema: public; Owner: web_usr
--

SELECT pg_catalog.setval('matviews_mv_id_seq', 69, true);


--
-- Data for Name: nd_experiment; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment (nd_experiment_id, nd_geolocation_id, type_id) FROM stdin;
\.


--
-- Data for Name: nd_experiment_contact; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment_contact (nd_experiment_contact_id, nd_experiment_id, contact_id) FROM stdin;
\.


--
-- Name: nd_experiment_contact_nd_experiment_contact_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_contact_nd_experiment_contact_id_seq', 1, false);


--
-- Data for Name: nd_experiment_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment_dbxref (nd_experiment_dbxref_id, nd_experiment_id, dbxref_id) FROM stdin;
\.


--
-- Name: nd_experiment_dbxref_nd_experiment_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_dbxref_nd_experiment_dbxref_id_seq', 1, false);


--
-- Data for Name: nd_experiment_genotype; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment_genotype (nd_experiment_genotype_id, nd_experiment_id, genotype_id) FROM stdin;
\.


--
-- Name: nd_experiment_genotype_nd_experiment_genotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_genotype_nd_experiment_genotype_id_seq', 1063, true);


--
-- Name: nd_experiment_nd_experiment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_nd_experiment_id_seq', 80026, true);


--
-- Data for Name: nd_experiment_phenotype; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment_phenotype (nd_experiment_phenotype_id, nd_experiment_id, phenotype_id) FROM stdin;
\.


--
-- Name: nd_experiment_phenotype_nd_experiment_phenotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_phenotype_nd_experiment_phenotype_id_seq', 1487280, true);


--
-- Data for Name: nd_experiment_project; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment_project (nd_experiment_project_id, project_id, nd_experiment_id) FROM stdin;
\.


--
-- Name: nd_experiment_project_nd_experiment_project_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_project_nd_experiment_project_id_seq', 80021, true);


--
-- Data for Name: nd_experiment_protocol; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment_protocol (nd_experiment_protocol_id, nd_experiment_id, nd_protocol_id) FROM stdin;
\.


--
-- Name: nd_experiment_protocol_nd_experiment_protocol_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_protocol_nd_experiment_protocol_id_seq', 535, true);


--
-- Data for Name: nd_experiment_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment_pub (nd_experiment_pub_id, nd_experiment_id, pub_id) FROM stdin;
\.


--
-- Name: nd_experiment_pub_nd_experiment_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_pub_nd_experiment_pub_id_seq', 1, false);


--
-- Data for Name: nd_experiment_stock; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment_stock (nd_experiment_stock_id, nd_experiment_id, stock_id, type_id) FROM stdin;
\.


--
-- Data for Name: nd_experiment_stock_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment_stock_dbxref (nd_experiment_stock_dbxref_id, nd_experiment_stock_id, dbxref_id) FROM stdin;
\.


--
-- Name: nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq', 1, false);


--
-- Name: nd_experiment_stock_nd_experiment_stock_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_stock_nd_experiment_stock_id_seq', 81955, true);


--
-- Data for Name: nd_experiment_stockprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experiment_stockprop (nd_experiment_stockprop_id, nd_experiment_stock_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: nd_experiment_stockprop_nd_experiment_stockprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experiment_stockprop_nd_experiment_stockprop_id_seq', 1, false);


--
-- Data for Name: nd_experimentprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_experimentprop (nd_experimentprop_id, nd_experiment_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: nd_experimentprop_nd_experimentprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_experimentprop_nd_experimentprop_id_seq', 6612, true);


--
-- Data for Name: nd_geolocation; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_geolocation (nd_geolocation_id, description, latitude, longitude, geodetic_datum, altitude) FROM stdin;
\.


--
-- Name: nd_geolocation_nd_geolocation_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_geolocation_nd_geolocation_id_seq', 24, true);


--
-- Data for Name: nd_geolocationprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_geolocationprop (nd_geolocationprop_id, nd_geolocation_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: nd_geolocationprop_nd_geolocationprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_geolocationprop_nd_geolocationprop_id_seq', 1, false);


--
-- Data for Name: nd_protocol; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_protocol (nd_protocol_id, name, type_id) FROM stdin;
\.


--
-- Name: nd_protocol_nd_protocol_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_protocol_nd_protocol_id_seq', 1, true);


--
-- Data for Name: nd_protocol_reagent; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_protocol_reagent (nd_protocol_reagent_id, nd_protocol_id, reagent_id, type_id) FROM stdin;
\.


--
-- Name: nd_protocol_reagent_nd_protocol_reagent_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_protocol_reagent_nd_protocol_reagent_id_seq', 1, false);


--
-- Data for Name: nd_protocolprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_protocolprop (nd_protocolprop_id, nd_protocol_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: nd_protocolprop_nd_protocolprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_protocolprop_nd_protocolprop_id_seq', 1, false);


--
-- Data for Name: nd_reagent; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_reagent (nd_reagent_id, name, type_id, feature_id) FROM stdin;
\.


--
-- Name: nd_reagent_nd_reagent_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_reagent_nd_reagent_id_seq', 1, false);


--
-- Data for Name: nd_reagent_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_reagent_relationship (nd_reagent_relationship_id, subject_reagent_id, object_reagent_id, type_id) FROM stdin;
\.


--
-- Name: nd_reagent_relationship_nd_reagent_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_reagent_relationship_nd_reagent_relationship_id_seq', 1, false);


--
-- Data for Name: nd_reagentprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY nd_reagentprop (nd_reagentprop_id, nd_reagent_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: nd_reagentprop_nd_reagentprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('nd_reagentprop_nd_reagentprop_id_seq', 1, false);


--
-- Data for Name: organism; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY organism (organism_id, abbreviation, genus, species, common_name, comment, genbank_taxon_id, sgn_organism_id, obsolete) FROM stdin;
\.


--
-- Data for Name: organism_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY organism_dbxref (organism_dbxref_id, organism_id, dbxref_id) FROM stdin;
\.


--
-- Name: organism_dbxref_organism_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('organism_dbxref_organism_dbxref_id_seq', 109390, true);


--
-- Name: organism_organism_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('organism_organism_id_seq', 109395, true);


--
-- Data for Name: organism_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY organism_relationship (organism_relationship_id, subject_id, object_id, type_id) FROM stdin;
\.


--
-- Name: organism_relationship_organism_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('organism_relationship_organism_relationship_id_seq', 1, false);


--
-- Data for Name: organismpath; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY organismpath (organismpath_id, subject_id, object_id, type_id, pathdistance) FROM stdin;
\.


--
-- Name: organismpath_organismpath_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('organismpath_organismpath_id_seq', 1, false);


--
-- Data for Name: organismprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY organismprop (organismprop_id, organism_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: organismprop_organismprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('organismprop_organismprop_id_seq', 59396, true);


--
-- Data for Name: phendesc; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phendesc (phendesc_id, genotype_id, environment_id, description, type_id, pub_id) FROM stdin;
\.


--
-- Name: phendesc_phendesc_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phendesc_phendesc_id_seq', 1, false);


--
-- Data for Name: phenotype; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phenotype (phenotype_id, uniquename, observable_id, attr_id, value, cvalue_id, assay_id, individual_id, sp_person_id, name) FROM stdin;
\.


--
-- Data for Name: phenotype_comparison; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phenotype_comparison (phenotype_comparison_id, genotype1_id, environment1_id, genotype2_id, environment2_id, phenotype1_id, phenotype2_id, pub_id, organism_id) FROM stdin;
\.


--
-- Data for Name: phenotype_comparison_cvterm; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phenotype_comparison_cvterm (phenotype_comparison_cvterm_id, phenotype_comparison_id, cvterm_id, pub_id, rank) FROM stdin;
\.


--
-- Name: phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq', 1, false);


--
-- Name: phenotype_comparison_phenotype_comparison_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phenotype_comparison_phenotype_comparison_id_seq', 1, false);


--
-- Data for Name: phenotype_cvterm; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phenotype_cvterm (phenotype_cvterm_id, phenotype_id, cvterm_id, rank) FROM stdin;
\.


--
-- Name: phenotype_cvterm_phenotype_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phenotype_cvterm_phenotype_cvterm_id_seq', 1, false);


--
-- Name: phenotype_phenotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phenotype_phenotype_id_seq', 740335, true);


--
-- Data for Name: phenotypeprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phenotypeprop (phenotypeprop_id, phenotype_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: phenotypeprop_phenotypeprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phenotypeprop_phenotypeprop_id_seq', 1, false);


--
-- Data for Name: phenstatement; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phenstatement (phenstatement_id, genotype_id, environment_id, phenotype_id, type_id, pub_id) FROM stdin;
\.


--
-- Name: phenstatement_phenstatement_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phenstatement_phenstatement_id_seq', 1, false);


--
-- Data for Name: phylonode; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phylonode (phylonode_id, phylotree_id, parent_phylonode_id, left_idx, right_idx, type_id, feature_id, label, distance) FROM stdin;
\.


--
-- Data for Name: phylonode_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phylonode_dbxref (phylonode_dbxref_id, phylonode_id, dbxref_id) FROM stdin;
\.


--
-- Name: phylonode_dbxref_phylonode_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phylonode_dbxref_phylonode_dbxref_id_seq', 1, false);


--
-- Data for Name: phylonode_organism; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phylonode_organism (phylonode_organism_id, phylonode_id, organism_id) FROM stdin;
\.


--
-- Name: phylonode_organism_phylonode_organism_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phylonode_organism_phylonode_organism_id_seq', 109390, true);


--
-- Name: phylonode_phylonode_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phylonode_phylonode_id_seq', 1, false);


--
-- Data for Name: phylonode_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phylonode_pub (phylonode_pub_id, phylonode_id, pub_id) FROM stdin;
\.


--
-- Name: phylonode_pub_phylonode_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phylonode_pub_phylonode_pub_id_seq', 1, false);


--
-- Data for Name: phylonode_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phylonode_relationship (phylonode_relationship_id, subject_id, object_id, type_id, rank, phylotree_id) FROM stdin;
\.


--
-- Name: phylonode_relationship_phylonode_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phylonode_relationship_phylonode_relationship_id_seq', 1, false);


--
-- Data for Name: phylonodeprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phylonodeprop (phylonodeprop_id, phylonode_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: phylonodeprop_phylonodeprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phylonodeprop_phylonodeprop_id_seq', 1, false);


--
-- Data for Name: phylotree; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phylotree (phylotree_id, dbxref_id, name, type_id, analysis_id, comment) FROM stdin;
\.


--
-- Name: phylotree_phylotree_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phylotree_phylotree_id_seq', 1, true);


--
-- Data for Name: phylotree_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY phylotree_pub (phylotree_pub_id, phylotree_id, pub_id) FROM stdin;
\.


--
-- Name: phylotree_pub_phylotree_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('phylotree_pub_phylotree_pub_id_seq', 1, false);


--
-- Data for Name: project; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY project (project_id, name, description) FROM stdin;
145	Program 1	Objective 1
\.


--
-- Data for Name: project_contact; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY project_contact (project_contact_id, project_id, contact_id) FROM stdin;
\.


--
-- Name: project_contact_project_contact_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('project_contact_project_contact_id_seq', 1, false);


--
-- Name: project_project_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('project_project_id_seq', 145, true);


--
-- Data for Name: project_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY project_pub (project_pub_id, project_id, pub_id) FROM stdin;
\.


--
-- Name: project_pub_project_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('project_pub_project_pub_id_seq', 1, false);


--
-- Data for Name: project_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY project_relationship (project_relationship_id, subject_project_id, object_project_id, type_id) FROM stdin;
\.


--
-- Name: project_relationship_project_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('project_relationship_project_relationship_id_seq', 6, true);


--
-- Data for Name: projectprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY projectprop (projectprop_id, project_id, type_id, value, rank) FROM stdin;
152	145	77194	\N	0
\.


--
-- Name: projectprop_projectprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('projectprop_projectprop_id_seq', 152, true);


--
-- Data for Name: pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY pub (pub_id, title, volumetitle, volume, series_name, issue, pyear, pages, miniref, uniquename, type_id, is_obsolete, publisher, pubplace, title_tsvector) FROM stdin;
\.


--
-- Data for Name: pub_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY pub_dbxref (pub_dbxref_id, pub_id, dbxref_id, is_current) FROM stdin;
\.


--
-- Name: pub_dbxref_pub_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('pub_dbxref_pub_dbxref_id_seq', 2, true);


--
-- Name: pub_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('pub_pub_id_seq', 2, true);


--
-- Data for Name: pub_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY pub_relationship (pub_relationship_id, subject_id, object_id, type_id) FROM stdin;
\.


--
-- Name: pub_relationship_pub_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('pub_relationship_pub_relationship_id_seq', 1, false);


--
-- Data for Name: pubabstract; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY pubabstract (pubabstract_id, pub_id, abstract, abstract_tsvector) FROM stdin;
\.


--
-- Name: pubabstract_pubabstract_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('pubabstract_pubabstract_id_seq', 1, false);


--
-- Data for Name: pubauthor; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY pubauthor (pubauthor_id, pub_id, rank, editor, surname, givennames, suffix) FROM stdin;
\.


--
-- Name: pubauthor_pubauthor_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('pubauthor_pubauthor_id_seq', 1, false);


--
-- Data for Name: pubprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY pubprop (pubprop_id, pub_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: pubprop_pubprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('pubprop_pubprop_id_seq', 1, false);


--
-- Data for Name: resource_file; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY resource_file (resource_file_id, name, expression) FROM stdin;
\.


--
-- Name: resource_file_resource_file_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('resource_file_resource_file_id_seq', 1, false);


--
-- Data for Name: signalp; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY signalp (signalp_id, cds_id, nn_cmax, nn_cpos, nn_cd, nn_ymax, nn_ypos, nn_yd, nn_smax, nn_spos, nn_sd, nn_smean, nn_smeand, nn_score, nn_d, hmm_type, hmm_cmax, hmm_cpos, hmm_cd, hmm_sprob, hmm_d) FROM stdin;
\.


--
-- Name: signalp_signalp_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('signalp_signalp_id_seq', 1, false);


--
-- Data for Name: stock; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stock (stock_id, dbxref_id, organism_id, name, uniquename, description, type_id, is_obsolete) FROM stdin;
\.


--
-- Data for Name: stock_cvterm; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stock_cvterm (stock_cvterm_id, stock_id, cvterm_id, pub_id, rank, is_not) FROM stdin;
\.


--
-- Name: stock_cvterm_stock_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stock_cvterm_stock_cvterm_id_seq', 1, false);


--
-- Data for Name: stock_cvtermprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stock_cvtermprop (stock_cvtermprop_id, stock_cvterm_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: stock_cvtermprop_stock_cvtermprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stock_cvtermprop_stock_cvtermprop_id_seq', 1, false);


--
-- Data for Name: stock_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stock_dbxref (stock_dbxref_id, stock_id, dbxref_id, is_current) FROM stdin;
\.


--
-- Name: stock_dbxref_stock_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stock_dbxref_stock_dbxref_id_seq', 1, false);


--
-- Data for Name: stock_dbxrefprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stock_dbxrefprop (stock_dbxrefprop_id, stock_dbxref_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: stock_dbxrefprop_stock_dbxrefprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stock_dbxrefprop_stock_dbxrefprop_id_seq', 1, false);


--
-- Data for Name: stock_genotype; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stock_genotype (stock_genotype_id, stock_id, genotype_id) FROM stdin;
\.


--
-- Name: stock_genotype_stock_genotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stock_genotype_stock_genotype_id_seq', 1, false);


--
-- Data for Name: stock_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stock_pub (stock_pub_id, stock_id, pub_id) FROM stdin;
\.


--
-- Name: stock_pub_stock_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stock_pub_stock_pub_id_seq', 1, false);


--
-- Data for Name: stock_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stock_relationship (stock_relationship_id, subject_id, object_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: stock_relationship_cvterm; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stock_relationship_cvterm (stock_relationship_cvterm_id, stock_relationship_id, cvterm_id, pub_id) FROM stdin;
\.


--
-- Name: stock_relationship_cvterm_stock_relationship_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stock_relationship_cvterm_stock_relationship_cvterm_id_seq', 1, false);


--
-- Data for Name: stock_relationship_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stock_relationship_pub (stock_relationship_pub_id, stock_relationship_id, pub_id) FROM stdin;
\.


--
-- Name: stock_relationship_pub_stock_relationship_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stock_relationship_pub_stock_relationship_pub_id_seq', 1, false);


--
-- Name: stock_relationship_stock_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stock_relationship_stock_relationship_id_seq', 39988, true);


--
-- Name: stock_stock_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stock_stock_id_seq', 41247, true);


--
-- Data for Name: stockcollection; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stockcollection (stockcollection_id, type_id, contact_id, name, uniquename) FROM stdin;
\.


--
-- Data for Name: stockcollection_stock; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stockcollection_stock (stockcollection_stock_id, stockcollection_id, stock_id) FROM stdin;
\.


--
-- Name: stockcollection_stock_stockcollection_stock_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stockcollection_stock_stockcollection_stock_id_seq', 1, false);


--
-- Name: stockcollection_stockcollection_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stockcollection_stockcollection_id_seq', 1, false);


--
-- Data for Name: stockcollectionprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stockcollectionprop (stockcollectionprop_id, stockcollection_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: stockcollectionprop_stockcollectionprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stockcollectionprop_stockcollectionprop_id_seq', 1, false);


--
-- Data for Name: stockprop; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stockprop (stockprop_id, stock_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: stockprop_pub; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY stockprop_pub (stockprop_pub_id, stockprop_id, pub_id) FROM stdin;
\.


--
-- Name: stockprop_pub_stockprop_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stockprop_pub_stockprop_pub_id_seq', 1, false);


--
-- Name: stockprop_stockprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('stockprop_stockprop_id_seq', 44612, true);


--
-- Data for Name: synonym; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY synonym (synonym_id, name, type_id, synonym_sgml) FROM stdin;
\.


--
-- Name: synonym_synonym_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('synonym_synonym_id_seq', 1, false);


--
-- Data for Name: tableinfo; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tableinfo (tableinfo_id, name, primary_key_column, is_view, view_on_table_id, superclass_table_id, is_updateable, modification_date) FROM stdin;
\.


--
-- Name: tableinfo_tableinfo_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('tableinfo_tableinfo_id_seq', 1, false);


--
-- Data for Name: tmp_cds_handler; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tmp_cds_handler (cds_row_id, seq_id, gff_id, type, fmin, fmax, object) FROM stdin;
\.


--
-- Name: tmp_cds_handler_cds_row_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('tmp_cds_handler_cds_row_id_seq', 1, false);


--
-- Data for Name: tmp_cds_handler_relationship; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tmp_cds_handler_relationship (rel_row_id, cds_row_id, parent_id, grandparent_id) FROM stdin;
\.


--
-- Name: tmp_cds_handler_relationship_rel_row_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('tmp_cds_handler_relationship_rel_row_id_seq', 1, false);


--
-- Data for Name: tmp_gff_load_cache; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY tmp_gff_load_cache (feature_id, uniquename, type_id, organism_id) FROM stdin;
\.


--
-- Data for Name: unigene_dbxref; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY unigene_dbxref (unigene_dbxref_id, unigene_id, dbxref_id) FROM stdin;
\.


--
-- Name: unigene_dbxref_unigene_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('unigene_dbxref_unigene_dbxref_id_seq', 1, false);


--
-- Data for Name: unigene_relations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY unigene_relations (unigene_id, superceded_by, superceding_build_nr, superceding_organism) FROM stdin;
\.


--
-- Data for Name: unigene_signalp; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY unigene_signalp (unigene_id, nn_cmax, nn_cpos, nn_cd, nn_ymax, nn_ypos, nn_yd, nn_smax, nn_spos, nn_sd, nn_smean, nn_smeand, nn_score, nn_d, hmm_type, hmm_cmax, hmm_cpos, hmm_cd, hmm_sprob, hmm_d, cds_id) FROM stdin;
\.


SET search_path = sgn, pg_catalog;

--
-- Data for Name: accession; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY accession (accession_id, organism_id, common_name, accession_name_id, chado_organism_id, stock_id) FROM stdin;
\.


--
-- Name: accession_accession_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('accession_accession_id_seq', 1, false);


--
-- Data for Name: accession_names; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY accession_names (accession_name_id, accession_name, accession_id) FROM stdin;
\.


--
-- Name: accession_names_accession_name_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('accession_names_accession_name_id_seq', 1, false);


--
-- Data for Name: annotation_target_type; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY annotation_target_type (annotation_target_type_id, type_name, type_description, table_name, index_field_name) FROM stdin;
\.


--
-- Name: annotation_target_type_annotation_target_type_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('annotation_target_type_annotation_target_type_id_seq', 1, false);


--
-- Data for Name: authors; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY authors (author_id, name, institution) FROM stdin;
\.


--
-- Name: authors_author_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('authors_author_id_seq', 1, false);


--
-- Data for Name: blast_annotations; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY blast_annotations (blast_annotation_id, apply_id, apply_type, blast_target_id, n_hits, hits_stored, last_updated, host, pid) FROM stdin;
\.


--
-- Name: blast_annotations_blast_annotation_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('blast_annotations_blast_annotation_id_seq', 1, false);


--
-- Data for Name: blast_db; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY blast_db (blast_db_id, file_base, title, type, source_url, lookup_url, update_freq, info_url, index_seqs, blast_db_group_id, web_interface_visible, description, jbrowse_src) FROM stdin;
1	test.fasta	test	nucleotide	\N	\N	monthly	\N	t	\N	t	a database for testing	\N
\.


--
-- Data for Name: blast_db_blast_db_group; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY blast_db_blast_db_group (blast_db_blast_db_group_id, blast_db_id, blast_db_group_id) FROM stdin;
1	1	1
\.


--
-- Name: blast_db_blast_db_group_blast_db_blast_db_group_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('blast_db_blast_db_group_blast_db_blast_db_group_id_seq', 1, true);


--
-- Name: blast_db_blast_db_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('blast_db_blast_db_id_seq', 1, true);


--
-- Data for Name: blast_db_group; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY blast_db_group (blast_db_group_id, name, ordinal) FROM stdin;
1	test group	1
\.


--
-- Name: blast_db_group_blast_db_group_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('blast_db_group_blast_db_group_id_seq', 1, true);


--
-- Data for Name: blast_db_organism; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY blast_db_organism (blast_db_organism_id, blast_db_id, organism_id) FROM stdin;
\.


--
-- Name: blast_db_organism_blast_db_organism_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('blast_db_organism_blast_db_organism_id_seq', 1, false);


--
-- Data for Name: blast_defline; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY blast_defline (defline_id, blast_target_id, target_db_id, defline, defline_fulltext, identifier_defline_fulltext) FROM stdin;
\.


--
-- Name: blast_defline_defline_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('blast_defline_defline_id_seq', 1, false);


--
-- Data for Name: blast_hits; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY blast_hits (blast_hit_id, blast_annotation_id, target_db_id, evalue, score, identity_percentage, apply_start, apply_end, defline_id) FROM stdin;
\.


--
-- Name: blast_hits_blast_hit_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('blast_hits_blast_hit_id_seq', 1, false);


--
-- Data for Name: blast_targets; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY blast_targets (blast_target_id, blast_program, db_name, db_path, local_copy_timestamp) FROM stdin;
\.


--
-- Name: blast_targets_blast_target_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('blast_targets_blast_target_id_seq', 1, false);


--
-- Data for Name: cds; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY cds (cds_id, unigene_id, seq_text, seq_edits, protein_seq, begin, "end", forward_reverse, run_id, score, method, frame, preferred, cds_seq, protein_feature_id) FROM stdin;
\.


--
-- Name: cds_cds_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('cds_cds_id_seq', 1, false);


--
-- Data for Name: chadoprop; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY chadoprop (chadoprop_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: chadoprop_chadoprop_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('chadoprop_chadoprop_id_seq', 1, false);


--
-- Data for Name: clone; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY clone (clone_id, library_id, clone_name, clone_group_id) FROM stdin;
\.


--
-- Name: clone_clone_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('clone_clone_id_seq', 1, false);


--
-- Data for Name: cloning_vector; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY cloning_vector (cloning_vector_id, name, seq) FROM stdin;
\.


--
-- Name: cloning_vector_cloning_vector_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('cloning_vector_cloning_vector_id_seq', 1, false);


--
-- Data for Name: common_name; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY common_name (common_name_id, common_name) FROM stdin;
\.


--
-- Name: common_name_common_name_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('common_name_common_name_id_seq', 1, true);


--
-- Data for Name: common_nameprop; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY common_nameprop (common_nameprop_id, common_name_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: common_nameprop_common_nameprop_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('common_nameprop_common_nameprop_id_seq', 1, false);


--
-- Data for Name: cos_markers; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY cos_markers (cos_marker_id, marker_id, est_read_id, cos_id, at_match, bac_id, at_position, best_gb_prot_hit, at_evalue, at_identities, mips_cat, description, comment, tomato_copy_number, gbprot_evalue, gbprot_identities) FROM stdin;
\.


--
-- Name: cos_markers_cos_marker_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('cos_markers_cos_marker_id_seq', 1, false);


--
-- Data for Name: cosii_ortholog; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY cosii_ortholog (cosii_unigene_id, marker_id, unigene_id, copies, database_name, sequence_name, edited_sequence_id, peptide_sequence_id, introns) FROM stdin;
\.


--
-- Name: cosii_ortholog_cosii_unigene_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('cosii_ortholog_cosii_unigene_id_seq', 1, false);


--
-- Data for Name: cvprop; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY cvprop (cvprop_id, cv_id, type_id, value, rank) FROM stdin;
\.


--
-- Name: cvprop_cvprop_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('cvprop_cvprop_id_seq', 1, false);


--
-- Data for Name: deprecated_linkage_groups; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY deprecated_linkage_groups (lg_id, map_id, lg_order, lg_name) FROM stdin;
\.


--
-- Name: deprecated_linkage_groups_lg_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('deprecated_linkage_groups_lg_id_seq', 1, false);


--
-- Data for Name: deprecated_map_cross; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY deprecated_map_cross (map_cross_id, map_id, organism_id) FROM stdin;
\.


--
-- Name: deprecated_map_cross_map_cross_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('deprecated_map_cross_map_cross_id_seq', 1, false);


--
-- Data for Name: deprecated_mapdata; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY deprecated_mapdata (loc_id, map_id, lg_id, "offset", loc_type, loc_order) FROM stdin;
\.


--
-- Name: deprecated_mapdata_loc_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('deprecated_mapdata_loc_id_seq', 1, false);


--
-- Data for Name: deprecated_maps; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY deprecated_maps (map_id, legacy_id, short_name, long_name, number_chromosomes, default_threshold, header, abstract, genetic_cross, population_type, population_size, seed_available, seed_url, deprecated_by, map_type) FROM stdin;
\.


--
-- Name: deprecated_maps_map_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('deprecated_maps_map_id_seq', 1, false);


--
-- Data for Name: deprecated_marker_confidences; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY deprecated_marker_confidences (confidence_id, confidence_name, legacy_conf_id) FROM stdin;
\.


--
-- Name: deprecated_marker_confidences_confidence_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('deprecated_marker_confidences_confidence_id_seq', 1, false);


--
-- Data for Name: deprecated_marker_locations; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY deprecated_marker_locations (marker_location_id, marker_id, loc_id, confidence, order_in_loc, location_subscript, mapmaker_id) FROM stdin;
\.


--
-- Name: deprecated_marker_locations_marker_location_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('deprecated_marker_locations_marker_location_id_seq', 1, false);


--
-- Data for Name: deprecated_marker_types; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY deprecated_marker_types (marker_type_id, type_name, description, marker_table) FROM stdin;
\.


--
-- Name: deprecated_marker_types_marker_type_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('deprecated_marker_types_marker_type_id_seq', 1, false);


--
-- Data for Name: deprecated_markers; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY deprecated_markers (marker_id, marker_type, marker_name) FROM stdin;
\.


--
-- Name: deprecated_markers_marker_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('deprecated_markers_marker_id_seq', 1, false);


--
-- Data for Name: derived_from_source; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY derived_from_source (derived_from_source_id, source_name, source_schema, source_table, source_col) FROM stdin;
\.


--
-- Name: derived_from_source_derived_from_source_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('derived_from_source_derived_from_source_id_seq', 1, false);


--
-- Data for Name: domain; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY domain (domain_id, method_id, domain_accession, description, interpro_id, description_fulltext, dbxref_id, metadata_id) FROM stdin;
\.


--
-- Name: domain_domain_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('domain_domain_id_seq', 1, false);


--
-- Data for Name: domain_match; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY domain_match (domain_match_id, cds_id, unigene_id, domain_id, match_begin, match_end, e_value, hit_status, run_id, metadata_id) FROM stdin;
\.


--
-- Name: domain_match_domain_match_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('domain_match_domain_match_id_seq', 1, false);


--
-- Data for Name: enzyme_restriction_sites; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY enzyme_restriction_sites (enzyme_id, restriction_site, enzyme_restriction_sites_id) FROM stdin;
\.


--
-- Name: enzyme_restriction_sites_enzyme_restriction_sites_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('enzyme_restriction_sites_enzyme_restriction_sites_id_seq', 1, false);


--
-- Data for Name: enzymes; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY enzymes (enzyme_id, enzyme_name) FROM stdin;
\.


--
-- Name: enzymes_enzyme_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('enzymes_enzyme_id_seq', 1, false);


--
-- Data for Name: est; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY est (est_id, read_id, version, basecaller, seq, qscore, call_positions, status, flags, date, genbank_submission_date, genbank_confirmed) FROM stdin;
\.


--
-- Data for Name: est_dbxref; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY est_dbxref (est_dbxref_id, est_id, dbxref_id) FROM stdin;
\.


--
-- Name: est_dbxref_est_dbxref_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('est_dbxref_est_dbxref_id_seq', 1, false);


--
-- Name: est_est_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('est_est_id_seq', 1, false);


--
-- Data for Name: ests_mapped_by_clone; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY ests_mapped_by_clone (embc_id, marker_id, clone_id) FROM stdin;
\.


--
-- Name: ests_mapped_by_clone_embc_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('ests_mapped_by_clone_embc_id_seq', 1, false);


--
-- Data for Name: experiment_type; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY experiment_type (experiment_type_id, name, description) FROM stdin;
\.


--
-- Name: experiment_type_experiment_type_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('experiment_type_experiment_type_id_seq', 1, true);


--
-- Data for Name: facility; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY facility (facility_id, submit_user_id, facility_moniker, facility_shortname, facility_name, facility_contact, facility_address, funding_agency, funding_comment, sequencing_primers, machine, chemistry, attribution_display, sp_person_id) FROM stdin;
\.


--
-- Name: facility_facility_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('facility_facility_id_seq', 1, false);


--
-- Data for Name: family; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY family (family_id, family_build_id, family_annotation, tree_log_file_location, tree_file_location, tree_taxa_number, tree_overlap_length, family_nr, member_count) FROM stdin;
\.


--
-- Data for Name: family_build; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY family_build (family_build_id, group_id, build_nr, i_value, build_date, status) FROM stdin;
\.


--
-- Name: family_build_family_build_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('family_build_family_build_id_seq', 1, false);


--
-- Name: family_family_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('family_family_id_seq', 1, false);


--
-- Data for Name: family_member; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY family_member (family_member_id, cds_id, organism_group_id, family_id, database_name, sequence_name, alignment_seq) FROM stdin;
\.


--
-- Name: family_member_family_member_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('family_member_family_member_id_seq', 1, false);


--
-- Data for Name: family_tree; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY family_tree (family_tree_id, family_id, tree_nr, newick_cds, newick_unigene) FROM stdin;
\.


--
-- Name: family_tree_family_tree_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('family_tree_family_tree_id_seq', 1, false);


--
-- Data for Name: fish_chromatin_density_constants; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY fish_chromatin_density_constants (arm, density) FROM stdin;
\.


--
-- Data for Name: fish_experimenter; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY fish_experimenter (fish_experimenter_id, fish_experimenter_name) FROM stdin;
\.


--
-- Name: fish_experimenter_fish_experimenter_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('fish_experimenter_fish_experimenter_id_seq', 1, false);


--
-- Data for Name: fish_file; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY fish_file (fish_file_id, filename, fish_result_id) FROM stdin;
\.


--
-- Name: fish_file_fish_file_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('fish_file_fish_file_id_seq', 1, false);


--
-- Data for Name: fish_image; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY fish_image (fish_image_id, filename, fish_result_id) FROM stdin;
\.


--
-- Data for Name: fish_karyotype_constants; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY fish_karyotype_constants (fish_experimenter_id, chromo_num, chromo_arm, arm_length, arm_eu_length, arm_het_length) FROM stdin;
\.


--
-- Data for Name: fish_karyotype_constants_old; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY fish_karyotype_constants_old (chromo_num, chromo_length, chromo_arm_ratio, short_arm_length, short_arm_eu_length, short_arm_het_length, long_arm_length, long_arm_eu_length, long_arm_het_length) FROM stdin;
\.


--
-- Data for Name: fish_result; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY fish_result (fish_result_id, map_id, fish_experimenter_id, experiment_name, clone_id, chromo_num, chromo_arm, percent_from_centromere, experiment_group, attribution_id) FROM stdin;
\.


--
-- Data for Name: fish_result_composite; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY fish_result_composite (fish_result_id, map_id, fish_experimenter_id, experiment_name, clone_id, chromo_num, chromo_arm, percent_from_centromere, het_or_eu, um_from_centromere, um_from_arm_end, um_from_arm_border, mbp_from_arm_end, mbp_from_centromere, mbp_from_arm_border, experiment_group) FROM stdin;
\.


--
-- Name: fish_result_fish_result_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('fish_result_fish_result_id_seq', 1, false);


--
-- Data for Name: fish_result_image; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY fish_result_image (fish_result_image_id, image_id, fish_result_id) FROM stdin;
\.


--
-- Name: fish_result_image_fish_result_image_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('fish_result_image_fish_result_image_id_seq', 1, false);


--
-- Data for Name: go; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY go (go_id, go_accession, description, description_fulltext) FROM stdin;
\.


--
-- Name: go_go_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('go_go_id_seq', 1, false);


--
-- Data for Name: group_linkage; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY group_linkage (group_linkage_id, group_id, member_id, member_type, member_value) FROM stdin;
\.


--
-- Name: group_linkage_group_linkage_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('group_linkage_group_linkage_id_seq', 1, false);


--
-- Data for Name: groups; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY groups (group_id, type, comment) FROM stdin;
\.


--
-- Name: groups_group_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('groups_group_id_seq', 1, false);


--
-- Data for Name: id_linkage; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY id_linkage (id_linkage_id, link_id, link_id_type, internal_id, internal_id_type) FROM stdin;
\.


--
-- Name: id_linkage_id_linkage_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('id_linkage_id_linkage_id_seq', 1, false);


--
-- Data for Name: il_info; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY il_info (ns_marker_id, sn_marker_id, map_id, map_version_id, population_id, ns_position, sn_position, name, ns_alias, sn_alias, lg_name) FROM stdin;
\.


--
-- Data for Name: interpro; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY interpro (interpro_id, interpro_accession, description, description_fulltext) FROM stdin;
\.


--
-- Data for Name: interpro_go; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY interpro_go (interpro_go_id, interpro_accession, go_accession) FROM stdin;
\.


--
-- Name: interpro_go_interpro_go_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('interpro_go_interpro_go_id_seq', 1, false);


--
-- Name: interpro_interpro_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('interpro_interpro_id_seq', 1, false);


--
-- Data for Name: library; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY library (library_id, type, submit_user_id, library_name, library_shortname, authors, organism_id, cultivar, accession, tissue, development_stage, treatment_conditions, cloning_host, vector, rs1, rs2, cloning_kit, comments, contact_information, order_routing_id, sp_person_id, forward_adapter, reverse_adapter, obsolete, modified_date, create_date, chado_organism_id) FROM stdin;
\.


--
-- Name: library_library_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('library_library_id_seq', 1, false);


--
-- Data for Name: linkage_group; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY linkage_group (lg_id, map_version_id, lg_order, lg_name, north_location_id, south_location_id) FROM stdin;
\.


--
-- Name: linkage_group_lg_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('linkage_group_lg_id_seq', 23, true);


--
-- Data for Name: loc_types; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY loc_types (loc_type_id, type_code, type_name) FROM stdin;
\.


--
-- Name: loc_types_loc_type_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('loc_types_loc_type_id_seq', 1, false);


--
-- Data for Name: manual_annotations; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY manual_annotations (manual_annotations_id, annotation_target_id, annotation_target_type_id, annotation_text, author_id, date_entered, last_modified, annotation_text_fulltext) FROM stdin;
\.


--
-- Name: manual_annotations_manual_annotations_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('manual_annotations_manual_annotations_id_seq', 1, false);


--
-- Data for Name: manual_censor_reasons; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY manual_censor_reasons (censor_id, reason) FROM stdin;
\.


--
-- Name: manual_censor_reasons_censor_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('manual_censor_reasons_censor_id_seq', 1, false);


--
-- Data for Name: map; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY map (map_id, short_name, long_name, abstract, map_type, parent_1, parent_2, units, ancestor, population_id, parent1_stock_id, parent2_stock_id, population_stock_id) FROM stdin;
\.


--
-- Name: map_map_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('map_map_id_seq', 1, true);


--
-- Data for Name: map_version; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY map_version (map_version_id, map_id, date_loaded, current_version, default_threshold, has_il, has_physical, metadata_id) FROM stdin;
\.


--
-- Name: map_version_map_version_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('map_version_map_version_id_seq', 2, true);


--
-- Data for Name: marker; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY marker (marker_id, dummy_field) FROM stdin;
\.


--
-- Data for Name: marker_alias; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY marker_alias (alias_id, alias, marker_id, preferred) FROM stdin;
\.


--
-- Name: marker_alias_alias_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('marker_alias_alias_id_seq', 567, true);


--
-- Data for Name: marker_collectible; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY marker_collectible (marker_collectible_dummy_id, marker_id, mc_id) FROM stdin;
\.


--
-- Name: marker_collectible_marker_collectible_dummy_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('marker_collectible_marker_collectible_dummy_id_seq', 1, false);


--
-- Data for Name: marker_collection; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY marker_collection (mc_id, mc_name, mc_description) FROM stdin;
\.


--
-- Name: marker_collection_mc_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('marker_collection_mc_id_seq', 1, false);


--
-- Data for Name: marker_confidence; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY marker_confidence (confidence_id, confidence_name) FROM stdin;
\.


--
-- Name: marker_confidence_confidence_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('marker_confidence_confidence_id_seq', 1, true);


--
-- Data for Name: marker_derived_from; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY marker_derived_from (marker_derived_dummy_id, marker_id, derived_from_source_id, id_in_source) FROM stdin;
\.


--
-- Name: marker_derived_from_marker_derived_dummy_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('marker_derived_from_marker_derived_dummy_id_seq', 1, false);


--
-- Data for Name: marker_experiment; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY marker_experiment (marker_experiment_id, marker_id, pcr_experiment_id, rflp_experiment_id, location_id, protocol) FROM stdin;
\.


--
-- Name: marker_experiment_marker_experiment_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('marker_experiment_marker_experiment_id_seq', 567, true);


--
-- Data for Name: marker_location; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY marker_location (location_id, lg_id, map_version_id, "position", confidence_id, subscript, position_north, position_south) FROM stdin;
\.


--
-- Name: marker_location_location_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('marker_location_location_id_seq', 567, true);


--
-- Name: marker_marker_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('marker_marker_id_seq', 567, true);


--
-- Data for Name: metadata; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY metadata (metadata_id, create_date, create_person_id, modified_date, modified_person_id, previous_metadata_id, obsolete, obsolete_note) FROM stdin;
\.


--
-- Name: metadata_metadata_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('metadata_metadata_id_seq', 1, false);


--
-- Data for Name: microarray; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY microarray (microarray_id, chip_name, release, version, spot_id, content_specific_tag, clone_id) FROM stdin;
\.


--
-- Name: microarray_microarray_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('microarray_microarray_id_seq', 1, false);


--
-- Data for Name: misc; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY misc (misc_unique_id, misc_id, name, value) FROM stdin;
\.


--
-- Name: misc_misc_unique_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('misc_misc_unique_id_seq', 1, false);


--
-- Data for Name: organism; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY organism (organism_id, organism_name, common_name_id, organism_descrip, specie_tax, genus_tax, subfamily_tax, family_tax, order_tax, chr_n_gnmc, polypl_gnmc, genom_size_gnmc, genom_proj_gnmc, est_attribution_tqmc, chado_organism_id) FROM stdin;
\.


--
-- Name: organism_organism_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('organism_organism_id_seq', 1, false);


--
-- Data for Name: organismgroup; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY organismgroup (organismgroup_id, name, type) FROM stdin;
\.


--
-- Data for Name: organismgroup_member; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY organismgroup_member (organismgroup_member_id, organismgroup_id, organism_id) FROM stdin;
\.


--
-- Name: organismgroup_member_organismgroup_member_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('organismgroup_member_organismgroup_member_id_seq', 1, false);


--
-- Name: organismgroup_organismgroup_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('organismgroup_organismgroup_id_seq', 1, false);


--
-- Data for Name: p_markers; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY p_markers (pid, marker_id, est_clone_id, p_mrkr_name) FROM stdin;
\.


--
-- Name: p_markers_pid_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('p_markers_pid_seq', 1, false);


--
-- Data for Name: pcr_exp_accession; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY pcr_exp_accession (pcr_exp_accession_id, pcr_experiment_id, accession_id, stock_id) FROM stdin;
\.


--
-- Name: pcr_exp_accession_pcr_exp_accession_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('pcr_exp_accession_pcr_exp_accession_id_seq', 1, false);


--
-- Data for Name: pcr_experiment; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY pcr_experiment (pcr_experiment_id, marker_id, mg_concentration, annealing_temp, primer_id_fwd, primer_id_rev, subscript, experiment_type_id, map_id, additional_enzymes, primer_type, predicted, primer_id_pd, accession_id, stock_id) FROM stdin;
\.


--
-- Name: pcr_experiment_pcr_experiment_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('pcr_experiment_pcr_experiment_id_seq', 1, false);


--
-- Data for Name: pcr_experiment_sequence; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY pcr_experiment_sequence (pcr_experiment_sequence_id, pcr_experiment_id, sequence_id, type_id) FROM stdin;
\.


--
-- Name: pcr_experiment_sequence_pcr_experiment_sequence_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('pcr_experiment_sequence_pcr_experiment_sequence_id_seq', 1, false);


--
-- Data for Name: pcr_product; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY pcr_product (pcr_product_id, pcr_exp_accession_id, enzyme_id, multiple_flag, band_size, predicted) FROM stdin;
\.


--
-- Name: pcr_product_pcr_product_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('pcr_product_pcr_product_id_seq', 1, false);


--
-- Data for Name: primer_unigene_match; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY primer_unigene_match (primer_unigene_match_id, marker_id, unigene_id, primer_direction, match_length, primer_match_start, primer_match_end, unigene_match_start, unigene_match_end, e_value) FROM stdin;
\.


--
-- Name: primer_unigene_match_primer_unigene_match_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('primer_unigene_match_primer_unigene_match_id_seq', 1, false);


--
-- Data for Name: qc_report; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY qc_report (qc_id, est_id, basecaller, qc_status, vs_status, qstart, qend, istart, iend, hqi_start, hqi_length, entropy, expected_error, quality_trim_threshold, vector_tokens) FROM stdin;
\.


--
-- Name: qc_report_qc_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('qc_report_qc_id_seq', 1, false);


--
-- Data for Name: rflp_markers; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY rflp_markers (rflp_id, marker_id, rflp_name, library_name, clone_name, vector, cutting_site, forward_seq_id, reverse_seq_id, insert_size, drug_resistance, marker_prefix, marker_suffix) FROM stdin;
\.


--
-- Name: rflp_markers_rflp_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('rflp_markers_rflp_id_seq', 1, false);


--
-- Data for Name: rflp_sequences; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY rflp_sequences (seq_id, fasta_sequence) FROM stdin;
\.


--
-- Name: rflp_sequences_seq_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('rflp_sequences_seq_id_seq', 1, false);


--
-- Data for Name: rflp_unigene_associations; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY rflp_unigene_associations (rflp_unigene_assoc_id, rflp_seq_id, unigene_id, e_val, align_length, query_start, query_end) FROM stdin;
\.


--
-- Name: rflp_unigene_associations_rflp_unigene_assoc_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('rflp_unigene_associations_rflp_unigene_assoc_id_seq', 1, false);


--
-- Data for Name: seqread; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY seqread (read_id, clone_id, facility_id, submitter_id, batch_id, primer, direction, trace_name, trace_location, attribution_id, date, censor_id) FROM stdin;
\.


--
-- Name: seqread_read_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('seqread_read_id_seq', 1, false);


--
-- Data for Name: sequence; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY sequence (sequence_id, sequence) FROM stdin;
\.


--
-- Name: sequence_sequence_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('sequence_sequence_id_seq', 1, false);


--
-- Data for Name: snp; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY snp (snp_id, marker_id, reference_nucleotide, snp_nucleotide, confirmed, sequence_left_id, sequence_right_id, reference_stock_id, stock_id, metadata_id) FROM stdin;
\.


--
-- Data for Name: snp_file; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY snp_file (snp_file_id, snp_id, file_id) FROM stdin;
\.


--
-- Name: snp_file_snp_file_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('snp_file_snp_file_id_seq', 1, false);


--
-- Name: snp_snp_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('snp_snp_id_seq', 1, false);


--
-- Data for Name: snpprop; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY snpprop (snpprop_id, snp_id, value, rank, type_id) FROM stdin;
\.


--
-- Name: snpprop_snpprop_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('snpprop_snpprop_id_seq', 1, false);


--
-- Data for Name: ssr; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY ssr (ssr_id, marker_id, ssr_name, est_read_id, start_primer, end_primer, pcr_product_ln, tm_start_primer, tm_end_primer, ann_high, ann_low) FROM stdin;
\.


--
-- Data for Name: ssr_primer_unigene_matches; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY ssr_primer_unigene_matches (ssr_primer_unigene_match_id, ssr_id, unigene_id, primer_direction, match_length, primer_match_start, primer_match_end, unigene_match_start, unigene_match_end, e_value) FROM stdin;
\.


--
-- Name: ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq', 1, false);


--
-- Data for Name: ssr_repeats; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY ssr_repeats (repeat_id, ssr_id, repeat_motif, reapeat_nr, marker_id) FROM stdin;
\.


--
-- Name: ssr_repeats_repeat_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('ssr_repeats_repeat_id_seq', 1, false);


--
-- Name: ssr_ssr_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('ssr_ssr_id_seq', 1, false);


--
-- Data for Name: submit_user; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY submit_user (submit_user_id, submit_code, username, password, name, email_address, phone_number, organization, contact_information, disabled, confirm_code, sp_person_id) FROM stdin;
\.


--
-- Name: submit_user_submit_user_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('submit_user_submit_user_id_seq', 1, false);


--
-- Data for Name: taxonomy; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY taxonomy (tax_id, tax_name, tax_type) FROM stdin;
\.


--
-- Name: taxonomy_tax_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('taxonomy_tax_id_seq', 1, false);


--
-- Data for Name: temp_caps_correspondence; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY temp_caps_correspondence (tcc_id, old_marker_id, new_marker_id) FROM stdin;
\.


--
-- Name: temp_caps_correspondence_tcc_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('temp_caps_correspondence_tcc_id_seq', 1, false);


--
-- Data for Name: temp_map_correspondence; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY temp_map_correspondence (tmc_id, old_map_id, map_version_id) FROM stdin;
\.


--
-- Name: temp_map_correspondence_tmc_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('temp_map_correspondence_tmc_id_seq', 1, false);


--
-- Data for Name: temp_marker_correspondence; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY temp_marker_correspondence (tmc_id, old_marker_id, new_marker_id) FROM stdin;
\.


--
-- Name: temp_marker_correspondence_tmc_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('temp_marker_correspondence_tmc_id_seq', 1, false);


--
-- Data for Name: tigrtc_index; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY tigrtc_index (tcindex_id, index_name) FROM stdin;
\.


--
-- Name: tigrtc_index_tcindex_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('tigrtc_index_tcindex_id_seq', 1, false);


--
-- Data for Name: tigrtc_membership; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY tigrtc_membership (tigrtc_membership_id, tc_id, tcindex_id, read_id) FROM stdin;
\.


--
-- Name: tigrtc_membership_tigrtc_membership_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('tigrtc_membership_tigrtc_membership_id_seq', 1, false);


--
-- Data for Name: tigrtc_tracking; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY tigrtc_tracking (tigrtc_tracking_id, tc_id, current_tc_id, tcindex_id) FROM stdin;
\.


--
-- Name: tigrtc_tracking_tigrtc_tracking_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('tigrtc_tracking_tigrtc_tracking_id_seq', 1, false);


--
-- Data for Name: tm_markers; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY tm_markers (tm_id, marker_id, tm_name, old_cos_id, seq_id, est_read_id, comment) FROM stdin;
\.


--
-- Data for Name: tm_markers_sequences; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY tm_markers_sequences (tm_marker_seq_id, tm_id, sequence, comment) FROM stdin;
\.


--
-- Name: tm_markers_tm_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('tm_markers_tm_id_seq', 1, false);


--
-- Data for Name: trim_feature; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY trim_feature (feature_id, est_id, start, "end", type, value) FROM stdin;
\.


--
-- Name: trim_feature_feature_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('trim_feature_feature_id_seq', 1, false);


--
-- Data for Name: trim_feature_types; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY trim_feature_types (trim_type_id, comment) FROM stdin;
\.


--
-- Name: trim_feature_types_trim_type_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('trim_feature_types_trim_type_id_seq', 1, false);


--
-- Data for Name: types; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY types (type_id, comment) FROM stdin;
\.


--
-- Name: types_type_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('types_type_id_seq', 1, false);


--
-- Data for Name: unigene; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY unigene (unigene_id, unigene_build_id, consensi_id, cluster_no, contig_no, nr_members, database_name, sequence_name) FROM stdin;
\.


--
-- Data for Name: unigene_build; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY unigene_build (unigene_build_id, source_data_group_id, organism_group_id, build_nr, build_date, method_id, status, comment, superseding_build_id, next_build_id, latest_build_id, blast_db_id) FROM stdin;
\.


--
-- Name: unigene_build_unigene_build_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('unigene_build_unigene_build_id_seq', 1, false);


--
-- Data for Name: unigene_consensi; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY unigene_consensi (consensi_id, seq, qscores) FROM stdin;
\.


--
-- Name: unigene_consensi_consensi_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('unigene_consensi_consensi_id_seq', 1, false);


--
-- Data for Name: unigene_member; Type: TABLE DATA; Schema: sgn; Owner: postgres
--

COPY unigene_member (unigene_member_id, unigene_id, est_id, start, stop, qstart, qend, dir) FROM stdin;
\.


--
-- Name: unigene_member_unigene_member_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('unigene_member_unigene_member_id_seq', 1, false);


--
-- Name: unigene_unigene_id_seq; Type: SEQUENCE SET; Schema: sgn; Owner: postgres
--

SELECT pg_catalog.setval('unigene_unigene_id_seq', 1, false);


SET search_path = sgn_people, pg_catalog;

--
-- Data for Name: bac_status; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY bac_status (bac_status_id, bac_id, person_id, status, genbank_status, "timestamp") FROM stdin;
\.


--
-- Name: bac_status_bac_status_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('bac_status_bac_status_id_seq', 1, false);


--
-- Data for Name: bac_status_log; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY bac_status_log (bac_status_log_id, bac_id, person_id, status, genbank_status, "timestamp") FROM stdin;
\.


--
-- Name: bac_status_log_bac_status_log_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('bac_status_log_bac_status_log_id_seq', 1, false);


--
-- Data for Name: clone_il_mapping_bin_log; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY clone_il_mapping_bin_log (sp_clone_il_mapping_bin_log_id, genotype_region_id, sp_person_id, clone_id, is_current, created, chromosome, notes) FROM stdin;
\.


--
-- Name: clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq', 1, false);


--
-- Data for Name: clone_validation_log; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY clone_validation_log (clone_validation_log_id, sp_person_id, clone_id, val_overgo, val_bac_ends, is_current, created) FROM stdin;
\.


--
-- Name: clone_validation_log_clone_validation_log_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('clone_validation_log_clone_validation_log_id_seq', 1, false);


--
-- Data for Name: clone_verification_log; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY clone_verification_log (clone_verification_log_id, sp_person_id, clone_id, ver_int_read, ver_bac_end, is_current, created) FROM stdin;
\.


--
-- Name: clone_verification_log_clone_verification_log_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('clone_verification_log_clone_verification_log_id_seq', 1, false);


--
-- Data for Name: forum_post; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY forum_post (forum_post_id, person_id, post_text, parent_post_id, forum_topic_id, subject, post_time) FROM stdin;
\.


--
-- Name: forum_post_forum_post_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('forum_post_forum_post_id_seq', 6, true);


--
-- Data for Name: forum_topic; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY forum_topic (forum_topic_id, person_id, topic_name, parent_topic, topic_class, page_type, page_object_id, topic_description, sort_order) FROM stdin;
\.


--
-- Name: forum_topic_forum_topic_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('forum_topic_forum_topic_id_seq', 4, true);


--
-- Data for Name: list; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY list (list_id, is_hotlist, sent_by, name, description, owner, type_id, is_public) FROM stdin;
\.


--
-- Data for Name: list_item; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY list_item (list_item_id, content, list_id) FROM stdin;
\.


--
-- Name: list_item_list_item_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('list_item_list_item_id_seq', 724, true);


--
-- Name: list_list_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('list_list_id_seq', 10, true);


--
-- Name: sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq', 1, false);


--
-- Data for Name: sp_clone_il_mapping_segment_log; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY sp_clone_il_mapping_segment_log (sp_clone_il_mapping_segment_log_id, individual_id, sp_person_id, clone_id, is_current, created) FROM stdin;
\.


--
-- Data for Name: sp_group; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY sp_group (sp_group_id, name, description) FROM stdin;
\.


--
-- Data for Name: sp_group_member; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY sp_group_member (sp_person_id, sp_group_id, status) FROM stdin;
\.


--
-- Name: sp_group_sp_group_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sp_group_sp_group_id_seq', 1, false);


--
-- Data for Name: sp_login_old; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY sp_login_old (sp_login_id, username, private_email, pending_email, password, confirm_code, disabled, user_type) FROM stdin;
\.


--
-- Name: sp_login_old_sp_login_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sp_login_old_sp_login_id_seq', 1, false);


--
-- Data for Name: sp_organisms; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY sp_organisms (organism_id, organism_name) FROM stdin;
\.


--
-- Name: sp_organisms_organism_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sp_organisms_organism_id_seq', 1, false);


--
-- Data for Name: sp_organization; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY sp_organization (sp_organization_id, name, department, unit, address, country, phone_number, fax, contact_email, webpage, description, upload_account_name, shortname) FROM stdin;
\.


--
-- Data for Name: sp_organization_person; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY sp_organization_person (sp_organization_person_id, sp_organization_id, sp_person_id) FROM stdin;
\.


--
-- Name: sp_organization_person_sp_organization_person_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sp_organization_person_sp_organization_person_id_seq', 1, false);


--
-- Name: sp_organization_sp_organization_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sp_organization_sp_organization_id_seq', 1, false);


--
-- Data for Name: sp_papers; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY sp_papers (sp_paper_id, person_id, title, author_list, journal, volume, pages, keywords) FROM stdin;
\.


--
-- Name: sp_papers_sp_paper_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sp_papers_sp_paper_id_seq', 1, false);


--
-- Data for Name: sp_person; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY sp_person (sp_person_id, censor, salutation, last_name, first_name, organization, address, country, phone_number, fax, contact_email, webpage, research_keywords, user_format, research_interests, formatted_interests, contact_update, research_update, sp_login_id, username, private_email, pending_email, password, confirm_code, disabled, user_type, cookie_string, last_access_time, user_prefs, developer_settings) FROM stdin;
43	0	\N	Doe	Jane	BTI	\N	\N	\N	\N	\N	\N	\N	auto	\N	\N	\N	2017-06-14	\N	janedoe	\N	janedoe@bti.org	secretpw	BOdV8jF2EELq5mBS	\N	user	swlxvgufoclivyyyciskskxbiycuigftateybngrkrkxtvvzrobfpzdakzbsuwkifrhigcr	2017-06-15 19:43:23.929702	\N	\N
\.


--
-- Data for Name: sp_person_organisms; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY sp_person_organisms (sp_person_organisms_id, sp_person_id, organism_id) FROM stdin;
\.


--
-- Name: sp_person_organisms_sp_person_organisms_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sp_person_organisms_sp_person_organisms_id_seq', 1, false);


--
-- Data for Name: sp_person_roles; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY sp_person_roles (sp_person_role_id, sp_person_id, sp_role_id) FROM stdin;
74	43	6
\.


--
-- Name: sp_person_roles_sp_person_role_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sp_person_roles_sp_person_role_id_seq', 74, true);


--
-- Name: sp_person_sp_person_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sp_person_sp_person_id_seq', 43, true);


--
-- Data for Name: sp_project; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY sp_project (sp_project_id, name, description) FROM stdin;
\.


--
-- Name: sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq', 1, false);


--
-- Data for Name: sp_project_il_mapping_clone_log; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY sp_project_il_mapping_clone_log (sp_project_il_mapping_clone_log_id, sp_project_id, sp_person_id, clone_id, is_current, created) FROM stdin;
\.


--
-- Data for Name: sp_project_organization; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY sp_project_organization (sp_project_organization_id, sp_project_id, sp_organization_id) FROM stdin;
\.


--
-- Name: sp_project_organization_sp_project_organization_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sp_project_organization_sp_project_organization_id_seq', 1, false);


--
-- Data for Name: sp_project_person; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY sp_project_person (sp_project_person_id, sp_project_id, sp_person_id, type) FROM stdin;
\.


--
-- Name: sp_project_person_sp_project_person_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sp_project_person_sp_project_person_id_seq', 1, false);


--
-- Name: sp_project_sp_project_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sp_project_sp_project_id_seq', 1, false);


--
-- Data for Name: sp_roles; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY sp_roles (sp_role_id, name) FROM stdin;
6	user
7	Program 1
\.


--
-- Name: sp_roles_sp_role_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('sp_roles_sp_role_id_seq', 7, true);


--
-- Data for Name: user_map; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY user_map (user_map_id, short_name, long_name, abstract, is_public, parent1_accession_id, parent1, parent2_accession_id, parent2, sp_person_id, obsolete, modified_date, create_date) FROM stdin;
\.


--
-- Data for Name: user_map_data; Type: TABLE DATA; Schema: sgn_people; Owner: postgres
--

COPY user_map_data (user_map_data_id, user_map_id, marker_name, protocol, marker_id, linkage_group, "position", confidence, sp_person_id, obsolete, modified_date, create_date) FROM stdin;
\.


--
-- Name: user_map_data_user_map_data_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('user_map_data_user_map_data_id_seq', 1, false);


--
-- Name: user_map_user_map_id_seq; Type: SEQUENCE SET; Schema: sgn_people; Owner: postgres
--

SELECT pg_catalog.setval('user_map_user_map_id_seq', 1, false);


SET search_path = sgn_submit, pg_catalog;

--
-- Data for Name: facility; Type: TABLE DATA; Schema: sgn_submit; Owner: postgres
--

COPY facility (facility_id, submit_user_id, facility_moniker, facility_shortname, facility_name, facility_contact, facility_address, funding_agency, funding_comment, sequencing_primers, machine, chemistry, attribution_display, sp_person_id) FROM stdin;
\.


--
-- Name: facility_facility_id_seq; Type: SEQUENCE SET; Schema: sgn_submit; Owner: postgres
--

SELECT pg_catalog.setval('facility_facility_id_seq', 1, false);


--
-- Data for Name: library; Type: TABLE DATA; Schema: sgn_submit; Owner: postgres
--

COPY library (library_id, type, submit_user_id, library_name, library_shortname, authors, organism_id, cultivar, accession, tissue, development_stage, treatment_conditions, cloning_host, vector, rs1, rs2, cloning_kit, comments, contact_information, order_routing_id, sp_person_id, forward_adapter, reverse_adapter) FROM stdin;
\.


--
-- Name: library_library_id_seq; Type: SEQUENCE SET; Schema: sgn_submit; Owner: postgres
--

SELECT pg_catalog.setval('library_library_id_seq', 1, false);


--
-- Data for Name: seqread; Type: TABLE DATA; Schema: sgn_submit; Owner: postgres
--

COPY seqread (submit_read_id, library_id, facility_id, trace_name, clone_name, direction, location, read_id) FROM stdin;
\.


--
-- Name: seqread_submit_read_id_seq; Type: SEQUENCE SET; Schema: sgn_submit; Owner: postgres
--

SELECT pg_catalog.setval('seqread_submit_read_id_seq', 1, false);


--
-- Data for Name: submit_user; Type: TABLE DATA; Schema: sgn_submit; Owner: postgres
--

COPY submit_user (submit_user_id, submit_code, username, password, name, email_address, phone_number, organization, contact_information, disabled, confirm_code, sp_person_id) FROM stdin;
\.


--
-- Name: submit_user_submit_user_id_seq; Type: SEQUENCE SET; Schema: sgn_submit; Owner: postgres
--

SELECT pg_catalog.setval('submit_user_submit_user_id_seq', 1, false);


SET search_path = tomato_gff, pg_catalog;

--
-- Data for Name: fattribute; Type: TABLE DATA; Schema: tomato_gff; Owner: postgres
--

COPY fattribute (fattribute_id, fattribute_name) FROM stdin;
\.


--
-- Name: fattribute_fattribute_id_seq; Type: SEQUENCE SET; Schema: tomato_gff; Owner: postgres
--

SELECT pg_catalog.setval('fattribute_fattribute_id_seq', 1, false);


--
-- Data for Name: fattribute_to_feature; Type: TABLE DATA; Schema: tomato_gff; Owner: postgres
--

COPY fattribute_to_feature (fid, fattribute_id, fattribute_value) FROM stdin;
\.


--
-- Data for Name: fdata; Type: TABLE DATA; Schema: tomato_gff; Owner: postgres
--

COPY fdata (fid, fref, fstart, fstop, fbin, ftypeid, fscore, fstrand, fphase, gid, ftarget_start, ftarget_stop) FROM stdin;
\.


--
-- Name: fdata_fid_seq; Type: SEQUENCE SET; Schema: tomato_gff; Owner: postgres
--

SELECT pg_catalog.setval('fdata_fid_seq', 1, false);


--
-- Data for Name: fdna; Type: TABLE DATA; Schema: tomato_gff; Owner: postgres
--

COPY fdna (fref, foffset, fdna) FROM stdin;
\.


--
-- Data for Name: fgroup; Type: TABLE DATA; Schema: tomato_gff; Owner: postgres
--

COPY fgroup (gid, gclass, gname) FROM stdin;
\.


--
-- Name: fgroup_gid_seq; Type: SEQUENCE SET; Schema: tomato_gff; Owner: postgres
--

SELECT pg_catalog.setval('fgroup_gid_seq', 1, false);


--
-- Data for Name: fmeta; Type: TABLE DATA; Schema: tomato_gff; Owner: postgres
--

COPY fmeta (fname, fvalue) FROM stdin;
\.


--
-- Data for Name: ftype; Type: TABLE DATA; Schema: tomato_gff; Owner: postgres
--

COPY ftype (ftypeid, fmethod, fsource) FROM stdin;
\.


--
-- Name: ftype_ftypeid_seq; Type: SEQUENCE SET; Schema: tomato_gff; Owner: postgres
--

SELECT pg_catalog.setval('ftype_ftypeid_seq', 1, false);


SET search_path = public, pg_catalog;

--
-- Name: cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm
    ADD CONSTRAINT cvterm_pkey PRIMARY KEY (cvterm_id);


--
-- Name: trial_types; Type: MATERIALIZED VIEW; Schema: public; Owner: web_usr
--

CREATE MATERIALIZED VIEW trial_types AS
 SELECT cvterm.cvterm_id AS trial_type_id,
    cvterm.name AS trial_type_name
   FROM (cvterm
     JOIN cv USING (cv_id))
  WHERE ((cv.name)::text = 'project_type'::text)
  GROUP BY cvterm.cvterm_id
  WITH NO DATA;


ALTER TABLE trial_types OWNER TO web_usr;

SET search_path = annotation, pg_catalog;

--
-- Name: annotation_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation
    ADD CONSTRAINT annotation_pkey PRIMARY KEY (annot_id);


--
-- Name: comment_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY comment
    ADD CONSTRAINT comment_pkey PRIMARY KEY (comment_id);


--
-- Name: comp_analysis_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY comp_analysis
    ADD CONSTRAINT comp_analysis_pkey PRIMARY KEY (ca_id);


--
-- Name: dblist_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY dblist
    ADD CONSTRAINT dblist_pkey PRIMARY KEY (db_id);


--
-- Name: dbxref_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY dbxref
    ADD CONSTRAINT dbxref_pkey PRIMARY KEY (dbxref_id);


--
-- Name: feature_set_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY feature_set
    ADD CONSTRAINT feature_set_pkey PRIMARY KEY (f_set_id);


--
-- Name: feature_span_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY feature_span
    ADD CONSTRAINT feature_span_pkey PRIMARY KEY (f_span_id);


--
-- Name: organism_name_key; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY organism
    ADD CONSTRAINT organism_name_key UNIQUE (name);


--
-- Name: organism_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY organism
    ADD CONSTRAINT organism_pkey PRIMARY KEY (organism_id);


--
-- Name: output_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY output
    ADD CONSTRAINT output_pkey PRIMARY KEY (output_id);


--
-- Name: person_name_key; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY person
    ADD CONSTRAINT person_name_key UNIQUE (name);


--
-- Name: person_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY person
    ADD CONSTRAINT person_pkey PRIMARY KEY (person_id);


--
-- Name: program_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY program
    ADD CONSTRAINT program_pkey PRIMARY KEY (program_id);


--
-- Name: property_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY property
    ADD CONSTRAINT property_pkey PRIMARY KEY (property_id);


--
-- Name: result_set_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY result_set
    ADD CONSTRAINT result_set_pkey PRIMARY KEY (r_set_id);


--
-- Name: result_span_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY result_span
    ADD CONSTRAINT result_span_pkey PRIMARY KEY (r_span_id);


--
-- Name: seq_error_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY seq_error
    ADD CONSTRAINT seq_error_pkey PRIMARY KEY (seq_err_id);


--
-- Name: seq_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY seq
    ADD CONSTRAINT seq_pkey PRIMARY KEY (seq_id);


--
-- Name: seq_relationship_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY seq_relationship
    ADD CONSTRAINT seq_relationship_pkey PRIMARY KEY (seq_rel_id);


--
-- Name: synonym_pkey; Type: CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY synonym
    ADD CONSTRAINT synonym_pkey PRIMARY KEY (synonym_id);


SET search_path = biosource, pg_catalog;

--
-- Name: bs_protocol_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_protocol
    ADD CONSTRAINT bs_protocol_pkey PRIMARY KEY (protocol_id);


--
-- Name: bs_protocol_pub_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_protocol_pub
    ADD CONSTRAINT bs_protocol_pub_pkey PRIMARY KEY (protocol_pub_id);


--
-- Name: bs_protocol_step_dbxref_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_protocol_step_dbxref
    ADD CONSTRAINT bs_protocol_step_dbxref_pkey PRIMARY KEY (protocol_step_dbxref_id);


--
-- Name: bs_protocol_step_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_protocol_step
    ADD CONSTRAINT bs_protocol_step_pkey PRIMARY KEY (protocol_step_id);


--
-- Name: bs_sample_cvterm_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_cvterm
    ADD CONSTRAINT bs_sample_cvterm_pkey PRIMARY KEY (sample_cvterm_id);


--
-- Name: bs_sample_dbxref_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_dbxref
    ADD CONSTRAINT bs_sample_dbxref_pkey PRIMARY KEY (sample_dbxref_id);


--
-- Name: bs_sample_element_cvterm_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element_cvterm
    ADD CONSTRAINT bs_sample_element_cvterm_pkey PRIMARY KEY (sample_element_cvterm_id);


--
-- Name: bs_sample_element_dbxref_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element_dbxref
    ADD CONSTRAINT bs_sample_element_dbxref_pkey PRIMARY KEY (sample_element_dbxref_id);


--
-- Name: bs_sample_element_file_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element_file
    ADD CONSTRAINT bs_sample_element_file_pkey PRIMARY KEY (sample_element_file_id);


--
-- Name: bs_sample_element_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element
    ADD CONSTRAINT bs_sample_element_pkey PRIMARY KEY (sample_element_id);


--
-- Name: bs_sample_element_relation_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element_relation
    ADD CONSTRAINT bs_sample_element_relation_pkey PRIMARY KEY (sample_element_relation_id);


--
-- Name: bs_sample_file_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_file
    ADD CONSTRAINT bs_sample_file_pkey PRIMARY KEY (sample_file_id);


--
-- Name: bs_sample_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample
    ADD CONSTRAINT bs_sample_pkey PRIMARY KEY (sample_id);


--
-- Name: bs_sample_pub_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_pub
    ADD CONSTRAINT bs_sample_pub_pkey PRIMARY KEY (sample_pub_id);


--
-- Name: bs_sample_relationship_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_relationship
    ADD CONSTRAINT bs_sample_relationship_pkey PRIMARY KEY (sample_relationship_id);


--
-- Name: bs_tool_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_tool
    ADD CONSTRAINT bs_tool_pkey PRIMARY KEY (tool_id);


--
-- Name: bs_tool_pub_pkey; Type: CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_tool_pub
    ADD CONSTRAINT bs_tool_pub_pkey PRIMARY KEY (tool_pub_id);


SET search_path = gem, pg_catalog;

--
-- Name: ge_cluster_analysis_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_cluster_analysis
    ADD CONSTRAINT ge_cluster_analysis_pkey PRIMARY KEY (cluster_analysis_id);


--
-- Name: ge_cluster_member_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_cluster_member
    ADD CONSTRAINT ge_cluster_member_pkey PRIMARY KEY (cluster_member_id);


--
-- Name: ge_cluster_profile_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_cluster_profile
    ADD CONSTRAINT ge_cluster_profile_pkey PRIMARY KEY (cluster_profile_id);


--
-- Name: ge_correlation_analysis_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_correlation_analysis
    ADD CONSTRAINT ge_correlation_analysis_pkey PRIMARY KEY (correlation_analysis_id);


--
-- Name: ge_correlation_member_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_correlation_member
    ADD CONSTRAINT ge_correlation_member_pkey PRIMARY KEY (correlation_member_id);


--
-- Name: ge_data_analysis_process_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_data_analysis_process
    ADD CONSTRAINT ge_data_analysis_process_pkey PRIMARY KEY (data_analysis_process_id);


--
-- Name: ge_diff_expression_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_diff_expression
    ADD CONSTRAINT ge_diff_expression_pkey PRIMARY KEY (diff_expression_id);


--
-- Name: ge_experiment_analysis_group_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experiment_analysis_group
    ADD CONSTRAINT ge_experiment_analysis_group_pkey PRIMARY KEY (experiment_analysis_group_id);


--
-- Name: ge_experiment_analysis_member_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experiment_analysis_member
    ADD CONSTRAINT ge_experiment_analysis_member_pkey PRIMARY KEY (experiment_analysis_member_id);


--
-- Name: ge_experiment_dbxref_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experiment_dbxref
    ADD CONSTRAINT ge_experiment_dbxref_pkey PRIMARY KEY (experiment_dbxref_id);


--
-- Name: ge_experiment_experiment_name_key; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experiment
    ADD CONSTRAINT ge_experiment_experiment_name_key UNIQUE (experiment_name, experimental_design_id);


--
-- Name: ge_experiment_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experiment
    ADD CONSTRAINT ge_experiment_pkey PRIMARY KEY (experiment_id);


--
-- Name: ge_experimental_design_dbxref_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experimental_design_dbxref
    ADD CONSTRAINT ge_experimental_design_dbxref_pkey PRIMARY KEY (experimental_design_dbxref_id);


--
-- Name: ge_experimental_design_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experimental_design
    ADD CONSTRAINT ge_experimental_design_pkey PRIMARY KEY (experimental_design_id);


--
-- Name: ge_experimental_design_pub_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experimental_design_pub
    ADD CONSTRAINT ge_experimental_design_pub_pkey PRIMARY KEY (experimental_design_pub_id);


--
-- Name: ge_expression_by_experiment_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_expression_by_experiment
    ADD CONSTRAINT ge_expression_by_experiment_pkey PRIMARY KEY (expression_by_experiment_id);


--
-- Name: ge_fluorescanning_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_fluorescanning
    ADD CONSTRAINT ge_fluorescanning_pkey PRIMARY KEY (fluorescanning_id);


--
-- Name: ge_hybridization_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_hybridization
    ADD CONSTRAINT ge_hybridization_pkey PRIMARY KEY (hybridization_id);


--
-- Name: ge_platform_dbxref_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_platform_dbxref
    ADD CONSTRAINT ge_platform_dbxref_pkey PRIMARY KEY (platform_dbxref_id);


--
-- Name: ge_platform_design_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_platform_design
    ADD CONSTRAINT ge_platform_design_pkey PRIMARY KEY (platform_design_id);


--
-- Name: ge_platform_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_platform
    ADD CONSTRAINT ge_platform_pkey PRIMARY KEY (platform_id);


--
-- Name: ge_platform_pub_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_platform_pub
    ADD CONSTRAINT ge_platform_pub_pkey PRIMARY KEY (platform_pub_id);


--
-- Name: ge_probe_expression_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_probe_expression
    ADD CONSTRAINT ge_probe_expression_pkey PRIMARY KEY (probe_expression_id);


--
-- Name: ge_probe_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_probe
    ADD CONSTRAINT ge_probe_pkey PRIMARY KEY (probe_id);


--
-- Name: ge_probe_probe_name_key; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_probe
    ADD CONSTRAINT ge_probe_probe_name_key UNIQUE (probe_name, platform_id);


--
-- Name: ge_probe_spot_coordinate_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_probe_spot_coordinate
    ADD CONSTRAINT ge_probe_spot_coordinate_pkey PRIMARY KEY (probe_spot_coordinate_id);


--
-- Name: ge_probe_spot_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_probe_spot
    ADD CONSTRAINT ge_probe_spot_pkey PRIMARY KEY (probe_spot_id);


--
-- Name: ge_profile_element_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_profile_element
    ADD CONSTRAINT ge_profile_element_pkey PRIMARY KEY (profile_element_id);


--
-- Name: ge_target_dbxref_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_target_dbxref
    ADD CONSTRAINT ge_target_dbxref_pkey PRIMARY KEY (target_dbxref_id);


--
-- Name: ge_target_element_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_target_element
    ADD CONSTRAINT ge_target_element_pkey PRIMARY KEY (target_element_id);


--
-- Name: ge_target_element_target_id_key; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_target_element
    ADD CONSTRAINT ge_target_element_target_id_key UNIQUE (target_id, dye);


--
-- Name: ge_target_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_target
    ADD CONSTRAINT ge_target_pkey PRIMARY KEY (target_id);


--
-- Name: ge_target_target_name_key; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_target
    ADD CONSTRAINT ge_target_target_name_key UNIQUE (target_name, experiment_id);


--
-- Name: ge_technology_type_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_technology_type
    ADD CONSTRAINT ge_technology_type_pkey PRIMARY KEY (technology_type_id);


--
-- Name: ge_template_dbiref_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_dbiref
    ADD CONSTRAINT ge_template_dbiref_pkey PRIMARY KEY (template_dbiref_id);


--
-- Name: ge_template_dbxref_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_dbxref
    ADD CONSTRAINT ge_template_dbxref_pkey PRIMARY KEY (template_dbxref_id);


--
-- Name: ge_template_diff_expression_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_diff_expression
    ADD CONSTRAINT ge_template_diff_expression_pkey PRIMARY KEY (template_diff_expression_id);


--
-- Name: ge_template_expression_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_expression
    ADD CONSTRAINT ge_template_expression_pkey PRIMARY KEY (template_expression_id);


--
-- Name: ge_template_pkey; Type: CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template
    ADD CONSTRAINT ge_template_pkey PRIMARY KEY (template_id);


SET search_path = genomic, pg_catalog;

--
-- Name: blast_defline_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY blast_defline
    ADD CONSTRAINT blast_defline_pkey PRIMARY KEY (blast_defline_id);


--
-- Name: blast_hit_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY blast_hit
    ADD CONSTRAINT blast_hit_pkey PRIMARY KEY (blast_hit_id);


--
-- Name: blast_query_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY blast_query
    ADD CONSTRAINT blast_query_pkey PRIMARY KEY (blast_query_id);


--
-- Name: chromat_clone_id_key; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY chromat
    ADD CONSTRAINT chromat_clone_id_key UNIQUE (clone_id, primer, subpath, filename);


--
-- Name: chromat_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY chromat
    ADD CONSTRAINT chromat_pkey PRIMARY KEY (chromat_id);


--
-- Name: clone_feature_clone_id_key; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY clone_feature
    ADD CONSTRAINT clone_feature_clone_id_key UNIQUE (clone_id, feature_id);


--
-- Name: clone_feature_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY clone_feature
    ADD CONSTRAINT clone_feature_pkey PRIMARY KEY (clone_feature_id);


--
-- Name: clone_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY clone
    ADD CONSTRAINT clone_pkey PRIMARY KEY (clone_id);


--
-- Name: clone_type_name_key; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY clone_type
    ADD CONSTRAINT clone_type_name_key UNIQUE (name);


--
-- Name: clone_type_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY clone_type
    ADD CONSTRAINT clone_type_pkey PRIMARY KEY (clone_type_id);


--
-- Name: clone_type_shortname_key; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY clone_type
    ADD CONSTRAINT clone_type_shortname_key UNIQUE (shortname);


--
-- Name: genbank_submission_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY genbank_submission
    ADD CONSTRAINT genbank_submission_pkey PRIMARY KEY (genbank_submission_id);


--
-- Name: gss_chromat_id_key; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY gss
    ADD CONSTRAINT gss_chromat_id_key UNIQUE (chromat_id, version);


--
-- Name: gss_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY gss
    ADD CONSTRAINT gss_pkey PRIMARY KEY (gss_id);


--
-- Name: gss_submitted_to_genbank_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY gss_submitted_to_genbank
    ADD CONSTRAINT gss_submitted_to_genbank_pkey PRIMARY KEY (gss_submitted_to_genbank_id);


--
-- Name: library_annotation_db_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY library_annotation_db
    ADD CONSTRAINT library_annotation_db_pkey PRIMARY KEY (library_annotation_db_id);


--
-- Name: library_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY library
    ADD CONSTRAINT library_pkey PRIMARY KEY (library_id);


--
-- Name: library_shortname_abbreviation_abbreviation_key; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY library_shortname_abbreviation
    ADD CONSTRAINT library_shortname_abbreviation_abbreviation_key UNIQUE (abbreviation);


--
-- Name: library_shortname_abbreviation_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY library_shortname_abbreviation
    ADD CONSTRAINT library_shortname_abbreviation_pkey PRIMARY KEY (library_shortname_abbreviation_id);


--
-- Name: qc_report_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY qc_report
    ADD CONSTRAINT qc_report_pkey PRIMARY KEY (qc_report_id);


--
-- Name: query_source_type_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY query_source_type
    ADD CONSTRAINT query_source_type_pkey PRIMARY KEY (query_source_type_id);


--
-- Name: read_class_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY read_class
    ADD CONSTRAINT read_class_pkey PRIMARY KEY (read_class_id);


--
-- Name: sequencing_primer_name_key; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY sequencing_primer
    ADD CONSTRAINT sequencing_primer_name_key UNIQUE (name);


--
-- Name: sequencing_primer_pkey; Type: CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY sequencing_primer
    ADD CONSTRAINT sequencing_primer_pkey PRIMARY KEY (sequencing_primer_id);


SET search_path = insitu, pg_catalog;

--
-- Name: experiment_image_pkey; Type: CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY experiment_image
    ADD CONSTRAINT experiment_image_pkey PRIMARY KEY (experiment_image_id);


--
-- Name: experiment_pkey; Type: CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY experiment
    ADD CONSTRAINT experiment_pkey PRIMARY KEY (experiment_id);


--
-- Name: experiment_tag_pkey; Type: CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY experiment_tag
    ADD CONSTRAINT experiment_tag_pkey PRIMARY KEY (experiment_tag_id);


--
-- Name: organism_pkey; Type: CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY is_organism
    ADD CONSTRAINT organism_pkey PRIMARY KEY (is_organism_id);


--
-- Name: primer_pkey; Type: CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY probe
    ADD CONSTRAINT primer_pkey PRIMARY KEY (probe_id);


--
-- Name: tag_pkey; Type: CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY tag
    ADD CONSTRAINT tag_pkey PRIMARY KEY (tag_id);


SET search_path = metadata, pg_catalog;

--
-- Name: attribution_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY attribution
    ADD CONSTRAINT attribution_pkey PRIMARY KEY (attribution_id);


--
-- Name: attribution_to_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY attribution_to
    ADD CONSTRAINT attribution_to_pkey PRIMARY KEY (attribution_to_id);


--
-- Name: comments_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT comments_pkey PRIMARY KEY (comment_id);


--
-- Name: md_dbipath_column_name_key; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_dbipath
    ADD CONSTRAINT md_dbipath_column_name_key UNIQUE (column_name, table_name, schema_name);


--
-- Name: md_dbipath_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_dbipath
    ADD CONSTRAINT md_dbipath_pkey PRIMARY KEY (dbipath_id);


--
-- Name: md_dbiref_iref_accession_key; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_dbiref
    ADD CONSTRAINT md_dbiref_iref_accession_key UNIQUE (iref_accession, dbiref_id);


--
-- Name: md_dbiref_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_dbiref
    ADD CONSTRAINT md_dbiref_pkey PRIMARY KEY (dbiref_id);


--
-- Name: md_dbversion_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_dbversion
    ADD CONSTRAINT md_dbversion_pkey PRIMARY KEY (dbversion_id);


--
-- Name: md_files_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_files
    ADD CONSTRAINT md_files_pkey PRIMARY KEY (file_id);


--
-- Name: md_groupmembers_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_groupmembers
    ADD CONSTRAINT md_groupmembers_pkey PRIMARY KEY (groupmember_id);


--
-- Name: md_groups_group_name_key; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_groups
    ADD CONSTRAINT md_groups_group_name_key UNIQUE (group_name);


--
-- Name: md_groups_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_groups
    ADD CONSTRAINT md_groups_pkey PRIMARY KEY (group_id);


--
-- Name: md_image_organism_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_image_organism
    ADD CONSTRAINT md_image_organism_pkey PRIMARY KEY (md_image_organism_id);


--
-- Name: md_image_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_image
    ADD CONSTRAINT md_image_pkey PRIMARY KEY (image_id);


--
-- Name: md_metadata_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_metadata
    ADD CONSTRAINT md_metadata_pkey PRIMARY KEY (metadata_id);


--
-- Name: md_tag_image_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_tag_image
    ADD CONSTRAINT md_tag_image_pkey PRIMARY KEY (tag_image_id);


--
-- Name: md_tag_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_tag
    ADD CONSTRAINT md_tag_pkey PRIMARY KEY (tag_id);


--
-- Name: referred_to_db_row_unique; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY attribution
    ADD CONSTRAINT referred_to_db_row_unique UNIQUE (database_name, table_name, row_id);


--
-- Name: roles_pkey; Type: CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY roles
    ADD CONSTRAINT roles_pkey PRIMARY KEY (role_id);


SET search_path = pheno_population, pg_catalog;

--
-- Name: data_points_pkey; Type: CONSTRAINT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY data_points
    ADD CONSTRAINT data_points_pkey PRIMARY KEY (dp_id);


--
-- Name: genotypes_pkey; Type: CONSTRAINT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY genotypes
    ADD CONSTRAINT genotypes_pkey PRIMARY KEY (gen_id);


--
-- Name: images_pkey; Type: CONSTRAINT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY images
    ADD CONSTRAINT images_pkey PRIMARY KEY (image_id);


--
-- Name: locations_pkey; Type: CONSTRAINT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY locations
    ADD CONSTRAINT locations_pkey PRIMARY KEY (loc_id);


--
-- Name: organs_pkey; Type: CONSTRAINT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY organs
    ADD CONSTRAINT organs_pkey PRIMARY KEY (organ_id);


--
-- Name: plants_pkey; Type: CONSTRAINT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY plants
    ADD CONSTRAINT plants_pkey PRIMARY KEY (plant_id);


--
-- Name: populations_pkey; Type: CONSTRAINT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY populations
    ADD CONSTRAINT populations_pkey PRIMARY KEY (pop_id);


--
-- Name: properties_pkey; Type: CONSTRAINT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY properties
    ADD CONSTRAINT properties_pkey PRIMARY KEY (prop_id);


--
-- Name: samples_pkey; Type: CONSTRAINT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY samples
    ADD CONSTRAINT samples_pkey PRIMARY KEY (sample_id);


--
-- Name: sources_pkey; Type: CONSTRAINT; Schema: pheno_population; Owner: postgres
--

ALTER TABLE ONLY sources
    ADD CONSTRAINT sources_pkey PRIMARY KEY (source_id);


SET search_path = phenome, pg_catalog;

--
-- Name: allele_alias_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY allele_alias
    ADD CONSTRAINT allele_alias_pkey PRIMARY KEY (allele_alias_id);


--
-- Name: allele_dbxref_id_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY allele_dbxref
    ADD CONSTRAINT allele_dbxref_id_key UNIQUE (allele_id, dbxref_id);


--
-- Name: allele_dbxref_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY allele_dbxref
    ADD CONSTRAINT allele_dbxref_pkey PRIMARY KEY (allele_dbxref_id);


--
-- Name: allele_history_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY allele_history
    ADD CONSTRAINT allele_history_pkey PRIMARY KEY (allele_history_id);


--
-- Name: allele_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY allele
    ADD CONSTRAINT allele_pkey PRIMARY KEY (allele_id);


--
-- Name: cross_type_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY cross_type
    ADD CONSTRAINT cross_type_pkey PRIMARY KEY (cross_type_id);


--
-- Name: dbxref_type_dbxref_type_definition_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY dbxref_type
    ADD CONSTRAINT dbxref_type_dbxref_type_definition_key UNIQUE (dbxref_type_definition);


--
-- Name: dbxref_type_dbxref_type_name_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY dbxref_type
    ADD CONSTRAINT dbxref_type_dbxref_type_name_key UNIQUE (dbxref_type_name);


--
-- Name: dbxref_type_dbxref_type_url_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY dbxref_type
    ADD CONSTRAINT dbxref_type_dbxref_type_url_key UNIQUE (dbxref_type_url);


--
-- Name: dbxref_type_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY dbxref_type
    ADD CONSTRAINT dbxref_type_pkey PRIMARY KEY (dbxref_type_id);


--
-- Name: genotype_experiment_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY genotype_experiment
    ADD CONSTRAINT genotype_experiment_pkey PRIMARY KEY (genotype_experiment_id);


--
-- Name: genotype_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY genotype
    ADD CONSTRAINT genotype_pkey PRIMARY KEY (genotype_id);


--
-- Name: genotype_region_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY genotype_region
    ADD CONSTRAINT genotype_region_pkey PRIMARY KEY (genotype_region_id);


--
-- Name: germplasm_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY germplasm
    ADD CONSTRAINT germplasm_pkey PRIMARY KEY (germplasm_id);


--
-- Name: individual_alias_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_alias
    ADD CONSTRAINT individual_alias_pkey PRIMARY KEY (individual_alias_id);


--
-- Name: individual_allele_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_allele
    ADD CONSTRAINT individual_allele_pkey PRIMARY KEY (individual_allele_id);


--
-- Name: individual_allele_ukey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_allele
    ADD CONSTRAINT individual_allele_ukey UNIQUE (individual_id, allele_id);


--
-- Name: individual_dbxref_evidence_history_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref_evidence_history
    ADD CONSTRAINT individual_dbxref_evidence_history_pkey PRIMARY KEY (individual_dbxref_evidence_history_id);


--
-- Name: individual_dbxref_evidence_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref_evidence
    ADD CONSTRAINT individual_dbxref_evidence_pkey PRIMARY KEY (individual_dbxref_evidence_id);


--
-- Name: individual_dbxref_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref
    ADD CONSTRAINT individual_dbxref_pkey PRIMARY KEY (individual_dbxref_id);


--
-- Name: individual_history_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_history
    ADD CONSTRAINT individual_history_pkey PRIMARY KEY (individual_history_id);


--
-- Name: individual_image_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_image
    ADD CONSTRAINT individual_image_pkey PRIMARY KEY (individual_image_id);


--
-- Name: individual_locus_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_locus
    ADD CONSTRAINT individual_locus_pkey PRIMARY KEY (individual_locus_id);


--
-- Name: individual_locus_ukey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_locus
    ADD CONSTRAINT individual_locus_ukey UNIQUE (individual_id, locus_id);


--
-- Name: individual_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual
    ADD CONSTRAINT individual_pkey PRIMARY KEY (individual_id);


--
-- Name: is_public_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY is_public
    ADD CONSTRAINT is_public_pkey PRIMARY KEY (is_public_id);


--
-- Name: is_public_population_id_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY is_public
    ADD CONSTRAINT is_public_population_id_key UNIQUE (population_id);


--
-- Name: locus2locus_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus2locus
    ADD CONSTRAINT locus2locus_pkey PRIMARY KEY (locus2locus_id);


--
-- Name: locus_alias_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_alias
    ADD CONSTRAINT locus_alias_pkey PRIMARY KEY (locus_alias_id);


--
-- Name: locus_dbxref_evidence_history_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref_evidence_history
    ADD CONSTRAINT locus_dbxref_evidence_history_pkey PRIMARY KEY (locus_dbxref_evidence_history_id);


--
-- Name: locus_dbxref_evidence_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref_evidence
    ADD CONSTRAINT locus_dbxref_evidence_pkey PRIMARY KEY (locus_dbxref_evidence_id);


--
-- Name: locus_dbxref_id_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref
    ADD CONSTRAINT locus_dbxref_id_key UNIQUE (locus_id, dbxref_id);


--
-- Name: locus_dbxref_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref
    ADD CONSTRAINT locus_dbxref_pkey PRIMARY KEY (locus_dbxref_id);


--
-- Name: locus_history_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_history
    ADD CONSTRAINT locus_history_pkey PRIMARY KEY (locus_history_id);


--
-- Name: locus_image_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_image
    ADD CONSTRAINT locus_image_pkey PRIMARY KEY (locus_image_id);


--
-- Name: locus_marker_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_marker
    ADD CONSTRAINT locus_marker_pkey PRIMARY KEY (locus_marker_id);


--
-- Name: locus_name_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus
    ADD CONSTRAINT locus_name_key UNIQUE (locus_name, common_name_id, obsolete);


--
-- Name: locus_owner_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_owner
    ADD CONSTRAINT locus_owner_key UNIQUE (locus_id, sp_person_id);


--
-- Name: locus_owner_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_owner
    ADD CONSTRAINT locus_owner_pkey PRIMARY KEY (locus_owner_id);


--
-- Name: locus_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus
    ADD CONSTRAINT locus_pkey PRIMARY KEY (locus_id);


--
-- Name: locus_registry_id_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_registry
    ADD CONSTRAINT locus_registry_id_key UNIQUE (locus_id, registry_id);


--
-- Name: locus_registry_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_registry
    ADD CONSTRAINT locus_registry_pkey PRIMARY KEY (locus_registry_id);


--
-- Name: locus_symbol_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus
    ADD CONSTRAINT locus_symbol_key UNIQUE (locus_symbol, common_name_id, obsolete);


--
-- Name: locus_unigene_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_unigene
    ADD CONSTRAINT locus_unigene_key UNIQUE (locus_id, unigene_id);


--
-- Name: locus_unigene_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_unigene
    ADD CONSTRAINT locus_unigene_pkey PRIMARY KEY (locus_unigene_id);


--
-- Name: locusgroup_locusgroup_name_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locusgroup
    ADD CONSTRAINT locusgroup_locusgroup_name_key UNIQUE (locusgroup_name);


--
-- Name: locusgroup_member_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locusgroup_member
    ADD CONSTRAINT locusgroup_member_key UNIQUE (locus_id, locusgroup_id);


--
-- Name: locusgroup_member_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locusgroup_member
    ADD CONSTRAINT locusgroup_member_pkey PRIMARY KEY (locusgroup_member_id);


--
-- Name: locusgroup_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locusgroup
    ADD CONSTRAINT locusgroup_pkey PRIMARY KEY (locusgroup_id);


--
-- Name: nd_experiment_md_files_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_md_files
    ADD CONSTRAINT nd_experiment_md_files_pkey PRIMARY KEY (nd_experiment_md_files_id);


--
-- Name: phenotype_user_trait_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenotype_user_trait
    ADD CONSTRAINT phenotype_user_trait_pkey PRIMARY KEY (phenotype_user_trait_id);


--
-- Name: polymorphic_fragment_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY polymorphic_fragment
    ADD CONSTRAINT polymorphic_fragment_pkey PRIMARY KEY (polymorphic_fragment_id);


--
-- Name: population_dbxref_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY population_dbxref
    ADD CONSTRAINT population_dbxref_pkey PRIMARY KEY (population_dbxref_id);


--
-- Name: population_name_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY population
    ADD CONSTRAINT population_name_key UNIQUE (name);


--
-- Name: population_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY population
    ADD CONSTRAINT population_pkey PRIMARY KEY (population_id);


--
-- Name: pub_curator_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY pub_curator
    ADD CONSTRAINT pub_curator_pkey PRIMARY KEY (pub_curator_id);


--
-- Name: pub_curator_pub_id_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY pub_curator
    ADD CONSTRAINT pub_curator_pub_id_key UNIQUE (pub_id);


--
-- Name: registry_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY registry
    ADD CONSTRAINT registry_pkey PRIMARY KEY (registry_id);


--
-- Name: stock_allele_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY stock_allele
    ADD CONSTRAINT stock_allele_pkey PRIMARY KEY (stock_allele_id);


--
-- Name: stock_image_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY stock_image
    ADD CONSTRAINT stock_image_pkey PRIMARY KEY (stock_image_id);


--
-- Name: stock_owner_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY stock_owner
    ADD CONSTRAINT stock_owner_pkey PRIMARY KEY (stock_owner_id);


--
-- Name: symbol_name_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY registry
    ADD CONSTRAINT symbol_name_key UNIQUE (symbol, name);


--
-- Name: term1_id_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY tomato_term2term
    ADD CONSTRAINT term1_id_key UNIQUE (term1_id, term2_id, relationship_type_id);


--
-- Name: tomato_il_bin_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY tomato_il_bin
    ADD CONSTRAINT tomato_il_bin_pkey PRIMARY KEY (il_bin_id);


--
-- Name: tomato_term2term_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY tomato_term2term
    ADD CONSTRAINT tomato_term2term_pkey PRIMARY KEY (tomato_term2term_id);


--
-- Name: tomato_term_acc_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY tomato_term
    ADD CONSTRAINT tomato_term_acc_key UNIQUE (tomato_term_acc);


--
-- Name: tomato_term_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY tomato_term
    ADD CONSTRAINT tomato_term_pkey PRIMARY KEY (tomato_term_id);


--
-- Name: unit_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY unit
    ADD CONSTRAINT unit_pkey PRIMARY KEY (unit_id);


--
-- Name: user_trait_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY user_trait
    ADD CONSTRAINT user_trait_pkey PRIMARY KEY (user_trait_id);


--
-- Name: user_trait_unit_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY user_trait_unit
    ADD CONSTRAINT user_trait_unit_pkey PRIMARY KEY (user_trait_unit_id);


--
-- Name: variant_gi_key; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY variant
    ADD CONSTRAINT variant_gi_key UNIQUE (variant_gi);


--
-- Name: variant_pkey; Type: CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY variant
    ADD CONSTRAINT variant_pkey PRIMARY KEY (variant_id);


SET search_path = physical, pg_catalog;

--
-- Name: ba_plausibility_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY ba_plausibility
    ADD CONSTRAINT ba_plausibility_pkey PRIMARY KEY (bap_id);


--
-- Name: bac_associations_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY bac_associations
    ADD CONSTRAINT bac_associations_pkey PRIMARY KEY (bac_assoc_id);


--
-- Name: bac_consensus_sequences_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY bac_consensus_sequences
    ADD CONSTRAINT bac_consensus_sequences_pkey PRIMARY KEY (consensus_seq_id);


--
-- Name: bac_contigs_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY bac_contigs
    ADD CONSTRAINT bac_contigs_pkey PRIMARY KEY (bac_contig_id);


--
-- Name: bac_end_sequences_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY bac_end_sequences
    ADD CONSTRAINT bac_end_sequences_pkey PRIMARY KEY (end_seq_id);


--
-- Name: bacs_arizona_clone_name_key; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY bacs
    ADD CONSTRAINT bacs_arizona_clone_name_key UNIQUE (arizona_clone_name);


--
-- Name: bacs_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY bacs
    ADD CONSTRAINT bacs_pkey PRIMARY KEY (bac_id);


--
-- Name: computational_associations_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY computational_associations
    ADD CONSTRAINT computational_associations_pkey PRIMARY KEY (computational_assoc_id);


--
-- Name: contig_sizes_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY contig_sizes
    ADD CONSTRAINT contig_sizes_pkey PRIMARY KEY (contig_size_id);


--
-- Name: deprecated_probes_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY deprecated_probes
    ADD CONSTRAINT deprecated_probes_pkey PRIMARY KEY (dp_id);


--
-- Name: fpc_data_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY fpc_data
    ADD CONSTRAINT fpc_data_pkey PRIMARY KEY (fpc_datum_id);


--
-- Name: fpc_version_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY fpc_version
    ADD CONSTRAINT fpc_version_pkey PRIMARY KEY (fpc_version);


--
-- Name: manual_associations_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY manual_associations
    ADD CONSTRAINT manual_associations_pkey PRIMARY KEY (manual_assoc_id);


--
-- Name: oa_plausibility_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY oa_plausibility
    ADD CONSTRAINT oa_plausibility_pkey PRIMARY KEY (oap_id);


--
-- Name: overgo_associations_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY overgo_associations
    ADD CONSTRAINT overgo_associations_pkey PRIMARY KEY (overgo_assoc_id);


--
-- Name: overgo_plates_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY overgo_plates
    ADD CONSTRAINT overgo_plates_pkey PRIMARY KEY (plate_id);


--
-- Name: overgo_results_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY overgo_results
    ADD CONSTRAINT overgo_results_pkey PRIMARY KEY (result_id);


--
-- Name: overgo_version_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY overgo_version
    ADD CONSTRAINT overgo_version_pkey PRIMARY KEY (overgo_version);


--
-- Name: probe_markers_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY probe_markers
    ADD CONSTRAINT probe_markers_pkey PRIMARY KEY (overgo_probe_id);


--
-- Name: species_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY species
    ADD CONSTRAINT species_pkey PRIMARY KEY (species_id);


--
-- Name: tentative_association_conflict_groups_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY tentative_association_conflict_groups
    ADD CONSTRAINT tentative_association_conflict_groups_pkey PRIMARY KEY (tacg_id);


--
-- Name: tentative_overgo_associations_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY tentative_overgo_associations
    ADD CONSTRAINT tentative_overgo_associations_pkey PRIMARY KEY (tentative_assoc_id);


--
-- Name: users_pkey; Type: CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (user_id);


SET search_path = public, pg_catalog;

--
-- Name: analysis_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysis
    ADD CONSTRAINT analysis_c1 UNIQUE (program, programversion, sourcename);


--
-- Name: analysis_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysis
    ADD CONSTRAINT analysis_pkey PRIMARY KEY (analysis_id);


--
-- Name: analysisfeature_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysisfeature
    ADD CONSTRAINT analysisfeature_c1 UNIQUE (feature_id, analysis_id);


--
-- Name: analysisfeature_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysisfeature
    ADD CONSTRAINT analysisfeature_pkey PRIMARY KEY (analysisfeature_id);


--
-- Name: analysisprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysisprop
    ADD CONSTRAINT analysisprop_c1 UNIQUE (analysis_id, type_id, value);


--
-- Name: analysisprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysisprop
    ADD CONSTRAINT analysisprop_pkey PRIMARY KEY (analysisprop_id);


--
-- Name: ara_annotation_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ara_annotation
    ADD CONSTRAINT ara_annotation_pkey PRIMARY KEY (agi);


--
-- Name: ara_properties_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ara_properties
    ADD CONSTRAINT ara_properties_pkey PRIMARY KEY (agi);


--
-- Name: ara_sequence_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ara_sequence
    ADD CONSTRAINT ara_sequence_pkey PRIMARY KEY (agi);


--
-- Name: ara_signalp_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ara_signalp
    ADD CONSTRAINT ara_signalp_pkey PRIMARY KEY (agi);


--
-- Name: ara_targetp_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ara_targetp
    ADD CONSTRAINT ara_targetp_pkey PRIMARY KEY (agi);


--
-- Name: blastwatch_queries_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY blastwatch_queries
    ADD CONSTRAINT blastwatch_queries_pkey PRIMARY KEY (blastwatch_queries_id);


--
-- Name: blastwatch_results_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY blastwatch_results
    ADD CONSTRAINT blastwatch_results_pkey PRIMARY KEY (blastwatch_results_id);


--
-- Name: bug_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bug
    ADD CONSTRAINT bug_pkey PRIMARY KEY (bug_id);


--
-- Name: contact_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY contact
    ADD CONSTRAINT contact_c1 UNIQUE (name);


--
-- Name: contact_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY contact
    ADD CONSTRAINT contact_pkey PRIMARY KEY (contact_id);


--
-- Name: contact_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY contact_relationship
    ADD CONSTRAINT contact_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: contact_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY contact_relationship
    ADD CONSTRAINT contact_relationship_pkey PRIMARY KEY (contact_relationship_id);


--
-- Name: cv_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cv
    ADD CONSTRAINT cv_c1 UNIQUE (name);


--
-- Name: cv_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cv
    ADD CONSTRAINT cv_pkey PRIMARY KEY (cv_id);


--
-- Name: cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm
    ADD CONSTRAINT cvterm_c1 UNIQUE (name, cv_id, is_obsolete);


--
-- Name: cvterm_c2; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm
    ADD CONSTRAINT cvterm_c2 UNIQUE (dbxref_id);


--
-- Name: cvterm_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm_dbxref
    ADD CONSTRAINT cvterm_dbxref_c1 UNIQUE (cvterm_id, dbxref_id);


--
-- Name: cvterm_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm_dbxref
    ADD CONSTRAINT cvterm_dbxref_pkey PRIMARY KEY (cvterm_dbxref_id);


--
-- Name: cvterm_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: cvterm_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_pkey PRIMARY KEY (cvterm_relationship_id);


--
-- Name: cvtermpath_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermpath
    ADD CONSTRAINT cvtermpath_c1 UNIQUE (subject_id, object_id, type_id, pathdistance);


--
-- Name: cvtermpath_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermpath
    ADD CONSTRAINT cvtermpath_pkey PRIMARY KEY (cvtermpath_id);


--
-- Name: cvtermprop_cvterm_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermprop
    ADD CONSTRAINT cvtermprop_cvterm_id_key UNIQUE (cvterm_id, type_id, value, rank);


--
-- Name: cvtermprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermprop
    ADD CONSTRAINT cvtermprop_pkey PRIMARY KEY (cvtermprop_id);


--
-- Name: cvtermsynonym_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermsynonym
    ADD CONSTRAINT cvtermsynonym_c1 UNIQUE (cvterm_id, synonym);


--
-- Name: cvtermsynonym_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermsynonym
    ADD CONSTRAINT cvtermsynonym_pkey PRIMARY KEY (cvtermsynonym_id);


--
-- Name: db_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY db
    ADD CONSTRAINT db_c1 UNIQUE (name);


--
-- Name: db_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY db
    ADD CONSTRAINT db_pkey PRIMARY KEY (db_id);


--
-- Name: dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dbxref
    ADD CONSTRAINT dbxref_c1 UNIQUE (db_id, accession, version);


--
-- Name: dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dbxref
    ADD CONSTRAINT dbxref_pkey PRIMARY KEY (dbxref_id);


--
-- Name: dbxrefprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dbxrefprop
    ADD CONSTRAINT dbxrefprop_c1 UNIQUE (dbxref_id, type_id, rank);


--
-- Name: dbxrefprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dbxrefprop
    ADD CONSTRAINT dbxrefprop_pkey PRIMARY KEY (dbxrefprop_id);


--
-- Name: environment_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY environment
    ADD CONSTRAINT environment_c1 UNIQUE (uniquename);


--
-- Name: environment_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY environment_cvterm
    ADD CONSTRAINT environment_cvterm_c1 UNIQUE (environment_id, cvterm_id);


--
-- Name: environment_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY environment_cvterm
    ADD CONSTRAINT environment_cvterm_pkey PRIMARY KEY (environment_cvterm_id);


--
-- Name: environment_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY environment
    ADD CONSTRAINT environment_pkey PRIMARY KEY (environment_id);


--
-- Name: enzyme_restriction_sites_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY enzyme_restriction_sites
    ADD CONSTRAINT enzyme_restriction_sites_pkey PRIMARY KEY (enzyme_restriction_sites_id);


--
-- Name: feature_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature
    ADD CONSTRAINT feature_c1 UNIQUE (organism_id, uniquename, type_id);


--
-- Name: feature_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm
    ADD CONSTRAINT feature_cvterm_c1 UNIQUE (feature_id, cvterm_id, pub_id, rank);


--
-- Name: feature_cvterm_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm_dbxref
    ADD CONSTRAINT feature_cvterm_dbxref_c1 UNIQUE (feature_cvterm_id, dbxref_id);


--
-- Name: feature_cvterm_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm_dbxref
    ADD CONSTRAINT feature_cvterm_dbxref_pkey PRIMARY KEY (feature_cvterm_dbxref_id);


--
-- Name: feature_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm
    ADD CONSTRAINT feature_cvterm_pkey PRIMARY KEY (feature_cvterm_id);


--
-- Name: feature_cvterm_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm_pub
    ADD CONSTRAINT feature_cvterm_pub_c1 UNIQUE (feature_cvterm_id, pub_id);


--
-- Name: feature_cvterm_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm_pub
    ADD CONSTRAINT feature_cvterm_pub_pkey PRIMARY KEY (feature_cvterm_pub_id);


--
-- Name: feature_cvtermprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvtermprop
    ADD CONSTRAINT feature_cvtermprop_c1 UNIQUE (feature_cvterm_id, type_id, rank);


--
-- Name: feature_cvtermprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvtermprop
    ADD CONSTRAINT feature_cvtermprop_pkey PRIMARY KEY (feature_cvtermprop_id);


--
-- Name: feature_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_dbxref
    ADD CONSTRAINT feature_dbxref_c1 UNIQUE (feature_id, dbxref_id);


--
-- Name: feature_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_dbxref
    ADD CONSTRAINT feature_dbxref_pkey PRIMARY KEY (feature_dbxref_id);


--
-- Name: feature_genotype_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_genotype
    ADD CONSTRAINT feature_genotype_c1 UNIQUE (feature_id, genotype_id, cvterm_id, chromosome_id, rank, cgroup);


--
-- Name: feature_genotype_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_genotype
    ADD CONSTRAINT feature_genotype_pkey PRIMARY KEY (feature_genotype_id);


--
-- Name: feature_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature
    ADD CONSTRAINT feature_pkey PRIMARY KEY (feature_id);


--
-- Name: feature_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_pub
    ADD CONSTRAINT feature_pub_c1 UNIQUE (feature_id, pub_id);


--
-- Name: feature_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_pub
    ADD CONSTRAINT feature_pub_pkey PRIMARY KEY (feature_pub_id);


--
-- Name: feature_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationship
    ADD CONSTRAINT feature_relationship_c1 UNIQUE (subject_id, object_id, type_id, rank);


--
-- Name: feature_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationship
    ADD CONSTRAINT feature_relationship_pkey PRIMARY KEY (feature_relationship_id);


--
-- Name: feature_relationship_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationship_pub
    ADD CONSTRAINT feature_relationship_pub_c1 UNIQUE (feature_relationship_id, pub_id);


--
-- Name: feature_relationship_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationship_pub
    ADD CONSTRAINT feature_relationship_pub_pkey PRIMARY KEY (feature_relationship_pub_id);


--
-- Name: feature_relationshipprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationshipprop
    ADD CONSTRAINT feature_relationshipprop_c1 UNIQUE (feature_relationship_id, type_id, rank);


--
-- Name: feature_relationshipprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationshipprop
    ADD CONSTRAINT feature_relationshipprop_pkey PRIMARY KEY (feature_relationshipprop_id);


--
-- Name: feature_relationshipprop_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationshipprop_pub
    ADD CONSTRAINT feature_relationshipprop_pub_c1 UNIQUE (feature_relationshipprop_id, pub_id);


--
-- Name: feature_relationshipprop_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationshipprop_pub
    ADD CONSTRAINT feature_relationshipprop_pub_pkey PRIMARY KEY (feature_relationshipprop_pub_id);


--
-- Name: feature_synonym_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_synonym
    ADD CONSTRAINT feature_synonym_c1 UNIQUE (synonym_id, feature_id, pub_id);


--
-- Name: feature_synonym_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_synonym
    ADD CONSTRAINT feature_synonym_pkey PRIMARY KEY (feature_synonym_id);


--
-- Name: featureloc_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureloc
    ADD CONSTRAINT featureloc_c1 UNIQUE (feature_id, locgroup, rank);


--
-- Name: featureloc_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureloc
    ADD CONSTRAINT featureloc_pkey PRIMARY KEY (featureloc_id);


--
-- Name: featureloc_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureloc_pub
    ADD CONSTRAINT featureloc_pub_c1 UNIQUE (featureloc_id, pub_id);


--
-- Name: featureloc_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureloc_pub
    ADD CONSTRAINT featureloc_pub_pkey PRIMARY KEY (featureloc_pub_id);


--
-- Name: featureprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureprop
    ADD CONSTRAINT featureprop_c1 UNIQUE (feature_id, type_id, rank);


--
-- Name: featureprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureprop
    ADD CONSTRAINT featureprop_pkey PRIMARY KEY (featureprop_id);


--
-- Name: featureprop_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureprop_pub
    ADD CONSTRAINT featureprop_pub_c1 UNIQUE (featureprop_id, pub_id);


--
-- Name: featureprop_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureprop_pub
    ADD CONSTRAINT featureprop_pub_pkey PRIMARY KEY (featureprop_pub_id);


--
-- Name: forward_amplicon_sequence_information_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY forward_amplicon_sequence_information
    ADD CONSTRAINT forward_amplicon_sequence_information_pkey PRIMARY KEY (forward_amplicon_sequence_information_id);


--
-- Name: forward_amplicon_sequence_markers_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY forward_amplicon_sequence_markers
    ADD CONSTRAINT forward_amplicon_sequence_markers_pkey PRIMARY KEY (forward_amplicon_sequence_markers_id);


--
-- Name: fpc_band_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_band
    ADD CONSTRAINT fpc_band_pkey PRIMARY KEY (fpc_band_id);


--
-- Name: fpc_build_filename_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_build
    ADD CONSTRAINT fpc_build_filename_key UNIQUE (file_base);


--
-- Name: fpc_build_fpc_fingerprint_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_build_fpc_fingerprint
    ADD CONSTRAINT fpc_build_fpc_fingerprint_pkey PRIMARY KEY (fpc_build_fpc_fingerprint_id);


--
-- Name: fpc_build_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_build
    ADD CONSTRAINT fpc_build_pkey PRIMARY KEY (fpc_build_id);


--
-- Name: fpc_contig_clone_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_contig_clone
    ADD CONSTRAINT fpc_contig_clone_pkey PRIMARY KEY (fpc_contig_clone_id);


--
-- Name: fpc_contig_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_contig
    ADD CONSTRAINT fpc_contig_pkey PRIMARY KEY (fpc_contig_id);


--
-- Name: fpc_fingerprint_clone_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_fingerprint
    ADD CONSTRAINT fpc_fingerprint_clone_id_key UNIQUE (clone_id, gel_name);


--
-- Name: fpc_fingerprint_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_fingerprint
    ADD CONSTRAINT fpc_fingerprint_pkey PRIMARY KEY (fpc_fingerprint_id);


--
-- Name: fpc_series_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_series
    ADD CONSTRAINT fpc_series_pkey PRIMARY KEY (fpc_series_id);


--
-- Name: genotype_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY genotype
    ADD CONSTRAINT genotype_c1 UNIQUE (uniquename);


--
-- Name: genotype_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY genotype
    ADD CONSTRAINT genotype_pkey PRIMARY KEY (genotype_id);


--
-- Name: genotypeprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY genotypeprop
    ADD CONSTRAINT genotypeprop_c1 UNIQUE (genotype_id, type_id, rank);


--
-- Name: genotypeprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY genotypeprop
    ADD CONSTRAINT genotypeprop_pkey PRIMARY KEY (genotypeprop_id);


--
-- Name: glossary_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY glossary
    ADD CONSTRAINT glossary_pkey PRIMARY KEY (glossary_id);


--
-- Name: materialized_view_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY materialized_view
    ADD CONSTRAINT materialized_view_name_key UNIQUE (name);


--
-- Name: matviews_pkey; Type: CONSTRAINT; Schema: public; Owner: web_usr
--

ALTER TABLE ONLY matviews
    ADD CONSTRAINT matviews_pkey PRIMARY KEY (mv_id);


--
-- Name: nd_experiment_contact_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_contact
    ADD CONSTRAINT nd_experiment_contact_pkey PRIMARY KEY (nd_experiment_contact_id);


--
-- Name: nd_experiment_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_dbxref
    ADD CONSTRAINT nd_experiment_dbxref_pkey PRIMARY KEY (nd_experiment_dbxref_id);


--
-- Name: nd_experiment_genotype_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_genotype
    ADD CONSTRAINT nd_experiment_genotype_c1 UNIQUE (nd_experiment_id, genotype_id);


--
-- Name: nd_experiment_genotype_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_genotype
    ADD CONSTRAINT nd_experiment_genotype_pkey PRIMARY KEY (nd_experiment_genotype_id);


--
-- Name: nd_experiment_phenotype_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_phenotype
    ADD CONSTRAINT nd_experiment_phenotype_c1 UNIQUE (nd_experiment_id, phenotype_id);


--
-- Name: nd_experiment_phenotype_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_phenotype
    ADD CONSTRAINT nd_experiment_phenotype_pkey PRIMARY KEY (nd_experiment_phenotype_id);


--
-- Name: nd_experiment_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment
    ADD CONSTRAINT nd_experiment_pkey PRIMARY KEY (nd_experiment_id);


--
-- Name: nd_experiment_project_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_project
    ADD CONSTRAINT nd_experiment_project_pkey PRIMARY KEY (nd_experiment_project_id);


--
-- Name: nd_experiment_protocol_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_protocol
    ADD CONSTRAINT nd_experiment_protocol_pkey PRIMARY KEY (nd_experiment_protocol_id);


--
-- Name: nd_experiment_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_pub
    ADD CONSTRAINT nd_experiment_pub_c1 UNIQUE (nd_experiment_id, pub_id);


--
-- Name: nd_experiment_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_pub
    ADD CONSTRAINT nd_experiment_pub_pkey PRIMARY KEY (nd_experiment_pub_id);


--
-- Name: nd_experiment_stock_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stock_dbxref
    ADD CONSTRAINT nd_experiment_stock_dbxref_pkey PRIMARY KEY (nd_experiment_stock_dbxref_id);


--
-- Name: nd_experiment_stock_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stock
    ADD CONSTRAINT nd_experiment_stock_pkey PRIMARY KEY (nd_experiment_stock_id);


--
-- Name: nd_experiment_stockprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stockprop
    ADD CONSTRAINT nd_experiment_stockprop_c1 UNIQUE (nd_experiment_stock_id, type_id, rank);


--
-- Name: nd_experiment_stockprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stockprop
    ADD CONSTRAINT nd_experiment_stockprop_pkey PRIMARY KEY (nd_experiment_stockprop_id);


--
-- Name: nd_experimentprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experimentprop
    ADD CONSTRAINT nd_experimentprop_c1 UNIQUE (nd_experiment_id, type_id, rank);


--
-- Name: nd_experimentprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experimentprop
    ADD CONSTRAINT nd_experimentprop_pkey PRIMARY KEY (nd_experimentprop_id);


--
-- Name: nd_geolocation_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_geolocation
    ADD CONSTRAINT nd_geolocation_pkey PRIMARY KEY (nd_geolocation_id);


--
-- Name: nd_geolocationprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_geolocationprop
    ADD CONSTRAINT nd_geolocationprop_c1 UNIQUE (nd_geolocation_id, type_id, rank);


--
-- Name: nd_geolocationprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_geolocationprop
    ADD CONSTRAINT nd_geolocationprop_pkey PRIMARY KEY (nd_geolocationprop_id);


--
-- Name: nd_protocol_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocol
    ADD CONSTRAINT nd_protocol_name_key UNIQUE (name);


--
-- Name: nd_protocol_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocol
    ADD CONSTRAINT nd_protocol_pkey PRIMARY KEY (nd_protocol_id);


--
-- Name: nd_protocol_reagent_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocol_reagent
    ADD CONSTRAINT nd_protocol_reagent_pkey PRIMARY KEY (nd_protocol_reagent_id);


--
-- Name: nd_protocolprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocolprop
    ADD CONSTRAINT nd_protocolprop_c1 UNIQUE (nd_protocol_id, type_id, rank);


--
-- Name: nd_protocolprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocolprop
    ADD CONSTRAINT nd_protocolprop_pkey PRIMARY KEY (nd_protocolprop_id);


--
-- Name: nd_reagent_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagent
    ADD CONSTRAINT nd_reagent_pkey PRIMARY KEY (nd_reagent_id);


--
-- Name: nd_reagent_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagent_relationship
    ADD CONSTRAINT nd_reagent_relationship_pkey PRIMARY KEY (nd_reagent_relationship_id);


--
-- Name: nd_reagentprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagentprop
    ADD CONSTRAINT nd_reagentprop_c1 UNIQUE (nd_reagent_id, type_id, rank);


--
-- Name: nd_reagentprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagentprop
    ADD CONSTRAINT nd_reagentprop_pkey PRIMARY KEY (nd_reagentprop_id);


--
-- Name: organism_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organism
    ADD CONSTRAINT organism_c1 UNIQUE (genus, species);


--
-- Name: organism_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organism_dbxref
    ADD CONSTRAINT organism_dbxref_c1 UNIQUE (organism_id, dbxref_id);


--
-- Name: organism_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organism_dbxref
    ADD CONSTRAINT organism_dbxref_pkey PRIMARY KEY (organism_dbxref_id);


--
-- Name: organism_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organism
    ADD CONSTRAINT organism_pkey PRIMARY KEY (organism_id);


--
-- Name: organism_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organism_relationship
    ADD CONSTRAINT organism_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: organism_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organism_relationship
    ADD CONSTRAINT organism_relationship_pkey PRIMARY KEY (organism_relationship_id);


--
-- Name: organismpath_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organismpath
    ADD CONSTRAINT organismpath_c1 UNIQUE (subject_id, object_id, type_id, pathdistance);


--
-- Name: organismpath_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organismpath
    ADD CONSTRAINT organismpath_pkey PRIMARY KEY (organismpath_id);


--
-- Name: organismprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organismprop
    ADD CONSTRAINT organismprop_c1 UNIQUE (organism_id, type_id, rank);


--
-- Name: organismprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organismprop
    ADD CONSTRAINT organismprop_pkey PRIMARY KEY (organismprop_id);


--
-- Name: phendesc_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phendesc
    ADD CONSTRAINT phendesc_c1 UNIQUE (genotype_id, environment_id, type_id, pub_id);


--
-- Name: phendesc_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phendesc
    ADD CONSTRAINT phendesc_pkey PRIMARY KEY (phendesc_id);


--
-- Name: phenotype_comparison_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_c1 UNIQUE (genotype1_id, environment1_id, genotype2_id, environment2_id, phenotype1_id, pub_id);


--
-- Name: phenotype_comparison_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison_cvterm
    ADD CONSTRAINT phenotype_comparison_cvterm_c1 UNIQUE (phenotype_comparison_id, cvterm_id);


--
-- Name: phenotype_comparison_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison_cvterm
    ADD CONSTRAINT phenotype_comparison_cvterm_pkey PRIMARY KEY (phenotype_comparison_cvterm_id);


--
-- Name: phenotype_comparison_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_pkey PRIMARY KEY (phenotype_comparison_id);


--
-- Name: phenotype_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_cvterm
    ADD CONSTRAINT phenotype_cvterm_c1 UNIQUE (phenotype_id, cvterm_id, rank);


--
-- Name: phenotype_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_cvterm
    ADD CONSTRAINT phenotype_cvterm_pkey PRIMARY KEY (phenotype_cvterm_id);


--
-- Name: phenotype_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype
    ADD CONSTRAINT phenotype_pkey PRIMARY KEY (phenotype_id);


--
-- Name: phenotypeprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotypeprop
    ADD CONSTRAINT phenotypeprop_c1 UNIQUE (phenotype_id, type_id, rank);


--
-- Name: phenotypeprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotypeprop
    ADD CONSTRAINT phenotypeprop_pkey PRIMARY KEY (phenotypeprop_id);


--
-- Name: phenstatement_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenstatement
    ADD CONSTRAINT phenstatement_c1 UNIQUE (genotype_id, phenotype_id, environment_id, type_id, pub_id);


--
-- Name: phenstatement_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenstatement
    ADD CONSTRAINT phenstatement_pkey PRIMARY KEY (phenstatement_id);


--
-- Name: phylonode_dbxref_phylonode_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_dbxref
    ADD CONSTRAINT phylonode_dbxref_phylonode_id_key UNIQUE (phylonode_id, dbxref_id);


--
-- Name: phylonode_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_dbxref
    ADD CONSTRAINT phylonode_dbxref_pkey PRIMARY KEY (phylonode_dbxref_id);


--
-- Name: phylonode_organism_phylonode_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_organism
    ADD CONSTRAINT phylonode_organism_phylonode_id_key UNIQUE (phylonode_id);


--
-- Name: phylonode_organism_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_organism
    ADD CONSTRAINT phylonode_organism_pkey PRIMARY KEY (phylonode_organism_id);


--
-- Name: phylonode_phylotree_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode
    ADD CONSTRAINT phylonode_phylotree_id_key UNIQUE (phylotree_id, left_idx);


--
-- Name: phylonode_phylotree_id_key1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode
    ADD CONSTRAINT phylonode_phylotree_id_key1 UNIQUE (phylotree_id, right_idx);


--
-- Name: phylonode_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode
    ADD CONSTRAINT phylonode_pkey PRIMARY KEY (phylonode_id);


--
-- Name: phylonode_pub_phylonode_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_pub
    ADD CONSTRAINT phylonode_pub_phylonode_id_key UNIQUE (phylonode_id, pub_id);


--
-- Name: phylonode_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_pub
    ADD CONSTRAINT phylonode_pub_pkey PRIMARY KEY (phylonode_pub_id);


--
-- Name: phylonode_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_pkey PRIMARY KEY (phylonode_relationship_id);


--
-- Name: phylonode_relationship_subject_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_subject_id_key UNIQUE (subject_id, object_id, type_id);


--
-- Name: phylonodeprop_phylonode_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonodeprop
    ADD CONSTRAINT phylonodeprop_phylonode_id_key UNIQUE (phylonode_id, type_id, value, rank);


--
-- Name: phylonodeprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonodeprop
    ADD CONSTRAINT phylonodeprop_pkey PRIMARY KEY (phylonodeprop_id);


--
-- Name: phylotree_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylotree
    ADD CONSTRAINT phylotree_pkey PRIMARY KEY (phylotree_id);


--
-- Name: phylotree_pub_phylotree_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylotree_pub
    ADD CONSTRAINT phylotree_pub_phylotree_id_key UNIQUE (phylotree_id, pub_id);


--
-- Name: phylotree_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylotree_pub
    ADD CONSTRAINT phylotree_pub_pkey PRIMARY KEY (phylotree_pub_id);


--
-- Name: project_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project
    ADD CONSTRAINT project_c1 UNIQUE (name);


--
-- Name: project_contact_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_contact
    ADD CONSTRAINT project_contact_c1 UNIQUE (project_id, contact_id);


--
-- Name: project_contact_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_contact
    ADD CONSTRAINT project_contact_pkey PRIMARY KEY (project_contact_id);


--
-- Name: project_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project
    ADD CONSTRAINT project_pkey PRIMARY KEY (project_id);


--
-- Name: project_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_pub
    ADD CONSTRAINT project_pub_c1 UNIQUE (project_id, pub_id);


--
-- Name: project_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_pub
    ADD CONSTRAINT project_pub_pkey PRIMARY KEY (project_pub_id);


--
-- Name: project_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_relationship
    ADD CONSTRAINT project_relationship_c1 UNIQUE (subject_project_id, object_project_id, type_id);


--
-- Name: project_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_relationship
    ADD CONSTRAINT project_relationship_pkey PRIMARY KEY (project_relationship_id);


--
-- Name: projectprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY projectprop
    ADD CONSTRAINT projectprop_c1 UNIQUE (project_id, type_id, rank);


--
-- Name: projectprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY projectprop
    ADD CONSTRAINT projectprop_pkey PRIMARY KEY (projectprop_id);


--
-- Name: pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub
    ADD CONSTRAINT pub_c1 UNIQUE (uniquename);


--
-- Name: pub_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub_dbxref
    ADD CONSTRAINT pub_dbxref_c1 UNIQUE (pub_id, dbxref_id);


--
-- Name: pub_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub_dbxref
    ADD CONSTRAINT pub_dbxref_pkey PRIMARY KEY (pub_dbxref_id);


--
-- Name: pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub
    ADD CONSTRAINT pub_pkey PRIMARY KEY (pub_id);


--
-- Name: pub_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub_relationship
    ADD CONSTRAINT pub_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: pub_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub_relationship
    ADD CONSTRAINT pub_relationship_pkey PRIMARY KEY (pub_relationship_id);


--
-- Name: pubabstract_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pubabstract
    ADD CONSTRAINT pubabstract_pkey PRIMARY KEY (pubabstract_id);


--
-- Name: pubauthor_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pubauthor
    ADD CONSTRAINT pubauthor_c1 UNIQUE (pub_id, rank);


--
-- Name: pubauthor_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pubauthor
    ADD CONSTRAINT pubauthor_pkey PRIMARY KEY (pubauthor_id);


--
-- Name: pubprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pubprop
    ADD CONSTRAINT pubprop_c1 UNIQUE (pub_id, type_id, rank);


--
-- Name: pubprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pubprop
    ADD CONSTRAINT pubprop_pkey PRIMARY KEY (pubprop_id);


--
-- Name: resource_file_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY resource_file
    ADD CONSTRAINT resource_file_name_key UNIQUE (name);


--
-- Name: resource_file_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY resource_file
    ADD CONSTRAINT resource_file_pkey PRIMARY KEY (resource_file_id);


--
-- Name: stock_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock
    ADD CONSTRAINT stock_c1 UNIQUE (organism_id, uniquename, type_id);


--
-- Name: stock_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_cvterm
    ADD CONSTRAINT stock_cvterm_c1 UNIQUE (stock_id, cvterm_id, pub_id, rank);


--
-- Name: stock_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_cvterm
    ADD CONSTRAINT stock_cvterm_pkey PRIMARY KEY (stock_cvterm_id);


--
-- Name: stock_cvtermprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_cvtermprop
    ADD CONSTRAINT stock_cvtermprop_c1 UNIQUE (stock_cvterm_id, type_id, rank);


--
-- Name: stock_cvtermprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_cvtermprop
    ADD CONSTRAINT stock_cvtermprop_pkey PRIMARY KEY (stock_cvtermprop_id);


--
-- Name: stock_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_dbxref
    ADD CONSTRAINT stock_dbxref_c1 UNIQUE (stock_id, dbxref_id);


--
-- Name: stock_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_dbxref
    ADD CONSTRAINT stock_dbxref_pkey PRIMARY KEY (stock_dbxref_id);


--
-- Name: stock_dbxrefprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_dbxrefprop
    ADD CONSTRAINT stock_dbxrefprop_c1 UNIQUE (stock_dbxref_id, type_id, rank);


--
-- Name: stock_dbxrefprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_dbxrefprop
    ADD CONSTRAINT stock_dbxrefprop_pkey PRIMARY KEY (stock_dbxrefprop_id);


--
-- Name: stock_genotype_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_genotype
    ADD CONSTRAINT stock_genotype_c1 UNIQUE (stock_id, genotype_id);


--
-- Name: stock_genotype_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_genotype
    ADD CONSTRAINT stock_genotype_pkey PRIMARY KEY (stock_genotype_id);


--
-- Name: stock_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock
    ADD CONSTRAINT stock_pkey PRIMARY KEY (stock_id);


--
-- Name: stock_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_pub
    ADD CONSTRAINT stock_pub_c1 UNIQUE (stock_id, pub_id);


--
-- Name: stock_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_pub
    ADD CONSTRAINT stock_pub_pkey PRIMARY KEY (stock_pub_id);


--
-- Name: stock_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship
    ADD CONSTRAINT stock_relationship_c1 UNIQUE (subject_id, object_id, type_id, rank);


--
-- Name: stock_relationship_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship_cvterm
    ADD CONSTRAINT stock_relationship_cvterm_pkey PRIMARY KEY (stock_relationship_cvterm_id);


--
-- Name: stock_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship
    ADD CONSTRAINT stock_relationship_pkey PRIMARY KEY (stock_relationship_id);


--
-- Name: stock_relationship_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship_pub
    ADD CONSTRAINT stock_relationship_pub_c1 UNIQUE (stock_relationship_id, pub_id);


--
-- Name: stock_relationship_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship_pub
    ADD CONSTRAINT stock_relationship_pub_pkey PRIMARY KEY (stock_relationship_pub_id);


--
-- Name: stockcollection_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollection
    ADD CONSTRAINT stockcollection_c1 UNIQUE (uniquename, type_id);


--
-- Name: stockcollection_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollection
    ADD CONSTRAINT stockcollection_pkey PRIMARY KEY (stockcollection_id);


--
-- Name: stockcollection_stock_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollection_stock
    ADD CONSTRAINT stockcollection_stock_c1 UNIQUE (stockcollection_id, stock_id);


--
-- Name: stockcollection_stock_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollection_stock
    ADD CONSTRAINT stockcollection_stock_pkey PRIMARY KEY (stockcollection_stock_id);


--
-- Name: stockcollectionprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollectionprop
    ADD CONSTRAINT stockcollectionprop_c1 UNIQUE (stockcollection_id, type_id, rank);


--
-- Name: stockcollectionprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollectionprop
    ADD CONSTRAINT stockcollectionprop_pkey PRIMARY KEY (stockcollectionprop_id);


--
-- Name: stockprop_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockprop
    ADD CONSTRAINT stockprop_c1 UNIQUE (stock_id, type_id, rank);


--
-- Name: stockprop_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockprop
    ADD CONSTRAINT stockprop_pkey PRIMARY KEY (stockprop_id);


--
-- Name: stockprop_pub_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockprop_pub
    ADD CONSTRAINT stockprop_pub_c1 UNIQUE (stockprop_id, pub_id);


--
-- Name: stockprop_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockprop_pub
    ADD CONSTRAINT stockprop_pub_pkey PRIMARY KEY (stockprop_pub_id);


--
-- Name: synonym_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY synonym
    ADD CONSTRAINT synonym_c1 UNIQUE (name, type_id);


--
-- Name: synonym_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY synonym
    ADD CONSTRAINT synonym_pkey PRIMARY KEY (synonym_id);


--
-- Name: tableinfo_c1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tableinfo
    ADD CONSTRAINT tableinfo_c1 UNIQUE (name);


--
-- Name: tableinfo_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tableinfo
    ADD CONSTRAINT tableinfo_pkey PRIMARY KEY (tableinfo_id);


--
-- Name: tmp_cds_handler_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tmp_cds_handler
    ADD CONSTRAINT tmp_cds_handler_pkey PRIMARY KEY (cds_row_id);


--
-- Name: tmp_cds_handler_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tmp_cds_handler_relationship
    ADD CONSTRAINT tmp_cds_handler_relationship_pkey PRIMARY KEY (rel_row_id);


--
-- Name: unigene_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY unigene_dbxref
    ADD CONSTRAINT unigene_dbxref_pkey PRIMARY KEY (unigene_dbxref_id);


--
-- Name: unigene_relations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY unigene_relations
    ADD CONSTRAINT unigene_relations_pkey PRIMARY KEY (unigene_id);


--
-- Name: unigene_signalp_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY unigene_signalp
    ADD CONSTRAINT unigene_signalp_pkey PRIMARY KEY (unigene_id);


SET search_path = sgn, pg_catalog;

--
-- Name: accession_names_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY accession_names
    ADD CONSTRAINT accession_names_pkey PRIMARY KEY (accession_name_id);


--
-- Name: accession_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY accession
    ADD CONSTRAINT accession_pkey PRIMARY KEY (accession_id);


--
-- Name: annotation_target_type_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY annotation_target_type
    ADD CONSTRAINT annotation_target_type_pkey PRIMARY KEY (annotation_target_type_id);


--
-- Name: authors_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY authors
    ADD CONSTRAINT authors_pkey PRIMARY KEY (author_id);


--
-- Name: blast_annotations_apply_id_blast_target_id_uq; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_annotations
    ADD CONSTRAINT blast_annotations_apply_id_blast_target_id_uq UNIQUE (apply_id, blast_target_id);


--
-- Name: blast_annotations_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_annotations
    ADD CONSTRAINT blast_annotations_pkey PRIMARY KEY (blast_annotation_id);


--
-- Name: blast_db_blast_db_group_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_db_blast_db_group
    ADD CONSTRAINT blast_db_blast_db_group_pkey PRIMARY KEY (blast_db_blast_db_group_id);


--
-- Name: blast_db_file_base_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_db
    ADD CONSTRAINT blast_db_file_base_key UNIQUE (file_base);


--
-- Name: blast_db_group_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_db_group
    ADD CONSTRAINT blast_db_group_pkey PRIMARY KEY (blast_db_group_id);


--
-- Name: blast_db_organism_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_db_organism
    ADD CONSTRAINT blast_db_organism_pkey PRIMARY KEY (blast_db_organism_id);


--
-- Name: blast_db_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_db
    ADD CONSTRAINT blast_db_pkey PRIMARY KEY (blast_db_id);


--
-- Name: blast_defline_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_defline
    ADD CONSTRAINT blast_defline_pkey PRIMARY KEY (defline_id);


--
-- Name: blast_hits_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_hits
    ADD CONSTRAINT blast_hits_pkey PRIMARY KEY (blast_hit_id);


--
-- Name: blast_targets_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_targets
    ADD CONSTRAINT blast_targets_pkey PRIMARY KEY (blast_target_id);


--
-- Name: cds_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY cds
    ADD CONSTRAINT cds_pkey PRIMARY KEY (cds_id);


--
-- Name: chadoprop_c1; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY chadoprop
    ADD CONSTRAINT chadoprop_c1 UNIQUE (type_id, rank);


--
-- Name: chadoprop_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY chadoprop
    ADD CONSTRAINT chadoprop_pkey PRIMARY KEY (chadoprop_id);


--
-- Name: clone_name_library_id_unique; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY clone
    ADD CONSTRAINT clone_name_library_id_unique UNIQUE (clone_name, library_id);


--
-- Name: clone_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY clone
    ADD CONSTRAINT clone_pkey PRIMARY KEY (clone_id);


--
-- Name: cloning_vector_name_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY cloning_vector
    ADD CONSTRAINT cloning_vector_name_key UNIQUE (name);


--
-- Name: cloning_vector_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY cloning_vector
    ADD CONSTRAINT cloning_vector_pkey PRIMARY KEY (cloning_vector_id);


--
-- Name: common_name_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY common_name
    ADD CONSTRAINT common_name_pkey PRIMARY KEY (common_name_id);


--
-- Name: common_name_unique; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY common_name
    ADD CONSTRAINT common_name_unique UNIQUE (common_name);


--
-- Name: common_nameprop_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY common_nameprop
    ADD CONSTRAINT common_nameprop_pkey PRIMARY KEY (common_nameprop_id);


--
-- Name: cos_markers_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY cos_markers
    ADD CONSTRAINT cos_markers_pkey PRIMARY KEY (cos_marker_id);


--
-- Name: cosii_ortholog_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY cosii_ortholog
    ADD CONSTRAINT cosii_ortholog_pkey PRIMARY KEY (cosii_unigene_id);


--
-- Name: cvprop_c1; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY cvprop
    ADD CONSTRAINT cvprop_c1 UNIQUE (cv_id, type_id, rank);


--
-- Name: cvprop_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY cvprop
    ADD CONSTRAINT cvprop_pkey PRIMARY KEY (cvprop_id);


--
-- Name: derived_from_source_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY derived_from_source
    ADD CONSTRAINT derived_from_source_pkey PRIMARY KEY (derived_from_source_id);


--
-- Name: derived_from_source_source_schema_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY derived_from_source
    ADD CONSTRAINT derived_from_source_source_schema_key UNIQUE (source_schema, source_table, source_col);


--
-- Name: domain_match_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY domain_match
    ADD CONSTRAINT domain_match_pkey PRIMARY KEY (domain_match_id);


--
-- Name: domain_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY domain
    ADD CONSTRAINT domain_pkey PRIMARY KEY (domain_id);


--
-- Name: enzyme_restriction_sites_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY enzyme_restriction_sites
    ADD CONSTRAINT enzyme_restriction_sites_pkey PRIMARY KEY (enzyme_restriction_sites_id);


--
-- Name: enzymes_enzyme_name_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY enzymes
    ADD CONSTRAINT enzymes_enzyme_name_key UNIQUE (enzyme_name);


--
-- Name: enzymes_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY enzymes
    ADD CONSTRAINT enzymes_pkey PRIMARY KEY (enzyme_id);


--
-- Name: est_dbxref_est_id_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY est_dbxref
    ADD CONSTRAINT est_dbxref_est_id_key UNIQUE (est_id, dbxref_id);


--
-- Name: est_dbxref_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY est_dbxref
    ADD CONSTRAINT est_dbxref_pkey PRIMARY KEY (est_dbxref_id);


--
-- Name: est_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY est
    ADD CONSTRAINT est_pkey PRIMARY KEY (est_id);


--
-- Name: ests_mapped_by_clone_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY ests_mapped_by_clone
    ADD CONSTRAINT ests_mapped_by_clone_pkey PRIMARY KEY (embc_id);


--
-- Name: experiment_type_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY experiment_type
    ADD CONSTRAINT experiment_type_pkey PRIMARY KEY (experiment_type_id);


--
-- Name: facility_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY facility
    ADD CONSTRAINT facility_pkey PRIMARY KEY (facility_id);


--
-- Name: family_build_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY family_build
    ADD CONSTRAINT family_build_pkey PRIMARY KEY (family_build_id);


--
-- Name: family_member_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY family_member
    ADD CONSTRAINT family_member_pkey PRIMARY KEY (family_member_id);


--
-- Name: family_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY family
    ADD CONSTRAINT family_pkey PRIMARY KEY (family_id);


--
-- Name: family_tree_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY family_tree
    ADD CONSTRAINT family_tree_pkey PRIMARY KEY (family_tree_id);


--
-- Name: fish_chromatin_density_constants_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY fish_chromatin_density_constants
    ADD CONSTRAINT fish_chromatin_density_constants_pkey PRIMARY KEY (arm);


--
-- Name: fish_experimenter_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY fish_experimenter
    ADD CONSTRAINT fish_experimenter_pkey PRIMARY KEY (fish_experimenter_id);


--
-- Name: fish_expermenter_name_uniq; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY fish_experimenter
    ADD CONSTRAINT fish_expermenter_name_uniq UNIQUE (fish_experimenter_name);


--
-- Name: fish_file_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY fish_file
    ADD CONSTRAINT fish_file_pkey PRIMARY KEY (fish_file_id);


--
-- Name: fish_image_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY fish_image
    ADD CONSTRAINT fish_image_pkey PRIMARY KEY (fish_image_id);


--
-- Name: fish_karyotype_constants_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY fish_karyotype_constants_old
    ADD CONSTRAINT fish_karyotype_constants_pkey PRIMARY KEY (chromo_num);


--
-- Name: fish_karyotype_constants_pkey1; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY fish_karyotype_constants
    ADD CONSTRAINT fish_karyotype_constants_pkey1 PRIMARY KEY (fish_experimenter_id, chromo_num, chromo_arm);


--
-- Name: fish_result_composite_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY fish_result_composite
    ADD CONSTRAINT fish_result_composite_pkey PRIMARY KEY (fish_result_id);


--
-- Name: fish_result_fish_experimenter_clone_id_experiment_name; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY fish_result
    ADD CONSTRAINT fish_result_fish_experimenter_clone_id_experiment_name UNIQUE (fish_experimenter_id, clone_id, experiment_name);


--
-- Name: fish_result_image_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY fish_result_image
    ADD CONSTRAINT fish_result_image_pkey PRIMARY KEY (fish_result_image_id);


--
-- Name: fish_result_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY fish_result
    ADD CONSTRAINT fish_result_pkey PRIMARY KEY (fish_result_id);


--
-- Name: go_go_accession_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY go
    ADD CONSTRAINT go_go_accession_key UNIQUE (go_accession);


--
-- Name: go_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY go
    ADD CONSTRAINT go_pkey PRIMARY KEY (go_id);


--
-- Name: group_linkage_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY group_linkage
    ADD CONSTRAINT group_linkage_pkey PRIMARY KEY (group_linkage_id);


--
-- Name: groups_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY groups
    ADD CONSTRAINT groups_pkey PRIMARY KEY (group_id);


--
-- Name: id_linkage_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY id_linkage
    ADD CONSTRAINT id_linkage_pkey PRIMARY KEY (id_linkage_id);


--
-- Name: interpro_go_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY interpro_go
    ADD CONSTRAINT interpro_go_pkey PRIMARY KEY (interpro_go_id);


--
-- Name: interpro_interpro_accession_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY interpro
    ADD CONSTRAINT interpro_interpro_accession_key UNIQUE (interpro_accession);


--
-- Name: interpro_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY interpro
    ADD CONSTRAINT interpro_pkey PRIMARY KEY (interpro_id);


--
-- Name: legacy_conf_id_unique; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_marker_confidences
    ADD CONSTRAINT legacy_conf_id_unique UNIQUE (legacy_conf_id);


--
-- Name: library_id_clone_name_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY clone
    ADD CONSTRAINT library_id_clone_name_key UNIQUE (library_id, clone_name);


--
-- Name: library_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY library
    ADD CONSTRAINT library_pkey PRIMARY KEY (library_id);


--
-- Name: library_shortname_idx; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY library
    ADD CONSTRAINT library_shortname_idx UNIQUE (library_shortname);


--
-- Name: linkage_group_map_version_id_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY linkage_group
    ADD CONSTRAINT linkage_group_map_version_id_key UNIQUE (map_version_id, lg_order);


--
-- Name: linkage_group_map_version_id_key1; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY linkage_group
    ADD CONSTRAINT linkage_group_map_version_id_key1 UNIQUE (map_version_id, lg_name);


--
-- Name: linkage_group_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY linkage_group
    ADD CONSTRAINT linkage_group_pkey PRIMARY KEY (lg_id);


--
-- Name: linkage_groups_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_linkage_groups
    ADD CONSTRAINT linkage_groups_pkey PRIMARY KEY (lg_id);


--
-- Name: loc_types_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY loc_types
    ADD CONSTRAINT loc_types_pkey PRIMARY KEY (loc_type_id);


--
-- Name: manual_annotations_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY manual_annotations
    ADD CONSTRAINT manual_annotations_pkey PRIMARY KEY (manual_annotations_id);


--
-- Name: manual_censor_reasons_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY manual_censor_reasons
    ADD CONSTRAINT manual_censor_reasons_pkey PRIMARY KEY (censor_id);


--
-- Name: map_cross_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_map_cross
    ADD CONSTRAINT map_cross_pkey PRIMARY KEY (map_cross_id);


--
-- Name: map_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY map
    ADD CONSTRAINT map_pkey PRIMARY KEY (map_id);


--
-- Name: map_version_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY map_version
    ADD CONSTRAINT map_version_pkey PRIMARY KEY (map_version_id);


--
-- Name: mapdata_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_mapdata
    ADD CONSTRAINT mapdata_pkey PRIMARY KEY (loc_id);


--
-- Name: maps_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_maps
    ADD CONSTRAINT maps_pkey PRIMARY KEY (map_id);


--
-- Name: marker_alias_alias_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_alias
    ADD CONSTRAINT marker_alias_alias_key UNIQUE (alias);


--
-- Name: marker_alias_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_alias
    ADD CONSTRAINT marker_alias_pkey PRIMARY KEY (alias_id);


--
-- Name: marker_collectible_marker_id_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_collectible
    ADD CONSTRAINT marker_collectible_marker_id_key UNIQUE (marker_id, mc_id);


--
-- Name: marker_collectible_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_collectible
    ADD CONSTRAINT marker_collectible_pkey PRIMARY KEY (marker_collectible_dummy_id);


--
-- Name: marker_collection_mc_name_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_collection
    ADD CONSTRAINT marker_collection_mc_name_key UNIQUE (mc_name);


--
-- Name: marker_collection_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_collection
    ADD CONSTRAINT marker_collection_pkey PRIMARY KEY (mc_id);


--
-- Name: marker_confidence_confidence_name_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_confidence
    ADD CONSTRAINT marker_confidence_confidence_name_key UNIQUE (confidence_name);


--
-- Name: marker_confidence_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_confidence
    ADD CONSTRAINT marker_confidence_pkey PRIMARY KEY (confidence_id);


--
-- Name: marker_confidences_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_marker_confidences
    ADD CONSTRAINT marker_confidences_pkey PRIMARY KEY (confidence_id);


--
-- Name: marker_derived_from_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_derived_from
    ADD CONSTRAINT marker_derived_from_pkey PRIMARY KEY (marker_derived_dummy_id);


--
-- Name: marker_experiment_pcr_experiment_id_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_experiment
    ADD CONSTRAINT marker_experiment_pcr_experiment_id_key UNIQUE (pcr_experiment_id, rflp_experiment_id, location_id);


--
-- Name: marker_experiment_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_experiment
    ADD CONSTRAINT marker_experiment_pkey PRIMARY KEY (marker_experiment_id);


--
-- Name: marker_location_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_location
    ADD CONSTRAINT marker_location_pkey PRIMARY KEY (location_id);


--
-- Name: marker_locations_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_marker_locations
    ADD CONSTRAINT marker_locations_pkey PRIMARY KEY (marker_location_id);


--
-- Name: marker_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker
    ADD CONSTRAINT marker_pkey PRIMARY KEY (marker_id);


--
-- Name: marker_types_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_marker_types
    ADD CONSTRAINT marker_types_pkey PRIMARY KEY (marker_type_id);


--
-- Name: markers_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_markers
    ADD CONSTRAINT markers_pkey PRIMARY KEY (marker_id);


--
-- Name: metadata_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY metadata
    ADD CONSTRAINT metadata_pkey PRIMARY KEY (metadata_id);


--
-- Name: microarray_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY microarray
    ADD CONSTRAINT microarray_pkey PRIMARY KEY (microarray_id);


--
-- Name: misc_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY misc
    ADD CONSTRAINT misc_pkey PRIMARY KEY (misc_unique_id);


--
-- Name: organism_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY organism
    ADD CONSTRAINT organism_pkey PRIMARY KEY (organism_id);


--
-- Name: organismgroup_member_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY organismgroup_member
    ADD CONSTRAINT organismgroup_member_pkey PRIMARY KEY (organismgroup_member_id);


--
-- Name: organismgroup_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY organismgroup
    ADD CONSTRAINT organismgroup_pkey PRIMARY KEY (organismgroup_id);


--
-- Name: p_markers_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY p_markers
    ADD CONSTRAINT p_markers_pkey PRIMARY KEY (pid);


--
-- Name: pcr_exp_accession_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_exp_accession
    ADD CONSTRAINT pcr_exp_accession_pkey PRIMARY KEY (pcr_exp_accession_id);


--
-- Name: pcr_experiment_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_experiment
    ADD CONSTRAINT pcr_experiment_pkey PRIMARY KEY (pcr_experiment_id);


--
-- Name: pcr_experiment_sequence_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_experiment_sequence
    ADD CONSTRAINT pcr_experiment_sequence_pkey PRIMARY KEY (pcr_experiment_sequence_id);


--
-- Name: pcr_product_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_product
    ADD CONSTRAINT pcr_product_pkey PRIMARY KEY (pcr_product_id);


--
-- Name: primer_unigene_match_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY primer_unigene_match
    ADD CONSTRAINT primer_unigene_match_pkey PRIMARY KEY (primer_unigene_match_id);


--
-- Name: qc_report_est_id_key; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY qc_report
    ADD CONSTRAINT qc_report_est_id_key UNIQUE (est_id);


--
-- Name: qc_report_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY qc_report
    ADD CONSTRAINT qc_report_pkey PRIMARY KEY (qc_id);


--
-- Name: rflp_markers_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY rflp_markers
    ADD CONSTRAINT rflp_markers_pkey PRIMARY KEY (rflp_id);


--
-- Name: rflp_sequences_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY rflp_sequences
    ADD CONSTRAINT rflp_sequences_pkey PRIMARY KEY (seq_id);


--
-- Name: rflp_unigene_associations_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY rflp_unigene_associations
    ADD CONSTRAINT rflp_unigene_associations_pkey PRIMARY KEY (rflp_unigene_assoc_id);


--
-- Name: seqread_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY seqread
    ADD CONSTRAINT seqread_pkey PRIMARY KEY (read_id);


--
-- Name: sequence_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sequence
    ADD CONSTRAINT sequence_pkey PRIMARY KEY (sequence_id);


--
-- Name: sequence_unique; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY sequence
    ADD CONSTRAINT sequence_unique UNIQUE (sequence);


--
-- Name: snp_file_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY snp_file
    ADD CONSTRAINT snp_file_pkey PRIMARY KEY (snp_file_id);


--
-- Name: snp_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY snp
    ADD CONSTRAINT snp_pkey PRIMARY KEY (snp_id);


--
-- Name: snpprop_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY snpprop
    ADD CONSTRAINT snpprop_pkey PRIMARY KEY (snpprop_id);


--
-- Name: ssr_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY ssr
    ADD CONSTRAINT ssr_pkey PRIMARY KEY (ssr_id);


--
-- Name: ssr_primer_unigene_matches_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY ssr_primer_unigene_matches
    ADD CONSTRAINT ssr_primer_unigene_matches_pkey PRIMARY KEY (ssr_primer_unigene_match_id);


--
-- Name: ssr_repeats_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY ssr_repeats
    ADD CONSTRAINT ssr_repeats_pkey PRIMARY KEY (repeat_id);


--
-- Name: submit_user_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY submit_user
    ADD CONSTRAINT submit_user_pkey PRIMARY KEY (submit_user_id);


--
-- Name: taxonomy_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY taxonomy
    ADD CONSTRAINT taxonomy_pkey PRIMARY KEY (tax_id);


--
-- Name: temp_caps_correspondence_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY temp_caps_correspondence
    ADD CONSTRAINT temp_caps_correspondence_pkey PRIMARY KEY (tcc_id);


--
-- Name: temp_map_correspondence_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY temp_map_correspondence
    ADD CONSTRAINT temp_map_correspondence_pkey PRIMARY KEY (tmc_id);


--
-- Name: temp_marker_correspondence_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY temp_marker_correspondence
    ADD CONSTRAINT temp_marker_correspondence_pkey PRIMARY KEY (tmc_id);


--
-- Name: tigrtc_index_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY tigrtc_index
    ADD CONSTRAINT tigrtc_index_pkey PRIMARY KEY (tcindex_id);


--
-- Name: tigrtc_membership_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY tigrtc_membership
    ADD CONSTRAINT tigrtc_membership_pkey PRIMARY KEY (tigrtc_membership_id);


--
-- Name: tigrtc_tracking_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY tigrtc_tracking
    ADD CONSTRAINT tigrtc_tracking_pkey PRIMARY KEY (tigrtc_tracking_id);


--
-- Name: tm_markers_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY tm_markers
    ADD CONSTRAINT tm_markers_pkey PRIMARY KEY (tm_id);


--
-- Name: tm_markers_sequences_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY tm_markers_sequences
    ADD CONSTRAINT tm_markers_sequences_pkey PRIMARY KEY (tm_marker_seq_id);


--
-- Name: trim_feature_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY trim_feature
    ADD CONSTRAINT trim_feature_pkey PRIMARY KEY (feature_id);


--
-- Name: trim_feature_types_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY trim_feature_types
    ADD CONSTRAINT trim_feature_types_pkey PRIMARY KEY (trim_type_id);


--
-- Name: types_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY types
    ADD CONSTRAINT types_pkey PRIMARY KEY (type_id);


--
-- Name: unigene_build_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY unigene_build
    ADD CONSTRAINT unigene_build_pkey PRIMARY KEY (unigene_build_id);


--
-- Name: unigene_consensi_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY unigene_consensi
    ADD CONSTRAINT unigene_consensi_pkey PRIMARY KEY (consensi_id);


--
-- Name: unigene_member_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY unigene_member
    ADD CONSTRAINT unigene_member_pkey PRIMARY KEY (unigene_member_id);


--
-- Name: unigene_pkey; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY unigene
    ADD CONSTRAINT unigene_pkey PRIMARY KEY (unigene_id);


--
-- Name: unique_acc_enz_mult_pred_size; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_product
    ADD CONSTRAINT unique_acc_enz_mult_pred_size UNIQUE (pcr_exp_accession_id, enzyme_id, multiple_flag, band_size, predicted);


--
-- Name: unique_accession_name; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY accession
    ADD CONSTRAINT unique_accession_name UNIQUE (accession_name_id);


--
-- Name: unique_organism_name; Type: CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY organism
    ADD CONSTRAINT unique_organism_name UNIQUE (organism_name);


SET search_path = sgn_people, pg_catalog;

--
-- Name: bac_id_key; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY bac_status
    ADD CONSTRAINT bac_id_key UNIQUE (bac_id);


--
-- Name: bac_status_log_id_key; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY bac_status_log
    ADD CONSTRAINT bac_status_log_id_key PRIMARY KEY (bac_status_log_id);


--
-- Name: bac_status_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY bac_status
    ADD CONSTRAINT bac_status_pkey PRIMARY KEY (bac_status_id);


--
-- Name: clone_il_mapping_bin_log_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY clone_il_mapping_bin_log
    ADD CONSTRAINT clone_il_mapping_bin_log_pkey PRIMARY KEY (sp_clone_il_mapping_bin_log_id);


--
-- Name: cookie_string_unique; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_person
    ADD CONSTRAINT cookie_string_unique UNIQUE (cookie_string);


--
-- Name: cookie_unique; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_person
    ADD CONSTRAINT cookie_unique UNIQUE (cookie_string);


--
-- Name: forum_post_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY forum_post
    ADD CONSTRAINT forum_post_pkey PRIMARY KEY (forum_post_id);


--
-- Name: forum_topic_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY forum_topic
    ADD CONSTRAINT forum_topic_pkey PRIMARY KEY (forum_topic_id);


--
-- Name: list_item_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY list_item
    ADD CONSTRAINT list_item_pkey PRIMARY KEY (list_item_id);


--
-- Name: list_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY list
    ADD CONSTRAINT list_pkey PRIMARY KEY (list_id);


--
-- Name: sp_group_name_key; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_group
    ADD CONSTRAINT sp_group_name_key UNIQUE (name);


--
-- Name: sp_group_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_group
    ADD CONSTRAINT sp_group_pkey PRIMARY KEY (sp_group_id);


--
-- Name: sp_login_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_login_old
    ADD CONSTRAINT sp_login_pkey PRIMARY KEY (sp_login_id);


--
-- Name: sp_organisms_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_organisms
    ADD CONSTRAINT sp_organisms_pkey PRIMARY KEY (organism_id);


--
-- Name: sp_organization_person_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_organization_person
    ADD CONSTRAINT sp_organization_person_pkey PRIMARY KEY (sp_organization_person_id);


--
-- Name: sp_organization_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_organization
    ADD CONSTRAINT sp_organization_pkey PRIMARY KEY (sp_organization_id);


--
-- Name: sp_papers_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_papers
    ADD CONSTRAINT sp_papers_pkey PRIMARY KEY (sp_paper_id);


--
-- Name: sp_person_organisms_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_person_organisms
    ADD CONSTRAINT sp_person_organisms_pkey PRIMARY KEY (sp_person_organisms_id);


--
-- Name: sp_person_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_person
    ADD CONSTRAINT sp_person_pkey PRIMARY KEY (sp_person_id);


--
-- Name: sp_person_roles_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_person_roles
    ADD CONSTRAINT sp_person_roles_pkey PRIMARY KEY (sp_person_role_id);


--
-- Name: sp_person_username_key; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_person
    ADD CONSTRAINT sp_person_username_key UNIQUE (username);


--
-- Name: sp_project_organization_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_project_organization
    ADD CONSTRAINT sp_project_organization_pkey PRIMARY KEY (sp_project_organization_id);


--
-- Name: sp_project_person_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_project_person
    ADD CONSTRAINT sp_project_person_pkey PRIMARY KEY (sp_project_person_id);


--
-- Name: sp_project_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_project
    ADD CONSTRAINT sp_project_pkey PRIMARY KEY (sp_project_id);


--
-- Name: sp_roles_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_roles
    ADD CONSTRAINT sp_roles_pkey PRIMARY KEY (sp_role_id);


--
-- Name: user_map_data_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY user_map_data
    ADD CONSTRAINT user_map_data_pkey PRIMARY KEY (user_map_data_id);


--
-- Name: user_map_pkey; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY user_map
    ADD CONSTRAINT user_map_pkey PRIMARY KEY (user_map_id);


--
-- Name: username_unique; Type: CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_login_old
    ADD CONSTRAINT username_unique UNIQUE (username);


SET search_path = sgn_submit, pg_catalog;

--
-- Name: facility_pkey; Type: CONSTRAINT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY facility
    ADD CONSTRAINT facility_pkey PRIMARY KEY (facility_id);


--
-- Name: library_pkey; Type: CONSTRAINT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY library
    ADD CONSTRAINT library_pkey PRIMARY KEY (library_id);


--
-- Name: read_id_key; Type: CONSTRAINT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY seqread
    ADD CONSTRAINT read_id_key UNIQUE (read_id);


--
-- Name: seqread_pkey; Type: CONSTRAINT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY seqread
    ADD CONSTRAINT seqread_pkey PRIMARY KEY (submit_read_id);


--
-- Name: submit_user_pkey; Type: CONSTRAINT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY submit_user
    ADD CONSTRAINT submit_user_pkey PRIMARY KEY (submit_user_id);


SET search_path = tomato_gff, pg_catalog;

--
-- Name: ftype_ftype; Type: CONSTRAINT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY ftype
    ADD CONSTRAINT ftype_ftype UNIQUE (fmethod, fsource);


--
-- Name: gclass_fgroup; Type: CONSTRAINT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY fgroup
    ADD CONSTRAINT gclass_fgroup UNIQUE (gclass, gname);


--
-- Name: pk_fattribute; Type: CONSTRAINT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY fattribute
    ADD CONSTRAINT pk_fattribute PRIMARY KEY (fattribute_id);


--
-- Name: pk_fdata; Type: CONSTRAINT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY fdata
    ADD CONSTRAINT pk_fdata PRIMARY KEY (fid);


--
-- Name: pk_fdna; Type: CONSTRAINT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY fdna
    ADD CONSTRAINT pk_fdna PRIMARY KEY (fref, foffset);


--
-- Name: pk_fgroup; Type: CONSTRAINT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY fgroup
    ADD CONSTRAINT pk_fgroup PRIMARY KEY (gid);


--
-- Name: pk_fmeta; Type: CONSTRAINT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY fmeta
    ADD CONSTRAINT pk_fmeta PRIMARY KEY (fname);


--
-- Name: pk_ftype; Type: CONSTRAINT; Schema: tomato_gff; Owner: postgres
--

ALTER TABLE ONLY ftype
    ADD CONSTRAINT pk_ftype PRIMARY KEY (ftypeid);


SET search_path = biosource, pg_catalog;

--
-- Name: object_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX object_id_index ON bs_sample_relationship USING btree (object_id);


--
-- Name: protocol_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX protocol_id_index ON bs_protocol USING btree (protocol_id);


--
-- Name: protocol_pub_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX protocol_pub_id_index ON bs_protocol_pub USING btree (protocol_pub_id);


--
-- Name: protocol_step_dbxref_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX protocol_step_dbxref_id_index ON bs_protocol_step_dbxref USING btree (protocol_step_dbxref_id);


--
-- Name: protocol_step_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX protocol_step_id_index ON bs_protocol_step USING btree (protocol_step_id);


--
-- Name: sample_cvterm_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_cvterm_id_index ON bs_sample_cvterm USING btree (sample_cvterm_id);


--
-- Name: sample_dbxref_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_dbxref_id_index ON bs_sample_dbxref USING btree (sample_dbxref_id);


--
-- Name: sample_element_cvterm_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_element_cvterm_id_index ON bs_sample_element_cvterm USING btree (sample_element_cvterm_id);


--
-- Name: sample_element_dbxref_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_element_dbxref_id_index ON bs_sample_element_dbxref USING btree (sample_element_dbxref_id);


--
-- Name: sample_element_file_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_element_file_id_index ON bs_sample_element_file USING btree (sample_element_file_id);


--
-- Name: sample_element_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_element_id_index ON bs_sample_element USING btree (sample_element_id);


--
-- Name: sample_element_relation_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_element_relation_id_index ON bs_sample_element_relation USING btree (sample_element_relation_id);


--
-- Name: sample_file_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_file_id_index ON bs_sample_file USING btree (sample_file_id);


--
-- Name: sample_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_id_index ON bs_sample USING btree (sample_id);


--
-- Name: sample_pub_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_pub_id_index ON bs_sample_pub USING btree (sample_pub_id);


--
-- Name: sample_relationship_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX sample_relationship_id_index ON bs_sample_relationship USING btree (sample_relationship_id);


--
-- Name: subject_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX subject_id_index ON bs_sample_relationship USING btree (subject_id);


--
-- Name: tool_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX tool_id_index ON bs_tool USING btree (tool_id);


--
-- Name: tool_pub_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX tool_pub_id_index ON bs_tool_pub USING btree (tool_pub_id);


--
-- Name: type_id_index; Type: INDEX; Schema: biosource; Owner: postgres
--

CREATE INDEX type_id_index ON bs_sample_relationship USING btree (type_id);


SET search_path = gem, pg_catalog;

--
-- Name: cluster_analysis_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX cluster_analysis_id_index ON ge_cluster_analysis USING btree (cluster_analysis_id);


--
-- Name: cluster_member_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX cluster_member_id_index ON ge_cluster_member USING btree (cluster_member_id);


--
-- Name: cluster_profile_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX cluster_profile_id_index ON ge_cluster_profile USING btree (cluster_profile_id);


--
-- Name: correlation_analysis_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX correlation_analysis_id_index ON ge_correlation_analysis USING btree (correlation_analysis_id);


--
-- Name: correlation_analysis_member_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX correlation_analysis_member_id_index ON ge_correlation_member USING btree (correlation_member_id);


--
-- Name: data_analysis_process_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX data_analysis_process_id_index ON ge_data_analysis_process USING btree (data_analysis_process_id);


--
-- Name: diff_expression_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX diff_expression_id_index ON ge_diff_expression USING btree (diff_expression_id);


--
-- Name: experiment_analysis_group_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX experiment_analysis_group_id_index ON ge_experiment_analysis_group USING btree (experiment_analysis_group_id);


--
-- Name: experiment_analysis_member_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX experiment_analysis_member_id_index ON ge_experiment_analysis_member USING btree (experiment_analysis_member_id);


--
-- Name: experiment_dbxref_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX experiment_dbxref_id_index ON ge_experiment_dbxref USING btree (experiment_dbxref_id);


--
-- Name: experiment_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX experiment_id_index ON ge_experiment USING btree (experiment_id);


--
-- Name: experimental_design_dbxref_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX experimental_design_dbxref_id_index ON ge_experimental_design_dbxref USING btree (experimental_design_dbxref_id);


--
-- Name: experimental_design_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX experimental_design_id_index ON ge_experimental_design USING btree (experimental_design_id);


--
-- Name: experimental_design_pub_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX experimental_design_pub_id_index ON ge_experimental_design_pub USING btree (experimental_design_pub_id);


--
-- Name: expression_by_experiment_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX expression_by_experiment_id_index ON ge_expression_by_experiment USING btree (expression_by_experiment_id);


--
-- Name: fluorescanning_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX fluorescanning_id_index ON ge_fluorescanning USING btree (fluorescanning_id);


--
-- Name: hybridization_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX hybridization_id_index ON ge_hybridization USING btree (hybridization_id);


--
-- Name: platform_dbxref_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX platform_dbxref_id_index ON ge_platform_dbxref USING btree (platform_dbxref_id);


--
-- Name: platform_design_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX platform_design_id_index ON ge_platform_design USING btree (platform_design_id);


--
-- Name: platform_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX platform_id_index ON ge_platform USING btree (platform_id);


--
-- Name: platform_pub_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX platform_pub_id_index ON ge_platform_pub USING btree (platform_pub_id);


--
-- Name: probe_expression_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX probe_expression_id_index ON ge_probe_expression USING btree (probe_expression_id);


--
-- Name: probe_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX probe_id_index ON ge_probe USING btree (probe_id);


--
-- Name: probe_name_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX probe_name_index ON ge_probe USING btree (probe_name);


--
-- Name: probe_platform_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX probe_platform_id_index ON ge_probe USING btree (platform_id);


--
-- Name: probe_spot_coordinate_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX probe_spot_coordinate_id_index ON ge_probe_spot_coordinate USING btree (probe_spot_coordinate_id);


--
-- Name: probe_spot_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX probe_spot_id_index ON ge_probe_spot USING btree (probe_spot_id);


--
-- Name: probe_spot_probe_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX probe_spot_probe_id_index ON ge_probe_spot USING btree (probe_id);


--
-- Name: profile_element_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX profile_element_id_index ON ge_profile_element USING btree (profile_element_id);


--
-- Name: target_dbxref_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX target_dbxref_id_index ON ge_target_dbxref USING btree (target_dbxref_id);


--
-- Name: target_element_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX target_element_id_index ON ge_target_element USING btree (target_element_id);


--
-- Name: target_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX target_id_index ON ge_target USING btree (target_id);


--
-- Name: technology_type_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX technology_type_id_index ON ge_technology_type USING btree (technology_type_id);


--
-- Name: template_dbiref_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX template_dbiref_id_index ON ge_template_dbiref USING btree (template_dbiref_id);


--
-- Name: template_dbxref_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX template_dbxref_id_index ON ge_template_dbxref USING btree (template_dbxref_id);


--
-- Name: template_diff_expression_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX template_diff_expression_id_index ON ge_template_diff_expression USING btree (template_diff_expression_id);


--
-- Name: template_expression_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX template_expression_id_index ON ge_template_expression USING btree (template_expression_id);


--
-- Name: template_id_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX template_id_index ON ge_template USING btree (template_id);


--
-- Name: template_name_index; Type: INDEX; Schema: gem; Owner: postgres
--

CREATE INDEX template_name_index ON ge_template USING btree (template_name);


SET search_path = genomic, pg_catalog;

--
-- Name: accession_id_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX accession_id_idx ON library USING btree (accession_id);


--
-- Name: blast_defline_identifier_defline_fulltext_index; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX blast_defline_identifier_defline_fulltext_index ON blast_defline USING gist (identifier_defline_fulltext);


--
-- Name: blast_query_id_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX blast_query_id_idx ON blast_hit USING btree (blast_query_id);


--
-- Name: byname_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX byname_idx ON clone USING btree (platenum, wellrow, wellcol, clone_type_id);


--
-- Name: chromat_id_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX chromat_id_idx ON gss USING btree (chromat_id);


--
-- Name: clone_feature_feature_id_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX clone_feature_feature_id_idx ON clone_feature USING btree (feature_id);


--
-- Name: clone_id_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX clone_id_idx ON chromat USING btree (clone_id);


--
-- Name: clone_type_id_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX clone_type_id_idx ON clone USING btree (clone_type_id);


--
-- Name: defline_id_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX defline_id_idx ON blast_hit USING btree (blast_defline_id);


--
-- Name: defline_query_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX defline_query_idx ON blast_hit USING btree (blast_defline_id, blast_query_id);


--
-- Name: evalue_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX evalue_idx ON blast_hit USING btree (evalue);


--
-- Name: filename_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX filename_idx ON chromat USING btree (filename);


--
-- Name: gss_flags_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX gss_flags_idx ON gss USING btree (flags);


--
-- Name: gss_id_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX gss_id_idx ON gss_submitted_to_genbank USING btree (gss_id);


--
-- Name: gss_id_idx2; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX gss_id_idx2 ON qc_report USING btree (gss_id);


--
-- Name: identifier_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX identifier_idx ON blast_defline USING btree (identifier);


--
-- Name: library_id_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX library_id_idx ON clone USING btree (library_id);


--
-- Name: score_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX score_idx ON blast_hit USING btree (score);


--
-- Name: shortname_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX shortname_idx ON query_source_type USING btree (shortname);


--
-- Name: source_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX source_idx ON blast_query USING btree (query_source_type_id, source_id);


--
-- Name: status_idx; Type: INDEX; Schema: genomic; Owner: postgres
--

CREATE INDEX status_idx ON gss USING btree (status);


SET search_path = insitu, pg_catalog;

--
-- Name: ex_tag_idx1_idx; Type: INDEX; Schema: insitu; Owner: postgres
--

CREATE INDEX ex_tag_idx1_idx ON ex_tag USING btree (experiment_id);


--
-- Name: ex_tag_idx2_idx; Type: INDEX; Schema: insitu; Owner: postgres
--

CREATE INDEX ex_tag_idx2_idx ON ex_tag USING btree (tag_id);


--
-- Name: experiment_idx1_idx; Type: INDEX; Schema: insitu; Owner: postgres
--

CREATE INDEX experiment_idx1_idx ON experiment USING btree (probe_id);


--
-- Name: image_tag_idx1_idx; Type: INDEX; Schema: insitu; Owner: postgres
--

CREATE INDEX image_tag_idx1_idx ON image_tag USING btree (image_id);


--
-- Name: image_tag_idx2_idx; Type: INDEX; Schema: insitu; Owner: postgres
--

CREATE INDEX image_tag_idx2_idx ON image_tag USING btree (tag_id);


--
-- Name: tag_implication_idx1_idx; Type: INDEX; Schema: insitu; Owner: postgres
--

CREATE INDEX tag_implication_idx1_idx ON tag_implication USING btree (tag_id);


--
-- Name: tag_implication_idx2_idx; Type: INDEX; Schema: insitu; Owner: postgres
--

CREATE INDEX tag_implication_idx2_idx ON tag_implication USING btree (implied_id);


SET search_path = metadata, pg_catalog;

--
-- Name: dbipath_id_index; Type: INDEX; Schema: metadata; Owner: postgres
--

CREATE INDEX dbipath_id_index ON md_dbipath USING btree (dbipath_id);


--
-- Name: dbiref_id_index; Type: INDEX; Schema: metadata; Owner: postgres
--

CREATE INDEX dbiref_id_index ON md_dbiref USING btree (dbiref_id);


--
-- Name: dbversion_id_index; Type: INDEX; Schema: metadata; Owner: postgres
--

CREATE INDEX dbversion_id_index ON md_dbversion USING btree (dbversion_id);


--
-- Name: file_id_index; Type: INDEX; Schema: metadata; Owner: postgres
--

CREATE INDEX file_id_index ON md_files USING btree (file_id);


--
-- Name: group_id_index; Type: INDEX; Schema: metadata; Owner: postgres
--

CREATE INDEX group_id_index ON md_groups USING btree (group_id);


--
-- Name: groupmember_id_index; Type: INDEX; Schema: metadata; Owner: postgres
--

CREATE INDEX groupmember_id_index ON md_groupmembers USING btree (groupmember_id);


--
-- Name: metadata_id_index; Type: INDEX; Schema: metadata; Owner: postgres
--

CREATE INDEX metadata_id_index ON md_metadata USING btree (metadata_id);


SET search_path = pheno_population, pg_catalog;

--
-- Name: gen_id_idx; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX gen_id_idx ON plants USING btree (gen_id);


--
-- Name: image_id_idx; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX image_id_idx ON data_points USING btree (image_id);


--
-- Name: loc_id_idx; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX loc_id_idx ON plants USING btree (loc_id);


--
-- Name: organ_id_idx; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX organ_id_idx ON properties USING btree (organ_id);


--
-- Name: organ_id_idx2; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX organ_id_idx2 ON samples USING btree (organ_id);


--
-- Name: plant_id_idx; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX plant_id_idx ON samples USING btree (plant_id);


--
-- Name: pop_id_idx; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX pop_id_idx ON genotypes USING btree (pop_id);


--
-- Name: prop_id_idx; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX prop_id_idx ON data_points USING btree (prop_id);


--
-- Name: sample_id_idx; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX sample_id_idx ON data_points USING btree (sample_id);


--
-- Name: sample_id_idx2; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX sample_id_idx2 ON images USING btree (sample_id);


--
-- Name: source_id_idx; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX source_id_idx ON data_points USING btree (source_id);


--
-- Name: source_id_idx2; Type: INDEX; Schema: pheno_population; Owner: postgres
--

CREATE INDEX source_id_idx2 ON images USING btree (source_id);


SET search_path = phenome, pg_catalog;

--
-- Name: background_accession_id_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX background_accession_id_idx ON genotype_experiment USING btree (background_accession_id);


--
-- Name: cross_type_idx1; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX cross_type_idx1 ON cross_type USING btree (cross_type);


--
-- Name: genotype_individual_id_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX genotype_individual_id_idx ON genotype USING btree (individual_id);


--
-- Name: genotype_reference_map_id_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX genotype_reference_map_id_idx ON genotype USING btree (reference_map_id);


--
-- Name: phenome_genotype_marker_id_nn_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX phenome_genotype_marker_id_nn_idx ON genotype_region USING btree (marker_id_nn);


--
-- Name: phenome_genotype_marker_id_ns_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX phenome_genotype_marker_id_ns_idx ON genotype_region USING btree (marker_id_ns);


--
-- Name: phenome_genotype_marker_id_sn_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX phenome_genotype_marker_id_sn_idx ON genotype_region USING btree (marker_id_sn);


--
-- Name: phenome_genotype_marker_id_ss_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX phenome_genotype_marker_id_ss_idx ON genotype_region USING btree (marker_id_ss);


--
-- Name: phenome_genotype_region_genotype_id_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX phenome_genotype_region_genotype_id_idx ON genotype_region USING btree (genotype_id);


--
-- Name: phenome_genotype_region_name; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX phenome_genotype_region_name ON genotype_region USING btree (name);


--
-- Name: phenome_genotype_region_type; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX phenome_genotype_region_type ON genotype_region USING btree (type);


--
-- Name: phenome_genotype_region_zygocity_code; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX phenome_genotype_region_zygocity_code ON genotype_region USING btree (zygocity_code);


--
-- Name: phenome_individual_name_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX phenome_individual_name_idx ON individual USING btree (name);


--
-- Name: phenome_population_id_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX phenome_population_id_idx ON individual USING btree (population_id);


--
-- Name: reference_map_id_idx; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX reference_map_id_idx ON genotype_experiment USING btree (reference_map_id);


--
-- Name: unit_idx1; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX unit_idx1 ON unit USING btree (name);


--
-- Name: user_trait_idx1; Type: INDEX; Schema: phenome; Owner: postgres
--

CREATE INDEX user_trait_idx1 ON user_trait USING btree (name);


SET search_path = physical, pg_catalog;

--
-- Name: bac_id_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX bac_id_idx ON bac_associations USING btree (bac_id, bac_contig_id, plausible);


--
-- Name: bac_id_idx2; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX bac_id_idx2 ON bac_consensus_sequences USING btree (bac_id, consensus_seq_name, length, includes_sp6_end, includes_t7_end);


--
-- Name: bac_id_idx3; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX bac_id_idx3 ON fpc_data USING btree (bac_id, bac_name, gel_number, creation_date, modification_date);


--
-- Name: bac_id_idx4; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX bac_id_idx4 ON overgo_associations USING btree (bac_id);


--
-- Name: bap_bac_assoc_id_idx_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX bap_bac_assoc_id_idx_idx ON ba_plausibility USING btree (bac_assoc_id);


--
-- Name: conflict_group_id_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX conflict_group_id_idx ON tentative_association_conflict_groups USING btree (conflict_group_id, tentative_assoc_id);


--
-- Name: contig_name_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX contig_name_idx ON bac_contigs USING btree (contig_name, fpc_version);


--
-- Name: cornell_clone_name_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX cornell_clone_name_idx ON bacs USING btree (cornell_clone_name, arizona_clone_name, species_id, genbank_accession, bad_clone, estimated_length);


--
-- Name: end_id_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX end_id_idx ON bac_end_sequences USING btree (end_id, length);


--
-- Name: net_id_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX net_id_idx ON users USING btree (net_id);


--
-- Name: oap_overgo_assoc_id_idx_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX oap_overgo_assoc_id_idx_idx ON oa_plausibility USING btree (overgo_assoc_id);


--
-- Name: overgo_plate_id_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX overgo_plate_id_idx ON overgo_results USING btree (overgo_plate_id, bac_id, overgo_pool);


--
-- Name: overgo_plate_id_idx2; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX overgo_plate_id_idx2 ON probe_markers USING btree (overgo_plate_id, overgo_plate_row, overgo_plate_col, marker_id);


--
-- Name: overgo_version_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX overgo_version_idx ON deprecated_probes USING btree (overgo_version, overgo_probe_id);


--
-- Name: overgo_version_idx2; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX overgo_version_idx2 ON overgo_associations USING btree (overgo_version, overgo_probe_id, bac_id, plausible);


--
-- Name: overgo_version_idx3; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX overgo_version_idx3 ON tentative_overgo_associations USING btree (overgo_version, overgo_probe_id, bac_id);


--
-- Name: plate_number_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX plate_number_idx ON overgo_plates USING btree (plate_number);


--
-- Name: short_name_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX short_name_idx ON species USING btree (short_name);


--
-- Name: updated_by_idx; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX updated_by_idx ON fpc_version USING btree (updated_by, current);


--
-- Name: updated_by_idx2; Type: INDEX; Schema: physical; Owner: postgres
--

CREATE INDEX updated_by_idx2 ON overgo_version USING btree (updated_by, current);


SET search_path = public, pg_catalog;

--
-- Name: accession_id_geno_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE INDEX accession_id_geno_idx ON materialized_genoview USING btree (accession_id) WITH (fillfactor='100');


--
-- Name: accession_id_pheno_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE INDEX accession_id_pheno_idx ON materialized_phenoview USING btree (accession_id) WITH (fillfactor='100');


--
-- Name: accessions_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX accessions_idx ON accessions USING btree (accession_id) WITH (fillfactor='100');


--
-- Name: accessionsxbreeding_programs_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX accessionsxbreeding_programs_idx ON accessionsxbreeding_programs USING btree (accession_id, breeding_program_id) WITH (fillfactor='100');


--
-- Name: accessionsxgenotyping_protocols_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX accessionsxgenotyping_protocols_idx ON accessionsxgenotyping_protocols USING btree (accession_id, genotyping_protocol_id) WITH (fillfactor='100');


--
-- Name: accessionsxlocations_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX accessionsxlocations_idx ON accessionsxlocations USING btree (accession_id, location_id) WITH (fillfactor='100');


--
-- Name: accessionsxplants_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX accessionsxplants_idx ON accessionsxplants USING btree (accession_id, plant_id) WITH (fillfactor='100');


--
-- Name: accessionsxplots_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX accessionsxplots_idx ON accessionsxplots USING btree (accession_id, plot_id) WITH (fillfactor='100');


--
-- Name: accessionsxtraits_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX accessionsxtraits_idx ON accessionsxtraits USING btree (accession_id, trait_id) WITH (fillfactor='100');


--
-- Name: accessionsxtrial_designs_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX accessionsxtrial_designs_idx ON accessionsxtrial_designs USING btree (accession_id, trial_design_id) WITH (fillfactor='100');


--
-- Name: accessionsxtrial_types_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX accessionsxtrial_types_idx ON accessionsxtrial_types USING btree (accession_id, trial_type_id) WITH (fillfactor='100');


--
-- Name: accessionsxtrials_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX accessionsxtrials_idx ON accessionsxtrials USING btree (accession_id, trial_id) WITH (fillfactor='100');


--
-- Name: accessionsxyears_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX accessionsxyears_idx ON accessionsxyears USING btree (accession_id, year_id) WITH (fillfactor='100');


--
-- Name: analysisfeature_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX analysisfeature_idx1 ON analysisfeature USING btree (feature_id);


--
-- Name: analysisfeature_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX analysisfeature_idx2 ON analysisfeature USING btree (analysis_id);


--
-- Name: analysisprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX analysisprop_idx1 ON analysisprop USING btree (analysis_id);


--
-- Name: analysisprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX analysisprop_idx2 ON analysisprop USING btree (type_id);


--
-- Name: ara_annotation_fulltext; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_annotation_fulltext ON ara_annotation USING gist (fulltext);


--
-- Name: ara_annotation_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_annotation_locus ON ara_annotation USING btree (locus);


--
-- Name: ara_domain_agi; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_domain_agi ON ara_domain USING btree (agi);


--
-- Name: ara_domain_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_domain_locus ON ara_domain USING btree (locus);


--
-- Name: ara_gfp_ms_agi; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_gfp_ms_agi ON ara_gfp_ms USING btree (agi);


--
-- Name: ara_gfp_ms_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_gfp_ms_locus ON ara_gfp_ms USING btree (locus);


--
-- Name: ara_interactome_all_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_interactome_all_locus ON ara_interactome_all USING btree (locus);


--
-- Name: ara_interactome_unique_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_interactome_unique_locus ON ara_interactome_unique USING btree (locus);


--
-- Name: ara_intron_agi; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_intron_agi ON ara_intron USING btree (agi);


--
-- Name: ara_intron_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_intron_locus ON ara_intron USING btree (locus);


--
-- Name: ara_map_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_map_locus ON ara_map USING btree (locus);


--
-- Name: ara_myristoylation_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_myristoylation_locus ON ara_myristoylation USING btree (locus);


--
-- Name: ara_properties_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_properties_locus ON ara_properties USING btree (locus);


--
-- Name: ara_scop_agi; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_scop_agi ON ara_scop USING btree (agi);


--
-- Name: ara_scop_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_scop_locus ON ara_scop USING btree (locus);


--
-- Name: ara_sequence_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_sequence_locus ON ara_sequence USING btree (locus);


--
-- Name: ara_signalp_agi; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_signalp_agi ON ara_signalp USING btree (agi);


--
-- Name: ara_signalp_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_signalp_locus ON ara_signalp USING btree (locus);


--
-- Name: ara_targetp_locus; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ara_targetp_locus ON ara_targetp USING btree (locus);


--
-- Name: binloc_boxrange; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX binloc_boxrange ON featureloc USING gist (boxrange(fmin, fmax));


--
-- Name: breeding_program_id_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE INDEX breeding_program_id_idx ON materialized_phenoview USING btree (breeding_program_id) WITH (fillfactor='100');


--
-- Name: breeding_programs_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX breeding_programs_idx ON breeding_programs USING btree (breeding_program_id) WITH (fillfactor='100');


--
-- Name: breeding_programsxgenotyping_protocols_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX breeding_programsxgenotyping_protocols_idx ON breeding_programsxgenotyping_protocols USING btree (breeding_program_id, genotyping_protocol_id) WITH (fillfactor='100');


--
-- Name: breeding_programsxlocations_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX breeding_programsxlocations_idx ON breeding_programsxlocations USING btree (breeding_program_id, location_id) WITH (fillfactor='100');


--
-- Name: breeding_programsxplants_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX breeding_programsxplants_idx ON breeding_programsxplants USING btree (breeding_program_id, plant_id) WITH (fillfactor='100');


--
-- Name: breeding_programsxplots_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX breeding_programsxplots_idx ON breeding_programsxplots USING btree (breeding_program_id, plot_id) WITH (fillfactor='100');


--
-- Name: breeding_programsxtraits_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX breeding_programsxtraits_idx ON breeding_programsxtraits USING btree (breeding_program_id, trait_id) WITH (fillfactor='100');


--
-- Name: breeding_programsxtrial_designs_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX breeding_programsxtrial_designs_idx ON breeding_programsxtrial_designs USING btree (breeding_program_id, trial_design_id) WITH (fillfactor='100');


--
-- Name: breeding_programsxtrial_types_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX breeding_programsxtrial_types_idx ON breeding_programsxtrial_types USING btree (breeding_program_id, trial_type_id) WITH (fillfactor='100');


--
-- Name: breeding_programsxtrials_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX breeding_programsxtrials_idx ON breeding_programsxtrials USING btree (breeding_program_id, trial_id) WITH (fillfactor='100');


--
-- Name: breeding_programsxyears_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX breeding_programsxyears_idx ON breeding_programsxyears USING btree (breeding_program_id, year_id) WITH (fillfactor='100');


--
-- Name: contact_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX contact_relationship_idx1 ON contact_relationship USING btree (type_id);


--
-- Name: contact_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX contact_relationship_idx2 ON contact_relationship USING btree (subject_id);


--
-- Name: contact_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX contact_relationship_idx3 ON contact_relationship USING btree (object_id);


--
-- Name: INDEX cvterm_c1; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX cvterm_c1 IS 'a name can mean different things in
different contexts; for example "chromosome" in SO and GO. A name
should be unique within an ontology/cv. A name may exist twice in a
cv, in both obsolete and non-obsolete forms - these will be for
different cvterms with different OBO identifiers; so GO documentation
for more details on obsoletion. Note that occasionally multiple
obsolete terms with the same name will exist in the same cv. If this
is a possibility for the ontology under consideration (eg GO) then the
ID should be appended to the name to ensure uniqueness';


--
-- Name: INDEX cvterm_c2; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX cvterm_c2 IS 'the OBO identifier is globally unique';


--
-- Name: cvterm_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvterm_dbxref_idx1 ON cvterm_dbxref USING btree (cvterm_id);


--
-- Name: cvterm_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvterm_dbxref_idx2 ON cvterm_dbxref USING btree (dbxref_id);


--
-- Name: cvterm_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvterm_idx1 ON cvterm USING btree (cv_id);


--
-- Name: cvterm_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvterm_idx2 ON cvterm USING btree (name);


--
-- Name: cvterm_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvterm_idx3 ON cvterm USING btree (dbxref_id);


--
-- Name: cvterm_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvterm_relationship_idx1 ON cvterm_relationship USING btree (type_id);


--
-- Name: cvterm_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvterm_relationship_idx2 ON cvterm_relationship USING btree (subject_id);


--
-- Name: cvterm_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvterm_relationship_idx3 ON cvterm_relationship USING btree (object_id);


--
-- Name: cvtermpath_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvtermpath_idx1 ON cvtermpath USING btree (type_id);


--
-- Name: cvtermpath_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvtermpath_idx2 ON cvtermpath USING btree (subject_id);


--
-- Name: cvtermpath_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvtermpath_idx3 ON cvtermpath USING btree (object_id);


--
-- Name: cvtermpath_idx4; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvtermpath_idx4 ON cvtermpath USING btree (cv_id);


--
-- Name: cvtermprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvtermprop_idx1 ON cvtermprop USING btree (cvterm_id);


--
-- Name: cvtermprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvtermprop_idx2 ON cvtermprop USING btree (type_id);


--
-- Name: cvtermsynonym_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cvtermsynonym_idx1 ON cvtermsynonym USING btree (cvterm_id);


--
-- Name: cxgn_bac_pipeline_genbank_log_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cxgn_bac_pipeline_genbank_log_key ON cxgn_bac_pipeline_genbank_log USING btree (search_key, deleted);


--
-- Name: cxgn_bac_pipeline_loading_log_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cxgn_bac_pipeline_loading_log_key ON cxgn_bac_pipeline_loading_log USING btree (search_key, deleted);


--
-- Name: cxgn_bac_pipeline_processing_log_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cxgn_bac_pipeline_processing_log_key ON cxgn_bac_pipeline_processing_log USING btree (search_key, deleted);


--
-- Name: cxgn_bac_pipeline_processing_log_timestamp; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cxgn_bac_pipeline_processing_log_timestamp ON cxgn_bac_pipeline_processing_log USING btree ("timestamp");


--
-- Name: cxgn_indexedlog_test_feel_free_to_delete_me_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX cxgn_indexedlog_test_feel_free_to_delete_me_key ON cxgn_indexedlog_test_feel_free_to_delete_me USING btree (search_key, deleted);


--
-- Name: dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX dbxref_idx1 ON dbxref USING btree (db_id);


--
-- Name: dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX dbxref_idx2 ON dbxref USING btree (accession);


--
-- Name: dbxref_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX dbxref_idx3 ON dbxref USING btree (version);


--
-- Name: dbxrefprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX dbxrefprop_idx1 ON dbxrefprop USING btree (dbxref_id);


--
-- Name: dbxrefprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX dbxrefprop_idx2 ON dbxrefprop USING btree (type_id);


--
-- Name: environment_cvterm_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX environment_cvterm_idx1 ON environment_cvterm USING btree (environment_id);


--
-- Name: environment_cvterm_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX environment_cvterm_idx2 ON environment_cvterm USING btree (cvterm_id);


--
-- Name: environment_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX environment_idx1 ON environment USING btree (uniquename);


--
-- Name: feature_cvterm_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_cvterm_dbxref_idx1 ON feature_cvterm_dbxref USING btree (feature_cvterm_id);


--
-- Name: feature_cvterm_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_cvterm_dbxref_idx2 ON feature_cvterm_dbxref USING btree (dbxref_id);


--
-- Name: feature_cvterm_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_cvterm_idx1 ON feature_cvterm USING btree (feature_id);


--
-- Name: feature_cvterm_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_cvterm_idx2 ON feature_cvterm USING btree (cvterm_id);


--
-- Name: feature_cvterm_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_cvterm_idx3 ON feature_cvterm USING btree (pub_id);


--
-- Name: feature_cvterm_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_cvterm_pub_idx1 ON feature_cvterm_pub USING btree (feature_cvterm_id);


--
-- Name: feature_cvterm_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_cvterm_pub_idx2 ON feature_cvterm_pub USING btree (pub_id);


--
-- Name: feature_cvtermprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_cvtermprop_idx1 ON feature_cvtermprop USING btree (feature_cvterm_id);


--
-- Name: feature_cvtermprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_cvtermprop_idx2 ON feature_cvtermprop USING btree (type_id);


--
-- Name: feature_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_dbxref_idx1 ON feature_dbxref USING btree (feature_id);


--
-- Name: feature_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_dbxref_idx2 ON feature_dbxref USING btree (dbxref_id);


--
-- Name: feature_genotype_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_genotype_idx1 ON feature_genotype USING btree (feature_id);


--
-- Name: feature_genotype_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_genotype_idx2 ON feature_genotype USING btree (genotype_id);


--
-- Name: feature_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_idx1 ON feature USING btree (dbxref_id);


--
-- Name: feature_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_idx2 ON feature USING btree (organism_id);


--
-- Name: feature_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_idx3 ON feature USING btree (type_id);


--
-- Name: feature_idx4; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_idx4 ON feature USING btree (uniquename);


--
-- Name: feature_idx5; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_idx5 ON feature USING btree (lower((name)::text));


--
-- Name: feature_idx6; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_idx6 ON feature USING btree (lower(uniquename));


--
-- Name: feature_name_ind1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_name_ind1 ON feature USING btree (name);


--
-- Name: feature_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_pub_idx1 ON feature_pub USING btree (feature_id);


--
-- Name: feature_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_pub_idx2 ON feature_pub USING btree (pub_id);


--
-- Name: feature_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_relationship_idx1 ON feature_relationship USING btree (subject_id);


--
-- Name: feature_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_relationship_idx2 ON feature_relationship USING btree (object_id);


--
-- Name: feature_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_relationship_idx3 ON feature_relationship USING btree (type_id);


--
-- Name: feature_relationship_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_relationship_pub_idx1 ON feature_relationship_pub USING btree (feature_relationship_id);


--
-- Name: feature_relationship_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_relationship_pub_idx2 ON feature_relationship_pub USING btree (pub_id);


--
-- Name: feature_relationshipprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_relationshipprop_idx1 ON feature_relationshipprop USING btree (feature_relationship_id);


--
-- Name: feature_relationshipprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_relationshipprop_idx2 ON feature_relationshipprop USING btree (type_id);


--
-- Name: feature_relationshipprop_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_relationshipprop_pub_idx1 ON feature_relationshipprop_pub USING btree (feature_relationshipprop_id);


--
-- Name: feature_relationshipprop_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_relationshipprop_pub_idx2 ON feature_relationshipprop_pub USING btree (pub_id);


--
-- Name: feature_synonym_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_synonym_idx1 ON feature_synonym USING btree (synonym_id);


--
-- Name: feature_synonym_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_synonym_idx2 ON feature_synonym USING btree (feature_id);


--
-- Name: feature_synonym_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX feature_synonym_idx3 ON feature_synonym USING btree (pub_id);


--
-- Name: featureloc_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX featureloc_idx1 ON featureloc USING btree (feature_id);


--
-- Name: featureloc_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX featureloc_idx2 ON featureloc USING btree (srcfeature_id);


--
-- Name: featureloc_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX featureloc_idx3 ON featureloc USING btree (srcfeature_id, fmin, fmax);


--
-- Name: featureloc_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX featureloc_pub_idx1 ON featureloc_pub USING btree (featureloc_id);


--
-- Name: featureloc_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX featureloc_pub_idx2 ON featureloc_pub USING btree (pub_id);


--
-- Name: INDEX featureprop_c1; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX featureprop_c1 IS 'for any one feature, multivalued
property-value pairs must be differentiated by rank';


--
-- Name: featureprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX featureprop_idx1 ON featureprop USING btree (feature_id);


--
-- Name: featureprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX featureprop_idx2 ON featureprop USING btree (type_id);


--
-- Name: featureprop_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX featureprop_pub_idx1 ON featureprop_pub USING btree (featureprop_id);


--
-- Name: featureprop_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX featureprop_pub_idx2 ON featureprop_pub USING btree (pub_id);


--
-- Name: fpc_band_fpc_fingerprint_id_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX fpc_band_fpc_fingerprint_id_idx1 ON fpc_band USING btree (fpc_fingerprint_id);


--
-- Name: fpc_build_fpc_fingerprint_fpc_build_id_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX fpc_build_fpc_fingerprint_fpc_build_id_idx1 ON fpc_build_fpc_fingerprint USING btree (fpc_build_id);


--
-- Name: fpc_build_fpc_fingerprint_fpc_fingerprint_id_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX fpc_build_fpc_fingerprint_fpc_fingerprint_id_idx1 ON fpc_build_fpc_fingerprint USING btree (fpc_fingerprint_id);


--
-- Name: fpc_fingerprint_clone_id_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX fpc_fingerprint_clone_id_idx1 ON fpc_fingerprint USING btree (clone_id);


--
-- Name: fpc_fingerprint_enzyme_id_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX fpc_fingerprint_enzyme_id_idx1 ON fpc_fingerprint USING btree (enzyme_id);


--
-- Name: fpc_fingerprint_gel_name_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX fpc_fingerprint_gel_name_idx1 ON fpc_fingerprint USING btree (gel_name);


--
-- Name: genotype_id_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE INDEX genotype_id_idx ON materialized_genoview USING btree (genotype_id) WITH (fillfactor='100');


--
-- Name: genotype_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX genotype_idx1 ON genotype USING btree (uniquename);


--
-- Name: genotype_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX genotype_idx2 ON genotype USING btree (name);


--
-- Name: genotypeprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX genotypeprop_idx1 ON genotypeprop USING btree (genotype_id);


--
-- Name: genotypeprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX genotypeprop_idx2 ON genotypeprop USING btree (type_id);


--
-- Name: genotyping_protocol_id_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE INDEX genotyping_protocol_id_idx ON materialized_genoview USING btree (genotyping_protocol_id) WITH (fillfactor='100');


--
-- Name: genotyping_protocols_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX genotyping_protocols_idx ON genotyping_protocols USING btree (genotyping_protocol_id) WITH (fillfactor='100');


--
-- Name: genotyping_protocolsxlocations_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX genotyping_protocolsxlocations_idx ON genotyping_protocolsxlocations USING btree (genotyping_protocol_id, location_id) WITH (fillfactor='100');


--
-- Name: genotyping_protocolsxplants_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX genotyping_protocolsxplants_idx ON genotyping_protocolsxplants USING btree (genotyping_protocol_id, plant_id) WITH (fillfactor='100');


--
-- Name: genotyping_protocolsxplots_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX genotyping_protocolsxplots_idx ON genotyping_protocolsxplots USING btree (genotyping_protocol_id, plot_id) WITH (fillfactor='100');


--
-- Name: genotyping_protocolsxtraits_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX genotyping_protocolsxtraits_idx ON genotyping_protocolsxtraits USING btree (genotyping_protocol_id, trait_id) WITH (fillfactor='100');


--
-- Name: genotyping_protocolsxtrial_designs_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX genotyping_protocolsxtrial_designs_idx ON genotyping_protocolsxtrial_designs USING btree (genotyping_protocol_id, trial_design_id) WITH (fillfactor='100');


--
-- Name: genotyping_protocolsxtrial_types_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX genotyping_protocolsxtrial_types_idx ON genotyping_protocolsxtrial_types USING btree (genotyping_protocol_id, trial_type_id) WITH (fillfactor='100');


--
-- Name: genotyping_protocolsxtrials_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX genotyping_protocolsxtrials_idx ON genotyping_protocolsxtrials USING btree (genotyping_protocol_id, trial_id) WITH (fillfactor='100');


--
-- Name: genotyping_protocolsxyears_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX genotyping_protocolsxyears_idx ON genotyping_protocolsxyears USING btree (genotyping_protocol_id, year_id) WITH (fillfactor='100');


--
-- Name: itag_loading_log_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX itag_loading_log_key ON itag_loading_log USING btree (search_key, deleted);


--
-- Name: location_id_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE INDEX location_id_idx ON materialized_phenoview USING btree (location_id) WITH (fillfactor='100');


--
-- Name: locations_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX locations_idx ON locations USING btree (location_id) WITH (fillfactor='100');


--
-- Name: locationsxplants_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX locationsxplants_idx ON locationsxplants USING btree (location_id, plant_id) WITH (fillfactor='100');


--
-- Name: locationsxplots_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX locationsxplots_idx ON locationsxplots USING btree (location_id, plot_id) WITH (fillfactor='100');


--
-- Name: locationsxtraits_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX locationsxtraits_idx ON locationsxtraits USING btree (location_id, trait_id) WITH (fillfactor='100');


--
-- Name: locationsxtrial_designs_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX locationsxtrial_designs_idx ON locationsxtrial_designs USING btree (location_id, trial_design_id) WITH (fillfactor='100');


--
-- Name: locationsxtrial_types_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX locationsxtrial_types_idx ON locationsxtrial_types USING btree (location_id, trial_type_id) WITH (fillfactor='100');


--
-- Name: locationsxtrials_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX locationsxtrials_idx ON locationsxtrials USING btree (location_id, trial_id) WITH (fillfactor='100');


--
-- Name: locationsxyears_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX locationsxyears_idx ON locationsxyears USING btree (location_id, year_id) WITH (fillfactor='100');


--
-- Name: nd_experiment_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX nd_experiment_pub_idx1 ON nd_experiment_pub USING btree (nd_experiment_id);


--
-- Name: nd_experiment_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX nd_experiment_pub_idx2 ON nd_experiment_pub USING btree (pub_id);


--
-- Name: organism_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX organism_dbxref_idx1 ON organism_dbxref USING btree (organism_id);


--
-- Name: organism_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX organism_dbxref_idx2 ON organism_dbxref USING btree (dbxref_id);


--
-- Name: organism_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX organism_relationship_idx1 ON organism_relationship USING btree (subject_id);


--
-- Name: organism_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX organism_relationship_idx2 ON organism_relationship USING btree (object_id);


--
-- Name: organism_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX organism_relationship_idx3 ON organism_relationship USING btree (type_id);


--
-- Name: organismpath_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX organismpath_idx1 ON organismpath USING btree (type_id);


--
-- Name: organismpath_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX organismpath_idx2 ON organismpath USING btree (subject_id);


--
-- Name: organismpath_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX organismpath_idx3 ON organismpath USING btree (object_id);


--
-- Name: organismprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX organismprop_idx1 ON organismprop USING btree (organism_id);


--
-- Name: organismprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX organismprop_idx2 ON organismprop USING btree (type_id);


--
-- Name: phendesc_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phendesc_idx1 ON phendesc USING btree (genotype_id);


--
-- Name: phendesc_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phendesc_idx2 ON phendesc USING btree (environment_id);


--
-- Name: phendesc_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phendesc_idx3 ON phendesc USING btree (pub_id);


--
-- Name: phenotype_c1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX phenotype_c1 ON phenotype USING btree (uniquename);


--
-- Name: phenotype_comparison_cvterm_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotype_comparison_cvterm_idx1 ON phenotype_comparison_cvterm USING btree (phenotype_comparison_id);


--
-- Name: phenotype_comparison_cvterm_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotype_comparison_cvterm_idx2 ON phenotype_comparison_cvterm USING btree (cvterm_id);


--
-- Name: phenotype_comparison_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotype_comparison_idx1 ON phenotype_comparison USING btree (genotype1_id);


--
-- Name: phenotype_comparison_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotype_comparison_idx2 ON phenotype_comparison USING btree (genotype2_id);


--
-- Name: phenotype_comparison_idx4; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotype_comparison_idx4 ON phenotype_comparison USING btree (pub_id);


--
-- Name: phenotype_cvterm_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotype_cvterm_idx1 ON phenotype_cvterm USING btree (phenotype_id);


--
-- Name: phenotype_cvterm_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotype_cvterm_idx2 ON phenotype_cvterm USING btree (cvterm_id);


--
-- Name: phenotype_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotype_idx1 ON phenotype USING btree (cvalue_id);


--
-- Name: phenotype_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotype_idx2 ON phenotype USING btree (observable_id);


--
-- Name: phenotype_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotype_idx3 ON phenotype USING btree (attr_id);


--
-- Name: phenotypeprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotypeprop_idx1 ON phenotypeprop USING btree (phenotype_id);


--
-- Name: phenotypeprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenotypeprop_idx2 ON phenotypeprop USING btree (type_id);


--
-- Name: phenstatement_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenstatement_idx1 ON phenstatement USING btree (genotype_id);


--
-- Name: phenstatement_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phenstatement_idx2 ON phenstatement USING btree (phenotype_id);


--
-- Name: phylonode_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonode_dbxref_idx1 ON phylonode_dbxref USING btree (phylonode_id);


--
-- Name: phylonode_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonode_dbxref_idx2 ON phylonode_dbxref USING btree (dbxref_id);


--
-- Name: phylonode_feature_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonode_feature_id_idx ON phylonode USING btree (feature_id);


--
-- Name: phylonode_organism_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonode_organism_idx1 ON phylonode_organism USING btree (phylonode_id);


--
-- Name: phylonode_organism_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonode_organism_idx2 ON phylonode_organism USING btree (organism_id);


--
-- Name: phylonode_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonode_pub_idx1 ON phylonode_pub USING btree (phylonode_id);


--
-- Name: phylonode_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonode_pub_idx2 ON phylonode_pub USING btree (pub_id);


--
-- Name: phylonode_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonode_relationship_idx1 ON phylonode_relationship USING btree (subject_id);


--
-- Name: phylonode_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonode_relationship_idx2 ON phylonode_relationship USING btree (object_id);


--
-- Name: phylonode_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonode_relationship_idx3 ON phylonode_relationship USING btree (type_id);


--
-- Name: phylonodeprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonodeprop_idx1 ON phylonodeprop USING btree (phylonode_id);


--
-- Name: phylonodeprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylonodeprop_idx2 ON phylonodeprop USING btree (type_id);


--
-- Name: phylotree_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylotree_idx1 ON phylotree USING btree (phylotree_id);


--
-- Name: phylotree_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylotree_pub_idx1 ON phylotree_pub USING btree (phylotree_id);


--
-- Name: phylotree_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX phylotree_pub_idx2 ON phylotree_pub USING btree (pub_id);


--
-- Name: plant_id_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE INDEX plant_id_idx ON materialized_phenoview USING btree (plant_id) WITH (fillfactor='100');


--
-- Name: plants_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX plants_idx ON plants USING btree (plant_id) WITH (fillfactor='100');


--
-- Name: plantsxplots_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX plantsxplots_idx ON plantsxplots USING btree (plant_id, plot_id) WITH (fillfactor='100');


--
-- Name: plantsxtraits_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX plantsxtraits_idx ON plantsxtraits USING btree (plant_id, trait_id) WITH (fillfactor='100');


--
-- Name: plantsxtrial_designs_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX plantsxtrial_designs_idx ON plantsxtrial_designs USING btree (plant_id, trial_design_id) WITH (fillfactor='100');


--
-- Name: plantsxtrial_types_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX plantsxtrial_types_idx ON plantsxtrial_types USING btree (plant_id, trial_type_id) WITH (fillfactor='100');


--
-- Name: plantsxtrials_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX plantsxtrials_idx ON plantsxtrials USING btree (plant_id, trial_id) WITH (fillfactor='100');


--
-- Name: plantsxyears_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX plantsxyears_idx ON plantsxyears USING btree (plant_id, year_id) WITH (fillfactor='100');


--
-- Name: plot_id_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE INDEX plot_id_idx ON materialized_phenoview USING btree (plot_id) WITH (fillfactor='100');


--
-- Name: plots_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX plots_idx ON plots USING btree (plot_id) WITH (fillfactor='100');


--
-- Name: plotsxtraits_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX plotsxtraits_idx ON plotsxtraits USING btree (plot_id, trait_id) WITH (fillfactor='100');


--
-- Name: plotsxtrial_designs_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX plotsxtrial_designs_idx ON plotsxtrial_designs USING btree (plot_id, trial_design_id) WITH (fillfactor='100');


--
-- Name: plotsxtrial_types_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX plotsxtrial_types_idx ON plotsxtrial_types USING btree (plot_id, trial_type_id) WITH (fillfactor='100');


--
-- Name: plotsxtrials_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX plotsxtrials_idx ON plotsxtrials USING btree (plot_id, trial_id) WITH (fillfactor='100');


--
-- Name: plotsxyears_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX plotsxyears_idx ON plotsxyears USING btree (plot_id, year_id) WITH (fillfactor='100');


--
-- Name: project_contact_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX project_contact_idx1 ON project_contact USING btree (project_id);


--
-- Name: project_contact_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX project_contact_idx2 ON project_contact USING btree (contact_id);


--
-- Name: project_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX project_pub_idx1 ON project_pub USING btree (project_id);


--
-- Name: project_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX project_pub_idx2 ON project_pub USING btree (pub_id);


--
-- Name: pub_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX pub_dbxref_idx1 ON pub_dbxref USING btree (pub_id);


--
-- Name: pub_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX pub_dbxref_idx2 ON pub_dbxref USING btree (dbxref_id);


--
-- Name: pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX pub_idx1 ON pub USING btree (type_id);


--
-- Name: pub_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX pub_relationship_idx1 ON pub_relationship USING btree (subject_id);


--
-- Name: pub_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX pub_relationship_idx2 ON pub_relationship USING btree (object_id);


--
-- Name: pub_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX pub_relationship_idx3 ON pub_relationship USING btree (type_id);


--
-- Name: pubabstract_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX pubabstract_index ON pubabstract USING gist (abstract_tsvector);


--
-- Name: pubauthor_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX pubauthor_idx2 ON pubauthor USING btree (pub_id);


--
-- Name: pubprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX pubprop_idx1 ON pubprop USING btree (pub_id);


--
-- Name: pubprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX pubprop_idx2 ON pubprop USING btree (type_id);


--
-- Name: stock_cvterm_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_cvterm_idx1 ON stock_cvterm USING btree (stock_id);


--
-- Name: stock_cvterm_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_cvterm_idx2 ON stock_cvterm USING btree (cvterm_id);


--
-- Name: stock_cvterm_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_cvterm_idx3 ON stock_cvterm USING btree (pub_id);


--
-- Name: stock_cvtermprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_cvtermprop_idx1 ON stock_cvtermprop USING btree (stock_cvterm_id);


--
-- Name: stock_cvtermprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_cvtermprop_idx2 ON stock_cvtermprop USING btree (type_id);


--
-- Name: stock_dbxref_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_dbxref_idx1 ON stock_dbxref USING btree (stock_id);


--
-- Name: stock_dbxref_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_dbxref_idx2 ON stock_dbxref USING btree (dbxref_id);


--
-- Name: stock_dbxrefprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_dbxrefprop_idx1 ON stock_dbxrefprop USING btree (stock_dbxref_id);


--
-- Name: stock_dbxrefprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_dbxrefprop_idx2 ON stock_dbxrefprop USING btree (type_id);


--
-- Name: stock_genotype_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_genotype_idx1 ON stock_genotype USING btree (stock_id);


--
-- Name: stock_genotype_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_genotype_idx2 ON stock_genotype USING btree (genotype_id);


--
-- Name: stock_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_idx1 ON stock USING btree (dbxref_id);


--
-- Name: stock_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_idx2 ON stock USING btree (organism_id);


--
-- Name: stock_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_idx3 ON stock USING btree (type_id);


--
-- Name: stock_idx4; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_idx4 ON stock USING btree (uniquename);


--
-- Name: stock_name_ind1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_name_ind1 ON stock USING btree (name);


--
-- Name: stock_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_pub_idx1 ON stock_pub USING btree (stock_id);


--
-- Name: stock_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_pub_idx2 ON stock_pub USING btree (pub_id);


--
-- Name: stock_relationship_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_relationship_idx1 ON stock_relationship USING btree (subject_id);


--
-- Name: stock_relationship_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_relationship_idx2 ON stock_relationship USING btree (object_id);


--
-- Name: stock_relationship_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_relationship_idx3 ON stock_relationship USING btree (type_id);


--
-- Name: stock_relationship_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_relationship_pub_idx1 ON stock_relationship_pub USING btree (stock_relationship_id);


--
-- Name: stock_relationship_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stock_relationship_pub_idx2 ON stock_relationship_pub USING btree (pub_id);


--
-- Name: stockcollection_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockcollection_idx1 ON stockcollection USING btree (contact_id);


--
-- Name: stockcollection_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockcollection_idx2 ON stockcollection USING btree (type_id);


--
-- Name: stockcollection_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockcollection_idx3 ON stockcollection USING btree (uniquename);


--
-- Name: stockcollection_name_ind1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockcollection_name_ind1 ON stockcollection USING btree (name);


--
-- Name: stockcollection_stock_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockcollection_stock_idx1 ON stockcollection_stock USING btree (stockcollection_id);


--
-- Name: stockcollection_stock_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockcollection_stock_idx2 ON stockcollection_stock USING btree (stock_id);


--
-- Name: stockcollectionprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockcollectionprop_idx1 ON stockcollectionprop USING btree (stockcollection_id);


--
-- Name: stockcollectionprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockcollectionprop_idx2 ON stockcollectionprop USING btree (type_id);


--
-- Name: stockprop_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockprop_idx1 ON stockprop USING btree (stock_id);


--
-- Name: stockprop_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockprop_idx2 ON stockprop USING btree (type_id);


--
-- Name: stockprop_pub_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockprop_pub_idx1 ON stockprop_pub USING btree (stockprop_id);


--
-- Name: stockprop_pub_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockprop_pub_idx2 ON stockprop_pub USING btree (pub_id);


--
-- Name: stockprop_sgn_allele_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX stockprop_sgn_allele_id ON stockprop USING btree (((value)::numeric)) WHERE (type_id = 57425);


--
-- Name: synonym_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX synonym_idx1 ON synonym USING btree (type_id);


--
-- Name: synonym_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX synonym_idx2 ON synonym USING btree (lower((synonym_sgml)::text));


--
-- Name: tmp_cds_handler_fmax; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX tmp_cds_handler_fmax ON tmp_cds_handler USING btree (fmax);


--
-- Name: tmp_cds_handler_relationship_grandparent; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX tmp_cds_handler_relationship_grandparent ON tmp_cds_handler_relationship USING btree (grandparent_id);


--
-- Name: tmp_cds_handler_seq_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX tmp_cds_handler_seq_id ON tmp_cds_handler USING btree (seq_id);


--
-- Name: tmp_gff_load_cache_idx1; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX tmp_gff_load_cache_idx1 ON tmp_gff_load_cache USING btree (feature_id);


--
-- Name: tmp_gff_load_cache_idx2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX tmp_gff_load_cache_idx2 ON tmp_gff_load_cache USING btree (uniquename);


--
-- Name: tmp_gff_load_cache_idx3; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX tmp_gff_load_cache_idx3 ON tmp_gff_load_cache USING btree (uniquename, type_id, organism_id);


--
-- Name: trait_id_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE INDEX trait_id_idx ON materialized_phenoview USING btree (trait_id) WITH (fillfactor='100');


--
-- Name: traits_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX traits_idx ON traits USING btree (trait_id) WITH (fillfactor='100');


--
-- Name: traitsxtrial_designs_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX traitsxtrial_designs_idx ON traitsxtrial_designs USING btree (trait_id, trial_design_id) WITH (fillfactor='100');


--
-- Name: traitsxtrial_types_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX traitsxtrial_types_idx ON traitsxtrial_types USING btree (trait_id, trial_type_id) WITH (fillfactor='100');


--
-- Name: traitsxtrials_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX traitsxtrials_idx ON traitsxtrials USING btree (trait_id, trial_id) WITH (fillfactor='100');


--
-- Name: traitsxyears_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX traitsxyears_idx ON traitsxyears USING btree (trait_id, year_id) WITH (fillfactor='100');


--
-- Name: trial_design_id_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE INDEX trial_design_id_idx ON materialized_phenoview USING btree (trial_design_id) WITH (fillfactor='100');


--
-- Name: trial_designs_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX trial_designs_idx ON trial_designs USING btree (trial_design_id) WITH (fillfactor='100');


--
-- Name: trial_designsxtrial_types_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX trial_designsxtrial_types_idx ON trial_designsxtrial_types USING btree (trial_design_id, trial_type_id) WITH (fillfactor='100');


--
-- Name: trial_designsxtrials_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX trial_designsxtrials_idx ON trial_designsxtrials USING btree (trial_id, trial_design_id) WITH (fillfactor='100');


--
-- Name: trial_designsxyears_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX trial_designsxyears_idx ON trial_designsxyears USING btree (trial_design_id, year_id) WITH (fillfactor='100');


--
-- Name: trial_id_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE INDEX trial_id_idx ON materialized_phenoview USING btree (trial_id) WITH (fillfactor='100');


--
-- Name: trial_type_id_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE INDEX trial_type_id_idx ON materialized_phenoview USING btree (trial_type_id) WITH (fillfactor='100');


--
-- Name: trial_types_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX trial_types_idx ON trial_types USING btree (trial_type_id) WITH (fillfactor='100');


--
-- Name: trial_typesxtrials_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX trial_typesxtrials_idx ON trial_typesxtrials USING btree (trial_id, trial_type_id) WITH (fillfactor='100');


--
-- Name: trial_typesxyears_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX trial_typesxyears_idx ON trial_typesxyears USING btree (trial_type_id, year_id) WITH (fillfactor='100');


--
-- Name: trials_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX trials_idx ON trials USING btree (trial_id) WITH (fillfactor='100');


--
-- Name: trialsxyears_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX trialsxyears_idx ON trialsxyears USING btree (trial_id, year_id) WITH (fillfactor='100');


--
-- Name: unigene_relations_superceded_by; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX unigene_relations_superceded_by ON unigene_relations USING btree (superceded_by);


--
-- Name: unq_geno_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX unq_geno_idx ON materialized_genoview USING btree (accession_id, genotype_id) WITH (fillfactor='100');


--
-- Name: unq_pheno_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX unq_pheno_idx ON materialized_phenoview USING btree (accession_id, plot_id, plant_id, phenotype_id) WITH (fillfactor='100');


--
-- Name: year_id_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE INDEX year_id_idx ON materialized_phenoview USING btree (year_id) WITH (fillfactor='100');


--
-- Name: years_idx; Type: INDEX; Schema: public; Owner: web_usr
--

CREATE UNIQUE INDEX years_idx ON years USING btree (year_id) WITH (fillfactor='100');


SET search_path = sgn, pg_catalog;

--
-- Name: annotation_target_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX annotation_target_id_idx ON manual_annotations USING btree (annotation_target_id, annotation_target_type_id);


--
-- Name: apply_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX apply_id_idx ON blast_annotations USING btree (apply_id);


--
-- Name: blast_annotation_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX blast_annotation_id_idx ON blast_hits USING btree (blast_annotation_id);


--
-- Name: blast_defline_defline_fulltext_index; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX blast_defline_defline_fulltext_index ON blast_defline USING gist (defline_fulltext);


--
-- Name: build_nr_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX build_nr_idx ON unigene_build USING btree (build_nr);


--
-- Name: cds_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX cds_id_idx ON domain_match USING btree (cds_id);


--
-- Name: cds_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX cds_id_idx2 ON family_member USING btree (cds_id);


--
-- Name: cds_protein_feature_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX cds_protein_feature_id_idx ON cds USING btree (protein_feature_id);


--
-- Name: clone_group_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX clone_group_id_idx ON clone USING btree (clone_group_id);


--
-- Name: clone_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX clone_id_idx ON microarray USING btree (clone_id);


--
-- Name: clone_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX clone_id_idx2 ON seqread USING btree (clone_id);


--
-- Name: clone_name_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX clone_name_idx ON clone USING btree (clone_name);


--
-- Name: cluster_no_2_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX cluster_no_2_idx ON unigene USING btree (cluster_no, contig_no);


--
-- Name: cluster_no_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX cluster_no_idx ON unigene USING btree (cluster_no);


--
-- Name: common_name_common_name_case_insensitive_unique; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE UNIQUE INDEX common_name_common_name_case_insensitive_unique ON common_name USING btree (lower((common_name)::text));


--
-- Name: confidence_name_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX confidence_name_idx ON deprecated_marker_confidences USING btree (confidence_name, legacy_conf_id);


--
-- Name: consensi_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX consensi_id_idx ON unigene USING btree (consensi_id);


--
-- Name: content_specific_tag_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX content_specific_tag_idx ON microarray USING btree (content_specific_tag);


--
-- Name: current_tc_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX current_tc_id_idx ON tigrtc_tracking USING btree (current_tc_id);


--
-- Name: defline_annotation_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX defline_annotation_idx ON blast_hits USING btree (defline_id, blast_annotation_id);


--
-- Name: defline_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX defline_id_idx ON blast_hits USING btree (defline_id);


--
-- Name: domain_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX domain_id_idx ON domain_match USING btree (domain_id);


--
-- Name: enzyme_name_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX enzyme_name_idx ON enzymes USING btree (enzyme_name);


--
-- Name: est_dbxref_idx1; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX est_dbxref_idx1 ON est_dbxref USING btree (est_id);


--
-- Name: est_dbxref_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX est_dbxref_idx2 ON est_dbxref USING btree (dbxref_id);


--
-- Name: est_id_2_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX est_id_2_idx ON qc_report USING btree (est_id, hqi_start, hqi_length);


--
-- Name: est_id_2_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX est_id_2_idx2 ON trim_feature USING btree (est_id, type);


--
-- Name: est_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX est_id_idx ON trim_feature USING btree (est_id);


--
-- Name: est_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX est_id_idx2 ON unigene_member USING btree (est_id);


--
-- Name: evalue_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX evalue_idx ON blast_hits USING btree (evalue);


--
-- Name: family_build_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX family_build_id_idx ON family USING btree (family_build_id);


--
-- Name: family_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX family_id_idx ON family_member USING btree (family_id);


--
-- Name: flags_2_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX flags_2_idx ON est USING btree (flags, status);


--
-- Name: flags_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX flags_idx ON est USING btree (flags);


--
-- Name: go_accession_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX go_accession_idx ON go USING btree (go_accession);


--
-- Name: go_accession_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX go_accession_idx2 ON interpro_go USING btree (go_accession);


--
-- Name: group_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX group_id_idx ON family_build USING btree (group_id);


--
-- Name: group_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX group_id_idx2 ON group_linkage USING btree (group_id);


--
-- Name: il_info_lg_name; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX il_info_lg_name ON il_info USING btree (lg_name);


--
-- Name: il_info_map_id; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX il_info_map_id ON il_info USING btree (map_id);


--
-- Name: il_info_population_id; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX il_info_population_id ON il_info USING btree (population_id);


--
-- Name: internal_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX internal_id_idx ON id_linkage USING btree (internal_id);


--
-- Name: interpro_accession_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX interpro_accession_idx ON interpro USING btree (interpro_accession);


--
-- Name: interpro_accession_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX interpro_accession_idx2 ON interpro_go USING btree (interpro_accession);


--
-- Name: interpro_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX interpro_id_idx ON domain USING btree (interpro_id);


--
-- Name: legacy_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX legacy_id_idx ON deprecated_maps USING btree (legacy_id);


--
-- Name: library_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX library_id_idx ON clone USING btree (library_id);


--
-- Name: link_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX link_id_idx ON id_linkage USING btree (link_id);


--
-- Name: manual_annotations_annotation_text_fulltext_index; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX manual_annotations_annotation_text_fulltext_index ON manual_annotations USING gist (annotation_text_fulltext);


--
-- Name: map_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX map_id_idx ON deprecated_map_cross USING btree (map_id, organism_id);


--
-- Name: map_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX map_id_idx2 ON deprecated_mapdata USING btree (map_id, lg_id);


--
-- Name: marker_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX marker_id_idx ON cos_markers USING btree (marker_id, cos_id);


--
-- Name: marker_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX marker_id_idx2 ON cosii_ortholog USING btree (marker_id, unigene_id);


--
-- Name: marker_id_idx3; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX marker_id_idx3 ON ests_mapped_by_clone USING btree (marker_id, clone_id);


--
-- Name: marker_id_idx4; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX marker_id_idx4 ON deprecated_marker_locations USING btree (marker_id, loc_id);


--
-- Name: marker_id_idx5; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX marker_id_idx5 ON p_markers USING btree (marker_id, est_clone_id, p_mrkr_name);


--
-- Name: marker_id_idx6; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX marker_id_idx6 ON pcr_experiment USING btree (marker_id, experiment_type_id);


--
-- Name: marker_id_idx7; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX marker_id_idx7 ON ssr USING btree (marker_id, ssr_name);


--
-- Name: marker_id_idx8; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX marker_id_idx8 ON tm_markers USING btree (marker_id, tm_name, old_cos_id);


--
-- Name: marker_type_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX marker_type_idx ON deprecated_markers USING btree (marker_type, marker_name);


--
-- Name: member_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX member_id_idx ON group_linkage USING btree (member_id);


--
-- Name: metadata_id_index; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX metadata_id_index ON metadata USING btree (metadata_id);


--
-- Name: method_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX method_id_idx ON domain USING btree (method_id);


--
-- Name: method_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX method_idx ON cds USING btree (method);


--
-- Name: misc_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX misc_id_idx ON misc USING btree (misc_id);


--
-- Name: organism_group_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX organism_group_id_idx ON family_member USING btree (organism_group_id);


--
-- Name: organism_group_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX organism_group_id_idx2 ON unigene_build USING btree (organism_group_id);


--
-- Name: organism_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX organism_id_idx ON library USING btree (organism_id);


--
-- Name: pcr_exp_accession_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX pcr_exp_accession_id_idx ON pcr_product USING btree (pcr_exp_accession_id);


--
-- Name: pcr_experiment_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX pcr_experiment_id_idx ON pcr_exp_accession USING btree (pcr_experiment_id);


--
-- Name: preferred_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX preferred_idx ON cds USING btree (preferred);


--
-- Name: read_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX read_id_idx ON est USING btree (read_id);


--
-- Name: read_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX read_id_idx2 ON tigrtc_membership USING btree (read_id);


--
-- Name: rflp_name_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX rflp_name_idx ON rflp_markers USING btree (rflp_name, marker_id, library_name, marker_prefix, vector, cutting_site);


--
-- Name: rflp_seq_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX rflp_seq_id_idx ON rflp_unigene_associations USING btree (rflp_seq_id, unigene_id, align_length);


--
-- Name: rsi_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX rsi_idx ON est USING btree (status, flags, est_id);


--
-- Name: run_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX run_id_idx ON cds USING btree (run_id);


--
-- Name: run_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX run_id_idx2 ON domain_match USING btree (run_id);


--
-- Name: score_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX score_idx ON blast_hits USING btree (score);


--
-- Name: sgn_domain_description_fulltext_index; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX sgn_domain_description_fulltext_index ON domain USING gist (description_fulltext);


--
-- Name: sgn_go_description_fulltext_index; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX sgn_go_description_fulltext_index ON go USING gist (description_fulltext);


--
-- Name: sgn_interpro_description_fulltext_index; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX sgn_interpro_description_fulltext_index ON interpro USING gist (description_fulltext);


--
-- Name: sgn_linkage_group_name_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX sgn_linkage_group_name_idx ON linkage_group USING btree (lg_name);


--
-- Name: source_data_group_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX source_data_group_id_idx ON unigene_build USING btree (source_data_group_id);


--
-- Name: spot_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX spot_id_idx ON microarray USING btree (spot_id);


--
-- Name: ssr_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX ssr_id_idx ON ssr_primer_unigene_matches USING btree (ssr_id, unigene_id, primer_direction, match_length, e_value);


--
-- Name: ssr_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX ssr_id_idx2 ON ssr_repeats USING btree (ssr_id);


--
-- Name: status_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX status_idx ON est USING btree (status);


--
-- Name: submit_user_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX submit_user_id_idx ON facility USING btree (submit_user_id);


--
-- Name: submit_user_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX submit_user_id_idx2 ON library USING btree (submit_user_id);


--
-- Name: target_db_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX target_db_id_idx ON blast_defline USING btree (target_db_id);


--
-- Name: tc_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX tc_id_idx ON tigrtc_membership USING btree (tc_id);


--
-- Name: tc_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX tc_id_idx2 ON tigrtc_tracking USING btree (tc_id);


--
-- Name: trace_name_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX trace_name_idx ON seqread USING btree (trace_name);


--
-- Name: type_code_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX type_code_idx ON loc_types USING btree (type_code);


--
-- Name: type_name_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX type_name_idx ON annotation_target_type USING btree (type_name);


--
-- Name: type_name_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX type_name_idx2 ON deprecated_marker_types USING btree (type_name);


--
-- Name: unigene_build_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX unigene_build_id_idx ON unigene USING btree (unigene_build_id, cluster_no);


--
-- Name: unigene_id_2_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX unigene_id_2_idx ON unigene_member USING btree (unigene_id, est_id);


--
-- Name: unigene_id_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX unigene_id_idx ON cds USING btree (unigene_id);


--
-- Name: unigene_id_idx2; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX unigene_id_idx2 ON domain_match USING btree (unigene_id);


--
-- Name: unigene_id_idx3; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX unigene_id_idx3 ON unigene_member USING btree (unigene_id);


--
-- Name: unigene_sequence_name; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX unigene_sequence_name ON unigene USING btree (sequence_name);


--
-- Name: username_idx; Type: INDEX; Schema: sgn; Owner: postgres
--

CREATE INDEX username_idx ON submit_user USING btree (username);


SET search_path = sgn_people, pg_catalog;

--
-- Name: bac_status_idx; Type: INDEX; Schema: sgn_people; Owner: postgres
--

CREATE INDEX bac_status_idx ON bac_status USING btree (bac_id, status);


--
-- Name: country_idx; Type: INDEX; Schema: sgn_people; Owner: postgres
--

CREATE INDEX country_idx ON sp_person USING btree (country);


--
-- Name: name_idx; Type: INDEX; Schema: sgn_people; Owner: postgres
--

CREATE INDEX name_idx ON sp_person USING btree (last_name, first_name);


--
-- Name: organization_idx; Type: INDEX; Schema: sgn_people; Owner: postgres
--

CREATE INDEX organization_idx ON sp_person USING btree (organization);


--
-- Name: private_email_idx; Type: INDEX; Schema: sgn_people; Owner: postgres
--

CREATE INDEX private_email_idx ON sp_login_old USING btree (private_email);


--
-- Name: sp_user_id_idx; Type: INDEX; Schema: sgn_people; Owner: postgres
--

CREATE INDEX sp_user_id_idx ON sp_papers USING btree (person_id);


--
-- Name: sp_user_id_idx2; Type: INDEX; Schema: sgn_people; Owner: postgres
--

CREATE INDEX sp_user_id_idx2 ON sp_person_organisms USING btree (sp_person_id);


--
-- Name: status_idx; Type: INDEX; Schema: sgn_people; Owner: postgres
--

CREATE INDEX status_idx ON bac_status USING btree (status);


SET search_path = sgn_submit, pg_catalog;

--
-- Name: clone_name_idx; Type: INDEX; Schema: sgn_submit; Owner: postgres
--

CREATE INDEX clone_name_idx ON seqread USING btree (clone_name);


--
-- Name: facility_id_idx; Type: INDEX; Schema: sgn_submit; Owner: postgres
--

CREATE INDEX facility_id_idx ON seqread USING btree (facility_id);


--
-- Name: library_id_idx; Type: INDEX; Schema: sgn_submit; Owner: postgres
--

CREATE INDEX library_id_idx ON seqread USING btree (library_id);


--
-- Name: location_idx; Type: INDEX; Schema: sgn_submit; Owner: postgres
--

CREATE INDEX location_idx ON seqread USING btree (location);


--
-- Name: organism_id_idx; Type: INDEX; Schema: sgn_submit; Owner: postgres
--

CREATE INDEX organism_id_idx ON library USING btree (organism_id);


--
-- Name: submit_user_id_idx; Type: INDEX; Schema: sgn_submit; Owner: postgres
--

CREATE INDEX submit_user_id_idx ON facility USING btree (submit_user_id);


--
-- Name: submit_user_id_idx2; Type: INDEX; Schema: sgn_submit; Owner: postgres
--

CREATE INDEX submit_user_id_idx2 ON library USING btree (submit_user_id);


--
-- Name: trace_name_idx; Type: INDEX; Schema: sgn_submit; Owner: postgres
--

CREATE INDEX trace_name_idx ON seqread USING btree (trace_name);


--
-- Name: username_idx; Type: INDEX; Schema: sgn_submit; Owner: postgres
--

CREATE INDEX username_idx ON submit_user USING btree (username);


SET search_path = tomato_gff, pg_catalog;

--
-- Name: fattribute_to_feature_fid; Type: INDEX; Schema: tomato_gff; Owner: postgres
--

CREATE INDEX fattribute_to_feature_fid ON fattribute_to_feature USING btree (fid, fattribute_id);


--
-- Name: fdata_fref_idx; Type: INDEX; Schema: tomato_gff; Owner: postgres
--

CREATE INDEX fdata_fref_idx ON fdata USING btree (fref, fbin, fstart, fstop, ftypeid, gid);


--
-- Name: fdata_ftypeid_idx; Type: INDEX; Schema: tomato_gff; Owner: postgres
--

CREATE INDEX fdata_ftypeid_idx ON fdata USING btree (ftypeid);


--
-- Name: fdata_gid_idx; Type: INDEX; Schema: tomato_gff; Owner: postgres
--

CREATE INDEX fdata_gid_idx ON fdata USING btree (gid);


--
-- Name: fgroup_gclass_idx; Type: INDEX; Schema: tomato_gff; Owner: postgres
--

CREATE UNIQUE INDEX fgroup_gclass_idx ON fgroup USING btree (gclass, gname);


--
-- Name: ftype_fmethod_idx; Type: INDEX; Schema: tomato_gff; Owner: postgres
--

CREATE INDEX ftype_fmethod_idx ON ftype USING btree (fmethod);


--
-- Name: ftype_fsource_idx; Type: INDEX; Schema: tomato_gff; Owner: postgres
--

CREATE INDEX ftype_fsource_idx ON ftype USING btree (fsource);


--
-- Name: ftype_ftype_idx; Type: INDEX; Schema: tomato_gff; Owner: postgres
--

CREATE UNIQUE INDEX ftype_ftype_idx ON ftype USING btree (fmethod, fsource);


SET search_path = genomic, pg_catalog;

--
-- Name: blast_defline_identifier_defline_fulltext_trigger; Type: TRIGGER; Schema: genomic; Owner: postgres
--

CREATE TRIGGER blast_defline_identifier_defline_fulltext_trigger BEFORE INSERT OR UPDATE ON blast_defline FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('identifier_defline_fulltext', 'pg_catalog.english', 'identifier', 'defline');


SET search_path = public, pg_catalog;

--
-- Name: abstract_tsvector_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER abstract_tsvector_trigger BEFORE INSERT OR UPDATE ON pubabstract FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('abstract_tsvector', 'pg_catalog.english', 'abstract');


--
-- Name: title_tsvector_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER title_tsvector_trigger BEFORE INSERT OR UPDATE ON pub FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('title_tsvector', 'pg_catalog.english', 'title');


SET search_path = sgn, pg_catalog;

--
-- Name: blast_defline_defline_fulltext_trigger; Type: TRIGGER; Schema: sgn; Owner: postgres
--

CREATE TRIGGER blast_defline_defline_fulltext_trigger BEFORE INSERT OR UPDATE ON blast_defline FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('defline_fulltext', 'pg_catalog.english', 'defline');


--
-- Name: domain_description_fulltext_trigger; Type: TRIGGER; Schema: sgn; Owner: postgres
--

CREATE TRIGGER domain_description_fulltext_trigger BEFORE INSERT OR UPDATE ON domain FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('description_fulltext', 'pg_catalog.english', 'description');


--
-- Name: go_description_fulltext_trigger; Type: TRIGGER; Schema: sgn; Owner: postgres
--

CREATE TRIGGER go_description_fulltext_trigger BEFORE INSERT OR UPDATE ON go FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('description_fulltext', 'pg_catalog.english', 'description');


--
-- Name: interpro_description_fulltext_trigger; Type: TRIGGER; Schema: sgn; Owner: postgres
--

CREATE TRIGGER interpro_description_fulltext_trigger BEFORE INSERT OR UPDATE ON interpro FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('description_fulltext', 'pg_catalog.english', 'description');


--
-- Name: manual_annotations_annotation_text_fulltext_trigger; Type: TRIGGER; Schema: sgn; Owner: postgres
--

CREATE TRIGGER manual_annotations_annotation_text_fulltext_trigger BEFORE INSERT OR UPDATE ON manual_annotations FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger('annotation_text_fulltext', 'pg_catalog.english', 'annotation_text');


SET search_path = annotation, pg_catalog;

--
-- Name: clone_id_fk; Type: FK CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY seq
    ADD CONSTRAINT clone_id_fk FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id) MATCH FULL;


--
-- Name: person_id_fk; Type: FK CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY annotation
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: person_id_fk; Type: FK CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY comp_analysis
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: person_id_fk; Type: FK CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY comment
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: person_id_fk; Type: FK CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY feature_set
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: person_id_fk; Type: FK CONSTRAINT; Schema: annotation; Owner: postgres
--

ALTER TABLE ONLY seq
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sgn_people.sp_person(sp_person_id);


SET search_path = biosource, pg_catalog;

--
-- Name: bs_protocol_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_protocol
    ADD CONSTRAINT bs_protocol_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_protocol_pub_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_protocol_pub
    ADD CONSTRAINT bs_protocol_pub_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_protocol_pub_protocol_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_protocol_pub
    ADD CONSTRAINT bs_protocol_pub_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES bs_protocol(protocol_id);


--
-- Name: bs_protocol_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_protocol_pub
    ADD CONSTRAINT bs_protocol_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id);


--
-- Name: bs_protocol_step_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_protocol_step_dbxref
    ADD CONSTRAINT bs_protocol_step_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: bs_protocol_step_dbxref_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_protocol_step_dbxref
    ADD CONSTRAINT bs_protocol_step_dbxref_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_protocol_step_dbxref_protocol_step_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_protocol_step_dbxref
    ADD CONSTRAINT bs_protocol_step_dbxref_protocol_step_id_fkey FOREIGN KEY (protocol_step_id) REFERENCES bs_protocol_step(protocol_step_id);


--
-- Name: bs_protocol_step_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_protocol_step
    ADD CONSTRAINT bs_protocol_step_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_protocol_step_protocol_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_protocol_step
    ADD CONSTRAINT bs_protocol_step_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES bs_protocol(protocol_id);


--
-- Name: bs_protocol_step_tool_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_protocol_step
    ADD CONSTRAINT bs_protocol_step_tool_id_fkey FOREIGN KEY (tool_id) REFERENCES bs_tool(tool_id);


--
-- Name: bs_sample_contact_id_order_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample
    ADD CONSTRAINT bs_sample_contact_id_order_fkey FOREIGN KEY (contact_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: bs_sample_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_cvterm
    ADD CONSTRAINT bs_sample_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: bs_sample_cvterm_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_cvterm
    ADD CONSTRAINT bs_sample_cvterm_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample_cvterm_sample_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_cvterm
    ADD CONSTRAINT bs_sample_cvterm_sample_id_fkey FOREIGN KEY (sample_id) REFERENCES bs_sample(sample_id);


--
-- Name: bs_sample_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_dbxref
    ADD CONSTRAINT bs_sample_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: bs_sample_dbxref_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_dbxref
    ADD CONSTRAINT bs_sample_dbxref_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample_dbxref_sample_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_dbxref
    ADD CONSTRAINT bs_sample_dbxref_sample_id_fkey FOREIGN KEY (sample_id) REFERENCES bs_sample(sample_id);


--
-- Name: bs_sample_element_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element_cvterm
    ADD CONSTRAINT bs_sample_element_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: bs_sample_element_cvterm_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element_cvterm
    ADD CONSTRAINT bs_sample_element_cvterm_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample_element_cvterm_sample_element_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element_cvterm
    ADD CONSTRAINT bs_sample_element_cvterm_sample_element_id_fkey FOREIGN KEY (sample_element_id) REFERENCES bs_sample_element(sample_element_id);


--
-- Name: bs_sample_element_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element_dbxref
    ADD CONSTRAINT bs_sample_element_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: bs_sample_element_dbxref_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element_dbxref
    ADD CONSTRAINT bs_sample_element_dbxref_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample_element_dbxref_sample_element_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element_dbxref
    ADD CONSTRAINT bs_sample_element_dbxref_sample_element_id_fkey FOREIGN KEY (sample_element_id) REFERENCES bs_sample_element(sample_element_id);


--
-- Name: bs_sample_element_file_file_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element_file
    ADD CONSTRAINT bs_sample_element_file_file_id_fkey FOREIGN KEY (file_id) REFERENCES metadata.md_files(file_id);


--
-- Name: bs_sample_element_file_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element_file
    ADD CONSTRAINT bs_sample_element_file_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample_element_file_sample_element_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element_file
    ADD CONSTRAINT bs_sample_element_file_sample_element_id_fkey FOREIGN KEY (sample_element_id) REFERENCES bs_sample_element(sample_element_id);


--
-- Name: bs_sample_element_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element
    ADD CONSTRAINT bs_sample_element_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample_element_organism_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element
    ADD CONSTRAINT bs_sample_element_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id);


--
-- Name: bs_sample_element_protocol_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element
    ADD CONSTRAINT bs_sample_element_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES bs_protocol(protocol_id);


--
-- Name: bs_sample_element_relation_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element_relation
    ADD CONSTRAINT bs_sample_element_relation_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample_element_relation_sample_element_id_a_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element_relation
    ADD CONSTRAINT bs_sample_element_relation_sample_element_id_a_fkey FOREIGN KEY (sample_element_id_a) REFERENCES bs_sample_element(sample_element_id);


--
-- Name: bs_sample_element_relation_sample_element_id_b_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element_relation
    ADD CONSTRAINT bs_sample_element_relation_sample_element_id_b_fkey FOREIGN KEY (sample_element_id_b) REFERENCES bs_sample_element(sample_element_id);


--
-- Name: bs_sample_element_sample_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_element
    ADD CONSTRAINT bs_sample_element_sample_id_fkey FOREIGN KEY (sample_id) REFERENCES bs_sample(sample_id);


--
-- Name: bs_sample_file_file_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_file
    ADD CONSTRAINT bs_sample_file_file_id_fkey FOREIGN KEY (file_id) REFERENCES metadata.md_files(file_id);


--
-- Name: bs_sample_file_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_file
    ADD CONSTRAINT bs_sample_file_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample_file_sample_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_file
    ADD CONSTRAINT bs_sample_file_sample_id_fkey FOREIGN KEY (sample_id) REFERENCES bs_sample(sample_id);


--
-- Name: bs_sample_metadata_id_order_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample
    ADD CONSTRAINT bs_sample_metadata_id_order_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample_organism_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample
    ADD CONSTRAINT bs_sample_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id);


--
-- Name: bs_sample_protocol_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample
    ADD CONSTRAINT bs_sample_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES bs_protocol(protocol_id);


--
-- Name: bs_sample_pub_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_pub
    ADD CONSTRAINT bs_sample_pub_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_pub
    ADD CONSTRAINT bs_sample_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id);


--
-- Name: bs_sample_pub_sample_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_pub
    ADD CONSTRAINT bs_sample_pub_sample_id_fkey FOREIGN KEY (sample_id) REFERENCES bs_sample(sample_id);


--
-- Name: bs_sample_relationship_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_relationship
    ADD CONSTRAINT bs_sample_relationship_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_sample_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_relationship
    ADD CONSTRAINT bs_sample_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES bs_sample(sample_id);


--
-- Name: bs_sample_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_relationship
    ADD CONSTRAINT bs_sample_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES bs_sample(sample_id);


--
-- Name: bs_sample_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample_relationship
    ADD CONSTRAINT bs_sample_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: bs_sample_type_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_sample
    ADD CONSTRAINT bs_sample_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: bs_tool_file_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_tool
    ADD CONSTRAINT bs_tool_file_id_fkey FOREIGN KEY (file_id) REFERENCES metadata.md_files(file_id);


--
-- Name: bs_tool_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_tool
    ADD CONSTRAINT bs_tool_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_tool_pub_metadata_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_tool_pub
    ADD CONSTRAINT bs_tool_pub_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: bs_tool_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_tool_pub
    ADD CONSTRAINT bs_tool_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id);


--
-- Name: bs_tool_pub_tool_id_fkey; Type: FK CONSTRAINT; Schema: biosource; Owner: postgres
--

ALTER TABLE ONLY bs_tool_pub
    ADD CONSTRAINT bs_tool_pub_tool_id_fkey FOREIGN KEY (tool_id) REFERENCES bs_tool(tool_id);


SET search_path = gem, pg_catalog;

--
-- Name: ge_cluster_analysis_correlation_analysis_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_cluster_analysis
    ADD CONSTRAINT ge_cluster_analysis_correlation_analysis_id_fkey FOREIGN KEY (correlation_analysis_id) REFERENCES ge_correlation_analysis(correlation_analysis_id);


--
-- Name: ge_cluster_analysis_experiment_analysis_group_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_cluster_analysis
    ADD CONSTRAINT ge_cluster_analysis_experiment_analysis_group_id_fkey FOREIGN KEY (experiment_analysis_group_id) REFERENCES ge_experiment_analysis_group(experiment_analysis_group_id);


--
-- Name: ge_cluster_analysis_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_cluster_analysis
    ADD CONSTRAINT ge_cluster_analysis_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_cluster_analysis_protocol_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_cluster_analysis
    ADD CONSTRAINT ge_cluster_analysis_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES biosource.bs_protocol(protocol_id);


--
-- Name: ge_cluster_member_cluster_profile_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_cluster_member
    ADD CONSTRAINT ge_cluster_member_cluster_profile_id_fkey FOREIGN KEY (cluster_profile_id) REFERENCES ge_cluster_profile(cluster_profile_id);


--
-- Name: ge_cluster_member_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_cluster_member
    ADD CONSTRAINT ge_cluster_member_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_cluster_member_template_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_cluster_member
    ADD CONSTRAINT ge_cluster_member_template_id_fkey FOREIGN KEY (template_id) REFERENCES ge_template(template_id);


--
-- Name: ge_cluster_profile_cluster_analysis_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_cluster_profile
    ADD CONSTRAINT ge_cluster_profile_cluster_analysis_id_fkey FOREIGN KEY (cluster_analysis_id) REFERENCES ge_cluster_analysis(cluster_analysis_id);


--
-- Name: ge_cluster_profile_file_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_cluster_profile
    ADD CONSTRAINT ge_cluster_profile_file_id_fkey FOREIGN KEY (file_id) REFERENCES metadata.md_files(file_id);


--
-- Name: ge_cluster_profile_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_cluster_profile
    ADD CONSTRAINT ge_cluster_profile_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_correlation_analysis_experiment_analysis_group_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_correlation_analysis
    ADD CONSTRAINT ge_correlation_analysis_experiment_analysis_group_id_fkey FOREIGN KEY (experiment_analysis_group_id) REFERENCES ge_experiment_analysis_group(experiment_analysis_group_id);


--
-- Name: ge_correlation_analysis_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_correlation_analysis
    ADD CONSTRAINT ge_correlation_analysis_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_correlation_member_correlation_analysis_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_correlation_member
    ADD CONSTRAINT ge_correlation_member_correlation_analysis_id_fkey FOREIGN KEY (correlation_analysis_id) REFERENCES ge_correlation_analysis(correlation_analysis_id);


--
-- Name: ge_correlation_member_dataset_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_correlation_member
    ADD CONSTRAINT ge_correlation_member_dataset_id_fkey FOREIGN KEY (dataset_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: ge_correlation_member_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_correlation_member
    ADD CONSTRAINT ge_correlation_member_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_correlation_member_template_a_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_correlation_member
    ADD CONSTRAINT ge_correlation_member_template_a_id_fkey FOREIGN KEY (template_a_id) REFERENCES ge_template(template_id);


--
-- Name: ge_correlation_member_template_b_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_correlation_member
    ADD CONSTRAINT ge_correlation_member_template_b_id_fkey FOREIGN KEY (template_b_id) REFERENCES ge_template(template_id);


--
-- Name: ge_data_analysis_process_file_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_data_analysis_process
    ADD CONSTRAINT ge_data_analysis_process_file_id_fkey FOREIGN KEY (file_id) REFERENCES metadata.md_files(file_id);


--
-- Name: ge_data_analysis_process_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_data_analysis_process
    ADD CONSTRAINT ge_data_analysis_process_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_data_analysis_process_result_dataset_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_data_analysis_process
    ADD CONSTRAINT ge_data_analysis_process_result_dataset_id_fkey FOREIGN KEY (result_dataset_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: ge_data_analysis_process_source_dataset_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_data_analysis_process
    ADD CONSTRAINT ge_data_analysis_process_source_dataset_id_fkey FOREIGN KEY (source_dataset_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: ge_data_analysis_process_target_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_data_analysis_process
    ADD CONSTRAINT ge_data_analysis_process_target_id_fkey FOREIGN KEY (target_id) REFERENCES ge_target(target_id);


--
-- Name: ge_diff_expression_experiment_analysis_group_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_diff_expression
    ADD CONSTRAINT ge_diff_expression_experiment_analysis_group_id_fkey FOREIGN KEY (experiment_analysis_group_id) REFERENCES ge_experiment_analysis_group(experiment_analysis_group_id);


--
-- Name: ge_diff_expression_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_diff_expression
    ADD CONSTRAINT ge_diff_expression_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_experiment_analysis_group_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experiment_analysis_group
    ADD CONSTRAINT ge_experiment_analysis_group_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_experiment_analysis_member_experiment_analysis_group_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experiment_analysis_member
    ADD CONSTRAINT ge_experiment_analysis_member_experiment_analysis_group_id_fkey FOREIGN KEY (experiment_analysis_group_id) REFERENCES ge_experiment_analysis_group(experiment_analysis_group_id);


--
-- Name: ge_experiment_analysis_member_experiment_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experiment_analysis_member
    ADD CONSTRAINT ge_experiment_analysis_member_experiment_id_fkey FOREIGN KEY (experiment_id) REFERENCES ge_experiment(experiment_id);


--
-- Name: ge_experiment_analysis_member_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experiment_analysis_member
    ADD CONSTRAINT ge_experiment_analysis_member_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_experiment_contact_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experiment
    ADD CONSTRAINT ge_experiment_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: ge_experiment_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experiment_dbxref
    ADD CONSTRAINT ge_experiment_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: ge_experiment_dbxref_experiment_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experiment_dbxref
    ADD CONSTRAINT ge_experiment_dbxref_experiment_id_fkey FOREIGN KEY (experiment_id) REFERENCES ge_experiment(experiment_id);


--
-- Name: ge_experiment_dbxref_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experiment_dbxref
    ADD CONSTRAINT ge_experiment_dbxref_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_experiment_experimental_design_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experiment
    ADD CONSTRAINT ge_experiment_experimental_design_id_fkey FOREIGN KEY (experimental_design_id) REFERENCES ge_experimental_design(experimental_design_id);


--
-- Name: ge_experiment_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experiment
    ADD CONSTRAINT ge_experiment_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_experimental_design_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experimental_design_dbxref
    ADD CONSTRAINT ge_experimental_design_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: ge_experimental_design_dbxref_experimental_design_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experimental_design_dbxref
    ADD CONSTRAINT ge_experimental_design_dbxref_experimental_design_id_fkey FOREIGN KEY (experimental_design_id) REFERENCES ge_experimental_design(experimental_design_id);


--
-- Name: ge_experimental_design_dbxref_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experimental_design_dbxref
    ADD CONSTRAINT ge_experimental_design_dbxref_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_experimental_design_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experimental_design
    ADD CONSTRAINT ge_experimental_design_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_experimental_design_pub_experimental_design_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experimental_design_pub
    ADD CONSTRAINT ge_experimental_design_pub_experimental_design_id_fkey FOREIGN KEY (experimental_design_id) REFERENCES ge_experimental_design(experimental_design_id);


--
-- Name: ge_experimental_design_pub_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experimental_design_pub
    ADD CONSTRAINT ge_experimental_design_pub_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_experimental_design_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_experimental_design_pub
    ADD CONSTRAINT ge_experimental_design_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id);


--
-- Name: ge_expression_by_experiment_dataset_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_expression_by_experiment
    ADD CONSTRAINT ge_expression_by_experiment_dataset_id_fkey FOREIGN KEY (dataset_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: ge_expression_by_experiment_experiment_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_expression_by_experiment
    ADD CONSTRAINT ge_expression_by_experiment_experiment_id_fkey FOREIGN KEY (experiment_id) REFERENCES ge_experiment(experiment_id);


--
-- Name: ge_expression_by_experiment_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_expression_by_experiment
    ADD CONSTRAINT ge_expression_by_experiment_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_expression_by_experiment_template_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_expression_by_experiment
    ADD CONSTRAINT ge_expression_by_experiment_template_id_fkey FOREIGN KEY (template_id) REFERENCES ge_template(template_id);


--
-- Name: ge_fluorescanning_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_fluorescanning
    ADD CONSTRAINT ge_fluorescanning_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: ge_fluorescanning_file_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_fluorescanning
    ADD CONSTRAINT ge_fluorescanning_file_id_fkey FOREIGN KEY (file_id) REFERENCES metadata.md_files(file_id);


--
-- Name: ge_fluorescanning_hybridization_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_fluorescanning
    ADD CONSTRAINT ge_fluorescanning_hybridization_id_fkey FOREIGN KEY (hybridization_id) REFERENCES ge_hybridization(hybridization_id);


--
-- Name: ge_fluorescanning_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_fluorescanning
    ADD CONSTRAINT ge_fluorescanning_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_fluorescanning_protocol_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_fluorescanning
    ADD CONSTRAINT ge_fluorescanning_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES biosource.bs_protocol(protocol_id);


--
-- Name: ge_hybridization_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_hybridization
    ADD CONSTRAINT ge_hybridization_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_hybridization_platform_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_hybridization
    ADD CONSTRAINT ge_hybridization_platform_id_fkey FOREIGN KEY (platform_id) REFERENCES ge_platform(platform_id);


--
-- Name: ge_hybridization_protocol_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_hybridization
    ADD CONSTRAINT ge_hybridization_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES biosource.bs_protocol(protocol_id);


--
-- Name: ge_hybridization_target_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_hybridization
    ADD CONSTRAINT ge_hybridization_target_id_fkey FOREIGN KEY (target_id) REFERENCES ge_target(target_id);


--
-- Name: ge_platform_contact_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_platform
    ADD CONSTRAINT ge_platform_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: ge_platform_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_platform_dbxref
    ADD CONSTRAINT ge_platform_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: ge_platform_dbxref_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_platform_dbxref
    ADD CONSTRAINT ge_platform_dbxref_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_platform_dbxref_platform_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_platform_dbxref
    ADD CONSTRAINT ge_platform_dbxref_platform_id_fkey FOREIGN KEY (platform_id) REFERENCES ge_platform(platform_id);


--
-- Name: ge_platform_design_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_platform_design
    ADD CONSTRAINT ge_platform_design_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_platform_design_platform_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_platform_design
    ADD CONSTRAINT ge_platform_design_platform_id_fkey FOREIGN KEY (platform_id) REFERENCES ge_platform(platform_id);


--
-- Name: ge_platform_design_sample_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_platform_design
    ADD CONSTRAINT ge_platform_design_sample_id_fkey FOREIGN KEY (sample_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: ge_platform_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_platform
    ADD CONSTRAINT ge_platform_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_platform_pub_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_platform_pub
    ADD CONSTRAINT ge_platform_pub_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_platform_pub_platform_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_platform_pub
    ADD CONSTRAINT ge_platform_pub_platform_id_fkey FOREIGN KEY (platform_id) REFERENCES ge_platform(platform_id);


--
-- Name: ge_platform_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_platform_pub
    ADD CONSTRAINT ge_platform_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id);


--
-- Name: ge_platform_technology_type_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_platform
    ADD CONSTRAINT ge_platform_technology_type_id_fkey FOREIGN KEY (technology_type_id) REFERENCES ge_technology_type(technology_type_id);


--
-- Name: ge_probe_expression_dataset_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_probe_expression
    ADD CONSTRAINT ge_probe_expression_dataset_id_fkey FOREIGN KEY (dataset_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: ge_probe_expression_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_probe_expression
    ADD CONSTRAINT ge_probe_expression_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_probe_expression_probe_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_probe_expression
    ADD CONSTRAINT ge_probe_expression_probe_id_fkey FOREIGN KEY (probe_id) REFERENCES ge_probe(probe_id);


--
-- Name: ge_probe_expression_target_element_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_probe_expression
    ADD CONSTRAINT ge_probe_expression_target_element_id_fkey FOREIGN KEY (target_element_id) REFERENCES ge_target_element(target_element_id);


--
-- Name: ge_probe_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_probe
    ADD CONSTRAINT ge_probe_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_probe_platform_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_probe
    ADD CONSTRAINT ge_probe_platform_id_fkey FOREIGN KEY (platform_id) REFERENCES ge_platform(platform_id);


--
-- Name: ge_probe_sequence_file_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_probe
    ADD CONSTRAINT ge_probe_sequence_file_id_fkey FOREIGN KEY (sequence_file_id) REFERENCES metadata.md_files(file_id);


--
-- Name: ge_probe_spot_coordinate_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_probe_spot_coordinate
    ADD CONSTRAINT ge_probe_spot_coordinate_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_probe_spot_coordinate_probe_spot_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_probe_spot_coordinate
    ADD CONSTRAINT ge_probe_spot_coordinate_probe_spot_id_fkey FOREIGN KEY (probe_spot_id) REFERENCES ge_probe_spot(probe_spot_id);


--
-- Name: ge_probe_spot_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_probe_spot
    ADD CONSTRAINT ge_probe_spot_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_probe_spot_probe_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_probe_spot
    ADD CONSTRAINT ge_probe_spot_probe_id_fkey FOREIGN KEY (probe_id) REFERENCES ge_probe(probe_id);


--
-- Name: ge_probe_template_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_probe
    ADD CONSTRAINT ge_probe_template_id_fkey FOREIGN KEY (template_id) REFERENCES ge_template(template_id);


--
-- Name: ge_profile_element_cluster_profile_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_profile_element
    ADD CONSTRAINT ge_profile_element_cluster_profile_id_fkey FOREIGN KEY (cluster_profile_id) REFERENCES ge_cluster_profile(cluster_profile_id);


--
-- Name: ge_profile_element_experiment_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_profile_element
    ADD CONSTRAINT ge_profile_element_experiment_id_fkey FOREIGN KEY (experiment_id) REFERENCES ge_experiment(experiment_id);


--
-- Name: ge_profile_element_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_profile_element
    ADD CONSTRAINT ge_profile_element_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_target_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_target_dbxref
    ADD CONSTRAINT ge_target_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: ge_target_dbxref_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_target_dbxref
    ADD CONSTRAINT ge_target_dbxref_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_target_dbxref_target_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_target_dbxref
    ADD CONSTRAINT ge_target_dbxref_target_id_fkey FOREIGN KEY (target_id) REFERENCES ge_target(target_id);


--
-- Name: ge_target_element_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_target_element
    ADD CONSTRAINT ge_target_element_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_target_element_protocol_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_target_element
    ADD CONSTRAINT ge_target_element_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES biosource.bs_protocol(protocol_id);


--
-- Name: ge_target_element_sample_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_target_element
    ADD CONSTRAINT ge_target_element_sample_id_fkey FOREIGN KEY (sample_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: ge_target_element_target_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_target_element
    ADD CONSTRAINT ge_target_element_target_id_fkey FOREIGN KEY (target_id) REFERENCES ge_target(target_id);


--
-- Name: ge_target_experiment_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_target
    ADD CONSTRAINT ge_target_experiment_id_fkey FOREIGN KEY (experiment_id) REFERENCES ge_experiment(experiment_id);


--
-- Name: ge_target_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_target
    ADD CONSTRAINT ge_target_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_technology_type_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_technology_type
    ADD CONSTRAINT ge_technology_type_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_template_dbiref_dbiref_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_dbiref
    ADD CONSTRAINT ge_template_dbiref_dbiref_id_fkey FOREIGN KEY (dbiref_id) REFERENCES metadata.md_dbiref(dbiref_id);


--
-- Name: ge_template_dbiref_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_dbiref
    ADD CONSTRAINT ge_template_dbiref_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_template_dbiref_template_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_dbiref
    ADD CONSTRAINT ge_template_dbiref_template_id_fkey FOREIGN KEY (template_id) REFERENCES ge_template(template_id);


--
-- Name: ge_template_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_dbxref
    ADD CONSTRAINT ge_template_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: ge_template_dbxref_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_dbxref
    ADD CONSTRAINT ge_template_dbxref_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_template_dbxref_template_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_dbxref
    ADD CONSTRAINT ge_template_dbxref_template_id_fkey FOREIGN KEY (template_id) REFERENCES ge_template(template_id);


--
-- Name: ge_template_diff_expression_dataset_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_diff_expression
    ADD CONSTRAINT ge_template_diff_expression_dataset_id_fkey FOREIGN KEY (dataset_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: ge_template_diff_expression_diff_expression_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_diff_expression
    ADD CONSTRAINT ge_template_diff_expression_diff_expression_id_fkey FOREIGN KEY (diff_expression_id) REFERENCES ge_diff_expression(diff_expression_id);


--
-- Name: ge_template_diff_expression_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_diff_expression
    ADD CONSTRAINT ge_template_diff_expression_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_template_diff_expression_template_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_diff_expression
    ADD CONSTRAINT ge_template_diff_expression_template_id_fkey FOREIGN KEY (template_id) REFERENCES ge_template(template_id);


--
-- Name: ge_template_expression_dataset_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_expression
    ADD CONSTRAINT ge_template_expression_dataset_id_fkey FOREIGN KEY (dataset_id) REFERENCES biosource.bs_sample(sample_id);


--
-- Name: ge_template_expression_hybridization_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_expression
    ADD CONSTRAINT ge_template_expression_hybridization_id_fkey FOREIGN KEY (hybridization_id) REFERENCES ge_hybridization(hybridization_id);


--
-- Name: ge_template_expression_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_expression
    ADD CONSTRAINT ge_template_expression_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_template_expression_template_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template_expression
    ADD CONSTRAINT ge_template_expression_template_id_fkey FOREIGN KEY (template_id) REFERENCES ge_template(template_id);


--
-- Name: ge_template_metadata_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template
    ADD CONSTRAINT ge_template_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: ge_template_platform_id_fkey; Type: FK CONSTRAINT; Schema: gem; Owner: postgres
--

ALTER TABLE ONLY ge_template
    ADD CONSTRAINT ge_template_platform_id_fkey FOREIGN KEY (platform_id) REFERENCES ge_platform(platform_id);


SET search_path = genomic, pg_catalog;

--
-- Name: blast_hit_blast_query_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY blast_hit
    ADD CONSTRAINT blast_hit_blast_query_id_fkey FOREIGN KEY (blast_query_id) REFERENCES blast_query(blast_query_id) ON DELETE CASCADE;


--
-- Name: blast_query_blast_db_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY blast_query
    ADD CONSTRAINT blast_query_blast_db_id_fkey FOREIGN KEY (blast_db_id) REFERENCES sgn.blast_db(blast_db_id) ON DELETE RESTRICT;


--
-- Name: blast_query_query_source_type_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY blast_query
    ADD CONSTRAINT blast_query_query_source_type_id_fkey FOREIGN KEY (query_source_type_id) REFERENCES query_source_type(query_source_type_id) ON DELETE RESTRICT;


--
-- Name: chromat_clone_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY chromat
    ADD CONSTRAINT chromat_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES clone(clone_id) ON DELETE CASCADE;


--
-- Name: clone_clone_type_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY clone
    ADD CONSTRAINT clone_clone_type_id_fkey FOREIGN KEY (clone_type_id) REFERENCES clone_type(clone_type_id) ON DELETE RESTRICT;


--
-- Name: clone_feature_clone_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY clone_feature
    ADD CONSTRAINT clone_feature_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES clone(clone_id) ON DELETE CASCADE;


--
-- Name: clone_feature_feature_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY clone_feature
    ADD CONSTRAINT clone_feature_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES public.feature(feature_id) ON DELETE CASCADE;


--
-- Name: clone_library_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY clone
    ADD CONSTRAINT clone_library_id_fkey FOREIGN KEY (library_id) REFERENCES library(library_id) ON DELETE RESTRICT;


--
-- Name: gss_chromat_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY gss
    ADD CONSTRAINT gss_chromat_id_fkey FOREIGN KEY (chromat_id) REFERENCES chromat(chromat_id) ON DELETE CASCADE;


--
-- Name: gss_submitted_to_genbank_genbank_submission_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY gss_submitted_to_genbank
    ADD CONSTRAINT gss_submitted_to_genbank_genbank_submission_id_fkey FOREIGN KEY (genbank_submission_id) REFERENCES genbank_submission(genbank_submission_id) ON DELETE CASCADE;


--
-- Name: gss_submitted_to_genbank_gss_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY gss_submitted_to_genbank
    ADD CONSTRAINT gss_submitted_to_genbank_gss_id_fkey FOREIGN KEY (gss_id) REFERENCES gss(gss_id) ON DELETE RESTRICT;


--
-- Name: library_accession_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY library
    ADD CONSTRAINT library_accession_id_fkey FOREIGN KEY (accession_id) REFERENCES sgn.accession(accession_id) ON DELETE RESTRICT;


--
-- Name: library_clone_type_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY library
    ADD CONSTRAINT library_clone_type_id_fkey FOREIGN KEY (clone_type_id) REFERENCES clone_type(clone_type_id) ON DELETE RESTRICT;


--
-- Name: library_left_primer_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY library
    ADD CONSTRAINT library_left_primer_id_fkey FOREIGN KEY (left_primer_id) REFERENCES sequencing_primer(sequencing_primer_id);


--
-- Name: library_organism_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY library
    ADD CONSTRAINT library_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_right_primer_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY library
    ADD CONSTRAINT library_right_primer_id_fkey FOREIGN KEY (right_primer_id) REFERENCES sequencing_primer(sequencing_primer_id);


--
-- Name: library_shortname_abbreviation_library_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY library_shortname_abbreviation
    ADD CONSTRAINT library_shortname_abbreviation_library_id_fkey FOREIGN KEY (library_id) REFERENCES library(library_id);


--
-- Name: library_vector_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY library
    ADD CONSTRAINT library_vector_fkey FOREIGN KEY (vector) REFERENCES sgn.cloning_vector(name);


--
-- Name: qc_report_gss_id_fkey; Type: FK CONSTRAINT; Schema: genomic; Owner: postgres
--

ALTER TABLE ONLY qc_report
    ADD CONSTRAINT qc_report_gss_id_fkey FOREIGN KEY (gss_id) REFERENCES gss(gss_id) ON DELETE CASCADE;


SET search_path = insitu, pg_catalog;

--
-- Name: experiment_image_experiment_id_fkey; Type: FK CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY experiment_image
    ADD CONSTRAINT experiment_image_experiment_id_fkey FOREIGN KEY (experiment_id) REFERENCES experiment(experiment_id);


--
-- Name: experiment_image_image_id_fkey; Type: FK CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY experiment_image
    ADD CONSTRAINT experiment_image_image_id_fkey FOREIGN KEY (image_id) REFERENCES metadata.md_image(image_id);


--
-- Name: experiment_image_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY experiment_image
    ADD CONSTRAINT experiment_image_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: experiment_tag_experiment_id_fkey; Type: FK CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY experiment_tag
    ADD CONSTRAINT experiment_tag_experiment_id_fkey FOREIGN KEY (experiment_id) REFERENCES experiment(experiment_id);


--
-- Name: experiment_tag_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY experiment_tag
    ADD CONSTRAINT experiment_tag_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: experiment_tag_tag_id_fkey; Type: FK CONSTRAINT; Schema: insitu; Owner: postgres
--

ALTER TABLE ONLY experiment_tag
    ADD CONSTRAINT experiment_tag_tag_id_fkey FOREIGN KEY (tag_id) REFERENCES metadata.md_tag(tag_id);


SET search_path = metadata, pg_catalog;

--
-- Name: attribution_id_fk; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY attribution_to
    ADD CONSTRAINT attribution_id_fk FOREIGN KEY (attribution_id) REFERENCES attribution(attribution_id) ON DELETE CASCADE;


--
-- Name: md_dbipath_metadata_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_dbipath
    ADD CONSTRAINT md_dbipath_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES md_metadata(metadata_id);


--
-- Name: md_dbiref_dbipath_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_dbiref
    ADD CONSTRAINT md_dbiref_dbipath_id_fkey FOREIGN KEY (dbipath_id) REFERENCES md_dbipath(dbipath_id);


--
-- Name: md_dbiref_metadata_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_dbiref
    ADD CONSTRAINT md_dbiref_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES md_metadata(metadata_id);


--
-- Name: md_dbversion_metadata_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_dbversion
    ADD CONSTRAINT md_dbversion_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES md_metadata(metadata_id);


--
-- Name: md_files_metadata_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_files
    ADD CONSTRAINT md_files_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES md_metadata(metadata_id);


--
-- Name: md_groupmembers_dbiref_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_groupmembers
    ADD CONSTRAINT md_groupmembers_dbiref_id_fkey FOREIGN KEY (dbiref_id) REFERENCES md_dbiref(dbiref_id);


--
-- Name: md_groupmembers_group_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_groupmembers
    ADD CONSTRAINT md_groupmembers_group_id_fkey FOREIGN KEY (group_id) REFERENCES md_groups(group_id);


--
-- Name: md_groupmembers_metadata_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_groupmembers
    ADD CONSTRAINT md_groupmembers_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES md_metadata(metadata_id);


--
-- Name: md_groups_metadata_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_groups
    ADD CONSTRAINT md_groups_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES md_metadata(metadata_id);


--
-- Name: md_image_organism_image_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_image_organism
    ADD CONSTRAINT md_image_organism_image_id_fkey FOREIGN KEY (image_id) REFERENCES md_image(image_id);


--
-- Name: md_image_organism_organism_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_image_organism
    ADD CONSTRAINT md_image_organism_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id);


--
-- Name: md_image_organism_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_image_organism
    ADD CONSTRAINT md_image_organism_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: md_image_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_image
    ADD CONSTRAINT md_image_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: md_metadata_create_person_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_metadata
    ADD CONSTRAINT md_metadata_create_person_id_fkey FOREIGN KEY (create_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: md_metadata_modified_person_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_metadata
    ADD CONSTRAINT md_metadata_modified_person_id_fkey FOREIGN KEY (modified_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: md_tag_image_image_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_tag_image
    ADD CONSTRAINT md_tag_image_image_id_fkey FOREIGN KEY (image_id) REFERENCES md_image(image_id);


--
-- Name: md_tag_image_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_tag_image
    ADD CONSTRAINT md_tag_image_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: md_tag_image_tag_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_tag_image
    ADD CONSTRAINT md_tag_image_tag_id_fkey FOREIGN KEY (tag_id) REFERENCES md_tag(tag_id);


--
-- Name: md_tag_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY md_tag
    ADD CONSTRAINT md_tag_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: organization_id_fk; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY attribution_to
    ADD CONSTRAINT organization_id_fk FOREIGN KEY (organization_id) REFERENCES sgn_people.sp_organization(sp_organization_id);


--
-- Name: person_id_fk; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY attribution_to
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: project_id_fk; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY attribution_to
    ADD CONSTRAINT project_id_fk FOREIGN KEY (project_id) REFERENCES sgn_people.sp_project(sp_project_id);


--
-- Name: role_id_fk; Type: FK CONSTRAINT; Schema: metadata; Owner: postgres
--

ALTER TABLE ONLY attribution_to
    ADD CONSTRAINT role_id_fk FOREIGN KEY (role_id) REFERENCES roles(role_id);


SET search_path = phenome, pg_catalog;

--
-- Name: allele_alias_allele_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY allele_alias
    ADD CONSTRAINT allele_alias_allele_id_fkey FOREIGN KEY (allele_id) REFERENCES allele(allele_id);


--
-- Name: allele_alias_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY allele_alias
    ADD CONSTRAINT allele_alias_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: allele_dbxref_allele_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY allele_dbxref
    ADD CONSTRAINT allele_dbxref_allele_id_fkey FOREIGN KEY (allele_id) REFERENCES allele(allele_id);


--
-- Name: allele_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY allele_dbxref
    ADD CONSTRAINT allele_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: allele_dbxref_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY allele_dbxref
    ADD CONSTRAINT allele_dbxref_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: allele_history_allele_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY allele_history
    ADD CONSTRAINT allele_history_allele_id_fkey FOREIGN KEY (allele_id) REFERENCES allele(allele_id) ON DELETE CASCADE;


--
-- Name: allele_history_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY allele_history
    ADD CONSTRAINT allele_history_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES locus(locus_id) ON DELETE CASCADE;


--
-- Name: allele_history_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY allele_history
    ADD CONSTRAINT allele_history_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: allele_history_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY allele_history
    ADD CONSTRAINT allele_history_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: allele_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY allele
    ADD CONSTRAINT allele_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES locus(locus_id);


--
-- Name: allele_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY allele
    ADD CONSTRAINT allele_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: allele_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY allele
    ADD CONSTRAINT allele_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: cvterm_pub_ranking_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY cvterm_pub_ranking
    ADD CONSTRAINT cvterm_pub_ranking_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: cvterm_pub_ranking_pub_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY cvterm_pub_ranking
    ADD CONSTRAINT cvterm_pub_ranking_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id);


--
-- Name: genotype_background_accession_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY genotype
    ADD CONSTRAINT genotype_background_accession_id_fkey FOREIGN KEY (background_accession_id) REFERENCES sgn.accession(accession_id);


--
-- Name: genotype_experiment_background_accession_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY genotype_experiment
    ADD CONSTRAINT genotype_experiment_background_accession_id_fkey FOREIGN KEY (background_accession_id) REFERENCES sgn.accession(accession_id);


--
-- Name: genotype_experiment_reference_map_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY genotype_experiment
    ADD CONSTRAINT genotype_experiment_reference_map_id_fkey FOREIGN KEY (reference_map_id) REFERENCES sgn.map(map_id) ON DELETE CASCADE;


--
-- Name: genotype_experiment_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY genotype_experiment
    ADD CONSTRAINT genotype_experiment_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: genotype_genotype_experiment_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY genotype
    ADD CONSTRAINT genotype_genotype_experiment_id_fkey FOREIGN KEY (genotype_experiment_id) REFERENCES genotype_experiment(genotype_experiment_id);


--
-- Name: genotype_individual_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY genotype
    ADD CONSTRAINT genotype_individual_id_fkey FOREIGN KEY (individual_id) REFERENCES individual(individual_id) ON DELETE CASCADE;


--
-- Name: genotype_reference_map_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY genotype
    ADD CONSTRAINT genotype_reference_map_id_fkey FOREIGN KEY (reference_map_id) REFERENCES sgn.map(map_id);


--
-- Name: genotype_region_genotype_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY genotype_region
    ADD CONSTRAINT genotype_region_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: genotype_region_lg_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY genotype_region
    ADD CONSTRAINT genotype_region_lg_id_fkey FOREIGN KEY (lg_id) REFERENCES sgn.linkage_group(lg_id);


--
-- Name: genotype_region_marker_id_nn_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY genotype_region
    ADD CONSTRAINT genotype_region_marker_id_nn_fkey FOREIGN KEY (marker_id_nn) REFERENCES sgn.marker(marker_id);


--
-- Name: genotype_region_marker_id_ns_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY genotype_region
    ADD CONSTRAINT genotype_region_marker_id_ns_fkey FOREIGN KEY (marker_id_ns) REFERENCES sgn.marker(marker_id);


--
-- Name: genotype_region_marker_id_sn_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY genotype_region
    ADD CONSTRAINT genotype_region_marker_id_sn_fkey FOREIGN KEY (marker_id_sn) REFERENCES sgn.marker(marker_id);


--
-- Name: genotype_region_marker_id_ss_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY genotype_region
    ADD CONSTRAINT genotype_region_marker_id_ss_fkey FOREIGN KEY (marker_id_ss) REFERENCES sgn.marker(marker_id);


--
-- Name: genotype_region_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY genotype_region
    ADD CONSTRAINT genotype_region_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: genotype_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY genotype
    ADD CONSTRAINT genotype_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: germplasm_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY germplasm
    ADD CONSTRAINT germplasm_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: germplasm_individual_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY germplasm
    ADD CONSTRAINT germplasm_individual_id_fkey FOREIGN KEY (individual_id) REFERENCES individual(individual_id);


--
-- Name: germplasm_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY germplasm
    ADD CONSTRAINT germplasm_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_accession_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual
    ADD CONSTRAINT individual_accession_id_fkey FOREIGN KEY (accession_id) REFERENCES sgn.accession(accession_id);


--
-- Name: individual_alias_individual_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_alias
    ADD CONSTRAINT individual_alias_individual_id_fkey FOREIGN KEY (individual_id) REFERENCES individual(individual_id);


--
-- Name: individual_alias_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_alias
    ADD CONSTRAINT individual_alias_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_allele_allele_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_allele
    ADD CONSTRAINT individual_allele_allele_id_fkey FOREIGN KEY (allele_id) REFERENCES allele(allele_id);


--
-- Name: individual_allele_individual_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_allele
    ADD CONSTRAINT individual_allele_individual_id_fkey FOREIGN KEY (individual_id) REFERENCES individual(individual_id);


--
-- Name: individual_allele_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_allele
    ADD CONSTRAINT individual_allele_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_common_name_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual
    ADD CONSTRAINT individual_common_name_id_fkey FOREIGN KEY (common_name_id) REFERENCES sgn.common_name(common_name_id);


--
-- Name: individual_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref
    ADD CONSTRAINT individual_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence_evidence_code_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref_evidence
    ADD CONSTRAINT individual_dbxref_evidence_evidence_code_fkey FOREIGN KEY (evidence_code) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence_evidence_description_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref_evidence
    ADD CONSTRAINT individual_dbxref_evidence_evidence_description_fkey FOREIGN KEY (evidence_description) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence_evidence_with_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref_evidence
    ADD CONSTRAINT individual_dbxref_evidence_evidence_with_fkey FOREIGN KEY (evidence_with) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence_hi_individual_dbxref_evidence_i_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref_evidence_history
    ADD CONSTRAINT individual_dbxref_evidence_hi_individual_dbxref_evidence_i_fkey FOREIGN KEY (individual_dbxref_evidence_id) REFERENCES individual_dbxref_evidence(individual_dbxref_evidence_id);


--
-- Name: individual_dbxref_evidence_history_evidence_code_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref_evidence_history
    ADD CONSTRAINT individual_dbxref_evidence_history_evidence_code_fkey FOREIGN KEY (evidence_code) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence_history_evidence_description_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref_evidence_history
    ADD CONSTRAINT individual_dbxref_evidence_history_evidence_description_fkey FOREIGN KEY (evidence_description) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence_history_evidence_with_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref_evidence_history
    ADD CONSTRAINT individual_dbxref_evidence_history_evidence_with_fkey FOREIGN KEY (evidence_with) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence_history_individual_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref_evidence_history
    ADD CONSTRAINT individual_dbxref_evidence_history_individual_dbxref_id_fkey FOREIGN KEY (individual_dbxref_id) REFERENCES individual_dbxref(individual_dbxref_id);


--
-- Name: individual_dbxref_evidence_history_reference_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref_evidence_history
    ADD CONSTRAINT individual_dbxref_evidence_history_reference_id_fkey FOREIGN KEY (reference_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence_history_relationship_type_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref_evidence_history
    ADD CONSTRAINT individual_dbxref_evidence_history_relationship_type_fkey FOREIGN KEY (relationship_type) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence_history_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref_evidence_history
    ADD CONSTRAINT individual_dbxref_evidence_history_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_dbxref_evidence_history_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref_evidence_history
    ADD CONSTRAINT individual_dbxref_evidence_history_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_dbxref_evidence_individual_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref_evidence
    ADD CONSTRAINT individual_dbxref_evidence_individual_dbxref_id_fkey FOREIGN KEY (individual_dbxref_id) REFERENCES individual_dbxref(individual_dbxref_id);


--
-- Name: individual_dbxref_evidence_reference_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref_evidence
    ADD CONSTRAINT individual_dbxref_evidence_reference_id_fkey FOREIGN KEY (reference_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence_relationship_type_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref_evidence
    ADD CONSTRAINT individual_dbxref_evidence_relationship_type_fkey FOREIGN KEY (relationship_type) REFERENCES public.dbxref(dbxref_id);


--
-- Name: individual_dbxref_evidence_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref_evidence
    ADD CONSTRAINT individual_dbxref_evidence_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_dbxref_evidence_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref_evidence
    ADD CONSTRAINT individual_dbxref_evidence_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_dbxref_individual_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref
    ADD CONSTRAINT individual_dbxref_individual_id_fkey FOREIGN KEY (individual_id) REFERENCES individual(individual_id);


--
-- Name: individual_dbxref_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_dbxref
    ADD CONSTRAINT individual_dbxref_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_history_individual_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_history
    ADD CONSTRAINT individual_history_individual_id_fkey FOREIGN KEY (individual_id) REFERENCES individual(individual_id) ON DELETE CASCADE;


--
-- Name: individual_history_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_history
    ADD CONSTRAINT individual_history_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_history_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_history
    ADD CONSTRAINT individual_history_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_image_image_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_image
    ADD CONSTRAINT individual_image_image_id_fkey FOREIGN KEY (image_id) REFERENCES metadata.md_image(image_id);


--
-- Name: individual_image_individual_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_image
    ADD CONSTRAINT individual_image_individual_id_fkey FOREIGN KEY (individual_id) REFERENCES individual(individual_id);


--
-- Name: individual_image_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_image
    ADD CONSTRAINT individual_image_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_locus_individual_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_locus
    ADD CONSTRAINT individual_locus_individual_id_fkey FOREIGN KEY (individual_id) REFERENCES individual(individual_id);


--
-- Name: individual_locus_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_locus
    ADD CONSTRAINT individual_locus_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES locus(locus_id);


--
-- Name: individual_locus_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual_locus
    ADD CONSTRAINT individual_locus_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_population_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual
    ADD CONSTRAINT individual_population_id_fkey FOREIGN KEY (population_id) REFERENCES population(population_id) ON DELETE CASCADE;


--
-- Name: individual_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual
    ADD CONSTRAINT individual_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: individual_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY individual
    ADD CONSTRAINT individual_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: is_public_owner_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY is_public
    ADD CONSTRAINT is_public_owner_id_fkey FOREIGN KEY (owner_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: is_public_population_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY is_public
    ADD CONSTRAINT is_public_population_id_fkey FOREIGN KEY (population_id) REFERENCES population(population_id) ON DELETE CASCADE;


--
-- Name: locus2locus_evidence_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus2locus
    ADD CONSTRAINT locus2locus_evidence_id_fkey FOREIGN KEY (evidence_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus2locus_object_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus2locus
    ADD CONSTRAINT locus2locus_object_id_fkey FOREIGN KEY (object_id) REFERENCES locus(locus_id);


--
-- Name: locus2locus_reference_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus2locus
    ADD CONSTRAINT locus2locus_reference_id_fkey FOREIGN KEY (reference_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus2locus_relationship_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus2locus
    ADD CONSTRAINT locus2locus_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus2locus_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus2locus
    ADD CONSTRAINT locus2locus_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus2locus_subject_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus2locus
    ADD CONSTRAINT locus2locus_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES locus(locus_id);


--
-- Name: locus_alias_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_alias
    ADD CONSTRAINT locus_alias_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES locus(locus_id);


--
-- Name: locus_alias_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_alias
    ADD CONSTRAINT locus_alias_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_common_name_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus
    ADD CONSTRAINT locus_common_name_id_fkey FOREIGN KEY (common_name_id) REFERENCES sgn.common_name(common_name_id);


--
-- Name: locus_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref
    ADD CONSTRAINT locus_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence_evidence_code_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref_evidence
    ADD CONSTRAINT locus_dbxref_evidence_evidence_code_id_fkey FOREIGN KEY (evidence_code_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence_evidence_description_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref_evidence
    ADD CONSTRAINT locus_dbxref_evidence_evidence_description_id_fkey FOREIGN KEY (evidence_description_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence_evidence_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref_evidence
    ADD CONSTRAINT locus_dbxref_evidence_evidence_relationship_type_id_fkey FOREIGN KEY (relationship_type_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence_evidence_with_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref_evidence
    ADD CONSTRAINT locus_dbxref_evidence_evidence_with_fkey FOREIGN KEY (evidence_with) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence_history_evidence_code_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref_evidence_history
    ADD CONSTRAINT locus_dbxref_evidence_history_evidence_code_fkey FOREIGN KEY (evidence_code) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence_history_evidence_description_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref_evidence_history
    ADD CONSTRAINT locus_dbxref_evidence_history_evidence_description_fkey FOREIGN KEY (evidence_description) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence_history_evidence_with_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref_evidence_history
    ADD CONSTRAINT locus_dbxref_evidence_history_evidence_with_fkey FOREIGN KEY (evidence_with) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence_history_locus_dbxref_evidence_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref_evidence_history
    ADD CONSTRAINT locus_dbxref_evidence_history_locus_dbxref_evidence_id_fkey FOREIGN KEY (locus_dbxref_evidence_id) REFERENCES locus_dbxref_evidence(locus_dbxref_evidence_id);


--
-- Name: locus_dbxref_evidence_history_locus_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref_evidence_history
    ADD CONSTRAINT locus_dbxref_evidence_history_locus_dbxref_id_fkey FOREIGN KEY (locus_dbxref_id) REFERENCES locus_dbxref(locus_dbxref_id);


--
-- Name: locus_dbxref_evidence_history_reference_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref_evidence_history
    ADD CONSTRAINT locus_dbxref_evidence_history_reference_id_fkey FOREIGN KEY (reference_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence_history_relationship_type_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref_evidence_history
    ADD CONSTRAINT locus_dbxref_evidence_history_relationship_type_fkey FOREIGN KEY (relationship_type) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence_history_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref_evidence_history
    ADD CONSTRAINT locus_dbxref_evidence_history_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_dbxref_evidence_history_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref_evidence_history
    ADD CONSTRAINT locus_dbxref_evidence_history_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_dbxref_evidence_locus_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref_evidence
    ADD CONSTRAINT locus_dbxref_evidence_locus_dbxref_id_fkey FOREIGN KEY (locus_dbxref_id) REFERENCES locus_dbxref(locus_dbxref_id);


--
-- Name: locus_dbxref_evidence_reference_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref_evidence
    ADD CONSTRAINT locus_dbxref_evidence_reference_id_fkey FOREIGN KEY (reference_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locus_dbxref_evidence_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref_evidence
    ADD CONSTRAINT locus_dbxref_evidence_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_dbxref_evidence_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref_evidence
    ADD CONSTRAINT locus_dbxref_evidence_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_dbxref_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref
    ADD CONSTRAINT locus_dbxref_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES locus(locus_id);


--
-- Name: locus_dbxref_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_dbxref
    ADD CONSTRAINT locus_dbxref_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_history_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_history
    ADD CONSTRAINT locus_history_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES locus(locus_id) ON DELETE CASCADE;


--
-- Name: locus_history_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_history
    ADD CONSTRAINT locus_history_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_history_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_history
    ADD CONSTRAINT locus_history_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_image_image_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_image
    ADD CONSTRAINT locus_image_image_id_fkey FOREIGN KEY (image_id) REFERENCES metadata.md_image(image_id);


--
-- Name: locus_image_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_image
    ADD CONSTRAINT locus_image_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES locus(locus_id);


--
-- Name: locus_image_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_image
    ADD CONSTRAINT locus_image_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_marker_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_marker
    ADD CONSTRAINT locus_marker_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES locus(locus_id);


--
-- Name: locus_marker_marker_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_marker
    ADD CONSTRAINT locus_marker_marker_id_fkey FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: locus_marker_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_marker
    ADD CONSTRAINT locus_marker_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_organism_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus
    ADD CONSTRAINT locus_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id);


--
-- Name: locus_owner_granted_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_owner
    ADD CONSTRAINT locus_owner_granted_by_fkey FOREIGN KEY (granted_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_owner_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_owner
    ADD CONSTRAINT locus_owner_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES locus(locus_id) ON DELETE CASCADE;


--
-- Name: locus_owner_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_owner
    ADD CONSTRAINT locus_owner_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_pub_ranking_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_pub_ranking
    ADD CONSTRAINT locus_pub_ranking_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES locus(locus_id);


--
-- Name: locus_pub_ranking_pub_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_pub_ranking
    ADD CONSTRAINT locus_pub_ranking_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id);


--
-- Name: locus_pub_ranking_validate_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_pub_ranking_validate
    ADD CONSTRAINT locus_pub_ranking_validate_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES locus(locus_id);


--
-- Name: locus_pub_ranking_validate_pub_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_pub_ranking_validate
    ADD CONSTRAINT locus_pub_ranking_validate_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id);


--
-- Name: locus_registry_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_registry
    ADD CONSTRAINT locus_registry_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES locus(locus_id);


--
-- Name: locus_registry_registry_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_registry
    ADD CONSTRAINT locus_registry_registry_id_fkey FOREIGN KEY (registry_id) REFERENCES registry(registry_id);


--
-- Name: locus_registry_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_registry
    ADD CONSTRAINT locus_registry_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus
    ADD CONSTRAINT locus_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_unigene_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_unigene
    ADD CONSTRAINT locus_unigene_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES locus(locus_id);


--
-- Name: locus_unigene_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_unigene
    ADD CONSTRAINT locus_unigene_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locus_unigene_unigene_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus_unigene
    ADD CONSTRAINT locus_unigene_unigene_id_fkey FOREIGN KEY (unigene_id) REFERENCES sgn.unigene(unigene_id);


--
-- Name: locus_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locus
    ADD CONSTRAINT locus_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locusgroup_member_evidence_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locusgroup_member
    ADD CONSTRAINT locusgroup_member_evidence_id_fkey FOREIGN KEY (evidence_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: locusgroup_member_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locusgroup_member
    ADD CONSTRAINT locusgroup_member_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES locus(locus_id) ON DELETE CASCADE;


--
-- Name: locusgroup_member_locusgroup_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locusgroup_member
    ADD CONSTRAINT locusgroup_member_locusgroup_id_fkey FOREIGN KEY (locusgroup_id) REFERENCES locusgroup(locusgroup_id);


--
-- Name: locusgroup_member_reference_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locusgroup_member
    ADD CONSTRAINT locusgroup_member_reference_id_fkey FOREIGN KEY (reference_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: locusgroup_member_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locusgroup_member
    ADD CONSTRAINT locusgroup_member_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: locusgroup_relationship_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locusgroup
    ADD CONSTRAINT locusgroup_relationship_id_fkey FOREIGN KEY (relationship_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: locusgroup_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY locusgroup
    ADD CONSTRAINT locusgroup_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: nd_experiment_md_files_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_md_files
    ADD CONSTRAINT nd_experiment_md_files_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES public.nd_experiment(nd_experiment_id);


--
-- Name: phenotype_user_trait_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenotype_user_trait
    ADD CONSTRAINT phenotype_user_trait_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES public.phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_user_trait_user_trait_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY phenotype_user_trait
    ADD CONSTRAINT phenotype_user_trait_user_trait_id_fkey FOREIGN KEY (user_trait_id) REFERENCES user_trait(user_trait_id);


--
-- Name: polymorphic_fragment_flanking_marker1_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY polymorphic_fragment
    ADD CONSTRAINT polymorphic_fragment_flanking_marker1_id_fkey FOREIGN KEY (flanking_marker1_id) REFERENCES sgn.marker(marker_id);


--
-- Name: polymorphic_fragment_flanking_marker2_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY polymorphic_fragment
    ADD CONSTRAINT polymorphic_fragment_flanking_marker2_id_fkey FOREIGN KEY (flanking_marker2_id) REFERENCES sgn.marker(marker_id);


--
-- Name: polymorphic_fragment_genotype_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY polymorphic_fragment
    ADD CONSTRAINT polymorphic_fragment_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES genotype(genotype_id);


--
-- Name: polymorphic_fragment_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY polymorphic_fragment
    ADD CONSTRAINT polymorphic_fragment_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: population_background_accession_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY population
    ADD CONSTRAINT population_background_accession_id_fkey FOREIGN KEY (background_accession_id) REFERENCES sgn.accession(accession_id);


--
-- Name: population_common_name_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY population
    ADD CONSTRAINT population_common_name_id_fkey FOREIGN KEY (common_name_id) REFERENCES sgn.common_name(common_name_id);


--
-- Name: population_cross_type_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY population
    ADD CONSTRAINT population_cross_type_id_fkey FOREIGN KEY (cross_type_id) REFERENCES cross_type(cross_type_id);


--
-- Name: population_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY population_dbxref
    ADD CONSTRAINT population_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE CASCADE;


--
-- Name: population_dbxref_population_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY population_dbxref
    ADD CONSTRAINT population_dbxref_population_id_fkey FOREIGN KEY (population_id) REFERENCES population(population_id) ON DELETE CASCADE;


--
-- Name: population_dbxref_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY population_dbxref
    ADD CONSTRAINT population_dbxref_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id) ON DELETE SET NULL;


--
-- Name: population_donor_parent_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY population
    ADD CONSTRAINT population_donor_parent_id_fkey FOREIGN KEY (donor_parent_id) REFERENCES sgn.accession(accession_id);


--
-- Name: population_female_parent_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY population
    ADD CONSTRAINT population_female_parent_id_fkey FOREIGN KEY (female_parent_id) REFERENCES sgn.accession(accession_id);


--
-- Name: population_male_parent_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY population
    ADD CONSTRAINT population_male_parent_id_fkey FOREIGN KEY (male_parent_id) REFERENCES sgn.accession(accession_id);


--
-- Name: population_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY population
    ADD CONSTRAINT population_person_id_fkey FOREIGN KEY (person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: population_recurrent_parent_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY population
    ADD CONSTRAINT population_recurrent_parent_id_fkey FOREIGN KEY (recurrent_parent_id) REFERENCES sgn.accession(accession_id);


--
-- Name: population_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY population
    ADD CONSTRAINT population_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: pub_curator_assigned_to_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY pub_curator
    ADD CONSTRAINT pub_curator_assigned_to_fkey FOREIGN KEY (assigned_to) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: pub_curator_curated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY pub_curator
    ADD CONSTRAINT pub_curator_curated_by_fkey FOREIGN KEY (curated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: pub_curator_pub_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY pub_curator
    ADD CONSTRAINT pub_curator_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES public.pub(pub_id);


--
-- Name: pub_curator_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY pub_curator
    ADD CONSTRAINT pub_curator_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: registry_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY registry
    ADD CONSTRAINT registry_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: registry_updated_by_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY registry
    ADD CONSTRAINT registry_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: stock_allele_allele_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY stock_allele
    ADD CONSTRAINT stock_allele_allele_id_fkey FOREIGN KEY (allele_id) REFERENCES allele(allele_id);


--
-- Name: stock_allele_metadata_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY stock_allele
    ADD CONSTRAINT stock_allele_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: stock_allele_stock_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY stock_allele
    ADD CONSTRAINT stock_allele_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id);


--
-- Name: stock_image_image_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY stock_image
    ADD CONSTRAINT stock_image_image_id_fkey FOREIGN KEY (image_id) REFERENCES metadata.md_image(image_id);


--
-- Name: stock_image_metadata_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY stock_image
    ADD CONSTRAINT stock_image_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: stock_image_stock_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY stock_image
    ADD CONSTRAINT stock_image_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id);


--
-- Name: stock_owner_metadata_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY stock_owner
    ADD CONSTRAINT stock_owner_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: stock_owner_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY stock_owner
    ADD CONSTRAINT stock_owner_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: stock_owner_stock_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY stock_owner
    ADD CONSTRAINT stock_owner_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id);


--
-- Name: tomato_il_bin_n_marker_n_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY tomato_il_bin
    ADD CONSTRAINT tomato_il_bin_n_marker_n_fkey FOREIGN KEY (n_marker_n) REFERENCES sgn.marker(marker_id);


--
-- Name: tomato_il_bin_n_marker_s_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY tomato_il_bin
    ADD CONSTRAINT tomato_il_bin_n_marker_s_fkey FOREIGN KEY (n_marker_s) REFERENCES sgn.marker(marker_id);


--
-- Name: tomato_il_bin_s_marker_n_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY tomato_il_bin
    ADD CONSTRAINT tomato_il_bin_s_marker_n_fkey FOREIGN KEY (s_marker_n) REFERENCES sgn.marker(marker_id);


--
-- Name: tomato_il_bin_s_marker_s_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY tomato_il_bin
    ADD CONSTRAINT tomato_il_bin_s_marker_s_fkey FOREIGN KEY (s_marker_s) REFERENCES sgn.marker(marker_id);


--
-- Name: user_trait_cv_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY user_trait
    ADD CONSTRAINT user_trait_cv_id_fkey FOREIGN KEY (cv_id) REFERENCES public.cv(cv_id);


--
-- Name: user_trait_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY user_trait
    ADD CONSTRAINT user_trait_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id) ON DELETE SET NULL;


--
-- Name: user_trait_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY user_trait
    ADD CONSTRAINT user_trait_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: user_trait_unit_population_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY user_trait_unit
    ADD CONSTRAINT user_trait_unit_population_id_fkey FOREIGN KEY (population_id) REFERENCES population(population_id) ON DELETE CASCADE;


--
-- Name: user_trait_unit_unit_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY user_trait_unit
    ADD CONSTRAINT user_trait_unit_unit_id_fkey FOREIGN KEY (unit_id) REFERENCES unit(unit_id) ON DELETE CASCADE;


--
-- Name: user_trait_unit_user_trait_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY user_trait_unit
    ADD CONSTRAINT user_trait_unit_user_trait_id_fkey FOREIGN KEY (user_trait_id) REFERENCES user_trait(user_trait_id) ON DELETE CASCADE;


--
-- Name: variant_locus_id_fkey; Type: FK CONSTRAINT; Schema: phenome; Owner: postgres
--

ALTER TABLE ONLY variant
    ADD CONSTRAINT variant_locus_id_fkey FOREIGN KEY (locus_id) REFERENCES locus(locus_id);


SET search_path = physical, pg_catalog;

--
-- Name: bac_associations_bac_id_fkey; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY bac_associations
    ADD CONSTRAINT bac_associations_bac_id_fkey FOREIGN KEY (bac_id) REFERENCES genomic.clone(clone_id);


--
-- Name: computational_associations_clone_id_fkey; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY computational_associations
    ADD CONSTRAINT computational_associations_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: computational_associations_clone_id_fkey1; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY computational_associations
    ADD CONSTRAINT computational_associations_clone_id_fkey1 FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: computational_associations_marker_id_fkey; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY computational_associations
    ADD CONSTRAINT computational_associations_marker_id_fkey FOREIGN KEY (marker_id) REFERENCES sgn.deprecated_markers(marker_id);


--
-- Name: computational_associations_marker_id_fkey1; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY computational_associations
    ADD CONSTRAINT computational_associations_marker_id_fkey1 FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: fpc_data_bac_contig_id_left_fkey; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY fpc_data
    ADD CONSTRAINT fpc_data_bac_contig_id_left_fkey FOREIGN KEY (bac_contig_id_left) REFERENCES bac_contigs(bac_contig_id);


--
-- Name: fpc_data_bac_contig_id_right_fkey; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY fpc_data
    ADD CONSTRAINT fpc_data_bac_contig_id_right_fkey FOREIGN KEY (bac_contig_id_right) REFERENCES bac_contigs(bac_contig_id);


--
-- Name: manual_associations_clone_id_fkey; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY manual_associations
    ADD CONSTRAINT manual_associations_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: manual_associations_clone_id_fkey1; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY manual_associations
    ADD CONSTRAINT manual_associations_clone_id_fkey1 FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: manual_associations_marker_id_fkey; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY manual_associations
    ADD CONSTRAINT manual_associations_marker_id_fkey FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: manual_associations_marker_id_fkey1; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY manual_associations
    ADD CONSTRAINT manual_associations_marker_id_fkey1 FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: manual_associations_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY manual_associations
    ADD CONSTRAINT manual_associations_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: manual_associations_sp_person_id_fkey1; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY manual_associations
    ADD CONSTRAINT manual_associations_sp_person_id_fkey1 FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: marker_id_fk; Type: FK CONSTRAINT; Schema: physical; Owner: postgres
--

ALTER TABLE ONLY probe_markers
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


SET search_path = public, pg_catalog;

--
-- Name: analysisfeature_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysisfeature
    ADD CONSTRAINT analysisfeature_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES analysis(analysis_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysisfeature_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysisfeature
    ADD CONSTRAINT analysisfeature_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysisprop_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysisprop
    ADD CONSTRAINT analysisprop_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES analysis(analysis_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysisprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY analysisprop
    ADD CONSTRAINT analysisprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: blastwatch_queries_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY blastwatch_queries
    ADD CONSTRAINT blastwatch_queries_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id) ON DELETE CASCADE;


--
-- Name: blastwatch_results_blastwatch_queries_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY blastwatch_results
    ADD CONSTRAINT blastwatch_results_blastwatch_queries_id_fkey FOREIGN KEY (blastwatch_queries_id) REFERENCES blastwatch_queries(blastwatch_queries_id) ON DELETE CASCADE;


--
-- Name: bug_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bug
    ADD CONSTRAINT bug_created_by_fkey FOREIGN KEY (created_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: bug_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bug
    ADD CONSTRAINT bug_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: bug_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY bug
    ADD CONSTRAINT bug_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: contact_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY contact_relationship
    ADD CONSTRAINT contact_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: contact_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY contact_relationship
    ADD CONSTRAINT contact_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: contact_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY contact_relationship
    ADD CONSTRAINT contact_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: contact_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY contact
    ADD CONSTRAINT contact_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id);


--
-- Name: cvterm_cv_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm
    ADD CONSTRAINT cvterm_cv_id_fkey FOREIGN KEY (cv_id) REFERENCES cv(cv_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_dbxref_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm_dbxref
    ADD CONSTRAINT cvterm_dbxref_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm_dbxref
    ADD CONSTRAINT cvterm_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm
    ADD CONSTRAINT cvterm_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermpath_cv_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermpath
    ADD CONSTRAINT cvtermpath_cv_id_fkey FOREIGN KEY (cv_id) REFERENCES cv(cv_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermpath_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermpath
    ADD CONSTRAINT cvtermpath_object_id_fkey FOREIGN KEY (object_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermpath_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermpath
    ADD CONSTRAINT cvtermpath_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermpath_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermpath
    ADD CONSTRAINT cvtermpath_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermprop_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermprop
    ADD CONSTRAINT cvtermprop_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: cvtermprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermprop
    ADD CONSTRAINT cvtermprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: cvtermsynonym_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermsynonym
    ADD CONSTRAINT cvtermsynonym_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermsynonym_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY cvtermsynonym
    ADD CONSTRAINT cvtermsynonym_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: dbxref_db_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dbxref
    ADD CONSTRAINT dbxref_db_id_fkey FOREIGN KEY (db_id) REFERENCES db(db_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: dbxrefprop_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dbxrefprop
    ADD CONSTRAINT dbxrefprop_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: dbxrefprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dbxrefprop
    ADD CONSTRAINT dbxrefprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: environment_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY environment_cvterm
    ADD CONSTRAINT environment_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: environment_cvterm_environment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY environment_cvterm
    ADD CONSTRAINT environment_cvterm_environment_id_fkey FOREIGN KEY (environment_id) REFERENCES environment(environment_id) ON DELETE CASCADE;


--
-- Name: enzyme_restriction_sites_enzyme_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY enzyme_restriction_sites
    ADD CONSTRAINT enzyme_restriction_sites_enzyme_id_fkey FOREIGN KEY (enzyme_id) REFERENCES sgn.enzymes(enzyme_id);


--
-- Name: feature_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm
    ADD CONSTRAINT feature_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm_dbxref
    ADD CONSTRAINT feature_cvterm_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_dbxref_feature_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm_dbxref
    ADD CONSTRAINT feature_cvterm_dbxref_feature_cvterm_id_fkey FOREIGN KEY (feature_cvterm_id) REFERENCES feature_cvterm(feature_cvterm_id) ON DELETE CASCADE;


--
-- Name: feature_cvterm_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm
    ADD CONSTRAINT feature_cvterm_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_pub_feature_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm_pub
    ADD CONSTRAINT feature_cvterm_pub_feature_cvterm_id_fkey FOREIGN KEY (feature_cvterm_id) REFERENCES feature_cvterm(feature_cvterm_id) ON DELETE CASCADE;


--
-- Name: feature_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm
    ADD CONSTRAINT feature_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvterm_pub
    ADD CONSTRAINT feature_cvterm_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvtermprop_feature_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvtermprop
    ADD CONSTRAINT feature_cvtermprop_feature_cvterm_id_fkey FOREIGN KEY (feature_cvterm_id) REFERENCES feature_cvterm(feature_cvterm_id) ON DELETE CASCADE;


--
-- Name: feature_cvtermprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_cvtermprop
    ADD CONSTRAINT feature_cvtermprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_dbxref
    ADD CONSTRAINT feature_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_dbxref_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_dbxref
    ADD CONSTRAINT feature_dbxref_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature
    ADD CONSTRAINT feature_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_genotype_chromosome_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_genotype
    ADD CONSTRAINT feature_genotype_chromosome_id_fkey FOREIGN KEY (chromosome_id) REFERENCES feature(feature_id) ON DELETE SET NULL;


--
-- Name: feature_genotype_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_genotype
    ADD CONSTRAINT feature_genotype_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: feature_genotype_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_genotype
    ADD CONSTRAINT feature_genotype_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE;


--
-- Name: feature_genotype_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_genotype
    ADD CONSTRAINT feature_genotype_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: feature_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature
    ADD CONSTRAINT feature_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_pub_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_pub
    ADD CONSTRAINT feature_pub_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_pub
    ADD CONSTRAINT feature_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationship
    ADD CONSTRAINT feature_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship_pub_feature_relationship_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationship_pub
    ADD CONSTRAINT feature_relationship_pub_feature_relationship_id_fkey FOREIGN KEY (feature_relationship_id) REFERENCES feature_relationship(feature_relationship_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationship_pub
    ADD CONSTRAINT feature_relationship_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationship
    ADD CONSTRAINT feature_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationship
    ADD CONSTRAINT feature_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationshipprop_feature_relationship_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationshipprop
    ADD CONSTRAINT feature_relationshipprop_feature_relationship_id_fkey FOREIGN KEY (feature_relationship_id) REFERENCES feature_relationship(feature_relationship_id) ON DELETE CASCADE;


--
-- Name: feature_relationshipprop_pub_feature_relationshipprop_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationshipprop_pub
    ADD CONSTRAINT feature_relationshipprop_pub_feature_relationshipprop_id_fkey FOREIGN KEY (feature_relationshipprop_id) REFERENCES feature_relationshipprop(feature_relationshipprop_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationshipprop_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationshipprop_pub
    ADD CONSTRAINT feature_relationshipprop_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationshipprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_relationshipprop
    ADD CONSTRAINT feature_relationshipprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_synonym_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_synonym
    ADD CONSTRAINT feature_synonym_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_synonym_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_synonym
    ADD CONSTRAINT feature_synonym_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_synonym_synonym_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature_synonym
    ADD CONSTRAINT feature_synonym_synonym_id_fkey FOREIGN KEY (synonym_id) REFERENCES synonym(synonym_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY feature
    ADD CONSTRAINT feature_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureloc_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureloc
    ADD CONSTRAINT featureloc_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureloc_pub_featureloc_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureloc_pub
    ADD CONSTRAINT featureloc_pub_featureloc_id_fkey FOREIGN KEY (featureloc_id) REFERENCES featureloc(featureloc_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureloc_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureloc_pub
    ADD CONSTRAINT featureloc_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureloc_srcfeature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureloc
    ADD CONSTRAINT featureloc_srcfeature_id_fkey FOREIGN KEY (srcfeature_id) REFERENCES feature(feature_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureprop_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureprop
    ADD CONSTRAINT featureprop_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureprop_pub_featureprop_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureprop_pub
    ADD CONSTRAINT featureprop_pub_featureprop_id_fkey FOREIGN KEY (featureprop_id) REFERENCES featureprop(featureprop_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureprop_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureprop_pub
    ADD CONSTRAINT featureprop_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY featureprop
    ADD CONSTRAINT featureprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: fpc_band_fpc_fingerprint_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_band
    ADD CONSTRAINT fpc_band_fpc_fingerprint_id_fkey FOREIGN KEY (fpc_fingerprint_id) REFERENCES fpc_fingerprint(fpc_fingerprint_id) ON DELETE CASCADE;


--
-- Name: fpc_build_fpc_fingerprint_fpc_build_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_build_fpc_fingerprint
    ADD CONSTRAINT fpc_build_fpc_fingerprint_fpc_build_id_fkey FOREIGN KEY (fpc_build_id) REFERENCES fpc_build(fpc_build_id) ON DELETE CASCADE;


--
-- Name: fpc_build_fpc_fingerprint_fpc_fingerprint_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_build_fpc_fingerprint
    ADD CONSTRAINT fpc_build_fpc_fingerprint_fpc_fingerprint_id_fkey FOREIGN KEY (fpc_fingerprint_id) REFERENCES fpc_fingerprint(fpc_fingerprint_id) ON DELETE CASCADE;


--
-- Name: fpc_build_fpc_series_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_build
    ADD CONSTRAINT fpc_build_fpc_series_id_fkey FOREIGN KEY (fpc_series_id) REFERENCES fpc_series(fpc_series_id);


--
-- Name: fpc_contig_clone_clone_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_contig_clone
    ADD CONSTRAINT fpc_contig_clone_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: fpc_contig_clone_fpc_contig_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_contig_clone
    ADD CONSTRAINT fpc_contig_clone_fpc_contig_id_fkey FOREIGN KEY (fpc_contig_id) REFERENCES fpc_contig(fpc_contig_id) ON DELETE CASCADE;


--
-- Name: fpc_contig_fpc_build_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_contig
    ADD CONSTRAINT fpc_contig_fpc_build_id_fkey FOREIGN KEY (fpc_build_id) REFERENCES fpc_build(fpc_build_id) ON DELETE CASCADE;


--
-- Name: fpc_fingerprint_clone_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_fingerprint
    ADD CONSTRAINT fpc_fingerprint_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id) ON DELETE CASCADE;


--
-- Name: fpc_fingerprint_enzyme_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY fpc_fingerprint
    ADD CONSTRAINT fpc_fingerprint_enzyme_id_fkey FOREIGN KEY (enzyme_id) REFERENCES sgn.enzymes(enzyme_id);


--
-- Name: genotype_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY genotype
    ADD CONSTRAINT genotype_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: genotypeprop_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY genotypeprop
    ADD CONSTRAINT genotypeprop_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: genotypeprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY genotypeprop
    ADD CONSTRAINT genotypeprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_contact_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_contact
    ADD CONSTRAINT nd_experiment_contact_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_contact_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_contact
    ADD CONSTRAINT nd_experiment_contact_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_dbxref
    ADD CONSTRAINT nd_experiment_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_dbxref_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_dbxref
    ADD CONSTRAINT nd_experiment_dbxref_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_genotype_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_genotype
    ADD CONSTRAINT nd_experiment_genotype_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_genotype_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_genotype
    ADD CONSTRAINT nd_experiment_genotype_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_nd_geolocation_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment
    ADD CONSTRAINT nd_experiment_nd_geolocation_id_fkey FOREIGN KEY (nd_geolocation_id) REFERENCES nd_geolocation(nd_geolocation_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_phenotype_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_phenotype
    ADD CONSTRAINT nd_experiment_phenotype_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_phenotype_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_phenotype
    ADD CONSTRAINT nd_experiment_phenotype_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES phenotype(phenotype_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_project_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_project
    ADD CONSTRAINT nd_experiment_project_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_project_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_project
    ADD CONSTRAINT nd_experiment_project_project_id_fkey FOREIGN KEY (project_id) REFERENCES project(project_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_protocol_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_protocol
    ADD CONSTRAINT nd_experiment_protocol_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_protocol_nd_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_protocol
    ADD CONSTRAINT nd_experiment_protocol_nd_protocol_id_fkey FOREIGN KEY (nd_protocol_id) REFERENCES nd_protocol(nd_protocol_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_pub_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_pub
    ADD CONSTRAINT nd_experiment_pub_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_pub
    ADD CONSTRAINT nd_experiment_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stock_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stock_dbxref
    ADD CONSTRAINT nd_experiment_stock_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stock_dbxref_nd_experiment_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stock_dbxref
    ADD CONSTRAINT nd_experiment_stock_dbxref_nd_experiment_stock_id_fkey FOREIGN KEY (nd_experiment_stock_id) REFERENCES nd_experiment_stock(nd_experiment_stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stock_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stock
    ADD CONSTRAINT nd_experiment_stock_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stock_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stock
    ADD CONSTRAINT nd_experiment_stock_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stock_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stock
    ADD CONSTRAINT nd_experiment_stock_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stockprop_nd_experiment_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stockprop
    ADD CONSTRAINT nd_experiment_stockprop_nd_experiment_stock_id_fkey FOREIGN KEY (nd_experiment_stock_id) REFERENCES nd_experiment_stock(nd_experiment_stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_stockprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment_stockprop
    ADD CONSTRAINT nd_experiment_stockprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experiment
    ADD CONSTRAINT nd_experiment_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experimentprop_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experimentprop
    ADD CONSTRAINT nd_experimentprop_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experimentprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_experimentprop
    ADD CONSTRAINT nd_experimentprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_geolocationprop_nd_geolocation_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_geolocationprop
    ADD CONSTRAINT nd_geolocationprop_nd_geolocation_id_fkey FOREIGN KEY (nd_geolocation_id) REFERENCES nd_geolocation(nd_geolocation_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_geolocationprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_geolocationprop
    ADD CONSTRAINT nd_geolocationprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocol_reagent_nd_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocol_reagent
    ADD CONSTRAINT nd_protocol_reagent_nd_protocol_id_fkey FOREIGN KEY (nd_protocol_id) REFERENCES nd_protocol(nd_protocol_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocol_reagent_reagent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocol_reagent
    ADD CONSTRAINT nd_protocol_reagent_reagent_id_fkey FOREIGN KEY (reagent_id) REFERENCES nd_reagent(nd_reagent_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocol_reagent_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocol_reagent
    ADD CONSTRAINT nd_protocol_reagent_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocol_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocol
    ADD CONSTRAINT nd_protocol_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocolprop_nd_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocolprop
    ADD CONSTRAINT nd_protocolprop_nd_protocol_id_fkey FOREIGN KEY (nd_protocol_id) REFERENCES nd_protocol(nd_protocol_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_protocolprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_protocolprop
    ADD CONSTRAINT nd_protocolprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagent_relationship_object_reagent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagent_relationship
    ADD CONSTRAINT nd_reagent_relationship_object_reagent_id_fkey FOREIGN KEY (object_reagent_id) REFERENCES nd_reagent(nd_reagent_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagent_relationship_subject_reagent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagent_relationship
    ADD CONSTRAINT nd_reagent_relationship_subject_reagent_id_fkey FOREIGN KEY (subject_reagent_id) REFERENCES nd_reagent(nd_reagent_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagent_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagent_relationship
    ADD CONSTRAINT nd_reagent_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagent_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagent
    ADD CONSTRAINT nd_reagent_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagentprop_nd_reagent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagentprop
    ADD CONSTRAINT nd_reagentprop_nd_reagent_id_fkey FOREIGN KEY (nd_reagent_id) REFERENCES nd_reagent(nd_reagent_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagentprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY nd_reagentprop
    ADD CONSTRAINT nd_reagentprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organism_dbxref
    ADD CONSTRAINT organism_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_dbxref_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organism_dbxref
    ADD CONSTRAINT organism_dbxref_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organism_relationship
    ADD CONSTRAINT organism_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES organism(organism_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organism_relationship
    ADD CONSTRAINT organism_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES organism(organism_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organism_relationship
    ADD CONSTRAINT organism_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_sgn_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organism
    ADD CONSTRAINT organism_sgn_organism_id_fkey FOREIGN KEY (sgn_organism_id) REFERENCES sgn.organism(organism_id);


--
-- Name: organismpath_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organismpath
    ADD CONSTRAINT organismpath_object_id_fkey FOREIGN KEY (object_id) REFERENCES organism(organism_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organismpath_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organismpath
    ADD CONSTRAINT organismpath_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES organism(organism_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organismpath_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organismpath
    ADD CONSTRAINT organismpath_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organismprop_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organismprop
    ADD CONSTRAINT organismprop_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organismprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY organismprop
    ADD CONSTRAINT organismprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: phendesc_environment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phendesc
    ADD CONSTRAINT phendesc_environment_id_fkey FOREIGN KEY (environment_id) REFERENCES environment(environment_id) ON DELETE CASCADE;


--
-- Name: phendesc_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phendesc
    ADD CONSTRAINT phendesc_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: phendesc_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phendesc
    ADD CONSTRAINT phendesc_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE;


--
-- Name: phendesc_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phendesc
    ADD CONSTRAINT phendesc_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phenotype_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype
    ADD CONSTRAINT phenotype_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL;


--
-- Name: phenotype_attr_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype
    ADD CONSTRAINT phenotype_attr_id_fkey FOREIGN KEY (attr_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL;


--
-- Name: phenotype_comparison_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison_cvterm
    ADD CONSTRAINT phenotype_comparison_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_cvterm_phenotype_comparison_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison_cvterm
    ADD CONSTRAINT phenotype_comparison_cvterm_phenotype_comparison_id_fkey FOREIGN KEY (phenotype_comparison_id) REFERENCES phenotype_comparison(phenotype_comparison_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison_cvterm
    ADD CONSTRAINT phenotype_comparison_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_environment1_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_environment1_id_fkey FOREIGN KEY (environment1_id) REFERENCES environment(environment_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_environment2_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_environment2_id_fkey FOREIGN KEY (environment2_id) REFERENCES environment(environment_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_genotype1_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_genotype1_id_fkey FOREIGN KEY (genotype1_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_genotype2_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_genotype2_id_fkey FOREIGN KEY (genotype2_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES organism(organism_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_phenotype1_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_phenotype1_id_fkey FOREIGN KEY (phenotype1_id) REFERENCES phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_phenotype2_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_phenotype2_id_fkey FOREIGN KEY (phenotype2_id) REFERENCES phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE;


--
-- Name: phenotype_cvalue_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype
    ADD CONSTRAINT phenotype_cvalue_id_fkey FOREIGN KEY (cvalue_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL;


--
-- Name: phenotype_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_cvterm
    ADD CONSTRAINT phenotype_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phenotype_cvterm_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype_cvterm
    ADD CONSTRAINT phenotype_cvterm_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_individual_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype
    ADD CONSTRAINT phenotype_individual_id_fkey FOREIGN KEY (individual_id) REFERENCES phenome.individual(individual_id) ON DELETE CASCADE;


--
-- Name: phenotype_observable_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype
    ADD CONSTRAINT phenotype_observable_id_fkey FOREIGN KEY (observable_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phenotype_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotype
    ADD CONSTRAINT phenotype_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id) ON DELETE SET NULL;


--
-- Name: phenotypeprop_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotypeprop
    ADD CONSTRAINT phenotypeprop_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES phenotype(phenotype_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: phenotypeprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenotypeprop
    ADD CONSTRAINT phenotypeprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: phenstatement_environment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenstatement
    ADD CONSTRAINT phenstatement_environment_id_fkey FOREIGN KEY (environment_id) REFERENCES environment(environment_id) ON DELETE CASCADE;


--
-- Name: phenstatement_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenstatement
    ADD CONSTRAINT phenstatement_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: phenstatement_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenstatement
    ADD CONSTRAINT phenstatement_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenstatement_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenstatement
    ADD CONSTRAINT phenstatement_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE;


--
-- Name: phenstatement_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phenstatement
    ADD CONSTRAINT phenstatement_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phylonode_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_dbxref
    ADD CONSTRAINT phylonode_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE;


--
-- Name: phylonode_dbxref_phylonode_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_dbxref
    ADD CONSTRAINT phylonode_dbxref_phylonode_id_fkey FOREIGN KEY (phylonode_id) REFERENCES phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode
    ADD CONSTRAINT phylonode_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE;


--
-- Name: phylonode_organism_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_organism
    ADD CONSTRAINT phylonode_organism_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES organism(organism_id) ON DELETE CASCADE;


--
-- Name: phylonode_organism_phylonode_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_organism
    ADD CONSTRAINT phylonode_organism_phylonode_id_fkey FOREIGN KEY (phylonode_id) REFERENCES phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode_parent_phylonode_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode
    ADD CONSTRAINT phylonode_parent_phylonode_id_fkey FOREIGN KEY (parent_phylonode_id) REFERENCES phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode_phylotree_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode
    ADD CONSTRAINT phylonode_phylotree_id_fkey FOREIGN KEY (phylotree_id) REFERENCES phylotree(phylotree_id) ON DELETE CASCADE;


--
-- Name: phylonode_pub_phylonode_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_pub
    ADD CONSTRAINT phylonode_pub_phylonode_id_fkey FOREIGN KEY (phylonode_id) REFERENCES phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_pub
    ADD CONSTRAINT phylonode_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE;


--
-- Name: phylonode_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode_relationship_phylotree_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_phylotree_id_fkey FOREIGN KEY (phylotree_id) REFERENCES phylotree(phylotree_id) ON DELETE CASCADE;


--
-- Name: phylonode_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonode_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode_relationship
    ADD CONSTRAINT phylonode_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phylonode_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonode
    ADD CONSTRAINT phylonode_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phylonodeprop_phylonode_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonodeprop
    ADD CONSTRAINT phylonodeprop_phylonode_id_fkey FOREIGN KEY (phylonode_id) REFERENCES phylonode(phylonode_id) ON DELETE CASCADE;


--
-- Name: phylonodeprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylonodeprop
    ADD CONSTRAINT phylonodeprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phylotree_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylotree
    ADD CONSTRAINT phylotree_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES analysis(analysis_id) ON DELETE CASCADE;


--
-- Name: phylotree_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylotree
    ADD CONSTRAINT phylotree_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE;


--
-- Name: phylotree_pub_phylotree_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylotree_pub
    ADD CONSTRAINT phylotree_pub_phylotree_id_fkey FOREIGN KEY (phylotree_id) REFERENCES phylotree(phylotree_id) ON DELETE CASCADE;


--
-- Name: phylotree_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylotree_pub
    ADD CONSTRAINT phylotree_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE;


--
-- Name: phylotree_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY phylotree
    ADD CONSTRAINT phylotree_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: project_contact_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_contact
    ADD CONSTRAINT project_contact_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: project_contact_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_contact
    ADD CONSTRAINT project_contact_project_id_fkey FOREIGN KEY (project_id) REFERENCES project(project_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: project_pub_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_pub
    ADD CONSTRAINT project_pub_project_id_fkey FOREIGN KEY (project_id) REFERENCES project(project_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: project_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_pub
    ADD CONSTRAINT project_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: project_relationship_object_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_relationship
    ADD CONSTRAINT project_relationship_object_project_id_fkey FOREIGN KEY (object_project_id) REFERENCES project(project_id) ON DELETE CASCADE;


--
-- Name: project_relationship_subject_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_relationship
    ADD CONSTRAINT project_relationship_subject_project_id_fkey FOREIGN KEY (subject_project_id) REFERENCES project(project_id) ON DELETE CASCADE;


--
-- Name: project_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_relationship
    ADD CONSTRAINT project_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE RESTRICT;


--
-- Name: projectprop_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY projectprop
    ADD CONSTRAINT projectprop_project_id_fkey FOREIGN KEY (project_id) REFERENCES project(project_id) ON DELETE CASCADE;


--
-- Name: projectprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY projectprop
    ADD CONSTRAINT projectprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: pub_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub_dbxref
    ADD CONSTRAINT pub_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_dbxref_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub_dbxref
    ADD CONSTRAINT pub_dbxref_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub_relationship
    ADD CONSTRAINT pub_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub_relationship
    ADD CONSTRAINT pub_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub_relationship
    ADD CONSTRAINT pub_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pub
    ADD CONSTRAINT pub_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pubabstract_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pubabstract
    ADD CONSTRAINT pubabstract_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE;


--
-- Name: pubauthor_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pubauthor
    ADD CONSTRAINT pubauthor_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pubprop_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pubprop
    ADD CONSTRAINT pubprop_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pubprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY pubprop
    ADD CONSTRAINT pubprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_cvterm
    ADD CONSTRAINT stock_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_cvterm
    ADD CONSTRAINT stock_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_cvterm_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_cvterm
    ADD CONSTRAINT stock_cvterm_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_cvtermprop_stock_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_cvtermprop
    ADD CONSTRAINT stock_cvtermprop_stock_cvterm_id_fkey FOREIGN KEY (stock_cvterm_id) REFERENCES stock_cvterm(stock_cvterm_id) ON DELETE CASCADE;


--
-- Name: stock_cvtermprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_cvtermprop
    ADD CONSTRAINT stock_cvtermprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_dbxref
    ADD CONSTRAINT stock_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock
    ADD CONSTRAINT stock_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_dbxref_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_dbxref
    ADD CONSTRAINT stock_dbxref_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_dbxrefprop_stock_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_dbxrefprop
    ADD CONSTRAINT stock_dbxrefprop_stock_dbxref_id_fkey FOREIGN KEY (stock_dbxref_id) REFERENCES stock_dbxref(stock_dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_dbxrefprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_dbxrefprop
    ADD CONSTRAINT stock_dbxrefprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_genotype_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_genotype
    ADD CONSTRAINT stock_genotype_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: stock_genotype_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_genotype
    ADD CONSTRAINT stock_genotype_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES stock(stock_id) ON DELETE CASCADE;


--
-- Name: stock_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock
    ADD CONSTRAINT stock_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_pub
    ADD CONSTRAINT stock_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_pub_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_pub
    ADD CONSTRAINT stock_pub_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship_cvterm
    ADD CONSTRAINT stock_relationship_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE RESTRICT;


--
-- Name: stock_relationship_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship_cvterm
    ADD CONSTRAINT stock_relationship_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE RESTRICT;


--
-- Name: stock_relationship_cvterm_stock_relationship_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship_cvterm
    ADD CONSTRAINT stock_relationship_cvterm_stock_relationship_id_fkey FOREIGN KEY (stock_relationship_id) REFERENCES stock_relationship(stock_relationship_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship
    ADD CONSTRAINT stock_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship_pub
    ADD CONSTRAINT stock_relationship_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship_pub_stock_relationship_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship_pub
    ADD CONSTRAINT stock_relationship_pub_stock_relationship_id_fkey FOREIGN KEY (stock_relationship_id) REFERENCES stock_relationship(stock_relationship_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship
    ADD CONSTRAINT stock_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock_relationship
    ADD CONSTRAINT stock_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stock
    ADD CONSTRAINT stock_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockcollection_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollection
    ADD CONSTRAINT stockcollection_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contact(contact_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockcollection_stock_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollection_stock
    ADD CONSTRAINT stockcollection_stock_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockcollection_stock_stockcollection_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollection_stock
    ADD CONSTRAINT stockcollection_stock_stockcollection_id_fkey FOREIGN KEY (stockcollection_id) REFERENCES stockcollection(stockcollection_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockcollection_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollection
    ADD CONSTRAINT stockcollection_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: stockcollectionprop_stockcollection_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollectionprop
    ADD CONSTRAINT stockcollectionprop_stockcollection_id_fkey FOREIGN KEY (stockcollection_id) REFERENCES stockcollection(stockcollection_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockcollectionprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockcollectionprop
    ADD CONSTRAINT stockcollectionprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id);


--
-- Name: stockprop_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockprop_pub
    ADD CONSTRAINT stockprop_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockprop_pub_stockprop_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockprop_pub
    ADD CONSTRAINT stockprop_pub_stockprop_id_fkey FOREIGN KEY (stockprop_id) REFERENCES stockprop(stockprop_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockprop_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockprop
    ADD CONSTRAINT stockprop_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stockprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY stockprop
    ADD CONSTRAINT stockprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: synonym_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY synonym
    ADD CONSTRAINT synonym_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: tmp_cds_handler_relationship_cds_row_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY tmp_cds_handler_relationship
    ADD CONSTRAINT tmp_cds_handler_relationship_cds_row_id_fkey FOREIGN KEY (cds_row_id) REFERENCES tmp_cds_handler(cds_row_id) ON DELETE CASCADE;


--
-- Name: unigene_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY unigene_dbxref
    ADD CONSTRAINT unigene_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id);


--
-- Name: unigene_dbxref_unigene_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY unigene_dbxref
    ADD CONSTRAINT unigene_dbxref_unigene_id_fkey FOREIGN KEY (unigene_id) REFERENCES sgn.unigene(unigene_id);


--
-- Name: unigene_relations_superceded_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY unigene_relations
    ADD CONSTRAINT unigene_relations_superceded_by_fkey FOREIGN KEY (superceded_by) REFERENCES sgn.unigene(unigene_id);


--
-- Name: unigene_relations_unigene_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY unigene_relations
    ADD CONSTRAINT unigene_relations_unigene_id_fkey FOREIGN KEY (unigene_id) REFERENCES sgn.unigene(unigene_id);


--
-- Name: unigene_signalp_cds_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY unigene_signalp
    ADD CONSTRAINT unigene_signalp_cds_id_fkey FOREIGN KEY (cds_id) REFERENCES sgn.cds(cds_id);


--
-- Name: unigene_signalp_unigene_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY unigene_signalp
    ADD CONSTRAINT unigene_signalp_unigene_id_fkey FOREIGN KEY (unigene_id) REFERENCES sgn.unigene(unigene_id);


SET search_path = sgn, pg_catalog;

--
-- Name: accession_chado_organism_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY accession
    ADD CONSTRAINT accession_chado_organism_id_fkey FOREIGN KEY (chado_organism_id) REFERENCES public.organism(organism_id);


--
-- Name: accession_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_exp_accession
    ADD CONSTRAINT accession_id_fk FOREIGN KEY (accession_id) REFERENCES accession(accession_id) MATCH FULL;


--
-- Name: accession_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY accession_names
    ADD CONSTRAINT accession_id_fk FOREIGN KEY (accession_id) REFERENCES accession(accession_id);


--
-- Name: accession_name_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY accession
    ADD CONSTRAINT accession_name_id_fk FOREIGN KEY (accession_name_id) REFERENCES accession_names(accession_name_id);


--
-- Name: apply_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_annotations
    ADD CONSTRAINT apply_id_fkey FOREIGN KEY (apply_id) REFERENCES unigene(unigene_id);


--
-- Name: author_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY manual_annotations
    ADD CONSTRAINT author_id_fk FOREIGN KEY (author_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: blast_db_blast_db_group_blast_db_group_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_db_blast_db_group
    ADD CONSTRAINT blast_db_blast_db_group_blast_db_group_id_fkey FOREIGN KEY (blast_db_group_id) REFERENCES blast_db_group(blast_db_group_id);


--
-- Name: blast_db_blast_db_group_blast_db_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_db_blast_db_group
    ADD CONSTRAINT blast_db_blast_db_group_blast_db_id_fkey FOREIGN KEY (blast_db_id) REFERENCES blast_db(blast_db_id);


--
-- Name: blast_db_blast_db_group_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_db
    ADD CONSTRAINT blast_db_blast_db_group_id_fkey FOREIGN KEY (blast_db_group_id) REFERENCES blast_db_group(blast_db_group_id);


--
-- Name: blast_db_organism_blast_db_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_db_organism
    ADD CONSTRAINT blast_db_organism_blast_db_id_fkey FOREIGN KEY (blast_db_id) REFERENCES blast_db(blast_db_id);


--
-- Name: blast_db_organism_organism_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_db_organism
    ADD CONSTRAINT blast_db_organism_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id);


--
-- Name: blast_hits_blast_annotation_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY blast_hits
    ADD CONSTRAINT blast_hits_blast_annotation_id_fkey FOREIGN KEY (blast_annotation_id) REFERENCES blast_annotations(blast_annotation_id) ON DELETE CASCADE;


--
-- Name: cds_protein_feature_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY cds
    ADD CONSTRAINT cds_protein_feature_id_fkey FOREIGN KEY (protein_feature_id) REFERENCES public.feature(feature_id);


--
-- Name: cds_unigene_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY cds
    ADD CONSTRAINT cds_unigene_id_fkey FOREIGN KEY (unigene_id) REFERENCES unigene(unigene_id) ON DELETE CASCADE;


--
-- Name: chadoprop_type_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY chadoprop
    ADD CONSTRAINT chadoprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: clone_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY seqread
    ADD CONSTRAINT clone_id_fk FOREIGN KEY (clone_id) REFERENCES clone(clone_id);


--
-- Name: clone_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY ests_mapped_by_clone
    ADD CONSTRAINT clone_id_fk FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: common_name_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY organism
    ADD CONSTRAINT common_name_id_fk FOREIGN KEY (common_name_id) REFERENCES common_name(common_name_id) MATCH FULL;


--
-- Name: confidence_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_marker_locations
    ADD CONSTRAINT confidence_fk FOREIGN KEY (confidence) REFERENCES deprecated_marker_confidences(legacy_conf_id);


--
-- Name: cvprop_cv_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY cvprop
    ADD CONSTRAINT cvprop_cv_id_fkey FOREIGN KEY (cv_id) REFERENCES public.cv(cv_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvprop_type_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY cvprop
    ADD CONSTRAINT cvprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: domain_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY domain
    ADD CONSTRAINT domain_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: domain_match_cds_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY domain_match
    ADD CONSTRAINT domain_match_cds_id_fkey FOREIGN KEY (cds_id) REFERENCES cds(cds_id) ON DELETE CASCADE;


--
-- Name: domain_match_domain_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY domain_match
    ADD CONSTRAINT domain_match_domain_id_fkey FOREIGN KEY (domain_id) REFERENCES domain(domain_id) ON DELETE CASCADE;


--
-- Name: domain_match_metadata_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY domain_match
    ADD CONSTRAINT domain_match_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata(metadata_id);


--
-- Name: domain_metadata_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY domain
    ADD CONSTRAINT domain_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata(metadata_id);


--
-- Name: enzyme_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_product
    ADD CONSTRAINT enzyme_id_fk FOREIGN KEY (enzyme_id) REFERENCES enzymes(enzyme_id) MATCH FULL;


--
-- Name: est_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY est_dbxref
    ADD CONSTRAINT est_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES public.dbxref(dbxref_id);


--
-- Name: est_dbxref_est_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY est_dbxref
    ADD CONSTRAINT est_dbxref_est_id_fkey FOREIGN KEY (est_id) REFERENCES est(est_id);


--
-- Name: est_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY qc_report
    ADD CONSTRAINT est_id_fk FOREIGN KEY (est_id) REFERENCES est(est_id) MATCH FULL;


--
-- Name: est_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY unigene_member
    ADD CONSTRAINT est_id_fkey FOREIGN KEY (est_id) REFERENCES est(est_id);


--
-- Name: experiment_type_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_experiment
    ADD CONSTRAINT experiment_type_id_fk FOREIGN KEY (experiment_type_id) REFERENCES experiment_type(experiment_type_id) MATCH FULL;


--
-- Name: facility_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY seqread
    ADD CONSTRAINT facility_id_fk FOREIGN KEY (facility_id) REFERENCES facility(facility_id);


--
-- Name: family_family_build_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY family
    ADD CONSTRAINT family_family_build_id_fkey FOREIGN KEY (family_build_id) REFERENCES family_build(family_build_id) ON DELETE CASCADE;


--
-- Name: family_member_family_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY family_member
    ADD CONSTRAINT family_member_family_id_fkey FOREIGN KEY (family_id) REFERENCES family(family_id) ON DELETE CASCADE;


--
-- Name: family_tree_family_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY family_tree
    ADD CONSTRAINT family_tree_family_id_fkey FOREIGN KEY (family_id) REFERENCES family(family_id);


--
-- Name: fish_experimenter_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY fish_result
    ADD CONSTRAINT fish_experimenter_id_fkey FOREIGN KEY (fish_experimenter_id) REFERENCES fish_experimenter(fish_experimenter_id);


--
-- Name: fish_result_attribution_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY fish_result
    ADD CONSTRAINT fish_result_attribution_id_fkey FOREIGN KEY (attribution_id) REFERENCES metadata.attribution(attribution_id);


--
-- Name: fish_result_clone_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY fish_result
    ADD CONSTRAINT fish_result_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: fish_result_image_fish_result_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY fish_result_image
    ADD CONSTRAINT fish_result_image_fish_result_id_fkey FOREIGN KEY (fish_result_id) REFERENCES fish_result(fish_result_id) ON DELETE CASCADE;


--
-- Name: fish_result_image_image_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY fish_result_image
    ADD CONSTRAINT fish_result_image_image_id_fkey FOREIGN KEY (image_id) REFERENCES metadata.md_image(image_id);


--
-- Name: foriegn; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY facility
    ADD CONSTRAINT foriegn FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: foriegn; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY submit_user
    ADD CONSTRAINT foriegn FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: forward_seq_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY rflp_markers
    ADD CONSTRAINT forward_seq_id_fk FOREIGN KEY (forward_seq_id) REFERENCES rflp_sequences(seq_id);


--
-- Name: interpro_go_go_accession_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY interpro_go
    ADD CONSTRAINT interpro_go_go_accession_fkey FOREIGN KEY (go_accession) REFERENCES go(go_accession) ON DELETE CASCADE;


--
-- Name: interpro_go_interpro_accession_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY interpro_go
    ADD CONSTRAINT interpro_go_interpro_accession_fkey FOREIGN KEY (interpro_accession) REFERENCES interpro(interpro_accession) ON DELETE CASCADE;


--
-- Name: lg_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_mapdata
    ADD CONSTRAINT lg_id_fk FOREIGN KEY (lg_id) REFERENCES deprecated_linkage_groups(lg_id) MATCH FULL;


--
-- Name: library_chado_organism_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY library
    ADD CONSTRAINT library_chado_organism_id_fkey FOREIGN KEY (chado_organism_id) REFERENCES public.organism(organism_id);


--
-- Name: library_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY clone
    ADD CONSTRAINT library_id_fk FOREIGN KEY (library_id) REFERENCES library(library_id);


--
-- Name: library_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY library
    ADD CONSTRAINT library_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: linkage_group_map_version_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY linkage_group
    ADD CONSTRAINT linkage_group_map_version_id_fkey FOREIGN KEY (map_version_id) REFERENCES map_version(map_version_id) ON DELETE CASCADE;


--
-- Name: linkage_group_north_location_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY linkage_group
    ADD CONSTRAINT linkage_group_north_location_id_fkey FOREIGN KEY (north_location_id) REFERENCES marker_location(location_id);


--
-- Name: linkage_group_south_location_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY linkage_group
    ADD CONSTRAINT linkage_group_south_location_id_fkey FOREIGN KEY (south_location_id) REFERENCES marker_location(location_id);


--
-- Name: loc_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_marker_locations
    ADD CONSTRAINT loc_id_fk FOREIGN KEY (loc_id) REFERENCES deprecated_mapdata(loc_id) ON DELETE CASCADE;


--
-- Name: map_ancestor_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY map
    ADD CONSTRAINT map_ancestor_fkey FOREIGN KEY (ancestor) REFERENCES accession(accession_id);


--
-- Name: map_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_map_cross
    ADD CONSTRAINT map_id_fk FOREIGN KEY (map_id) REFERENCES deprecated_maps(map_id) MATCH FULL;


--
-- Name: map_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_mapdata
    ADD CONSTRAINT map_id_fk FOREIGN KEY (map_id) REFERENCES deprecated_maps(map_id) MATCH FULL;


--
-- Name: map_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_linkage_groups
    ADD CONSTRAINT map_id_fk FOREIGN KEY (map_id) REFERENCES deprecated_maps(map_id) MATCH FULL;


--
-- Name: map_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_experiment
    ADD CONSTRAINT map_id_fk FOREIGN KEY (map_id) REFERENCES map(map_id) MATCH FULL;


--
-- Name: map_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY fish_result
    ADD CONSTRAINT map_id_fkey FOREIGN KEY (map_id) REFERENCES deprecated_maps(map_id);


--
-- Name: map_parent1_stock_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY map
    ADD CONSTRAINT map_parent1_stock_id_fkey FOREIGN KEY (parent1_stock_id) REFERENCES public.stock(stock_id);


--
-- Name: map_parent2_stock_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY map
    ADD CONSTRAINT map_parent2_stock_id_fkey FOREIGN KEY (parent2_stock_id) REFERENCES public.stock(stock_id);


--
-- Name: map_parent_1_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY map
    ADD CONSTRAINT map_parent_1_fkey FOREIGN KEY (parent_1) REFERENCES accession(accession_id);


--
-- Name: map_parent_2_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY map
    ADD CONSTRAINT map_parent_2_fkey FOREIGN KEY (parent_2) REFERENCES accession(accession_id);


--
-- Name: map_population_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY map
    ADD CONSTRAINT map_population_id_fkey FOREIGN KEY (population_id) REFERENCES phenome.population(population_id) ON DELETE CASCADE;


--
-- Name: map_population_stock_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY map
    ADD CONSTRAINT map_population_stock_id_fkey FOREIGN KEY (population_stock_id) REFERENCES public.stock(stock_id);


--
-- Name: map_version_default_threshold_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY map_version
    ADD CONSTRAINT map_version_default_threshold_fkey FOREIGN KEY (default_threshold) REFERENCES deprecated_marker_confidences(confidence_id);


--
-- Name: map_version_map_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY map_version
    ADD CONSTRAINT map_version_map_id_fkey FOREIGN KEY (map_id) REFERENCES map(map_id) ON DELETE CASCADE;


--
-- Name: map_version_metadata_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY map_version
    ADD CONSTRAINT map_version_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id) ON DELETE CASCADE;


--
-- Name: marker_alias_marker_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_alias
    ADD CONSTRAINT marker_alias_marker_id_fkey FOREIGN KEY (marker_id) REFERENCES marker(marker_id);


--
-- Name: marker_collectible_marker_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_collectible
    ADD CONSTRAINT marker_collectible_marker_id_fkey FOREIGN KEY (marker_id) REFERENCES marker(marker_id);


--
-- Name: marker_collectible_mc_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_collectible
    ADD CONSTRAINT marker_collectible_mc_id_fkey FOREIGN KEY (mc_id) REFERENCES marker_collection(mc_id);


--
-- Name: marker_derived_from_derived_from_source_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_derived_from
    ADD CONSTRAINT marker_derived_from_derived_from_source_id_fkey FOREIGN KEY (derived_from_source_id) REFERENCES derived_from_source(derived_from_source_id);


--
-- Name: marker_derived_from_marker_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_derived_from
    ADD CONSTRAINT marker_derived_from_marker_id_fkey FOREIGN KEY (marker_id) REFERENCES deprecated_markers(marker_id);


--
-- Name: marker_experiment_location_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_experiment
    ADD CONSTRAINT marker_experiment_location_id_fkey FOREIGN KEY (location_id) REFERENCES marker_location(location_id) ON DELETE CASCADE;


--
-- Name: marker_experiment_marker_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_experiment
    ADD CONSTRAINT marker_experiment_marker_id_fkey FOREIGN KEY (marker_id) REFERENCES marker(marker_id);


--
-- Name: marker_experiment_pcr_experiment_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_experiment
    ADD CONSTRAINT marker_experiment_pcr_experiment_id_fkey FOREIGN KEY (pcr_experiment_id) REFERENCES pcr_experiment(pcr_experiment_id);


--
-- Name: marker_experiment_rflp_experiment_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_experiment
    ADD CONSTRAINT marker_experiment_rflp_experiment_id_fkey FOREIGN KEY (rflp_experiment_id) REFERENCES rflp_markers(rflp_id);


--
-- Name: marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_marker_locations
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES deprecated_markers(marker_id) MATCH FULL;


--
-- Name: marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY cos_markers
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES marker(marker_id);


--
-- Name: marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY cosii_ortholog
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES marker(marker_id);


--
-- Name: marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY ests_mapped_by_clone
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES marker(marker_id);


--
-- Name: marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY p_markers
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES marker(marker_id);


--
-- Name: marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY primer_unigene_match
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES marker(marker_id);


--
-- Name: marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY rflp_markers
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES marker(marker_id);


--
-- Name: marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY ssr
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES marker(marker_id);


--
-- Name: marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY ssr_repeats
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES marker(marker_id);


--
-- Name: marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY tm_markers
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES marker(marker_id);


--
-- Name: marker_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_experiment
    ADD CONSTRAINT marker_id_fk FOREIGN KEY (marker_id) REFERENCES marker(marker_id) MATCH FULL;


--
-- Name: marker_location_confidence_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_location
    ADD CONSTRAINT marker_location_confidence_id_fkey FOREIGN KEY (confidence_id) REFERENCES marker_confidence(confidence_id);


--
-- Name: marker_location_lg_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_location
    ADD CONSTRAINT marker_location_lg_id_fkey FOREIGN KEY (lg_id) REFERENCES linkage_group(lg_id) ON DELETE CASCADE;


--
-- Name: marker_location_map_version_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY marker_location
    ADD CONSTRAINT marker_location_map_version_id_fkey FOREIGN KEY (map_version_id) REFERENCES map_version(map_version_id) ON DELETE CASCADE;


--
-- Name: marker_type_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_markers
    ADD CONSTRAINT marker_type_fk FOREIGN KEY (marker_type) REFERENCES deprecated_marker_types(marker_type_id) MATCH FULL;


--
-- Name: metadata_create_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY metadata
    ADD CONSTRAINT metadata_create_person_id_fkey FOREIGN KEY (create_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: metadata_modified_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY metadata
    ADD CONSTRAINT metadata_modified_person_id_fkey FOREIGN KEY (modified_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: organism_chado_organism_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY organism
    ADD CONSTRAINT organism_chado_organism_id_fkey FOREIGN KEY (chado_organism_id) REFERENCES public.organism(organism_id);


--
-- Name: organism_family_tax_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY organism
    ADD CONSTRAINT organism_family_tax_fkey FOREIGN KEY (family_tax) REFERENCES taxonomy(tax_id);


--
-- Name: organism_genus_tax_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY organism
    ADD CONSTRAINT organism_genus_tax_fkey FOREIGN KEY (genus_tax) REFERENCES taxonomy(tax_id);


--
-- Name: organism_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY accession
    ADD CONSTRAINT organism_id_fk FOREIGN KEY (organism_id) REFERENCES organism(organism_id) MATCH FULL;


--
-- Name: organism_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY deprecated_map_cross
    ADD CONSTRAINT organism_id_fk FOREIGN KEY (organism_id) REFERENCES organism(organism_id) MATCH FULL;


--
-- Name: organism_order_tax_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY organism
    ADD CONSTRAINT organism_order_tax_fkey FOREIGN KEY (order_tax) REFERENCES taxonomy(tax_id);


--
-- Name: organism_subfamily_tax_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY organism
    ADD CONSTRAINT organism_subfamily_tax_fkey FOREIGN KEY (subfamily_tax) REFERENCES taxonomy(tax_id);


--
-- Name: organismgroup_member_organism_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY organismgroup_member
    ADD CONSTRAINT organismgroup_member_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES public.organism(organism_id);


--
-- Name: organismgroup_member_organismgroup_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY organismgroup_member
    ADD CONSTRAINT organismgroup_member_organismgroup_id_fkey FOREIGN KEY (organismgroup_id) REFERENCES organismgroup(organismgroup_id);


--
-- Name: organismprop_common_name_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY common_nameprop
    ADD CONSTRAINT organismprop_common_name_id_fkey FOREIGN KEY (common_name_id) REFERENCES common_name(common_name_id);


--
-- Name: organismprop_type_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY common_nameprop
    ADD CONSTRAINT organismprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: pcr_exp_accession_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_product
    ADD CONSTRAINT pcr_exp_accession_id_fk FOREIGN KEY (pcr_exp_accession_id) REFERENCES pcr_exp_accession(pcr_exp_accession_id) ON DELETE CASCADE;


--
-- Name: pcr_exp_accession_stock_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_exp_accession
    ADD CONSTRAINT pcr_exp_accession_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id);


--
-- Name: pcr_experiment_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_exp_accession
    ADD CONSTRAINT pcr_experiment_id_fk FOREIGN KEY (pcr_experiment_id) REFERENCES pcr_experiment(pcr_experiment_id) ON DELETE CASCADE;


--
-- Name: pcr_experiment_sequence_pcr_experiment_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_experiment_sequence
    ADD CONSTRAINT pcr_experiment_sequence_pcr_experiment_id_fkey FOREIGN KEY (pcr_experiment_id) REFERENCES pcr_experiment(pcr_experiment_id) ON DELETE CASCADE;


--
-- Name: pcr_experiment_sequence_sequence_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_experiment_sequence
    ADD CONSTRAINT pcr_experiment_sequence_sequence_id_fkey FOREIGN KEY (sequence_id) REFERENCES sequence(sequence_id) ON DELETE CASCADE;


--
-- Name: pcr_experiment_sequence_type_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_experiment_sequence
    ADD CONSTRAINT pcr_experiment_sequence_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: pcr_experiment_stock_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_experiment
    ADD CONSTRAINT pcr_experiment_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id);


--
-- Name: primer_id_fwd_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_experiment
    ADD CONSTRAINT primer_id_fwd_fk FOREIGN KEY (primer_id_fwd) REFERENCES sequence(sequence_id) MATCH FULL;


--
-- Name: primer_id_rev_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY pcr_experiment
    ADD CONSTRAINT primer_id_rev_fk FOREIGN KEY (primer_id_rev) REFERENCES sequence(sequence_id) MATCH FULL;


--
-- Name: primer_unigene_match_unigene_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY primer_unigene_match
    ADD CONSTRAINT primer_unigene_match_unigene_id_fkey FOREIGN KEY (unigene_id) REFERENCES unigene(unigene_id);


--
-- Name: read_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY est
    ADD CONSTRAINT read_id_fkey FOREIGN KEY (read_id) REFERENCES seqread(read_id);


--
-- Name: reverse_seq_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY rflp_markers
    ADD CONSTRAINT reverse_seq_id_fk FOREIGN KEY (reverse_seq_id) REFERENCES rflp_sequences(seq_id);


--
-- Name: rflp_seq_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY rflp_unigene_associations
    ADD CONSTRAINT rflp_seq_id_fk FOREIGN KEY (rflp_seq_id) REFERENCES rflp_sequences(seq_id);


--
-- Name: snp_file_file_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY snp_file
    ADD CONSTRAINT snp_file_file_id_fkey FOREIGN KEY (file_id) REFERENCES metadata.md_files(file_id);


--
-- Name: snp_file_snp_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY snp_file
    ADD CONSTRAINT snp_file_snp_id_fkey FOREIGN KEY (snp_id) REFERENCES snp(snp_id);


--
-- Name: snp_marker_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY snp
    ADD CONSTRAINT snp_marker_id_fkey FOREIGN KEY (marker_id) REFERENCES marker(marker_id);


--
-- Name: snp_metadata_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY snp
    ADD CONSTRAINT snp_metadata_id_fkey FOREIGN KEY (metadata_id) REFERENCES metadata.md_metadata(metadata_id);


--
-- Name: snp_reference_stock_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY snp
    ADD CONSTRAINT snp_reference_stock_id_fkey FOREIGN KEY (reference_stock_id) REFERENCES public.stock(stock_id);


--
-- Name: snp_sequence_left_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY snp
    ADD CONSTRAINT snp_sequence_left_id_fkey FOREIGN KEY (sequence_left_id) REFERENCES sequence(sequence_id);


--
-- Name: snp_sequence_right_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY snp
    ADD CONSTRAINT snp_sequence_right_id_fkey FOREIGN KEY (sequence_right_id) REFERENCES sequence(sequence_id);


--
-- Name: snp_stock_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY snp
    ADD CONSTRAINT snp_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES public.stock(stock_id);


--
-- Name: snpprop_snp_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY snpprop
    ADD CONSTRAINT snpprop_snp_id_fkey FOREIGN KEY (snp_id) REFERENCES snp(snp_id);


--
-- Name: snpprop_type_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY snpprop
    ADD CONSTRAINT snpprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: ssr_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY ssr_primer_unigene_matches
    ADD CONSTRAINT ssr_id_fk FOREIGN KEY (ssr_id) REFERENCES ssr(ssr_id);


--
-- Name: ssr_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY ssr_repeats
    ADD CONSTRAINT ssr_id_fk FOREIGN KEY (ssr_id) REFERENCES ssr(ssr_id);


--
-- Name: temp_map_correspondence_map_version_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY temp_map_correspondence
    ADD CONSTRAINT temp_map_correspondence_map_version_id_fkey FOREIGN KEY (map_version_id) REFERENCES map_version(map_version_id);


--
-- Name: temp_map_correspondence_old_map_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY temp_map_correspondence
    ADD CONSTRAINT temp_map_correspondence_old_map_id_fkey FOREIGN KEY (old_map_id) REFERENCES deprecated_maps(map_id);


--
-- Name: temp_marker_correspondence_old_marker_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY temp_marker_correspondence
    ADD CONSTRAINT temp_marker_correspondence_old_marker_id_fkey FOREIGN KEY (old_marker_id) REFERENCES deprecated_markers(marker_id);


--
-- Name: tm_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY tm_markers
    ADD CONSTRAINT tm_id_fk FOREIGN KEY (tm_id) REFERENCES tm_markers(tm_id);


--
-- Name: type_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY library
    ADD CONSTRAINT type_fkey FOREIGN KEY (type) REFERENCES types(type_id);


--
-- Name: unigene_build_blast_db_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY unigene_build
    ADD CONSTRAINT unigene_build_blast_db_id_fkey FOREIGN KEY (blast_db_id) REFERENCES blast_db(blast_db_id);


--
-- Name: unigene_build_latest_build_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY unigene_build
    ADD CONSTRAINT unigene_build_latest_build_id_fkey FOREIGN KEY (latest_build_id) REFERENCES unigene_build(unigene_build_id);


--
-- Name: unigene_build_next_build_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY unigene_build
    ADD CONSTRAINT unigene_build_next_build_id_fkey FOREIGN KEY (next_build_id) REFERENCES unigene_build(unigene_build_id);


--
-- Name: unigene_build_organism_group_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY unigene_build
    ADD CONSTRAINT unigene_build_organism_group_id_fkey FOREIGN KEY (organism_group_id) REFERENCES groups(group_id);


--
-- Name: unigene_build_superseding_build_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY unigene_build
    ADD CONSTRAINT unigene_build_superseding_build_id_fkey FOREIGN KEY (superseding_build_id) REFERENCES unigene_build(unigene_build_id);


--
-- Name: unigene_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY rflp_unigene_associations
    ADD CONSTRAINT unigene_id_fk FOREIGN KEY (unigene_id) REFERENCES unigene(unigene_id);


--
-- Name: unigene_id_fk; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY ssr_primer_unigene_matches
    ADD CONSTRAINT unigene_id_fk FOREIGN KEY (unigene_id) REFERENCES unigene(unigene_id);


--
-- Name: unigene_member_unigene_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY unigene_member
    ADD CONSTRAINT unigene_member_unigene_id_fkey FOREIGN KEY (unigene_id) REFERENCES unigene(unigene_id);


--
-- Name: unigene_unigene_build_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY unigene
    ADD CONSTRAINT unigene_unigene_build_id_fkey FOREIGN KEY (unigene_build_id) REFERENCES unigene_build(unigene_build_id);


--
-- Name: unigene_unigene_consensi_id_fkey; Type: FK CONSTRAINT; Schema: sgn; Owner: postgres
--

ALTER TABLE ONLY unigene
    ADD CONSTRAINT unigene_unigene_consensi_id_fkey FOREIGN KEY (consensi_id) REFERENCES unigene_consensi(consensi_id);


SET search_path = sgn_people, pg_catalog;

--
-- Name: clone_il_mapping_bin_log_clone_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY clone_il_mapping_bin_log
    ADD CONSTRAINT clone_il_mapping_bin_log_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: clone_il_mapping_bin_log_genotype_region_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY clone_il_mapping_bin_log
    ADD CONSTRAINT clone_il_mapping_bin_log_genotype_region_id_fkey FOREIGN KEY (genotype_region_id) REFERENCES phenome.genotype_region(genotype_region_id);


--
-- Name: clone_il_mapping_bin_log_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY clone_il_mapping_bin_log
    ADD CONSTRAINT clone_il_mapping_bin_log_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sp_person(sp_person_id);


--
-- Name: clone_validation_log_clone_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY clone_validation_log
    ADD CONSTRAINT clone_validation_log_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: clone_validation_log_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY clone_validation_log
    ADD CONSTRAINT clone_validation_log_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sp_person(sp_person_id);


--
-- Name: clone_verification_log_clone_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY clone_verification_log
    ADD CONSTRAINT clone_verification_log_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: clone_verification_log_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY clone_verification_log
    ADD CONSTRAINT clone_verification_log_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sp_person(sp_person_id);


--
-- Name: forum_topic_id_fk; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY forum_post
    ADD CONSTRAINT forum_topic_id_fk FOREIGN KEY (forum_topic_id) REFERENCES forum_topic(forum_topic_id);


--
-- Name: list_item_list_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY list_item
    ADD CONSTRAINT list_item_list_id_fkey FOREIGN KEY (list_id) REFERENCES list(list_id) ON DELETE CASCADE;


--
-- Name: list_owner_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY list
    ADD CONSTRAINT list_owner_fkey FOREIGN KEY (owner) REFERENCES sp_person(sp_person_id) ON DELETE CASCADE;


--
-- Name: list_type_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY list
    ADD CONSTRAINT list_type_id_fkey FOREIGN KEY (type_id) REFERENCES public.cvterm(cvterm_id);


--
-- Name: person_id_fk; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY bac_status
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sp_person(sp_person_id);


--
-- Name: person_id_fk; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY bac_status_log
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sp_person(sp_person_id);


--
-- Name: person_id_fk; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY forum_post
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sp_person(sp_person_id);


--
-- Name: person_id_fk; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY forum_topic
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sp_person(sp_person_id);


--
-- Name: person_id_fk; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_organization_person
    ADD CONSTRAINT person_id_fk FOREIGN KEY (sp_person_id) REFERENCES sp_person(sp_person_id);


--
-- Name: person_id_fk; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_person_organisms
    ADD CONSTRAINT person_id_fk FOREIGN KEY (sp_person_id) REFERENCES sp_person(sp_person_id);


--
-- Name: person_id_fk; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_project_person
    ADD CONSTRAINT person_id_fk FOREIGN KEY (sp_person_id) REFERENCES sp_person(sp_person_id);


--
-- Name: person_id_fk; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_papers
    ADD CONSTRAINT person_id_fk FOREIGN KEY (person_id) REFERENCES sp_person(sp_person_id);


--
-- Name: sp_clone_il_mapping_segment_log_clone_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_clone_il_mapping_segment_log
    ADD CONSTRAINT sp_clone_il_mapping_segment_log_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: sp_clone_il_mapping_segment_log_individual_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_clone_il_mapping_segment_log
    ADD CONSTRAINT sp_clone_il_mapping_segment_log_individual_id_fkey FOREIGN KEY (individual_id) REFERENCES phenome.individual(individual_id);


--
-- Name: sp_clone_il_mapping_segment_log_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_clone_il_mapping_segment_log
    ADD CONSTRAINT sp_clone_il_mapping_segment_log_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sp_person(sp_person_id);


--
-- Name: sp_group_member_sp_group_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_group_member
    ADD CONSTRAINT sp_group_member_sp_group_id_fkey FOREIGN KEY (sp_group_id) REFERENCES sp_group(sp_group_id) ON DELETE CASCADE;


--
-- Name: sp_group_member_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_group_member
    ADD CONSTRAINT sp_group_member_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sp_person(sp_person_id) ON DELETE CASCADE;


--
-- Name: sp_person_roles_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_person_roles
    ADD CONSTRAINT sp_person_roles_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sp_person(sp_person_id) ON DELETE CASCADE;


--
-- Name: sp_person_roles_sp_role_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_person_roles
    ADD CONSTRAINT sp_person_roles_sp_role_id_fkey FOREIGN KEY (sp_role_id) REFERENCES sp_roles(sp_role_id) ON DELETE CASCADE;


--
-- Name: sp_project_il_mapping_clone_log_clone_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_project_il_mapping_clone_log
    ADD CONSTRAINT sp_project_il_mapping_clone_log_clone_id_fkey FOREIGN KEY (clone_id) REFERENCES genomic.clone(clone_id);


--
-- Name: sp_project_il_mapping_clone_log_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_project_il_mapping_clone_log
    ADD CONSTRAINT sp_project_il_mapping_clone_log_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sp_person(sp_person_id);


--
-- Name: sp_project_il_mapping_clone_log_sp_project_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_project_il_mapping_clone_log
    ADD CONSTRAINT sp_project_il_mapping_clone_log_sp_project_id_fkey FOREIGN KEY (sp_project_id) REFERENCES sp_project(sp_project_id);


--
-- Name: sp_project_person_sp_project_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY sp_project_person
    ADD CONSTRAINT sp_project_person_sp_project_id_fkey FOREIGN KEY (sp_project_id) REFERENCES sp_project(sp_project_id);


--
-- Name: user_map_data_marker_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY user_map_data
    ADD CONSTRAINT user_map_data_marker_id_fkey FOREIGN KEY (marker_id) REFERENCES sgn.marker(marker_id);


--
-- Name: user_map_data_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY user_map_data
    ADD CONSTRAINT user_map_data_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sp_person(sp_person_id);


--
-- Name: user_map_data_user_map_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY user_map_data
    ADD CONSTRAINT user_map_data_user_map_id_fkey FOREIGN KEY (user_map_id) REFERENCES user_map(user_map_id);


--
-- Name: user_map_parent1_accession_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY user_map
    ADD CONSTRAINT user_map_parent1_accession_id_fkey FOREIGN KEY (parent1_accession_id) REFERENCES sgn.accession(accession_id);


--
-- Name: user_map_parent2_accession_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY user_map
    ADD CONSTRAINT user_map_parent2_accession_id_fkey FOREIGN KEY (parent2_accession_id) REFERENCES sgn.accession(accession_id);


--
-- Name: user_map_sp_person_id_fkey; Type: FK CONSTRAINT; Schema: sgn_people; Owner: postgres
--

ALTER TABLE ONLY user_map
    ADD CONSTRAINT user_map_sp_person_id_fkey FOREIGN KEY (sp_person_id) REFERENCES sp_person(sp_person_id);


SET search_path = sgn_submit, pg_catalog;

--
-- Name: foriegn; Type: FK CONSTRAINT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY facility
    ADD CONSTRAINT foriegn FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: foriegn; Type: FK CONSTRAINT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY library
    ADD CONSTRAINT foriegn FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: foriegn; Type: FK CONSTRAINT; Schema: sgn_submit; Owner: postgres
--

ALTER TABLE ONLY submit_user
    ADD CONSTRAINT foriegn FOREIGN KEY (sp_person_id) REFERENCES sgn_people.sp_person(sp_person_id);


--
-- Name: annotation; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA annotation FROM PUBLIC;
REVOKE ALL ON SCHEMA annotation FROM postgres;
GRANT ALL ON SCHEMA annotation TO postgres;
GRANT USAGE ON SCHEMA annotation TO web_usr;


--
-- Name: biosource; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA biosource FROM PUBLIC;
REVOKE ALL ON SCHEMA biosource FROM postgres;
GRANT ALL ON SCHEMA biosource TO postgres;
GRANT USAGE ON SCHEMA biosource TO web_usr;


--
-- Name: gem; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA gem FROM PUBLIC;
REVOKE ALL ON SCHEMA gem FROM postgres;
GRANT ALL ON SCHEMA gem TO postgres;
GRANT USAGE ON SCHEMA gem TO web_usr;


--
-- Name: genomic; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA genomic FROM PUBLIC;
REVOKE ALL ON SCHEMA genomic FROM postgres;
GRANT ALL ON SCHEMA genomic TO postgres;
GRANT USAGE ON SCHEMA genomic TO web_usr;


--
-- Name: insitu; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA insitu FROM PUBLIC;
REVOKE ALL ON SCHEMA insitu FROM postgres;
GRANT ALL ON SCHEMA insitu TO postgres;
GRANT USAGE ON SCHEMA insitu TO web_usr;


--
-- Name: metadata; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA metadata FROM PUBLIC;
REVOKE ALL ON SCHEMA metadata FROM postgres;
GRANT ALL ON SCHEMA metadata TO postgres;
GRANT USAGE ON SCHEMA metadata TO web_usr;


--
-- Name: pheno_population; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA pheno_population FROM PUBLIC;
REVOKE ALL ON SCHEMA pheno_population FROM postgres;
GRANT ALL ON SCHEMA pheno_population TO postgres;
GRANT USAGE ON SCHEMA pheno_population TO web_usr;


--
-- Name: phenome; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA phenome FROM PUBLIC;
REVOKE ALL ON SCHEMA phenome FROM postgres;
GRANT ALL ON SCHEMA phenome TO postgres;
GRANT USAGE ON SCHEMA phenome TO web_usr;


--
-- Name: physical; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA physical FROM PUBLIC;
REVOKE ALL ON SCHEMA physical FROM postgres;
GRANT ALL ON SCHEMA physical TO postgres;
GRANT USAGE ON SCHEMA physical TO web_usr;


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO web_usr;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Name: sgn; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA sgn FROM PUBLIC;
REVOKE ALL ON SCHEMA sgn FROM postgres;
GRANT ALL ON SCHEMA sgn TO postgres;
GRANT USAGE ON SCHEMA sgn TO web_usr;


--
-- Name: sgn_people; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA sgn_people FROM PUBLIC;
REVOKE ALL ON SCHEMA sgn_people FROM postgres;
GRANT ALL ON SCHEMA sgn_people TO postgres;
GRANT USAGE ON SCHEMA sgn_people TO web_usr;


--
-- Name: sgn_submit; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA sgn_submit FROM PUBLIC;
REVOKE ALL ON SCHEMA sgn_submit FROM postgres;
GRANT ALL ON SCHEMA sgn_submit TO postgres;
GRANT USAGE ON SCHEMA sgn_submit TO web_usr;


--
-- Name: tomato_gff; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA tomato_gff FROM PUBLIC;
REVOKE ALL ON SCHEMA tomato_gff FROM postgres;
GRANT ALL ON SCHEMA tomato_gff TO postgres;
GRANT USAGE ON SCHEMA tomato_gff TO web_usr;


--
-- Name: utils; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA utils FROM PUBLIC;
REVOKE ALL ON SCHEMA utils FROM postgres;
GRANT ALL ON SCHEMA utils TO postgres;


SET search_path = public, pg_catalog;

--
-- Name: feature; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE feature FROM PUBLIC;
REVOKE ALL ON TABLE feature FROM postgres;
GRANT ALL ON TABLE feature TO postgres;
GRANT ALL ON TABLE feature TO web_usr;


--
-- Name: featureloc; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE featureloc FROM PUBLIC;
REVOKE ALL ON TABLE featureloc FROM postgres;
GRANT ALL ON TABLE featureloc TO postgres;
GRANT ALL ON TABLE featureloc TO web_usr;


--
-- Name: cvterm; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cvterm FROM PUBLIC;
REVOKE ALL ON TABLE cvterm FROM postgres;
GRANT ALL ON TABLE cvterm TO postgres;
GRANT ALL ON TABLE cvterm TO web_usr;


--
-- Name: db; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE db FROM PUBLIC;
REVOKE ALL ON TABLE db FROM postgres;
GRANT ALL ON TABLE db TO postgres;
GRANT ALL ON TABLE db TO web_usr;


--
-- Name: dbxref; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE dbxref FROM PUBLIC;
REVOKE ALL ON TABLE dbxref FROM postgres;
GRANT ALL ON TABLE dbxref TO postgres;
GRANT ALL ON TABLE dbxref TO web_usr;


--
-- Name: feature_cvterm; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE feature_cvterm FROM PUBLIC;
REVOKE ALL ON TABLE feature_cvterm FROM postgres;
GRANT ALL ON TABLE feature_cvterm TO postgres;
GRANT ALL ON TABLE feature_cvterm TO web_usr;


--
-- Name: feature_dbxref; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE feature_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE feature_dbxref FROM postgres;
GRANT ALL ON TABLE feature_dbxref TO postgres;
GRANT ALL ON TABLE feature_dbxref TO web_usr;


--
-- Name: feature_pub; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE feature_pub FROM PUBLIC;
REVOKE ALL ON TABLE feature_pub FROM postgres;
GRANT ALL ON TABLE feature_pub TO postgres;
GRANT ALL ON TABLE feature_pub TO web_usr;


--
-- Name: feature_synonym; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE feature_synonym FROM PUBLIC;
REVOKE ALL ON TABLE feature_synonym FROM postgres;
GRANT ALL ON TABLE feature_synonym TO postgres;
GRANT ALL ON TABLE feature_synonym TO web_usr;


--
-- Name: featureprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE featureprop FROM PUBLIC;
REVOKE ALL ON TABLE featureprop FROM postgres;
GRANT ALL ON TABLE featureprop TO postgres;
GRANT ALL ON TABLE featureprop TO web_usr;


--
-- Name: pub; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE pub FROM PUBLIC;
REVOKE ALL ON TABLE pub FROM postgres;
GRANT ALL ON TABLE pub TO postgres;
GRANT ALL ON TABLE pub TO web_usr;


--
-- Name: synonym; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE synonym FROM PUBLIC;
REVOKE ALL ON TABLE synonym FROM postgres;
GRANT ALL ON TABLE synonym TO postgres;
GRANT ALL ON TABLE synonym TO web_usr;


--
-- Name: gffatts; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE gffatts FROM PUBLIC;
REVOKE ALL ON TABLE gffatts FROM postgres;
GRANT ALL ON TABLE gffatts TO postgres;
GRANT ALL ON TABLE gffatts TO web_usr;


SET search_path = annotation, pg_catalog;

--
-- Name: annotation; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON TABLE annotation FROM PUBLIC;
REVOKE ALL ON TABLE annotation FROM postgres;
GRANT ALL ON TABLE annotation TO postgres;
GRANT SELECT ON TABLE annotation TO web_usr;


--
-- Name: annotation_annot_id_seq; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON SEQUENCE annotation_annot_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE annotation_annot_id_seq FROM postgres;
GRANT ALL ON SEQUENCE annotation_annot_id_seq TO postgres;


--
-- Name: comment; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON TABLE comment FROM PUBLIC;
REVOKE ALL ON TABLE comment FROM postgres;
GRANT ALL ON TABLE comment TO postgres;
GRANT SELECT ON TABLE comment TO web_usr;


--
-- Name: comment_comment_id_seq; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON SEQUENCE comment_comment_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE comment_comment_id_seq FROM postgres;
GRANT ALL ON SEQUENCE comment_comment_id_seq TO postgres;


--
-- Name: comp_analysis; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON TABLE comp_analysis FROM PUBLIC;
REVOKE ALL ON TABLE comp_analysis FROM postgres;
GRANT ALL ON TABLE comp_analysis TO postgres;
GRANT SELECT ON TABLE comp_analysis TO web_usr;


--
-- Name: comp_analysis_ca_id_seq; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON SEQUENCE comp_analysis_ca_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE comp_analysis_ca_id_seq FROM postgres;
GRANT ALL ON SEQUENCE comp_analysis_ca_id_seq TO postgres;


--
-- Name: dblist; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON TABLE dblist FROM PUBLIC;
REVOKE ALL ON TABLE dblist FROM postgres;
GRANT ALL ON TABLE dblist TO postgres;
GRANT SELECT ON TABLE dblist TO web_usr;


--
-- Name: dblist_db_id_seq; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON SEQUENCE dblist_db_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dblist_db_id_seq FROM postgres;
GRANT ALL ON SEQUENCE dblist_db_id_seq TO postgres;


--
-- Name: dbxref; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON TABLE dbxref FROM PUBLIC;
REVOKE ALL ON TABLE dbxref FROM postgres;
GRANT ALL ON TABLE dbxref TO postgres;
GRANT SELECT ON TABLE dbxref TO web_usr;


--
-- Name: dbxref_dbxref_id_seq; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON SEQUENCE dbxref_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dbxref_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE dbxref_dbxref_id_seq TO postgres;


--
-- Name: feature_set; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON TABLE feature_set FROM PUBLIC;
REVOKE ALL ON TABLE feature_set FROM postgres;
GRANT ALL ON TABLE feature_set TO postgres;
GRANT SELECT ON TABLE feature_set TO web_usr;


--
-- Name: feature_set_f_set_id_seq; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON SEQUENCE feature_set_f_set_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE feature_set_f_set_id_seq FROM postgres;
GRANT ALL ON SEQUENCE feature_set_f_set_id_seq TO postgres;


--
-- Name: feature_span; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON TABLE feature_span FROM PUBLIC;
REVOKE ALL ON TABLE feature_span FROM postgres;
GRANT ALL ON TABLE feature_span TO postgres;
GRANT SELECT ON TABLE feature_span TO web_usr;


--
-- Name: feature_span_f_span_id_seq; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON SEQUENCE feature_span_f_span_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE feature_span_f_span_id_seq FROM postgres;
GRANT ALL ON SEQUENCE feature_span_f_span_id_seq TO postgres;


--
-- Name: organism; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON TABLE organism FROM PUBLIC;
REVOKE ALL ON TABLE organism FROM postgres;
GRANT ALL ON TABLE organism TO postgres;
GRANT SELECT ON TABLE organism TO web_usr;


--
-- Name: organism_organism_id_seq; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON SEQUENCE organism_organism_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE organism_organism_id_seq FROM postgres;
GRANT ALL ON SEQUENCE organism_organism_id_seq TO postgres;


--
-- Name: output; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON TABLE output FROM PUBLIC;
REVOKE ALL ON TABLE output FROM postgres;
GRANT ALL ON TABLE output TO postgres;
GRANT SELECT ON TABLE output TO web_usr;


--
-- Name: output_output_id_seq; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON SEQUENCE output_output_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE output_output_id_seq FROM postgres;
GRANT ALL ON SEQUENCE output_output_id_seq TO postgres;


--
-- Name: person; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON TABLE person FROM PUBLIC;
REVOKE ALL ON TABLE person FROM postgres;
GRANT ALL ON TABLE person TO postgres;
GRANT SELECT ON TABLE person TO web_usr;


--
-- Name: person_person_id_seq; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON SEQUENCE person_person_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE person_person_id_seq FROM postgres;
GRANT ALL ON SEQUENCE person_person_id_seq TO postgres;


--
-- Name: program; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON TABLE program FROM PUBLIC;
REVOKE ALL ON TABLE program FROM postgres;
GRANT ALL ON TABLE program TO postgres;
GRANT SELECT ON TABLE program TO web_usr;


--
-- Name: program_program_id_seq; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON SEQUENCE program_program_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE program_program_id_seq FROM postgres;
GRANT ALL ON SEQUENCE program_program_id_seq TO postgres;


--
-- Name: property; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON TABLE property FROM PUBLIC;
REVOKE ALL ON TABLE property FROM postgres;
GRANT ALL ON TABLE property TO postgres;
GRANT SELECT ON TABLE property TO web_usr;


--
-- Name: property_property_id_seq; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON SEQUENCE property_property_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE property_property_id_seq FROM postgres;
GRANT ALL ON SEQUENCE property_property_id_seq TO postgres;


--
-- Name: result_set; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON TABLE result_set FROM PUBLIC;
REVOKE ALL ON TABLE result_set FROM postgres;
GRANT ALL ON TABLE result_set TO postgres;
GRANT SELECT ON TABLE result_set TO web_usr;


--
-- Name: result_set_r_set_id_seq; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON SEQUENCE result_set_r_set_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE result_set_r_set_id_seq FROM postgres;
GRANT ALL ON SEQUENCE result_set_r_set_id_seq TO postgres;


--
-- Name: result_span; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON TABLE result_span FROM PUBLIC;
REVOKE ALL ON TABLE result_span FROM postgres;
GRANT ALL ON TABLE result_span TO postgres;
GRANT SELECT ON TABLE result_span TO web_usr;


--
-- Name: result_span_r_span_id_seq; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON SEQUENCE result_span_r_span_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE result_span_r_span_id_seq FROM postgres;
GRANT ALL ON SEQUENCE result_span_r_span_id_seq TO postgres;


--
-- Name: seq; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON TABLE seq FROM PUBLIC;
REVOKE ALL ON TABLE seq FROM postgres;
GRANT ALL ON TABLE seq TO postgres;
GRANT SELECT ON TABLE seq TO web_usr;


--
-- Name: seq_error; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON TABLE seq_error FROM PUBLIC;
REVOKE ALL ON TABLE seq_error FROM postgres;
GRANT ALL ON TABLE seq_error TO postgres;
GRANT SELECT ON TABLE seq_error TO web_usr;


--
-- Name: seq_error_seq_err_id_seq; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON SEQUENCE seq_error_seq_err_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE seq_error_seq_err_id_seq FROM postgres;
GRANT ALL ON SEQUENCE seq_error_seq_err_id_seq TO postgres;


--
-- Name: seq_relationship; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON TABLE seq_relationship FROM PUBLIC;
REVOKE ALL ON TABLE seq_relationship FROM postgres;
GRANT ALL ON TABLE seq_relationship TO postgres;
GRANT SELECT ON TABLE seq_relationship TO web_usr;


--
-- Name: seq_relationship_seq_rel_id_seq; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON SEQUENCE seq_relationship_seq_rel_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE seq_relationship_seq_rel_id_seq FROM postgres;
GRANT ALL ON SEQUENCE seq_relationship_seq_rel_id_seq TO postgres;


--
-- Name: seq_seq_id_seq; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON SEQUENCE seq_seq_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE seq_seq_id_seq FROM postgres;
GRANT ALL ON SEQUENCE seq_seq_id_seq TO postgres;


--
-- Name: synonym; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON TABLE synonym FROM PUBLIC;
REVOKE ALL ON TABLE synonym FROM postgres;
GRANT ALL ON TABLE synonym TO postgres;
GRANT SELECT ON TABLE synonym TO web_usr;


--
-- Name: synonym_synonym_id_seq; Type: ACL; Schema: annotation; Owner: postgres
--

REVOKE ALL ON SEQUENCE synonym_synonym_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE synonym_synonym_id_seq FROM postgres;
GRANT ALL ON SEQUENCE synonym_synonym_id_seq TO postgres;


SET search_path = biosource, pg_catalog;

--
-- Name: bs_protocol; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON TABLE bs_protocol FROM PUBLIC;
REVOKE ALL ON TABLE bs_protocol FROM postgres;
GRANT ALL ON TABLE bs_protocol TO postgres;
GRANT SELECT ON TABLE bs_protocol TO web_usr;


--
-- Name: bs_protocol_protocol_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON SEQUENCE bs_protocol_protocol_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bs_protocol_protocol_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bs_protocol_protocol_id_seq TO postgres;
GRANT SELECT ON SEQUENCE bs_protocol_protocol_id_seq TO web_usr;


--
-- Name: bs_protocol_pub; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON TABLE bs_protocol_pub FROM PUBLIC;
REVOKE ALL ON TABLE bs_protocol_pub FROM postgres;
GRANT ALL ON TABLE bs_protocol_pub TO postgres;
GRANT SELECT ON TABLE bs_protocol_pub TO web_usr;


--
-- Name: bs_protocol_pub_protocol_pub_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON SEQUENCE bs_protocol_pub_protocol_pub_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bs_protocol_pub_protocol_pub_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bs_protocol_pub_protocol_pub_id_seq TO postgres;
GRANT SELECT ON SEQUENCE bs_protocol_pub_protocol_pub_id_seq TO web_usr;


--
-- Name: bs_protocol_step; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON TABLE bs_protocol_step FROM PUBLIC;
REVOKE ALL ON TABLE bs_protocol_step FROM postgres;
GRANT ALL ON TABLE bs_protocol_step TO postgres;
GRANT SELECT ON TABLE bs_protocol_step TO web_usr;


--
-- Name: bs_protocol_step_dbxref; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON TABLE bs_protocol_step_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE bs_protocol_step_dbxref FROM postgres;
GRANT ALL ON TABLE bs_protocol_step_dbxref TO postgres;
GRANT SELECT ON TABLE bs_protocol_step_dbxref TO web_usr;


--
-- Name: bs_protocol_step_dbxref_protocol_step_dbxref_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON SEQUENCE bs_protocol_step_dbxref_protocol_step_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bs_protocol_step_dbxref_protocol_step_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bs_protocol_step_dbxref_protocol_step_dbxref_id_seq TO postgres;
GRANT SELECT ON SEQUENCE bs_protocol_step_dbxref_protocol_step_dbxref_id_seq TO web_usr;


--
-- Name: bs_protocol_step_protocol_step_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON SEQUENCE bs_protocol_step_protocol_step_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bs_protocol_step_protocol_step_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bs_protocol_step_protocol_step_id_seq TO postgres;
GRANT SELECT ON SEQUENCE bs_protocol_step_protocol_step_id_seq TO web_usr;


--
-- Name: bs_sample; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON TABLE bs_sample FROM PUBLIC;
REVOKE ALL ON TABLE bs_sample FROM postgres;
GRANT ALL ON TABLE bs_sample TO postgres;
GRANT SELECT ON TABLE bs_sample TO web_usr;


--
-- Name: bs_sample_cvterm; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON TABLE bs_sample_cvterm FROM PUBLIC;
REVOKE ALL ON TABLE bs_sample_cvterm FROM postgres;
GRANT ALL ON TABLE bs_sample_cvterm TO postgres;
GRANT SELECT ON TABLE bs_sample_cvterm TO web_usr;


--
-- Name: bs_sample_cvterm_sample_cvterm_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON SEQUENCE bs_sample_cvterm_sample_cvterm_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bs_sample_cvterm_sample_cvterm_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bs_sample_cvterm_sample_cvterm_id_seq TO postgres;
GRANT SELECT ON SEQUENCE bs_sample_cvterm_sample_cvterm_id_seq TO web_usr;


--
-- Name: bs_sample_dbxref; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON TABLE bs_sample_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE bs_sample_dbxref FROM postgres;
GRANT ALL ON TABLE bs_sample_dbxref TO postgres;
GRANT SELECT ON TABLE bs_sample_dbxref TO web_usr;


--
-- Name: bs_sample_dbxref_sample_dbxref_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON SEQUENCE bs_sample_dbxref_sample_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bs_sample_dbxref_sample_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bs_sample_dbxref_sample_dbxref_id_seq TO postgres;
GRANT SELECT ON SEQUENCE bs_sample_dbxref_sample_dbxref_id_seq TO web_usr;


--
-- Name: bs_sample_element; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON TABLE bs_sample_element FROM PUBLIC;
REVOKE ALL ON TABLE bs_sample_element FROM postgres;
GRANT ALL ON TABLE bs_sample_element TO postgres;
GRANT SELECT ON TABLE bs_sample_element TO web_usr;


--
-- Name: bs_sample_element_cvterm; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON TABLE bs_sample_element_cvterm FROM PUBLIC;
REVOKE ALL ON TABLE bs_sample_element_cvterm FROM postgres;
GRANT ALL ON TABLE bs_sample_element_cvterm TO postgres;
GRANT SELECT ON TABLE bs_sample_element_cvterm TO web_usr;


--
-- Name: bs_sample_element_cvterm_sample_element_cvterm_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON SEQUENCE bs_sample_element_cvterm_sample_element_cvterm_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bs_sample_element_cvterm_sample_element_cvterm_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bs_sample_element_cvterm_sample_element_cvterm_id_seq TO postgres;
GRANT SELECT ON SEQUENCE bs_sample_element_cvterm_sample_element_cvterm_id_seq TO web_usr;


--
-- Name: bs_sample_element_dbxref; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON TABLE bs_sample_element_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE bs_sample_element_dbxref FROM postgres;
GRANT ALL ON TABLE bs_sample_element_dbxref TO postgres;
GRANT SELECT ON TABLE bs_sample_element_dbxref TO web_usr;


--
-- Name: bs_sample_element_dbxref_sample_element_dbxref_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON SEQUENCE bs_sample_element_dbxref_sample_element_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bs_sample_element_dbxref_sample_element_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bs_sample_element_dbxref_sample_element_dbxref_id_seq TO postgres;
GRANT SELECT ON SEQUENCE bs_sample_element_dbxref_sample_element_dbxref_id_seq TO web_usr;


--
-- Name: bs_sample_element_file; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON TABLE bs_sample_element_file FROM PUBLIC;
REVOKE ALL ON TABLE bs_sample_element_file FROM postgres;
GRANT ALL ON TABLE bs_sample_element_file TO postgres;
GRANT SELECT ON TABLE bs_sample_element_file TO web_usr;


--
-- Name: bs_sample_element_file_sample_element_file_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON SEQUENCE bs_sample_element_file_sample_element_file_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bs_sample_element_file_sample_element_file_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bs_sample_element_file_sample_element_file_id_seq TO postgres;
GRANT SELECT ON SEQUENCE bs_sample_element_file_sample_element_file_id_seq TO web_usr;


--
-- Name: bs_sample_element_relation; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON TABLE bs_sample_element_relation FROM PUBLIC;
REVOKE ALL ON TABLE bs_sample_element_relation FROM postgres;
GRANT ALL ON TABLE bs_sample_element_relation TO postgres;
GRANT SELECT ON TABLE bs_sample_element_relation TO web_usr;


--
-- Name: bs_sample_element_relation_sample_element_relation_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON SEQUENCE bs_sample_element_relation_sample_element_relation_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bs_sample_element_relation_sample_element_relation_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bs_sample_element_relation_sample_element_relation_id_seq TO postgres;
GRANT SELECT ON SEQUENCE bs_sample_element_relation_sample_element_relation_id_seq TO web_usr;


--
-- Name: bs_sample_element_sample_element_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON SEQUENCE bs_sample_element_sample_element_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bs_sample_element_sample_element_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bs_sample_element_sample_element_id_seq TO postgres;
GRANT SELECT ON SEQUENCE bs_sample_element_sample_element_id_seq TO web_usr;


--
-- Name: bs_sample_file; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON TABLE bs_sample_file FROM PUBLIC;
REVOKE ALL ON TABLE bs_sample_file FROM postgres;
GRANT ALL ON TABLE bs_sample_file TO postgres;
GRANT SELECT ON TABLE bs_sample_file TO web_usr;


--
-- Name: bs_sample_file_sample_file_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON SEQUENCE bs_sample_file_sample_file_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bs_sample_file_sample_file_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bs_sample_file_sample_file_id_seq TO postgres;
GRANT SELECT ON SEQUENCE bs_sample_file_sample_file_id_seq TO web_usr;


--
-- Name: bs_sample_pub; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON TABLE bs_sample_pub FROM PUBLIC;
REVOKE ALL ON TABLE bs_sample_pub FROM postgres;
GRANT ALL ON TABLE bs_sample_pub TO postgres;
GRANT SELECT ON TABLE bs_sample_pub TO web_usr;


--
-- Name: bs_sample_pub_sample_pub_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON SEQUENCE bs_sample_pub_sample_pub_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bs_sample_pub_sample_pub_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bs_sample_pub_sample_pub_id_seq TO postgres;
GRANT SELECT ON SEQUENCE bs_sample_pub_sample_pub_id_seq TO web_usr;


--
-- Name: bs_sample_relationship; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON TABLE bs_sample_relationship FROM PUBLIC;
REVOKE ALL ON TABLE bs_sample_relationship FROM postgres;
GRANT ALL ON TABLE bs_sample_relationship TO postgres;
GRANT SELECT ON TABLE bs_sample_relationship TO web_usr;


--
-- Name: bs_sample_relationship_sample_relationship_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON SEQUENCE bs_sample_relationship_sample_relationship_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bs_sample_relationship_sample_relationship_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bs_sample_relationship_sample_relationship_id_seq TO postgres;
GRANT SELECT ON SEQUENCE bs_sample_relationship_sample_relationship_id_seq TO web_usr;


--
-- Name: bs_sample_sample_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON SEQUENCE bs_sample_sample_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bs_sample_sample_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bs_sample_sample_id_seq TO postgres;
GRANT SELECT ON SEQUENCE bs_sample_sample_id_seq TO web_usr;


--
-- Name: bs_tool; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON TABLE bs_tool FROM PUBLIC;
REVOKE ALL ON TABLE bs_tool FROM postgres;
GRANT ALL ON TABLE bs_tool TO postgres;
GRANT SELECT ON TABLE bs_tool TO web_usr;


--
-- Name: bs_tool_pub; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON TABLE bs_tool_pub FROM PUBLIC;
REVOKE ALL ON TABLE bs_tool_pub FROM postgres;
GRANT ALL ON TABLE bs_tool_pub TO postgres;
GRANT SELECT ON TABLE bs_tool_pub TO web_usr;


--
-- Name: bs_tool_pub_tool_pub_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON SEQUENCE bs_tool_pub_tool_pub_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bs_tool_pub_tool_pub_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bs_tool_pub_tool_pub_id_seq TO postgres;
GRANT SELECT ON SEQUENCE bs_tool_pub_tool_pub_id_seq TO web_usr;


--
-- Name: bs_tool_tool_id_seq; Type: ACL; Schema: biosource; Owner: postgres
--

REVOKE ALL ON SEQUENCE bs_tool_tool_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bs_tool_tool_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bs_tool_tool_id_seq TO postgres;
GRANT SELECT ON SEQUENCE bs_tool_tool_id_seq TO web_usr;


SET search_path = gem, pg_catalog;

--
-- Name: ge_cluster_analysis; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_cluster_analysis FROM PUBLIC;
REVOKE ALL ON TABLE ge_cluster_analysis FROM postgres;
GRANT ALL ON TABLE ge_cluster_analysis TO postgres;
GRANT SELECT ON TABLE ge_cluster_analysis TO web_usr;


--
-- Name: ge_cluster_analysis_cluster_analysis_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_cluster_analysis_cluster_analysis_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_cluster_analysis_cluster_analysis_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_cluster_analysis_cluster_analysis_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_cluster_analysis_cluster_analysis_id_seq TO web_usr;


--
-- Name: ge_cluster_member; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_cluster_member FROM PUBLIC;
REVOKE ALL ON TABLE ge_cluster_member FROM postgres;
GRANT ALL ON TABLE ge_cluster_member TO postgres;
GRANT SELECT ON TABLE ge_cluster_member TO web_usr;


--
-- Name: ge_cluster_member_cluster_member_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_cluster_member_cluster_member_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_cluster_member_cluster_member_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_cluster_member_cluster_member_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_cluster_member_cluster_member_id_seq TO web_usr;


--
-- Name: ge_cluster_profile; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_cluster_profile FROM PUBLIC;
REVOKE ALL ON TABLE ge_cluster_profile FROM postgres;
GRANT ALL ON TABLE ge_cluster_profile TO postgres;
GRANT SELECT ON TABLE ge_cluster_profile TO web_usr;


--
-- Name: ge_cluster_profile_cluster_profile_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_cluster_profile_cluster_profile_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_cluster_profile_cluster_profile_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_cluster_profile_cluster_profile_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_cluster_profile_cluster_profile_id_seq TO web_usr;


--
-- Name: ge_correlation_analysis; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_correlation_analysis FROM PUBLIC;
REVOKE ALL ON TABLE ge_correlation_analysis FROM postgres;
GRANT ALL ON TABLE ge_correlation_analysis TO postgres;
GRANT SELECT ON TABLE ge_correlation_analysis TO web_usr;


--
-- Name: ge_correlation_analysis_correlation_analysis_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_correlation_analysis_correlation_analysis_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_correlation_analysis_correlation_analysis_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_correlation_analysis_correlation_analysis_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_correlation_analysis_correlation_analysis_id_seq TO web_usr;


--
-- Name: ge_correlation_member; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_correlation_member FROM PUBLIC;
REVOKE ALL ON TABLE ge_correlation_member FROM postgres;
GRANT ALL ON TABLE ge_correlation_member TO postgres;
GRANT SELECT ON TABLE ge_correlation_member TO web_usr;


--
-- Name: ge_correlation_member_correlation_member_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_correlation_member_correlation_member_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_correlation_member_correlation_member_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_correlation_member_correlation_member_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_correlation_member_correlation_member_id_seq TO web_usr;


--
-- Name: ge_data_analysis_process; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_data_analysis_process FROM PUBLIC;
REVOKE ALL ON TABLE ge_data_analysis_process FROM postgres;
GRANT ALL ON TABLE ge_data_analysis_process TO postgres;
GRANT SELECT ON TABLE ge_data_analysis_process TO web_usr;


--
-- Name: ge_data_analysis_process_data_analysis_process_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_data_analysis_process_data_analysis_process_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_data_analysis_process_data_analysis_process_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_data_analysis_process_data_analysis_process_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_data_analysis_process_data_analysis_process_id_seq TO web_usr;


--
-- Name: ge_diff_expression; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_diff_expression FROM PUBLIC;
REVOKE ALL ON TABLE ge_diff_expression FROM postgres;
GRANT ALL ON TABLE ge_diff_expression TO postgres;
GRANT SELECT ON TABLE ge_diff_expression TO web_usr;


--
-- Name: ge_diff_expression_diff_expression_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_diff_expression_diff_expression_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_diff_expression_diff_expression_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_diff_expression_diff_expression_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_diff_expression_diff_expression_id_seq TO web_usr;


--
-- Name: ge_experiment; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_experiment FROM PUBLIC;
REVOKE ALL ON TABLE ge_experiment FROM postgres;
GRANT ALL ON TABLE ge_experiment TO postgres;
GRANT SELECT ON TABLE ge_experiment TO web_usr;


--
-- Name: ge_experiment_analysis_group; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_experiment_analysis_group FROM PUBLIC;
REVOKE ALL ON TABLE ge_experiment_analysis_group FROM postgres;
GRANT ALL ON TABLE ge_experiment_analysis_group TO postgres;
GRANT SELECT ON TABLE ge_experiment_analysis_group TO web_usr;


--
-- Name: ge_experiment_analysis_group_experiment_analysis_group_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_experiment_analysis_group_experiment_analysis_group_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_experiment_analysis_group_experiment_analysis_group_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_experiment_analysis_group_experiment_analysis_group_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_experiment_analysis_group_experiment_analysis_group_id_seq TO web_usr;


--
-- Name: ge_experiment_analysis_member; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_experiment_analysis_member FROM PUBLIC;
REVOKE ALL ON TABLE ge_experiment_analysis_member FROM postgres;
GRANT ALL ON TABLE ge_experiment_analysis_member TO postgres;
GRANT SELECT ON TABLE ge_experiment_analysis_member TO web_usr;


--
-- Name: ge_experiment_analysis_member_experiment_analysis_member_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_experiment_analysis_member_experiment_analysis_member_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_experiment_analysis_member_experiment_analysis_member_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_experiment_analysis_member_experiment_analysis_member_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_experiment_analysis_member_experiment_analysis_member_id_seq TO web_usr;


--
-- Name: ge_experiment_dbxref; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_experiment_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE ge_experiment_dbxref FROM postgres;
GRANT ALL ON TABLE ge_experiment_dbxref TO postgres;
GRANT SELECT ON TABLE ge_experiment_dbxref TO web_usr;


--
-- Name: ge_experiment_dbxref_experiment_dbxref_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_experiment_dbxref_experiment_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_experiment_dbxref_experiment_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_experiment_dbxref_experiment_dbxref_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_experiment_dbxref_experiment_dbxref_id_seq TO web_usr;


--
-- Name: ge_experiment_experiment_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_experiment_experiment_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_experiment_experiment_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_experiment_experiment_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_experiment_experiment_id_seq TO web_usr;


--
-- Name: ge_experimental_design; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_experimental_design FROM PUBLIC;
REVOKE ALL ON TABLE ge_experimental_design FROM postgres;
GRANT ALL ON TABLE ge_experimental_design TO postgres;
GRANT SELECT ON TABLE ge_experimental_design TO web_usr;


--
-- Name: ge_experimental_design_dbxref; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_experimental_design_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE ge_experimental_design_dbxref FROM postgres;
GRANT ALL ON TABLE ge_experimental_design_dbxref TO postgres;
GRANT SELECT ON TABLE ge_experimental_design_dbxref TO web_usr;


--
-- Name: ge_experimental_design_dbxref_experimental_design_dbxref_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_experimental_design_dbxref_experimental_design_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_experimental_design_dbxref_experimental_design_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_experimental_design_dbxref_experimental_design_dbxref_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_experimental_design_dbxref_experimental_design_dbxref_id_seq TO web_usr;


--
-- Name: ge_experimental_design_experimental_design_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_experimental_design_experimental_design_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_experimental_design_experimental_design_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_experimental_design_experimental_design_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_experimental_design_experimental_design_id_seq TO web_usr;


--
-- Name: ge_experimental_design_pub; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_experimental_design_pub FROM PUBLIC;
REVOKE ALL ON TABLE ge_experimental_design_pub FROM postgres;
GRANT ALL ON TABLE ge_experimental_design_pub TO postgres;
GRANT SELECT ON TABLE ge_experimental_design_pub TO web_usr;


--
-- Name: ge_experimental_design_pub_experimental_design_pub_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_experimental_design_pub_experimental_design_pub_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_experimental_design_pub_experimental_design_pub_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_experimental_design_pub_experimental_design_pub_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_experimental_design_pub_experimental_design_pub_id_seq TO web_usr;


--
-- Name: ge_expression_by_experiment; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_expression_by_experiment FROM PUBLIC;
REVOKE ALL ON TABLE ge_expression_by_experiment FROM postgres;
GRANT ALL ON TABLE ge_expression_by_experiment TO postgres;
GRANT SELECT ON TABLE ge_expression_by_experiment TO web_usr;


--
-- Name: ge_expression_by_experiment_expression_by_experiment_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_expression_by_experiment_expression_by_experiment_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_expression_by_experiment_expression_by_experiment_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_expression_by_experiment_expression_by_experiment_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_expression_by_experiment_expression_by_experiment_id_seq TO web_usr;


--
-- Name: ge_fluorescanning; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_fluorescanning FROM PUBLIC;
REVOKE ALL ON TABLE ge_fluorescanning FROM postgres;
GRANT ALL ON TABLE ge_fluorescanning TO postgres;
GRANT SELECT ON TABLE ge_fluorescanning TO web_usr;


--
-- Name: ge_fluorescanning_fluorescanning_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_fluorescanning_fluorescanning_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_fluorescanning_fluorescanning_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_fluorescanning_fluorescanning_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_fluorescanning_fluorescanning_id_seq TO web_usr;


--
-- Name: ge_hybridization; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_hybridization FROM PUBLIC;
REVOKE ALL ON TABLE ge_hybridization FROM postgres;
GRANT ALL ON TABLE ge_hybridization TO postgres;
GRANT SELECT ON TABLE ge_hybridization TO web_usr;


--
-- Name: ge_hybridization_hybridization_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_hybridization_hybridization_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_hybridization_hybridization_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_hybridization_hybridization_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_hybridization_hybridization_id_seq TO web_usr;


--
-- Name: ge_platform; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_platform FROM PUBLIC;
REVOKE ALL ON TABLE ge_platform FROM postgres;
GRANT ALL ON TABLE ge_platform TO postgres;
GRANT SELECT ON TABLE ge_platform TO web_usr;


--
-- Name: ge_platform_dbxref; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_platform_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE ge_platform_dbxref FROM postgres;
GRANT ALL ON TABLE ge_platform_dbxref TO postgres;
GRANT SELECT ON TABLE ge_platform_dbxref TO web_usr;


--
-- Name: ge_platform_dbxref_platform_dbxref_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_platform_dbxref_platform_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_platform_dbxref_platform_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_platform_dbxref_platform_dbxref_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_platform_dbxref_platform_dbxref_id_seq TO web_usr;


--
-- Name: ge_platform_design; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_platform_design FROM PUBLIC;
REVOKE ALL ON TABLE ge_platform_design FROM postgres;
GRANT ALL ON TABLE ge_platform_design TO postgres;
GRANT SELECT ON TABLE ge_platform_design TO web_usr;


--
-- Name: ge_platform_design_platform_design_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_platform_design_platform_design_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_platform_design_platform_design_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_platform_design_platform_design_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_platform_design_platform_design_id_seq TO web_usr;


--
-- Name: ge_platform_platform_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_platform_platform_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_platform_platform_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_platform_platform_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_platform_platform_id_seq TO web_usr;


--
-- Name: ge_platform_pub; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_platform_pub FROM PUBLIC;
REVOKE ALL ON TABLE ge_platform_pub FROM postgres;
GRANT ALL ON TABLE ge_platform_pub TO postgres;
GRANT SELECT ON TABLE ge_platform_pub TO web_usr;


--
-- Name: ge_platform_pub_platform_pub_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_platform_pub_platform_pub_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_platform_pub_platform_pub_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_platform_pub_platform_pub_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_platform_pub_platform_pub_id_seq TO web_usr;


--
-- Name: ge_probe; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_probe FROM PUBLIC;
REVOKE ALL ON TABLE ge_probe FROM postgres;
GRANT ALL ON TABLE ge_probe TO postgres;
GRANT SELECT ON TABLE ge_probe TO web_usr;


--
-- Name: ge_probe_expression; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_probe_expression FROM PUBLIC;
REVOKE ALL ON TABLE ge_probe_expression FROM postgres;
GRANT ALL ON TABLE ge_probe_expression TO postgres;
GRANT SELECT ON TABLE ge_probe_expression TO web_usr;


--
-- Name: ge_probe_expression_probe_expression_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_probe_expression_probe_expression_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_probe_expression_probe_expression_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_probe_expression_probe_expression_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_probe_expression_probe_expression_id_seq TO web_usr;


--
-- Name: ge_probe_probe_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_probe_probe_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_probe_probe_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_probe_probe_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_probe_probe_id_seq TO web_usr;


--
-- Name: ge_probe_spot; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_probe_spot FROM PUBLIC;
REVOKE ALL ON TABLE ge_probe_spot FROM postgres;
GRANT ALL ON TABLE ge_probe_spot TO postgres;
GRANT SELECT ON TABLE ge_probe_spot TO web_usr;


--
-- Name: ge_probe_spot_coordinate; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_probe_spot_coordinate FROM PUBLIC;
REVOKE ALL ON TABLE ge_probe_spot_coordinate FROM postgres;
GRANT ALL ON TABLE ge_probe_spot_coordinate TO postgres;
GRANT SELECT ON TABLE ge_probe_spot_coordinate TO web_usr;


--
-- Name: ge_probe_spot_coordinate_probe_spot_coordinate_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_probe_spot_coordinate_probe_spot_coordinate_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_probe_spot_coordinate_probe_spot_coordinate_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_probe_spot_coordinate_probe_spot_coordinate_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_probe_spot_coordinate_probe_spot_coordinate_id_seq TO web_usr;


--
-- Name: ge_probe_spot_probe_spot_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_probe_spot_probe_spot_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_probe_spot_probe_spot_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_probe_spot_probe_spot_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_probe_spot_probe_spot_id_seq TO web_usr;


--
-- Name: ge_profile_element; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_profile_element FROM PUBLIC;
REVOKE ALL ON TABLE ge_profile_element FROM postgres;
GRANT ALL ON TABLE ge_profile_element TO postgres;
GRANT SELECT ON TABLE ge_profile_element TO web_usr;


--
-- Name: ge_profile_element_profile_element_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_profile_element_profile_element_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_profile_element_profile_element_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_profile_element_profile_element_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_profile_element_profile_element_id_seq TO web_usr;


--
-- Name: ge_target; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_target FROM PUBLIC;
REVOKE ALL ON TABLE ge_target FROM postgres;
GRANT ALL ON TABLE ge_target TO postgres;
GRANT SELECT ON TABLE ge_target TO web_usr;


--
-- Name: ge_target_dbxref; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_target_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE ge_target_dbxref FROM postgres;
GRANT ALL ON TABLE ge_target_dbxref TO postgres;
GRANT SELECT ON TABLE ge_target_dbxref TO web_usr;


--
-- Name: ge_target_dbxref_target_dbxref_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_target_dbxref_target_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_target_dbxref_target_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_target_dbxref_target_dbxref_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_target_dbxref_target_dbxref_id_seq TO web_usr;


--
-- Name: ge_target_element; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_target_element FROM PUBLIC;
REVOKE ALL ON TABLE ge_target_element FROM postgres;
GRANT ALL ON TABLE ge_target_element TO postgres;
GRANT SELECT ON TABLE ge_target_element TO web_usr;


--
-- Name: ge_target_element_target_element_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_target_element_target_element_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_target_element_target_element_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_target_element_target_element_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_target_element_target_element_id_seq TO web_usr;


--
-- Name: ge_target_target_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_target_target_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_target_target_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_target_target_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_target_target_id_seq TO web_usr;


--
-- Name: ge_technology_type; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_technology_type FROM PUBLIC;
REVOKE ALL ON TABLE ge_technology_type FROM postgres;
GRANT ALL ON TABLE ge_technology_type TO postgres;
GRANT SELECT ON TABLE ge_technology_type TO web_usr;


--
-- Name: ge_technology_type_technology_type_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_technology_type_technology_type_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_technology_type_technology_type_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_technology_type_technology_type_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_technology_type_technology_type_id_seq TO web_usr;


--
-- Name: ge_template; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_template FROM PUBLIC;
REVOKE ALL ON TABLE ge_template FROM postgres;
GRANT ALL ON TABLE ge_template TO postgres;
GRANT SELECT ON TABLE ge_template TO web_usr;


--
-- Name: ge_template_dbiref; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_template_dbiref FROM PUBLIC;
REVOKE ALL ON TABLE ge_template_dbiref FROM postgres;
GRANT ALL ON TABLE ge_template_dbiref TO postgres;
GRANT SELECT ON TABLE ge_template_dbiref TO web_usr;


--
-- Name: ge_template_dbiref_template_dbiref_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_template_dbiref_template_dbiref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_template_dbiref_template_dbiref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_template_dbiref_template_dbiref_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_template_dbiref_template_dbiref_id_seq TO web_usr;


--
-- Name: ge_template_dbxref; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_template_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE ge_template_dbxref FROM postgres;
GRANT ALL ON TABLE ge_template_dbxref TO postgres;
GRANT SELECT ON TABLE ge_template_dbxref TO web_usr;


--
-- Name: ge_template_dbxref_template_dbxref_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_template_dbxref_template_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_template_dbxref_template_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_template_dbxref_template_dbxref_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_template_dbxref_template_dbxref_id_seq TO web_usr;


--
-- Name: ge_template_diff_expression; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_template_diff_expression FROM PUBLIC;
REVOKE ALL ON TABLE ge_template_diff_expression FROM postgres;
GRANT ALL ON TABLE ge_template_diff_expression TO postgres;
GRANT SELECT ON TABLE ge_template_diff_expression TO web_usr;


--
-- Name: ge_template_diff_expression_template_diff_expression_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_template_diff_expression_template_diff_expression_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_template_diff_expression_template_diff_expression_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_template_diff_expression_template_diff_expression_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_template_diff_expression_template_diff_expression_id_seq TO web_usr;


--
-- Name: ge_template_expression; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON TABLE ge_template_expression FROM PUBLIC;
REVOKE ALL ON TABLE ge_template_expression FROM postgres;
GRANT ALL ON TABLE ge_template_expression TO postgres;
GRANT SELECT ON TABLE ge_template_expression TO web_usr;


--
-- Name: ge_template_expression_template_expression_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_template_expression_template_expression_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_template_expression_template_expression_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_template_expression_template_expression_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_template_expression_template_expression_id_seq TO web_usr;


--
-- Name: ge_template_template_id_seq; Type: ACL; Schema: gem; Owner: postgres
--

REVOKE ALL ON SEQUENCE ge_template_template_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ge_template_template_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ge_template_template_id_seq TO postgres;
GRANT SELECT ON SEQUENCE ge_template_template_id_seq TO web_usr;


SET search_path = genomic, pg_catalog;

--
-- Name: blast_defline; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON TABLE blast_defline FROM PUBLIC;
REVOKE ALL ON TABLE blast_defline FROM postgres;
GRANT ALL ON TABLE blast_defline TO postgres;
GRANT SELECT ON TABLE blast_defline TO web_usr;


--
-- Name: blast_defline_blast_defline_id_seq; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON SEQUENCE blast_defline_blast_defline_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE blast_defline_blast_defline_id_seq FROM postgres;
GRANT ALL ON SEQUENCE blast_defline_blast_defline_id_seq TO postgres;


--
-- Name: blast_hit; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON TABLE blast_hit FROM PUBLIC;
REVOKE ALL ON TABLE blast_hit FROM postgres;
GRANT ALL ON TABLE blast_hit TO postgres;
GRANT SELECT ON TABLE blast_hit TO web_usr;


--
-- Name: blast_hit_blast_hit_id_seq; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON SEQUENCE blast_hit_blast_hit_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE blast_hit_blast_hit_id_seq FROM postgres;
GRANT ALL ON SEQUENCE blast_hit_blast_hit_id_seq TO postgres;


--
-- Name: blast_query; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON TABLE blast_query FROM PUBLIC;
REVOKE ALL ON TABLE blast_query FROM postgres;
GRANT ALL ON TABLE blast_query TO postgres;
GRANT SELECT ON TABLE blast_query TO web_usr;


--
-- Name: blast_query_blast_query_id_seq; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON SEQUENCE blast_query_blast_query_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE blast_query_blast_query_id_seq FROM postgres;
GRANT ALL ON SEQUENCE blast_query_blast_query_id_seq TO postgres;


--
-- Name: chromat; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON TABLE chromat FROM PUBLIC;
REVOKE ALL ON TABLE chromat FROM postgres;
GRANT ALL ON TABLE chromat TO postgres;
GRANT SELECT ON TABLE chromat TO web_usr;


--
-- Name: chromat_chromat_id_seq; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON SEQUENCE chromat_chromat_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE chromat_chromat_id_seq FROM postgres;
GRANT ALL ON SEQUENCE chromat_chromat_id_seq TO postgres;


--
-- Name: clone; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON TABLE clone FROM PUBLIC;
REVOKE ALL ON TABLE clone FROM postgres;
GRANT ALL ON TABLE clone TO postgres;
GRANT SELECT ON TABLE clone TO web_usr;


--
-- Name: clone_clone_id_seq; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON SEQUENCE clone_clone_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE clone_clone_id_seq FROM postgres;
GRANT ALL ON SEQUENCE clone_clone_id_seq TO postgres;


--
-- Name: clone_feature; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON TABLE clone_feature FROM PUBLIC;
REVOKE ALL ON TABLE clone_feature FROM postgres;
GRANT ALL ON TABLE clone_feature TO postgres;
GRANT SELECT ON TABLE clone_feature TO web_usr;
GRANT SELECT ON TABLE clone_feature TO PUBLIC;


--
-- Name: clone_feature_clone_feature_id_seq; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON SEQUENCE clone_feature_clone_feature_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE clone_feature_clone_feature_id_seq FROM postgres;
GRANT ALL ON SEQUENCE clone_feature_clone_feature_id_seq TO postgres;


--
-- Name: clone_type; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON TABLE clone_type FROM PUBLIC;
REVOKE ALL ON TABLE clone_type FROM postgres;
GRANT ALL ON TABLE clone_type TO postgres;
GRANT SELECT ON TABLE clone_type TO web_usr;


--
-- Name: clone_type_clone_type_id_seq; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON SEQUENCE clone_type_clone_type_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE clone_type_clone_type_id_seq FROM postgres;
GRANT ALL ON SEQUENCE clone_type_clone_type_id_seq TO postgres;


--
-- Name: genbank_submission; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON TABLE genbank_submission FROM PUBLIC;
REVOKE ALL ON TABLE genbank_submission FROM postgres;
GRANT ALL ON TABLE genbank_submission TO postgres;
GRANT SELECT ON TABLE genbank_submission TO web_usr;


--
-- Name: genbank_submission_genbank_submission_id_seq; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON SEQUENCE genbank_submission_genbank_submission_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE genbank_submission_genbank_submission_id_seq FROM postgres;
GRANT ALL ON SEQUENCE genbank_submission_genbank_submission_id_seq TO postgres;


--
-- Name: gss; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON TABLE gss FROM PUBLIC;
REVOKE ALL ON TABLE gss FROM postgres;
GRANT ALL ON TABLE gss TO postgres;
GRANT SELECT ON TABLE gss TO web_usr;


--
-- Name: gss_gss_id_seq; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON SEQUENCE gss_gss_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE gss_gss_id_seq FROM postgres;
GRANT ALL ON SEQUENCE gss_gss_id_seq TO postgres;


--
-- Name: gss_submitted_to_genbank; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON TABLE gss_submitted_to_genbank FROM PUBLIC;
REVOKE ALL ON TABLE gss_submitted_to_genbank FROM postgres;
GRANT ALL ON TABLE gss_submitted_to_genbank TO postgres;
GRANT SELECT ON TABLE gss_submitted_to_genbank TO web_usr;


--
-- Name: gss_submitted_to_genbank_gss_submitted_to_genbank_id_seq; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON SEQUENCE gss_submitted_to_genbank_gss_submitted_to_genbank_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE gss_submitted_to_genbank_gss_submitted_to_genbank_id_seq FROM postgres;
GRANT ALL ON SEQUENCE gss_submitted_to_genbank_gss_submitted_to_genbank_id_seq TO postgres;


--
-- Name: library; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON TABLE library FROM PUBLIC;
REVOKE ALL ON TABLE library FROM postgres;
GRANT ALL ON TABLE library TO postgres;
GRANT SELECT ON TABLE library TO web_usr;


--
-- Name: library_annotation_db; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON TABLE library_annotation_db FROM PUBLIC;
REVOKE ALL ON TABLE library_annotation_db FROM postgres;
GRANT ALL ON TABLE library_annotation_db TO postgres;
GRANT SELECT ON TABLE library_annotation_db TO web_usr;


--
-- Name: library_annotation_db_library_annotation_db_id_seq; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON SEQUENCE library_annotation_db_library_annotation_db_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE library_annotation_db_library_annotation_db_id_seq FROM postgres;
GRANT ALL ON SEQUENCE library_annotation_db_library_annotation_db_id_seq TO postgres;


--
-- Name: library_library_id_seq; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON SEQUENCE library_library_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE library_library_id_seq FROM postgres;
GRANT ALL ON SEQUENCE library_library_id_seq TO postgres;


--
-- Name: library_shortname_abbreviation; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON TABLE library_shortname_abbreviation FROM PUBLIC;
REVOKE ALL ON TABLE library_shortname_abbreviation FROM postgres;
GRANT ALL ON TABLE library_shortname_abbreviation TO postgres;
GRANT SELECT ON TABLE library_shortname_abbreviation TO PUBLIC;


--
-- Name: qc_report; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON TABLE qc_report FROM PUBLIC;
REVOKE ALL ON TABLE qc_report FROM postgres;
GRANT ALL ON TABLE qc_report TO postgres;
GRANT SELECT ON TABLE qc_report TO web_usr;


--
-- Name: qc_report_qc_report_id_seq; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON SEQUENCE qc_report_qc_report_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE qc_report_qc_report_id_seq FROM postgres;
GRANT ALL ON SEQUENCE qc_report_qc_report_id_seq TO postgres;


--
-- Name: query_source_type; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON TABLE query_source_type FROM PUBLIC;
REVOKE ALL ON TABLE query_source_type FROM postgres;
GRANT ALL ON TABLE query_source_type TO postgres;
GRANT SELECT ON TABLE query_source_type TO web_usr;


--
-- Name: query_source_type_query_source_type_id_seq; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON SEQUENCE query_source_type_query_source_type_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE query_source_type_query_source_type_id_seq FROM postgres;
GRANT ALL ON SEQUENCE query_source_type_query_source_type_id_seq TO postgres;


--
-- Name: read_class; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON TABLE read_class FROM PUBLIC;
REVOKE ALL ON TABLE read_class FROM postgres;
GRANT ALL ON TABLE read_class TO postgres;
GRANT SELECT ON TABLE read_class TO web_usr;


--
-- Name: read_class_read_class_id_seq; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON SEQUENCE read_class_read_class_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE read_class_read_class_id_seq FROM postgres;
GRANT ALL ON SEQUENCE read_class_read_class_id_seq TO postgres;


--
-- Name: sequencing_primer; Type: ACL; Schema: genomic; Owner: postgres
--

REVOKE ALL ON TABLE sequencing_primer FROM PUBLIC;
REVOKE ALL ON TABLE sequencing_primer FROM postgres;
GRANT ALL ON TABLE sequencing_primer TO postgres;
GRANT SELECT ON TABLE sequencing_primer TO PUBLIC;


SET search_path = insitu, pg_catalog;

--
-- Name: ex_tag; Type: ACL; Schema: insitu; Owner: postgres
--

REVOKE ALL ON TABLE ex_tag FROM PUBLIC;
REVOKE ALL ON TABLE ex_tag FROM postgres;
GRANT ALL ON TABLE ex_tag TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE ex_tag TO web_usr;


--
-- Name: experiment; Type: ACL; Schema: insitu; Owner: postgres
--

REVOKE ALL ON TABLE experiment FROM PUBLIC;
REVOKE ALL ON TABLE experiment FROM postgres;
GRANT ALL ON TABLE experiment TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE experiment TO web_usr;


--
-- Name: experiment_experiment_id_seq; Type: ACL; Schema: insitu; Owner: postgres
--

REVOKE ALL ON SEQUENCE experiment_experiment_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE experiment_experiment_id_seq FROM postgres;
GRANT ALL ON SEQUENCE experiment_experiment_id_seq TO postgres;
GRANT ALL ON SEQUENCE experiment_experiment_id_seq TO web_usr;


--
-- Name: experiment_image; Type: ACL; Schema: insitu; Owner: postgres
--

REVOKE ALL ON TABLE experiment_image FROM PUBLIC;
REVOKE ALL ON TABLE experiment_image FROM postgres;
GRANT ALL ON TABLE experiment_image TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE experiment_image TO web_usr;


--
-- Name: experiment_image_experiment_image_id_seq; Type: ACL; Schema: insitu; Owner: postgres
--

REVOKE ALL ON SEQUENCE experiment_image_experiment_image_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE experiment_image_experiment_image_id_seq FROM postgres;
GRANT ALL ON SEQUENCE experiment_image_experiment_image_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE experiment_image_experiment_image_id_seq TO web_usr;


--
-- Name: experiment_tag; Type: ACL; Schema: insitu; Owner: postgres
--

REVOKE ALL ON TABLE experiment_tag FROM PUBLIC;
REVOKE ALL ON TABLE experiment_tag FROM postgres;
GRANT ALL ON TABLE experiment_tag TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE experiment_tag TO web_usr;


--
-- Name: experiment_tag_experiment_tag_id_seq; Type: ACL; Schema: insitu; Owner: postgres
--

REVOKE ALL ON SEQUENCE experiment_tag_experiment_tag_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE experiment_tag_experiment_tag_id_seq FROM postgres;
GRANT ALL ON SEQUENCE experiment_tag_experiment_tag_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE experiment_tag_experiment_tag_id_seq TO web_usr;


--
-- Name: image_tag; Type: ACL; Schema: insitu; Owner: postgres
--

REVOKE ALL ON TABLE image_tag FROM PUBLIC;
REVOKE ALL ON TABLE image_tag FROM postgres;
GRANT ALL ON TABLE image_tag TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE image_tag TO web_usr;


--
-- Name: is_organism; Type: ACL; Schema: insitu; Owner: postgres
--

REVOKE ALL ON TABLE is_organism FROM PUBLIC;
REVOKE ALL ON TABLE is_organism FROM postgres;
GRANT ALL ON TABLE is_organism TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE is_organism TO web_usr;


--
-- Name: is_organism_is_organism_id_seq; Type: ACL; Schema: insitu; Owner: postgres
--

REVOKE ALL ON SEQUENCE is_organism_is_organism_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE is_organism_is_organism_id_seq FROM postgres;
GRANT ALL ON SEQUENCE is_organism_is_organism_id_seq TO postgres;
GRANT ALL ON SEQUENCE is_organism_is_organism_id_seq TO web_usr;


--
-- Name: probe; Type: ACL; Schema: insitu; Owner: postgres
--

REVOKE ALL ON TABLE probe FROM PUBLIC;
REVOKE ALL ON TABLE probe FROM postgres;
GRANT ALL ON TABLE probe TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE probe TO web_usr;


--
-- Name: probe_probe_id_seq; Type: ACL; Schema: insitu; Owner: postgres
--

REVOKE ALL ON SEQUENCE probe_probe_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE probe_probe_id_seq FROM postgres;
GRANT ALL ON SEQUENCE probe_probe_id_seq TO postgres;
GRANT ALL ON SEQUENCE probe_probe_id_seq TO web_usr;


--
-- Name: tag; Type: ACL; Schema: insitu; Owner: postgres
--

REVOKE ALL ON TABLE tag FROM PUBLIC;
REVOKE ALL ON TABLE tag FROM postgres;
GRANT ALL ON TABLE tag TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE tag TO web_usr;


--
-- Name: tag_implication; Type: ACL; Schema: insitu; Owner: postgres
--

REVOKE ALL ON TABLE tag_implication FROM PUBLIC;
REVOKE ALL ON TABLE tag_implication FROM postgres;
GRANT ALL ON TABLE tag_implication TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE tag_implication TO web_usr;


--
-- Name: tag_tag_id_seq; Type: ACL; Schema: insitu; Owner: postgres
--

REVOKE ALL ON SEQUENCE tag_tag_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE tag_tag_id_seq FROM postgres;
GRANT ALL ON SEQUENCE tag_tag_id_seq TO postgres;
GRANT ALL ON SEQUENCE tag_tag_id_seq TO web_usr;


SET search_path = metadata, pg_catalog;

--
-- Name: attribution; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON TABLE attribution FROM PUBLIC;
REVOKE ALL ON TABLE attribution FROM postgres;
GRANT ALL ON TABLE attribution TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE attribution TO web_usr;


--
-- Name: attribution_attribution_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON SEQUENCE attribution_attribution_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE attribution_attribution_id_seq FROM postgres;
GRANT ALL ON SEQUENCE attribution_attribution_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE attribution_attribution_id_seq TO web_usr;


--
-- Name: attribution_to; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON TABLE attribution_to FROM PUBLIC;
REVOKE ALL ON TABLE attribution_to FROM postgres;
GRANT ALL ON TABLE attribution_to TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE attribution_to TO web_usr;


--
-- Name: attribution_to_attribution_to_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON SEQUENCE attribution_to_attribution_to_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE attribution_to_attribution_to_id_seq FROM postgres;
GRANT ALL ON SEQUENCE attribution_to_attribution_to_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE attribution_to_attribution_to_id_seq TO web_usr;


--
-- Name: comments; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON TABLE comments FROM PUBLIC;
REVOKE ALL ON TABLE comments FROM postgres;
GRANT ALL ON TABLE comments TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE comments TO web_usr;


--
-- Name: comments_comment_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON SEQUENCE comments_comment_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE comments_comment_id_seq FROM postgres;
GRANT ALL ON SEQUENCE comments_comment_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE comments_comment_id_seq TO web_usr;


--
-- Name: md_dbipath; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON TABLE md_dbipath FROM PUBLIC;
REVOKE ALL ON TABLE md_dbipath FROM postgres;
GRANT ALL ON TABLE md_dbipath TO postgres;
GRANT SELECT ON TABLE md_dbipath TO web_usr;


--
-- Name: md_dbipath_dbipath_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON SEQUENCE md_dbipath_dbipath_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE md_dbipath_dbipath_id_seq FROM postgres;
GRANT ALL ON SEQUENCE md_dbipath_dbipath_id_seq TO postgres;
GRANT SELECT ON SEQUENCE md_dbipath_dbipath_id_seq TO web_usr;


--
-- Name: md_dbiref; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON TABLE md_dbiref FROM PUBLIC;
REVOKE ALL ON TABLE md_dbiref FROM postgres;
GRANT ALL ON TABLE md_dbiref TO postgres;
GRANT SELECT ON TABLE md_dbiref TO web_usr;


--
-- Name: md_dbiref_dbiref_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON SEQUENCE md_dbiref_dbiref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE md_dbiref_dbiref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE md_dbiref_dbiref_id_seq TO postgres;
GRANT SELECT ON SEQUENCE md_dbiref_dbiref_id_seq TO web_usr;


--
-- Name: md_dbversion; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON TABLE md_dbversion FROM PUBLIC;
REVOKE ALL ON TABLE md_dbversion FROM postgres;
GRANT ALL ON TABLE md_dbversion TO postgres;
GRANT SELECT ON TABLE md_dbversion TO web_usr;


--
-- Name: md_dbversion_dbversion_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON SEQUENCE md_dbversion_dbversion_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE md_dbversion_dbversion_id_seq FROM postgres;
GRANT ALL ON SEQUENCE md_dbversion_dbversion_id_seq TO postgres;
GRANT SELECT ON SEQUENCE md_dbversion_dbversion_id_seq TO web_usr;


--
-- Name: md_files; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON TABLE md_files FROM PUBLIC;
REVOKE ALL ON TABLE md_files FROM postgres;
GRANT ALL ON TABLE md_files TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE md_files TO web_usr;


--
-- Name: md_files_file_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON SEQUENCE md_files_file_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE md_files_file_id_seq FROM postgres;
GRANT ALL ON SEQUENCE md_files_file_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE md_files_file_id_seq TO web_usr;


--
-- Name: md_groupmembers; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON TABLE md_groupmembers FROM PUBLIC;
REVOKE ALL ON TABLE md_groupmembers FROM postgres;
GRANT ALL ON TABLE md_groupmembers TO postgres;
GRANT SELECT ON TABLE md_groupmembers TO web_usr;


--
-- Name: md_groupmembers_groupmember_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON SEQUENCE md_groupmembers_groupmember_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE md_groupmembers_groupmember_id_seq FROM postgres;
GRANT ALL ON SEQUENCE md_groupmembers_groupmember_id_seq TO postgres;
GRANT SELECT ON SEQUENCE md_groupmembers_groupmember_id_seq TO web_usr;


--
-- Name: md_groups; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON TABLE md_groups FROM PUBLIC;
REVOKE ALL ON TABLE md_groups FROM postgres;
GRANT ALL ON TABLE md_groups TO postgres;
GRANT SELECT ON TABLE md_groups TO web_usr;


--
-- Name: md_groups_group_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON SEQUENCE md_groups_group_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE md_groups_group_id_seq FROM postgres;
GRANT ALL ON SEQUENCE md_groups_group_id_seq TO postgres;
GRANT SELECT ON SEQUENCE md_groups_group_id_seq TO web_usr;


--
-- Name: md_image; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON TABLE md_image FROM PUBLIC;
REVOKE ALL ON TABLE md_image FROM postgres;
GRANT ALL ON TABLE md_image TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE md_image TO web_usr;


--
-- Name: md_image_image_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON SEQUENCE md_image_image_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE md_image_image_id_seq FROM postgres;
GRANT ALL ON SEQUENCE md_image_image_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE md_image_image_id_seq TO web_usr;


--
-- Name: md_image_organism; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON TABLE md_image_organism FROM PUBLIC;
REVOKE ALL ON TABLE md_image_organism FROM postgres;
GRANT ALL ON TABLE md_image_organism TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE md_image_organism TO web_usr;


--
-- Name: md_image_organism_md_image_organism_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON SEQUENCE md_image_organism_md_image_organism_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE md_image_organism_md_image_organism_id_seq FROM postgres;
GRANT ALL ON SEQUENCE md_image_organism_md_image_organism_id_seq TO postgres;
GRANT USAGE ON SEQUENCE md_image_organism_md_image_organism_id_seq TO web_usr;


--
-- Name: md_metadata; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON TABLE md_metadata FROM PUBLIC;
REVOKE ALL ON TABLE md_metadata FROM postgres;
GRANT ALL ON TABLE md_metadata TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE md_metadata TO web_usr;


--
-- Name: md_metadata_metadata_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON SEQUENCE md_metadata_metadata_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE md_metadata_metadata_id_seq FROM postgres;
GRANT ALL ON SEQUENCE md_metadata_metadata_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE md_metadata_metadata_id_seq TO web_usr;


--
-- Name: md_tag; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON TABLE md_tag FROM PUBLIC;
REVOKE ALL ON TABLE md_tag FROM postgres;
GRANT ALL ON TABLE md_tag TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE md_tag TO web_usr;


--
-- Name: md_tag_image; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON TABLE md_tag_image FROM PUBLIC;
REVOKE ALL ON TABLE md_tag_image FROM postgres;
GRANT ALL ON TABLE md_tag_image TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE md_tag_image TO web_usr;


--
-- Name: md_tag_image_tag_image_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON SEQUENCE md_tag_image_tag_image_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE md_tag_image_tag_image_id_seq FROM postgres;
GRANT ALL ON SEQUENCE md_tag_image_tag_image_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE md_tag_image_tag_image_id_seq TO web_usr;


--
-- Name: md_tag_tag_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON SEQUENCE md_tag_tag_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE md_tag_tag_id_seq FROM postgres;
GRANT ALL ON SEQUENCE md_tag_tag_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE md_tag_tag_id_seq TO web_usr;


--
-- Name: roles; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON TABLE roles FROM PUBLIC;
REVOKE ALL ON TABLE roles FROM postgres;
GRANT ALL ON TABLE roles TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE roles TO web_usr;


--
-- Name: roles_role_id_seq; Type: ACL; Schema: metadata; Owner: postgres
--

REVOKE ALL ON SEQUENCE roles_role_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE roles_role_id_seq FROM postgres;
GRANT ALL ON SEQUENCE roles_role_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE roles_role_id_seq TO web_usr;


SET search_path = pheno_population, pg_catalog;

--
-- Name: data_points; Type: ACL; Schema: pheno_population; Owner: postgres
--

REVOKE ALL ON TABLE data_points FROM PUBLIC;
REVOKE ALL ON TABLE data_points FROM postgres;
GRANT ALL ON TABLE data_points TO postgres;
GRANT SELECT ON TABLE data_points TO web_usr;


--
-- Name: data_points_dp_id_seq; Type: ACL; Schema: pheno_population; Owner: postgres
--

REVOKE ALL ON SEQUENCE data_points_dp_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE data_points_dp_id_seq FROM postgres;
GRANT ALL ON SEQUENCE data_points_dp_id_seq TO postgres;


--
-- Name: genotypes; Type: ACL; Schema: pheno_population; Owner: postgres
--

REVOKE ALL ON TABLE genotypes FROM PUBLIC;
REVOKE ALL ON TABLE genotypes FROM postgres;
GRANT ALL ON TABLE genotypes TO postgres;
GRANT SELECT ON TABLE genotypes TO web_usr;


--
-- Name: genotypes_gen_id_seq; Type: ACL; Schema: pheno_population; Owner: postgres
--

REVOKE ALL ON SEQUENCE genotypes_gen_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE genotypes_gen_id_seq FROM postgres;
GRANT ALL ON SEQUENCE genotypes_gen_id_seq TO postgres;


--
-- Name: images; Type: ACL; Schema: pheno_population; Owner: postgres
--

REVOKE ALL ON TABLE images FROM PUBLIC;
REVOKE ALL ON TABLE images FROM postgres;
GRANT ALL ON TABLE images TO postgres;
GRANT SELECT ON TABLE images TO web_usr;


--
-- Name: images_image_id_seq; Type: ACL; Schema: pheno_population; Owner: postgres
--

REVOKE ALL ON SEQUENCE images_image_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE images_image_id_seq FROM postgres;
GRANT ALL ON SEQUENCE images_image_id_seq TO postgres;


--
-- Name: locations; Type: ACL; Schema: pheno_population; Owner: postgres
--

REVOKE ALL ON TABLE locations FROM PUBLIC;
REVOKE ALL ON TABLE locations FROM postgres;
GRANT ALL ON TABLE locations TO postgres;
GRANT SELECT ON TABLE locations TO web_usr;


--
-- Name: locations_loc_id_seq; Type: ACL; Schema: pheno_population; Owner: postgres
--

REVOKE ALL ON SEQUENCE locations_loc_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE locations_loc_id_seq FROM postgres;
GRANT ALL ON SEQUENCE locations_loc_id_seq TO postgres;


--
-- Name: organs; Type: ACL; Schema: pheno_population; Owner: postgres
--

REVOKE ALL ON TABLE organs FROM PUBLIC;
REVOKE ALL ON TABLE organs FROM postgres;
GRANT ALL ON TABLE organs TO postgres;
GRANT SELECT ON TABLE organs TO web_usr;


--
-- Name: organs_organ_id_seq; Type: ACL; Schema: pheno_population; Owner: postgres
--

REVOKE ALL ON SEQUENCE organs_organ_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE organs_organ_id_seq FROM postgres;
GRANT ALL ON SEQUENCE organs_organ_id_seq TO postgres;


--
-- Name: plants; Type: ACL; Schema: pheno_population; Owner: postgres
--

REVOKE ALL ON TABLE plants FROM PUBLIC;
REVOKE ALL ON TABLE plants FROM postgres;
GRANT ALL ON TABLE plants TO postgres;
GRANT SELECT ON TABLE plants TO web_usr;


--
-- Name: plants_plant_id_seq; Type: ACL; Schema: pheno_population; Owner: postgres
--

REVOKE ALL ON SEQUENCE plants_plant_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE plants_plant_id_seq FROM postgres;
GRANT ALL ON SEQUENCE plants_plant_id_seq TO postgres;


--
-- Name: populations; Type: ACL; Schema: pheno_population; Owner: postgres
--

REVOKE ALL ON TABLE populations FROM PUBLIC;
REVOKE ALL ON TABLE populations FROM postgres;
GRANT ALL ON TABLE populations TO postgres;
GRANT SELECT ON TABLE populations TO web_usr;


--
-- Name: populations_pop_id_seq; Type: ACL; Schema: pheno_population; Owner: postgres
--

REVOKE ALL ON SEQUENCE populations_pop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE populations_pop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE populations_pop_id_seq TO postgres;


--
-- Name: properties; Type: ACL; Schema: pheno_population; Owner: postgres
--

REVOKE ALL ON TABLE properties FROM PUBLIC;
REVOKE ALL ON TABLE properties FROM postgres;
GRANT ALL ON TABLE properties TO postgres;
GRANT SELECT ON TABLE properties TO web_usr;


--
-- Name: properties_prop_id_seq; Type: ACL; Schema: pheno_population; Owner: postgres
--

REVOKE ALL ON SEQUENCE properties_prop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE properties_prop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE properties_prop_id_seq TO postgres;


--
-- Name: samples; Type: ACL; Schema: pheno_population; Owner: postgres
--

REVOKE ALL ON TABLE samples FROM PUBLIC;
REVOKE ALL ON TABLE samples FROM postgres;
GRANT ALL ON TABLE samples TO postgres;
GRANT SELECT ON TABLE samples TO web_usr;


--
-- Name: samples_sample_id_seq; Type: ACL; Schema: pheno_population; Owner: postgres
--

REVOKE ALL ON SEQUENCE samples_sample_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE samples_sample_id_seq FROM postgres;
GRANT ALL ON SEQUENCE samples_sample_id_seq TO postgres;


--
-- Name: sources; Type: ACL; Schema: pheno_population; Owner: postgres
--

REVOKE ALL ON TABLE sources FROM PUBLIC;
REVOKE ALL ON TABLE sources FROM postgres;
GRANT ALL ON TABLE sources TO postgres;
GRANT SELECT ON TABLE sources TO web_usr;


--
-- Name: sources_source_id_seq; Type: ACL; Schema: pheno_population; Owner: postgres
--

REVOKE ALL ON SEQUENCE sources_source_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sources_source_id_seq FROM postgres;
GRANT ALL ON SEQUENCE sources_source_id_seq TO postgres;


SET search_path = phenome, pg_catalog;

--
-- Name: allele; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE allele FROM PUBLIC;
REVOKE ALL ON TABLE allele FROM postgres;
GRANT ALL ON TABLE allele TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE allele TO web_usr;


--
-- Name: allele_alias; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE allele_alias FROM PUBLIC;
REVOKE ALL ON TABLE allele_alias FROM postgres;
GRANT ALL ON TABLE allele_alias TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE allele_alias TO web_usr;


--
-- Name: allele_alias_allele_alias_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE allele_alias_allele_alias_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE allele_alias_allele_alias_id_seq FROM postgres;
GRANT ALL ON SEQUENCE allele_alias_allele_alias_id_seq TO postgres;
GRANT UPDATE ON SEQUENCE allele_alias_allele_alias_id_seq TO web_usr;


--
-- Name: allele_allele_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE allele_allele_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE allele_allele_id_seq FROM postgres;
GRANT ALL ON SEQUENCE allele_allele_id_seq TO postgres;
GRANT ALL ON SEQUENCE allele_allele_id_seq TO web_usr;


--
-- Name: allele_dbxref; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE allele_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE allele_dbxref FROM postgres;
GRANT ALL ON TABLE allele_dbxref TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE allele_dbxref TO web_usr;


--
-- Name: allele_dbxref_allele_dbxref_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE allele_dbxref_allele_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE allele_dbxref_allele_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE allele_dbxref_allele_dbxref_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE allele_dbxref_allele_dbxref_id_seq TO web_usr;


--
-- Name: allele_history; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE allele_history FROM PUBLIC;
REVOKE ALL ON TABLE allele_history FROM postgres;
GRANT ALL ON TABLE allele_history TO postgres;
GRANT SELECT,INSERT ON TABLE allele_history TO web_usr;


--
-- Name: allele_history_allele_history_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE allele_history_allele_history_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE allele_history_allele_history_id_seq FROM postgres;
GRANT ALL ON SEQUENCE allele_history_allele_history_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE allele_history_allele_history_id_seq TO web_usr;


--
-- Name: cross_type; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE cross_type FROM PUBLIC;
REVOKE ALL ON TABLE cross_type FROM postgres;
GRANT ALL ON TABLE cross_type TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE cross_type TO web_usr;


--
-- Name: cross_type_cross_type_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE cross_type_cross_type_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cross_type_cross_type_id_seq FROM postgres;
GRANT ALL ON SEQUENCE cross_type_cross_type_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE cross_type_cross_type_id_seq TO web_usr;


--
-- Name: cvterm_pub_ranking; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE cvterm_pub_ranking FROM PUBLIC;
REVOKE ALL ON TABLE cvterm_pub_ranking FROM postgres;
GRANT ALL ON TABLE cvterm_pub_ranking TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE cvterm_pub_ranking TO web_usr;


--
-- Name: dbxref_type; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE dbxref_type FROM PUBLIC;
REVOKE ALL ON TABLE dbxref_type FROM postgres;
GRANT ALL ON TABLE dbxref_type TO postgres;
GRANT SELECT ON TABLE dbxref_type TO web_usr;


--
-- Name: dbxref_type_dbxref_type_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE dbxref_type_dbxref_type_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dbxref_type_dbxref_type_id_seq FROM postgres;
GRANT ALL ON SEQUENCE dbxref_type_dbxref_type_id_seq TO postgres;
GRANT ALL ON SEQUENCE dbxref_type_dbxref_type_id_seq TO web_usr;


--
-- Name: genotype; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE genotype FROM PUBLIC;
REVOKE ALL ON TABLE genotype FROM postgres;
GRANT ALL ON TABLE genotype TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE genotype TO web_usr;


--
-- Name: genotype_experiment; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE genotype_experiment FROM PUBLIC;
REVOKE ALL ON TABLE genotype_experiment FROM postgres;
GRANT ALL ON TABLE genotype_experiment TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE genotype_experiment TO web_usr;


--
-- Name: genotype_experiment_genotype_experiment_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE genotype_experiment_genotype_experiment_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE genotype_experiment_genotype_experiment_id_seq FROM postgres;
GRANT ALL ON SEQUENCE genotype_experiment_genotype_experiment_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE genotype_experiment_genotype_experiment_id_seq TO web_usr;


--
-- Name: genotype_genotype_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE genotype_genotype_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE genotype_genotype_id_seq FROM postgres;
GRANT ALL ON SEQUENCE genotype_genotype_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE genotype_genotype_id_seq TO web_usr;


--
-- Name: genotype_region; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE genotype_region FROM PUBLIC;
REVOKE ALL ON TABLE genotype_region FROM postgres;
GRANT ALL ON TABLE genotype_region TO postgres;
GRANT SELECT ON TABLE genotype_region TO PUBLIC;
GRANT SELECT,INSERT,UPDATE ON TABLE genotype_region TO web_usr;


--
-- Name: genotype_region_genotype_region_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE genotype_region_genotype_region_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE genotype_region_genotype_region_id_seq FROM postgres;
GRANT ALL ON SEQUENCE genotype_region_genotype_region_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE genotype_region_genotype_region_id_seq TO web_usr;


--
-- Name: germplasm; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE germplasm FROM PUBLIC;
REVOKE ALL ON TABLE germplasm FROM postgres;
GRANT ALL ON TABLE germplasm TO postgres;
GRANT SELECT ON TABLE germplasm TO web_usr;


--
-- Name: germplasm_germplasm_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE germplasm_germplasm_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE germplasm_germplasm_id_seq FROM postgres;
GRANT ALL ON SEQUENCE germplasm_germplasm_id_seq TO postgres;
GRANT ALL ON SEQUENCE germplasm_germplasm_id_seq TO web_usr;


--
-- Name: individual; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE individual FROM PUBLIC;
REVOKE ALL ON TABLE individual FROM postgres;
GRANT ALL ON TABLE individual TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE individual TO web_usr;


--
-- Name: individual_allele; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE individual_allele FROM PUBLIC;
REVOKE ALL ON TABLE individual_allele FROM postgres;
GRANT ALL ON TABLE individual_allele TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE individual_allele TO web_usr;


--
-- Name: individual_allele_individual_allele_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE individual_allele_individual_allele_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE individual_allele_individual_allele_id_seq FROM postgres;
GRANT ALL ON SEQUENCE individual_allele_individual_allele_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE individual_allele_individual_allele_id_seq TO web_usr;


--
-- Name: individual_dbxref; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE individual_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE individual_dbxref FROM postgres;
GRANT ALL ON TABLE individual_dbxref TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE individual_dbxref TO web_usr;


--
-- Name: individual_dbxref_evidence; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE individual_dbxref_evidence FROM PUBLIC;
REVOKE ALL ON TABLE individual_dbxref_evidence FROM postgres;
GRANT ALL ON TABLE individual_dbxref_evidence TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE individual_dbxref_evidence TO web_usr;


--
-- Name: individual_dbxref_evidence_history; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE individual_dbxref_evidence_history FROM PUBLIC;
REVOKE ALL ON TABLE individual_dbxref_evidence_history FROM postgres;
GRANT ALL ON TABLE individual_dbxref_evidence_history TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE individual_dbxref_evidence_history TO web_usr;


--
-- Name: individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq FROM postgres;
GRANT ALL ON SEQUENCE individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE individual_dbxref_evidence_hi_individual_dbxref_evidence_hi_seq TO web_usr;


--
-- Name: individual_dbxref_evidence_individual_dbxref_evidence_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE individual_dbxref_evidence_individual_dbxref_evidence_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE individual_dbxref_evidence_individual_dbxref_evidence_id_seq FROM postgres;
GRANT ALL ON SEQUENCE individual_dbxref_evidence_individual_dbxref_evidence_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE individual_dbxref_evidence_individual_dbxref_evidence_id_seq TO web_usr;


--
-- Name: individual_dbxref_individual_dbxref_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE individual_dbxref_individual_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE individual_dbxref_individual_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE individual_dbxref_individual_dbxref_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE individual_dbxref_individual_dbxref_id_seq TO web_usr;


--
-- Name: individual_history; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE individual_history FROM PUBLIC;
REVOKE ALL ON TABLE individual_history FROM postgres;
GRANT ALL ON TABLE individual_history TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE individual_history TO web_usr;


--
-- Name: individual_history_individual_history_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE individual_history_individual_history_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE individual_history_individual_history_id_seq FROM postgres;
GRANT ALL ON SEQUENCE individual_history_individual_history_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE individual_history_individual_history_id_seq TO web_usr;


--
-- Name: individual_image; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE individual_image FROM PUBLIC;
REVOKE ALL ON TABLE individual_image FROM postgres;
GRANT ALL ON TABLE individual_image TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE individual_image TO web_usr;


--
-- Name: individual_image_individual_image_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE individual_image_individual_image_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE individual_image_individual_image_id_seq FROM postgres;
GRANT ALL ON SEQUENCE individual_image_individual_image_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE individual_image_individual_image_id_seq TO web_usr;


--
-- Name: individual_individual_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE individual_individual_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE individual_individual_id_seq FROM postgres;
GRANT ALL ON SEQUENCE individual_individual_id_seq TO postgres;
GRANT ALL ON SEQUENCE individual_individual_id_seq TO web_usr;


--
-- Name: individual_locus; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE individual_locus FROM PUBLIC;
REVOKE ALL ON TABLE individual_locus FROM postgres;
GRANT ALL ON TABLE individual_locus TO postgres;
GRANT SELECT ON TABLE individual_locus TO web_usr;


--
-- Name: is_public; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE is_public FROM PUBLIC;
REVOKE ALL ON TABLE is_public FROM postgres;
GRANT ALL ON TABLE is_public TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE is_public TO web_usr;


--
-- Name: is_public_is_public_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE is_public_is_public_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE is_public_is_public_id_seq FROM postgres;
GRANT ALL ON SEQUENCE is_public_is_public_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE is_public_is_public_id_seq TO web_usr;


--
-- Name: locus; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE locus FROM PUBLIC;
REVOKE ALL ON TABLE locus FROM postgres;
GRANT ALL ON TABLE locus TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE locus TO web_usr;


--
-- Name: locus2locus; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE locus2locus FROM PUBLIC;
REVOKE ALL ON TABLE locus2locus FROM postgres;
GRANT ALL ON TABLE locus2locus TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE locus2locus TO web_usr;


--
-- Name: locus2locus_locus2locus_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE locus2locus_locus2locus_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE locus2locus_locus2locus_id_seq FROM postgres;
GRANT ALL ON SEQUENCE locus2locus_locus2locus_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE locus2locus_locus2locus_id_seq TO web_usr;


--
-- Name: locus_alias; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE locus_alias FROM PUBLIC;
REVOKE ALL ON TABLE locus_alias FROM postgres;
GRANT ALL ON TABLE locus_alias TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE locus_alias TO web_usr;


--
-- Name: locus_alias_locus_alias_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE locus_alias_locus_alias_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE locus_alias_locus_alias_id_seq FROM postgres;
GRANT ALL ON SEQUENCE locus_alias_locus_alias_id_seq TO postgres;
GRANT ALL ON SEQUENCE locus_alias_locus_alias_id_seq TO web_usr;


--
-- Name: locus_dbxref; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE locus_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE locus_dbxref FROM postgres;
GRANT ALL ON TABLE locus_dbxref TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE locus_dbxref TO web_usr;


--
-- Name: locus_dbxref_evidence; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE locus_dbxref_evidence FROM PUBLIC;
REVOKE ALL ON TABLE locus_dbxref_evidence FROM postgres;
GRANT ALL ON TABLE locus_dbxref_evidence TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE locus_dbxref_evidence TO web_usr;


--
-- Name: locus_dbxref_evidence_history; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE locus_dbxref_evidence_history FROM PUBLIC;
REVOKE ALL ON TABLE locus_dbxref_evidence_history FROM postgres;
GRANT ALL ON TABLE locus_dbxref_evidence_history TO postgres;
GRANT SELECT,INSERT ON TABLE locus_dbxref_evidence_history TO web_usr;


--
-- Name: locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq FROM postgres;
GRANT ALL ON SEQUENCE locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq TO postgres;
GRANT ALL ON SEQUENCE locus_dbxref_evidence_history_locus_dbxref_evidence_history_seq TO web_usr;


--
-- Name: locus_dbxref_evidence_locus_dbxref_evidence_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE locus_dbxref_evidence_locus_dbxref_evidence_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE locus_dbxref_evidence_locus_dbxref_evidence_id_seq FROM postgres;
GRANT ALL ON SEQUENCE locus_dbxref_evidence_locus_dbxref_evidence_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE locus_dbxref_evidence_locus_dbxref_evidence_id_seq TO web_usr;


--
-- Name: locus_dbxref_locus_dbxref_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE locus_dbxref_locus_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE locus_dbxref_locus_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE locus_dbxref_locus_dbxref_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE locus_dbxref_locus_dbxref_id_seq TO web_usr;


--
-- Name: locus_history; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE locus_history FROM PUBLIC;
REVOKE ALL ON TABLE locus_history FROM postgres;
GRANT ALL ON TABLE locus_history TO postgres;
GRANT SELECT,INSERT ON TABLE locus_history TO web_usr;


--
-- Name: locus_history_locus_history_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE locus_history_locus_history_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE locus_history_locus_history_id_seq FROM postgres;
GRANT ALL ON SEQUENCE locus_history_locus_history_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE locus_history_locus_history_id_seq TO web_usr;


--
-- Name: locus_image; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE locus_image FROM PUBLIC;
REVOKE ALL ON TABLE locus_image FROM postgres;
GRANT ALL ON TABLE locus_image TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE locus_image TO web_usr;


--
-- Name: locus_image_locus_image_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE locus_image_locus_image_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE locus_image_locus_image_id_seq FROM postgres;
GRANT ALL ON SEQUENCE locus_image_locus_image_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE locus_image_locus_image_id_seq TO web_usr;


--
-- Name: locus_locus_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE locus_locus_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE locus_locus_id_seq FROM postgres;
GRANT ALL ON SEQUENCE locus_locus_id_seq TO postgres;
GRANT ALL ON SEQUENCE locus_locus_id_seq TO web_usr;


--
-- Name: locus_marker; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE locus_marker FROM PUBLIC;
REVOKE ALL ON TABLE locus_marker FROM postgres;
GRANT ALL ON TABLE locus_marker TO postgres;
GRANT SELECT ON TABLE locus_marker TO web_usr;


--
-- Name: locus_owner; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE locus_owner FROM PUBLIC;
REVOKE ALL ON TABLE locus_owner FROM postgres;
GRANT ALL ON TABLE locus_owner TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE locus_owner TO web_usr;


--
-- Name: locus_owner_locus_owner_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE locus_owner_locus_owner_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE locus_owner_locus_owner_id_seq FROM postgres;
GRANT ALL ON SEQUENCE locus_owner_locus_owner_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE locus_owner_locus_owner_id_seq TO web_usr;


--
-- Name: locus_pub_ranking; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE locus_pub_ranking FROM PUBLIC;
REVOKE ALL ON TABLE locus_pub_ranking FROM postgres;
GRANT ALL ON TABLE locus_pub_ranking TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE locus_pub_ranking TO web_usr;


--
-- Name: locus_pub_ranking_validate; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE locus_pub_ranking_validate FROM PUBLIC;
REVOKE ALL ON TABLE locus_pub_ranking_validate FROM postgres;
GRANT ALL ON TABLE locus_pub_ranking_validate TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE locus_pub_ranking_validate TO web_usr;


--
-- Name: locus_registry; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE locus_registry FROM PUBLIC;
REVOKE ALL ON TABLE locus_registry FROM postgres;
GRANT ALL ON TABLE locus_registry TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE locus_registry TO web_usr;


--
-- Name: locus_registry_locus_registry_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE locus_registry_locus_registry_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE locus_registry_locus_registry_id_seq FROM postgres;
GRANT ALL ON SEQUENCE locus_registry_locus_registry_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE locus_registry_locus_registry_id_seq TO web_usr;


--
-- Name: locus_unigene; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE locus_unigene FROM PUBLIC;
REVOKE ALL ON TABLE locus_unigene FROM postgres;
GRANT ALL ON TABLE locus_unigene TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE locus_unigene TO web_usr;


--
-- Name: locus_unigene_locus_unigene_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE locus_unigene_locus_unigene_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE locus_unigene_locus_unigene_id_seq FROM postgres;
GRANT ALL ON SEQUENCE locus_unigene_locus_unigene_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE locus_unigene_locus_unigene_id_seq TO web_usr;


--
-- Name: locusgroup; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE locusgroup FROM PUBLIC;
REVOKE ALL ON TABLE locusgroup FROM postgres;
GRANT ALL ON TABLE locusgroup TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE locusgroup TO web_usr;


--
-- Name: locusgroup_locusgroup_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE locusgroup_locusgroup_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE locusgroup_locusgroup_id_seq FROM postgres;
GRANT ALL ON SEQUENCE locusgroup_locusgroup_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE locusgroup_locusgroup_id_seq TO web_usr;


--
-- Name: locusgroup_member; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE locusgroup_member FROM PUBLIC;
REVOKE ALL ON TABLE locusgroup_member FROM postgres;
GRANT ALL ON TABLE locusgroup_member TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE locusgroup_member TO web_usr;


--
-- Name: locusgroup_member_locusgroup_member_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE locusgroup_member_locusgroup_member_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE locusgroup_member_locusgroup_member_id_seq FROM postgres;
GRANT ALL ON SEQUENCE locusgroup_member_locusgroup_member_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE locusgroup_member_locusgroup_member_id_seq TO web_usr;


--
-- Name: nd_experiment_md_files; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE nd_experiment_md_files FROM PUBLIC;
REVOKE ALL ON TABLE nd_experiment_md_files FROM postgres;
GRANT ALL ON TABLE nd_experiment_md_files TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE nd_experiment_md_files TO web_usr;


--
-- Name: nd_experiment_md_files_nd_experiment_md_files_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE nd_experiment_md_files_nd_experiment_md_files_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE nd_experiment_md_files_nd_experiment_md_files_id_seq FROM postgres;
GRANT ALL ON SEQUENCE nd_experiment_md_files_nd_experiment_md_files_id_seq TO postgres;
GRANT USAGE ON SEQUENCE nd_experiment_md_files_nd_experiment_md_files_id_seq TO web_usr;


--
-- Name: phenotype_user_trait; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE phenotype_user_trait FROM PUBLIC;
REVOKE ALL ON TABLE phenotype_user_trait FROM postgres;
GRANT ALL ON TABLE phenotype_user_trait TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE phenotype_user_trait TO web_usr;


--
-- Name: phenotype_user_trait_phenotype_user_trait_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE phenotype_user_trait_phenotype_user_trait_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE phenotype_user_trait_phenotype_user_trait_id_seq FROM postgres;
GRANT ALL ON SEQUENCE phenotype_user_trait_phenotype_user_trait_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE phenotype_user_trait_phenotype_user_trait_id_seq TO web_usr;


--
-- Name: polymorphic_fragment; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE polymorphic_fragment FROM PUBLIC;
REVOKE ALL ON TABLE polymorphic_fragment FROM postgres;
GRANT ALL ON TABLE polymorphic_fragment TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE polymorphic_fragment TO web_usr;


--
-- Name: polymorphic_fragment_polymorphic_fragment_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE polymorphic_fragment_polymorphic_fragment_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE polymorphic_fragment_polymorphic_fragment_id_seq FROM postgres;
GRANT ALL ON SEQUENCE polymorphic_fragment_polymorphic_fragment_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE polymorphic_fragment_polymorphic_fragment_id_seq TO web_usr;


--
-- Name: population; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE population FROM PUBLIC;
REVOKE ALL ON TABLE population FROM postgres;
GRANT ALL ON TABLE population TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE population TO web_usr;


--
-- Name: population_dbxref; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE population_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE population_dbxref FROM postgres;
GRANT ALL ON TABLE population_dbxref TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE population_dbxref TO web_usr;


--
-- Name: population_dbxref_population_dbxref_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE population_dbxref_population_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE population_dbxref_population_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE population_dbxref_population_dbxref_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE population_dbxref_population_dbxref_id_seq TO web_usr;


--
-- Name: population_population_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE population_population_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE population_population_id_seq FROM postgres;
GRANT ALL ON SEQUENCE population_population_id_seq TO postgres;
GRANT ALL ON SEQUENCE population_population_id_seq TO web_usr;


--
-- Name: pub_curator; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE pub_curator FROM PUBLIC;
REVOKE ALL ON TABLE pub_curator FROM postgres;
GRANT ALL ON TABLE pub_curator TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE pub_curator TO web_usr;


--
-- Name: pub_curator_pub_curator_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE pub_curator_pub_curator_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE pub_curator_pub_curator_id_seq FROM postgres;
GRANT ALL ON SEQUENCE pub_curator_pub_curator_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE pub_curator_pub_curator_id_seq TO web_usr;


--
-- Name: registry; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE registry FROM PUBLIC;
REVOKE ALL ON TABLE registry FROM postgres;
GRANT ALL ON TABLE registry TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE registry TO web_usr;


--
-- Name: registry_registry_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE registry_registry_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE registry_registry_id_seq FROM postgres;
GRANT ALL ON SEQUENCE registry_registry_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE registry_registry_id_seq TO web_usr;


--
-- Name: stock_allele; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE stock_allele FROM PUBLIC;
REVOKE ALL ON TABLE stock_allele FROM postgres;
GRANT ALL ON TABLE stock_allele TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE stock_allele TO web_usr;


--
-- Name: stock_allele_stock_allele_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE stock_allele_stock_allele_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE stock_allele_stock_allele_id_seq FROM postgres;
GRANT ALL ON SEQUENCE stock_allele_stock_allele_id_seq TO postgres;
GRANT USAGE ON SEQUENCE stock_allele_stock_allele_id_seq TO web_usr;


--
-- Name: stock_image; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE stock_image FROM PUBLIC;
REVOKE ALL ON TABLE stock_image FROM postgres;
GRANT ALL ON TABLE stock_image TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE stock_image TO web_usr;


--
-- Name: stock_image_stock_image_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE stock_image_stock_image_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE stock_image_stock_image_id_seq FROM postgres;
GRANT ALL ON SEQUENCE stock_image_stock_image_id_seq TO postgres;
GRANT USAGE ON SEQUENCE stock_image_stock_image_id_seq TO web_usr;


--
-- Name: stock_owner; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE stock_owner FROM PUBLIC;
REVOKE ALL ON TABLE stock_owner FROM postgres;
GRANT ALL ON TABLE stock_owner TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE stock_owner TO web_usr;


--
-- Name: stock_owner_stock_owner_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE stock_owner_stock_owner_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE stock_owner_stock_owner_id_seq FROM postgres;
GRANT ALL ON SEQUENCE stock_owner_stock_owner_id_seq TO postgres;
GRANT USAGE ON SEQUENCE stock_owner_stock_owner_id_seq TO web_usr;


--
-- Name: tomato_il_bin; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE tomato_il_bin FROM PUBLIC;
REVOKE ALL ON TABLE tomato_il_bin FROM postgres;
GRANT ALL ON TABLE tomato_il_bin TO postgres;
GRANT SELECT ON TABLE tomato_il_bin TO PUBLIC;
GRANT SELECT,INSERT,UPDATE ON TABLE tomato_il_bin TO web_usr;


--
-- Name: tomato_il_bin_il_bin_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE tomato_il_bin_il_bin_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE tomato_il_bin_il_bin_id_seq FROM postgres;
GRANT ALL ON SEQUENCE tomato_il_bin_il_bin_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE tomato_il_bin_il_bin_id_seq TO web_usr;


--
-- Name: tomato_term; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE tomato_term FROM PUBLIC;
REVOKE ALL ON TABLE tomato_term FROM postgres;
GRANT ALL ON TABLE tomato_term TO postgres;
GRANT SELECT ON TABLE tomato_term TO web_usr;


--
-- Name: tomato_term2term; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE tomato_term2term FROM PUBLIC;
REVOKE ALL ON TABLE tomato_term2term FROM postgres;
GRANT ALL ON TABLE tomato_term2term TO postgres;
GRANT SELECT ON TABLE tomato_term2term TO web_usr;


--
-- Name: tomato_term2term_tomato_term2term_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE tomato_term2term_tomato_term2term_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE tomato_term2term_tomato_term2term_id_seq FROM postgres;
GRANT ALL ON SEQUENCE tomato_term2term_tomato_term2term_id_seq TO postgres;
GRANT ALL ON SEQUENCE tomato_term2term_tomato_term2term_id_seq TO web_usr;


--
-- Name: tomato_term_tomato_term_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE tomato_term_tomato_term_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE tomato_term_tomato_term_id_seq FROM postgres;
GRANT ALL ON SEQUENCE tomato_term_tomato_term_id_seq TO postgres;
GRANT ALL ON SEQUENCE tomato_term_tomato_term_id_seq TO web_usr;


--
-- Name: unit; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE unit FROM PUBLIC;
REVOKE ALL ON TABLE unit FROM postgres;
GRANT ALL ON TABLE unit TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE unit TO web_usr;


--
-- Name: unit_unit_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE unit_unit_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE unit_unit_id_seq FROM postgres;
GRANT ALL ON SEQUENCE unit_unit_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE unit_unit_id_seq TO web_usr;


--
-- Name: user_trait; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE user_trait FROM PUBLIC;
REVOKE ALL ON TABLE user_trait FROM postgres;
GRANT ALL ON TABLE user_trait TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE user_trait TO web_usr;


--
-- Name: user_trait_unit; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE user_trait_unit FROM PUBLIC;
REVOKE ALL ON TABLE user_trait_unit FROM postgres;
GRANT ALL ON TABLE user_trait_unit TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE user_trait_unit TO web_usr;


--
-- Name: user_trait_unit_user_trait_unit_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE user_trait_unit_user_trait_unit_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE user_trait_unit_user_trait_unit_id_seq FROM postgres;
GRANT ALL ON SEQUENCE user_trait_unit_user_trait_unit_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE user_trait_unit_user_trait_unit_id_seq TO web_usr;


--
-- Name: user_trait_user_trait_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE user_trait_user_trait_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE user_trait_user_trait_id_seq FROM postgres;
GRANT ALL ON SEQUENCE user_trait_user_trait_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE user_trait_user_trait_id_seq TO web_usr;


--
-- Name: variant; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON TABLE variant FROM PUBLIC;
REVOKE ALL ON TABLE variant FROM postgres;
GRANT ALL ON TABLE variant TO postgres;
GRANT SELECT ON TABLE variant TO web_usr;


--
-- Name: variant_variant_id_seq; Type: ACL; Schema: phenome; Owner: postgres
--

REVOKE ALL ON SEQUENCE variant_variant_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE variant_variant_id_seq FROM postgres;
GRANT ALL ON SEQUENCE variant_variant_id_seq TO postgres;
GRANT ALL ON SEQUENCE variant_variant_id_seq TO web_usr;


SET search_path = physical, pg_catalog;

--
-- Name: ba_plausibility; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE ba_plausibility FROM PUBLIC;
REVOKE ALL ON TABLE ba_plausibility FROM postgres;
GRANT ALL ON TABLE ba_plausibility TO postgres;
GRANT SELECT ON TABLE ba_plausibility TO web_usr;


--
-- Name: ba_plausibility_bap_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE ba_plausibility_bap_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ba_plausibility_bap_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ba_plausibility_bap_id_seq TO postgres;
GRANT ALL ON SEQUENCE ba_plausibility_bap_id_seq TO web_usr;


--
-- Name: bac_associations; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE bac_associations FROM PUBLIC;
REVOKE ALL ON TABLE bac_associations FROM postgres;
GRANT ALL ON TABLE bac_associations TO postgres;
GRANT SELECT ON TABLE bac_associations TO web_usr;


--
-- Name: bac_associations_bac_assoc_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE bac_associations_bac_assoc_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bac_associations_bac_assoc_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bac_associations_bac_assoc_id_seq TO postgres;
GRANT ALL ON SEQUENCE bac_associations_bac_assoc_id_seq TO web_usr;


--
-- Name: bac_consensus_sequences; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE bac_consensus_sequences FROM PUBLIC;
REVOKE ALL ON TABLE bac_consensus_sequences FROM postgres;
GRANT ALL ON TABLE bac_consensus_sequences TO postgres;
GRANT SELECT ON TABLE bac_consensus_sequences TO web_usr;


--
-- Name: bac_consensus_sequences_consensus_seq_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE bac_consensus_sequences_consensus_seq_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bac_consensus_sequences_consensus_seq_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bac_consensus_sequences_consensus_seq_id_seq TO postgres;
GRANT ALL ON SEQUENCE bac_consensus_sequences_consensus_seq_id_seq TO web_usr;


--
-- Name: bac_contigs; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE bac_contigs FROM PUBLIC;
REVOKE ALL ON TABLE bac_contigs FROM postgres;
GRANT ALL ON TABLE bac_contigs TO postgres;
GRANT SELECT ON TABLE bac_contigs TO web_usr;


--
-- Name: bac_contigs_bac_contig_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE bac_contigs_bac_contig_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bac_contigs_bac_contig_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bac_contigs_bac_contig_id_seq TO postgres;
GRANT ALL ON SEQUENCE bac_contigs_bac_contig_id_seq TO web_usr;


--
-- Name: bac_end_sequences; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE bac_end_sequences FROM PUBLIC;
REVOKE ALL ON TABLE bac_end_sequences FROM postgres;
GRANT ALL ON TABLE bac_end_sequences TO postgres;
GRANT SELECT ON TABLE bac_end_sequences TO web_usr;


--
-- Name: bac_end_sequences_end_seq_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE bac_end_sequences_end_seq_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bac_end_sequences_end_seq_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bac_end_sequences_end_seq_id_seq TO postgres;
GRANT ALL ON SEQUENCE bac_end_sequences_end_seq_id_seq TO web_usr;


--
-- Name: bac_marker_matches; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE bac_marker_matches FROM PUBLIC;
REVOKE ALL ON TABLE bac_marker_matches FROM postgres;
GRANT ALL ON TABLE bac_marker_matches TO postgres;
GRANT SELECT ON TABLE bac_marker_matches TO web_usr;


--
-- Name: bacs; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE bacs FROM PUBLIC;
REVOKE ALL ON TABLE bacs FROM postgres;
GRANT ALL ON TABLE bacs TO postgres;
GRANT SELECT ON TABLE bacs TO web_usr;


--
-- Name: bacs_bac_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE bacs_bac_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bacs_bac_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bacs_bac_id_seq TO postgres;
GRANT ALL ON SEQUENCE bacs_bac_id_seq TO web_usr;


--
-- Name: computational_associations; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE computational_associations FROM PUBLIC;
REVOKE ALL ON TABLE computational_associations FROM postgres;
GRANT ALL ON TABLE computational_associations TO postgres;
GRANT SELECT ON TABLE computational_associations TO web_usr;


--
-- Name: computational_associations_computational_assoc_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE computational_associations_computational_assoc_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE computational_associations_computational_assoc_id_seq FROM postgres;
GRANT ALL ON SEQUENCE computational_associations_computational_assoc_id_seq TO postgres;


--
-- Name: contig_sizes; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE contig_sizes FROM PUBLIC;
REVOKE ALL ON TABLE contig_sizes FROM postgres;
GRANT ALL ON TABLE contig_sizes TO postgres;
GRANT SELECT ON TABLE contig_sizes TO web_usr;


--
-- Name: contig_sizes_contig_size_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE contig_sizes_contig_size_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE contig_sizes_contig_size_id_seq FROM postgres;
GRANT ALL ON SEQUENCE contig_sizes_contig_size_id_seq TO postgres;
GRANT ALL ON SEQUENCE contig_sizes_contig_size_id_seq TO web_usr;


--
-- Name: deprecated_probes; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE deprecated_probes FROM PUBLIC;
REVOKE ALL ON TABLE deprecated_probes FROM postgres;
GRANT ALL ON TABLE deprecated_probes TO postgres;
GRANT SELECT ON TABLE deprecated_probes TO web_usr;


--
-- Name: deprecated_probes_dp_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE deprecated_probes_dp_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE deprecated_probes_dp_id_seq FROM postgres;
GRANT ALL ON SEQUENCE deprecated_probes_dp_id_seq TO postgres;
GRANT ALL ON SEQUENCE deprecated_probes_dp_id_seq TO web_usr;


--
-- Name: fpc_data; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE fpc_data FROM PUBLIC;
REVOKE ALL ON TABLE fpc_data FROM postgres;
GRANT ALL ON TABLE fpc_data TO postgres;
GRANT SELECT ON TABLE fpc_data TO web_usr;


--
-- Name: fpc_data_fpc_datum_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE fpc_data_fpc_datum_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE fpc_data_fpc_datum_id_seq FROM postgres;
GRANT ALL ON SEQUENCE fpc_data_fpc_datum_id_seq TO postgres;
GRANT ALL ON SEQUENCE fpc_data_fpc_datum_id_seq TO web_usr;


--
-- Name: fpc_version; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE fpc_version FROM PUBLIC;
REVOKE ALL ON TABLE fpc_version FROM postgres;
GRANT ALL ON TABLE fpc_version TO postgres;
GRANT SELECT ON TABLE fpc_version TO web_usr;


--
-- Name: fpc_version_fpc_version_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE fpc_version_fpc_version_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE fpc_version_fpc_version_seq FROM postgres;
GRANT ALL ON SEQUENCE fpc_version_fpc_version_seq TO postgres;
GRANT ALL ON SEQUENCE fpc_version_fpc_version_seq TO web_usr;


--
-- Name: manual_associations; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE manual_associations FROM PUBLIC;
REVOKE ALL ON TABLE manual_associations FROM postgres;
GRANT ALL ON TABLE manual_associations TO postgres;
GRANT SELECT ON TABLE manual_associations TO web_usr;


--
-- Name: manual_associations_manual_assoc_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE manual_associations_manual_assoc_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE manual_associations_manual_assoc_id_seq FROM postgres;
GRANT ALL ON SEQUENCE manual_associations_manual_assoc_id_seq TO postgres;


--
-- Name: oa_plausibility; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE oa_plausibility FROM PUBLIC;
REVOKE ALL ON TABLE oa_plausibility FROM postgres;
GRANT ALL ON TABLE oa_plausibility TO postgres;
GRANT SELECT ON TABLE oa_plausibility TO web_usr;


--
-- Name: oa_plausibility_oap_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE oa_plausibility_oap_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE oa_plausibility_oap_id_seq FROM postgres;
GRANT ALL ON SEQUENCE oa_plausibility_oap_id_seq TO postgres;
GRANT ALL ON SEQUENCE oa_plausibility_oap_id_seq TO web_usr;


--
-- Name: overgo_associations; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE overgo_associations FROM PUBLIC;
REVOKE ALL ON TABLE overgo_associations FROM postgres;
GRANT ALL ON TABLE overgo_associations TO postgres;
GRANT SELECT ON TABLE overgo_associations TO web_usr;


--
-- Name: overgo_associations_overgo_assoc_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE overgo_associations_overgo_assoc_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE overgo_associations_overgo_assoc_id_seq FROM postgres;
GRANT ALL ON SEQUENCE overgo_associations_overgo_assoc_id_seq TO postgres;
GRANT ALL ON SEQUENCE overgo_associations_overgo_assoc_id_seq TO web_usr;


--
-- Name: overgo_plates; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE overgo_plates FROM PUBLIC;
REVOKE ALL ON TABLE overgo_plates FROM postgres;
GRANT ALL ON TABLE overgo_plates TO postgres;
GRANT SELECT ON TABLE overgo_plates TO web_usr;


--
-- Name: overgo_plates_plate_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE overgo_plates_plate_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE overgo_plates_plate_id_seq FROM postgres;
GRANT ALL ON SEQUENCE overgo_plates_plate_id_seq TO postgres;
GRANT ALL ON SEQUENCE overgo_plates_plate_id_seq TO web_usr;


--
-- Name: overgo_results; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE overgo_results FROM PUBLIC;
REVOKE ALL ON TABLE overgo_results FROM postgres;
GRANT ALL ON TABLE overgo_results TO postgres;
GRANT SELECT ON TABLE overgo_results TO web_usr;


--
-- Name: overgo_results_result_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE overgo_results_result_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE overgo_results_result_id_seq FROM postgres;
GRANT ALL ON SEQUENCE overgo_results_result_id_seq TO postgres;
GRANT ALL ON SEQUENCE overgo_results_result_id_seq TO web_usr;


--
-- Name: overgo_version; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE overgo_version FROM PUBLIC;
REVOKE ALL ON TABLE overgo_version FROM postgres;
GRANT ALL ON TABLE overgo_version TO postgres;
GRANT SELECT ON TABLE overgo_version TO web_usr;


--
-- Name: overgo_version_overgo_version_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE overgo_version_overgo_version_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE overgo_version_overgo_version_seq FROM postgres;
GRANT ALL ON SEQUENCE overgo_version_overgo_version_seq TO postgres;
GRANT ALL ON SEQUENCE overgo_version_overgo_version_seq TO web_usr;


--
-- Name: plausible_bacs_in_all_contigs; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE plausible_bacs_in_all_contigs FROM PUBLIC;
REVOKE ALL ON TABLE plausible_bacs_in_all_contigs FROM postgres;
GRANT ALL ON TABLE plausible_bacs_in_all_contigs TO postgres;
GRANT SELECT ON TABLE plausible_bacs_in_all_contigs TO web_usr;


--
-- Name: probe_markers; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE probe_markers FROM PUBLIC;
REVOKE ALL ON TABLE probe_markers FROM postgres;
GRANT ALL ON TABLE probe_markers TO postgres;
GRANT SELECT ON TABLE probe_markers TO web_usr;


--
-- Name: probe_markers_overgo_probe_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE probe_markers_overgo_probe_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE probe_markers_overgo_probe_id_seq FROM postgres;
GRANT ALL ON SEQUENCE probe_markers_overgo_probe_id_seq TO postgres;
GRANT ALL ON SEQUENCE probe_markers_overgo_probe_id_seq TO web_usr;


--
-- Name: species; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE species FROM PUBLIC;
REVOKE ALL ON TABLE species FROM postgres;
GRANT ALL ON TABLE species TO postgres;
GRANT SELECT ON TABLE species TO web_usr;


--
-- Name: species_species_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE species_species_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE species_species_id_seq FROM postgres;
GRANT ALL ON SEQUENCE species_species_id_seq TO postgres;
GRANT ALL ON SEQUENCE species_species_id_seq TO web_usr;


--
-- Name: tentative_association_conflict_groups; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE tentative_association_conflict_groups FROM PUBLIC;
REVOKE ALL ON TABLE tentative_association_conflict_groups FROM postgres;
GRANT ALL ON TABLE tentative_association_conflict_groups TO postgres;
GRANT SELECT ON TABLE tentative_association_conflict_groups TO web_usr;


--
-- Name: tentative_association_conflict_groups_tacg_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE tentative_association_conflict_groups_tacg_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE tentative_association_conflict_groups_tacg_id_seq FROM postgres;
GRANT ALL ON SEQUENCE tentative_association_conflict_groups_tacg_id_seq TO postgres;
GRANT ALL ON SEQUENCE tentative_association_conflict_groups_tacg_id_seq TO web_usr;


--
-- Name: tentative_overgo_associations; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE tentative_overgo_associations FROM PUBLIC;
REVOKE ALL ON TABLE tentative_overgo_associations FROM postgres;
GRANT ALL ON TABLE tentative_overgo_associations TO postgres;
GRANT SELECT ON TABLE tentative_overgo_associations TO web_usr;


--
-- Name: tentative_overgo_associations_tentative_assoc_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE tentative_overgo_associations_tentative_assoc_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE tentative_overgo_associations_tentative_assoc_id_seq FROM postgres;
GRANT ALL ON SEQUENCE tentative_overgo_associations_tentative_assoc_id_seq TO postgres;
GRANT ALL ON SEQUENCE tentative_overgo_associations_tentative_assoc_id_seq TO web_usr;


--
-- Name: users; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON TABLE users FROM PUBLIC;
REVOKE ALL ON TABLE users FROM postgres;
GRANT ALL ON TABLE users TO postgres;
GRANT SELECT ON TABLE users TO web_usr;


--
-- Name: users_user_id_seq; Type: ACL; Schema: physical; Owner: postgres
--

REVOKE ALL ON SEQUENCE users_user_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE users_user_id_seq FROM postgres;
GRANT ALL ON SEQUENCE users_user_id_seq TO postgres;
GRANT ALL ON SEQUENCE users_user_id_seq TO web_usr;


SET search_path = public, pg_catalog;

--
-- Name: stock; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE stock FROM PUBLIC;
REVOKE ALL ON TABLE stock FROM postgres;
GRANT ALL ON TABLE stock TO postgres;
GRANT ALL ON TABLE stock TO web_usr;


--
-- Name: cv; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cv FROM PUBLIC;
REVOKE ALL ON TABLE cv FROM postgres;
GRANT ALL ON TABLE cv TO postgres;
GRANT ALL ON TABLE cv TO web_usr;


--
-- Name: nd_experiment; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nd_experiment FROM PUBLIC;
REVOKE ALL ON TABLE nd_experiment FROM postgres;
GRANT ALL ON TABLE nd_experiment TO postgres;
GRANT ALL ON TABLE nd_experiment TO web_usr;


--
-- Name: nd_experiment_phenotype; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nd_experiment_phenotype FROM PUBLIC;
REVOKE ALL ON TABLE nd_experiment_phenotype FROM postgres;
GRANT ALL ON TABLE nd_experiment_phenotype TO postgres;
GRANT ALL ON TABLE nd_experiment_phenotype TO web_usr;


--
-- Name: nd_experiment_project; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nd_experiment_project FROM PUBLIC;
REVOKE ALL ON TABLE nd_experiment_project FROM postgres;
GRANT ALL ON TABLE nd_experiment_project TO postgres;
GRANT ALL ON TABLE nd_experiment_project TO web_usr;


--
-- Name: nd_experiment_stock; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nd_experiment_stock FROM PUBLIC;
REVOKE ALL ON TABLE nd_experiment_stock FROM postgres;
GRANT ALL ON TABLE nd_experiment_stock TO postgres;
GRANT ALL ON TABLE nd_experiment_stock TO web_usr;


--
-- Name: nd_geolocation; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nd_geolocation FROM PUBLIC;
REVOKE ALL ON TABLE nd_geolocation FROM postgres;
GRANT ALL ON TABLE nd_geolocation TO postgres;
GRANT ALL ON TABLE nd_geolocation TO web_usr;


--
-- Name: phenotype; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE phenotype FROM PUBLIC;
REVOKE ALL ON TABLE phenotype FROM postgres;
GRANT ALL ON TABLE phenotype TO postgres;
GRANT ALL ON TABLE phenotype TO web_usr;


--
-- Name: project; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE project FROM PUBLIC;
REVOKE ALL ON TABLE project FROM postgres;
GRANT ALL ON TABLE project TO postgres;
GRANT ALL ON TABLE project TO web_usr;


--
-- Name: project_relationship; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE project_relationship FROM PUBLIC;
REVOKE ALL ON TABLE project_relationship FROM postgres;
GRANT ALL ON TABLE project_relationship TO postgres;
GRANT ALL ON TABLE project_relationship TO web_usr;


--
-- Name: projectprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE projectprop FROM PUBLIC;
REVOKE ALL ON TABLE projectprop FROM postgres;
GRANT ALL ON TABLE projectprop TO postgres;
GRANT ALL ON TABLE projectprop TO web_usr;


--
-- Name: stock_relationship; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE stock_relationship FROM PUBLIC;
REVOKE ALL ON TABLE stock_relationship FROM postgres;
GRANT ALL ON TABLE stock_relationship TO postgres;
GRANT ALL ON TABLE stock_relationship TO web_usr;


--
-- Name: genotype; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE genotype FROM PUBLIC;
REVOKE ALL ON TABLE genotype FROM postgres;
GRANT ALL ON TABLE genotype TO postgres;
GRANT ALL ON TABLE genotype TO web_usr;


--
-- Name: nd_experiment_genotype; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nd_experiment_genotype FROM PUBLIC;
REVOKE ALL ON TABLE nd_experiment_genotype FROM postgres;
GRANT ALL ON TABLE nd_experiment_genotype TO postgres;
GRANT ALL ON TABLE nd_experiment_genotype TO web_usr;


--
-- Name: nd_experiment_protocol; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nd_experiment_protocol FROM PUBLIC;
REVOKE ALL ON TABLE nd_experiment_protocol FROM postgres;
GRANT ALL ON TABLE nd_experiment_protocol TO postgres;
GRANT ALL ON TABLE nd_experiment_protocol TO web_usr;


--
-- Name: nd_protocol; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nd_protocol FROM PUBLIC;
REVOKE ALL ON TABLE nd_protocol FROM postgres;
GRANT ALL ON TABLE nd_protocol TO postgres;
GRANT ALL ON TABLE nd_protocol TO web_usr;


--
-- Name: analysis; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE analysis FROM PUBLIC;
REVOKE ALL ON TABLE analysis FROM postgres;
GRANT ALL ON TABLE analysis TO postgres;
GRANT ALL ON TABLE analysis TO web_usr;


--
-- Name: analysis_analysis_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE analysis_analysis_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE analysis_analysis_id_seq FROM postgres;
GRANT ALL ON SEQUENCE analysis_analysis_id_seq TO postgres;


--
-- Name: analysisfeature; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE analysisfeature FROM PUBLIC;
REVOKE ALL ON TABLE analysisfeature FROM postgres;
GRANT ALL ON TABLE analysisfeature TO postgres;
GRANT ALL ON TABLE analysisfeature TO web_usr;


--
-- Name: analysisfeature_analysisfeature_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE analysisfeature_analysisfeature_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE analysisfeature_analysisfeature_id_seq FROM postgres;
GRANT ALL ON SEQUENCE analysisfeature_analysisfeature_id_seq TO postgres;


--
-- Name: analysisprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE analysisprop FROM PUBLIC;
REVOKE ALL ON TABLE analysisprop FROM postgres;
GRANT ALL ON TABLE analysisprop TO postgres;
GRANT ALL ON TABLE analysisprop TO web_usr;


--
-- Name: analysisprop_analysisprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE analysisprop_analysisprop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE analysisprop_analysisprop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE analysisprop_analysisprop_id_seq TO postgres;


--
-- Name: ara_annotation; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ara_annotation FROM PUBLIC;
REVOKE ALL ON TABLE ara_annotation FROM postgres;
GRANT ALL ON TABLE ara_annotation TO postgres;
GRANT ALL ON TABLE ara_annotation TO web_usr;


--
-- Name: ara_domain; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ara_domain FROM PUBLIC;
REVOKE ALL ON TABLE ara_domain FROM postgres;
GRANT ALL ON TABLE ara_domain TO postgres;
GRANT ALL ON TABLE ara_domain TO web_usr;


--
-- Name: ara_evidef; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ara_evidef FROM PUBLIC;
REVOKE ALL ON TABLE ara_evidef FROM postgres;
GRANT ALL ON TABLE ara_evidef TO postgres;
GRANT ALL ON TABLE ara_evidef TO web_usr;


--
-- Name: ara_family; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ara_family FROM PUBLIC;
REVOKE ALL ON TABLE ara_family FROM postgres;
GRANT ALL ON TABLE ara_family TO postgres;
GRANT ALL ON TABLE ara_family TO web_usr;


--
-- Name: ara_gfp_ms; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ara_gfp_ms FROM PUBLIC;
REVOKE ALL ON TABLE ara_gfp_ms FROM postgres;
GRANT ALL ON TABLE ara_gfp_ms TO postgres;
GRANT ALL ON TABLE ara_gfp_ms TO web_usr;


--
-- Name: ara_go_term; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ara_go_term FROM PUBLIC;
REVOKE ALL ON TABLE ara_go_term FROM postgres;
GRANT ALL ON TABLE ara_go_term TO postgres;
GRANT ALL ON TABLE ara_go_term TO web_usr;


--
-- Name: ara_interactome_all; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ara_interactome_all FROM PUBLIC;
REVOKE ALL ON TABLE ara_interactome_all FROM postgres;
GRANT ALL ON TABLE ara_interactome_all TO postgres;
GRANT ALL ON TABLE ara_interactome_all TO web_usr;


--
-- Name: ara_interactome_unique; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ara_interactome_unique FROM PUBLIC;
REVOKE ALL ON TABLE ara_interactome_unique FROM postgres;
GRANT ALL ON TABLE ara_interactome_unique TO postgres;
GRANT ALL ON TABLE ara_interactome_unique TO web_usr;


--
-- Name: ara_intron; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ara_intron FROM PUBLIC;
REVOKE ALL ON TABLE ara_intron FROM postgres;
GRANT ALL ON TABLE ara_intron TO postgres;
GRANT ALL ON TABLE ara_intron TO web_usr;


--
-- Name: ara_map; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ara_map FROM PUBLIC;
REVOKE ALL ON TABLE ara_map FROM postgres;
GRANT ALL ON TABLE ara_map TO postgres;
GRANT ALL ON TABLE ara_map TO web_usr;


--
-- Name: ara_myristoylation; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ara_myristoylation FROM PUBLIC;
REVOKE ALL ON TABLE ara_myristoylation FROM postgres;
GRANT ALL ON TABLE ara_myristoylation TO postgres;
GRANT ALL ON TABLE ara_myristoylation TO web_usr;


--
-- Name: ara_pmidlink; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ara_pmidlink FROM PUBLIC;
REVOKE ALL ON TABLE ara_pmidlink FROM postgres;
GRANT ALL ON TABLE ara_pmidlink TO postgres;
GRANT ALL ON TABLE ara_pmidlink TO web_usr;


--
-- Name: ara_prefix_info; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ara_prefix_info FROM PUBLIC;
REVOKE ALL ON TABLE ara_prefix_info FROM postgres;
GRANT ALL ON TABLE ara_prefix_info TO postgres;
GRANT ALL ON TABLE ara_prefix_info TO web_usr;


--
-- Name: ara_properties; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ara_properties FROM PUBLIC;
REVOKE ALL ON TABLE ara_properties FROM postgres;
GRANT ALL ON TABLE ara_properties TO postgres;
GRANT ALL ON TABLE ara_properties TO web_usr;


--
-- Name: ara_scop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ara_scop FROM PUBLIC;
REVOKE ALL ON TABLE ara_scop FROM postgres;
GRANT ALL ON TABLE ara_scop TO postgres;
GRANT ALL ON TABLE ara_scop TO web_usr;


--
-- Name: ara_sequence; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ara_sequence FROM PUBLIC;
REVOKE ALL ON TABLE ara_sequence FROM postgres;
GRANT ALL ON TABLE ara_sequence TO postgres;
GRANT ALL ON TABLE ara_sequence TO web_usr;


--
-- Name: ara_signalp; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ara_signalp FROM PUBLIC;
REVOKE ALL ON TABLE ara_signalp FROM postgres;
GRANT ALL ON TABLE ara_signalp TO postgres;
GRANT ALL ON TABLE ara_signalp TO web_usr;


--
-- Name: ara_targetp; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ara_targetp FROM PUBLIC;
REVOKE ALL ON TABLE ara_targetp FROM postgres;
GRANT ALL ON TABLE ara_targetp TO postgres;
GRANT ALL ON TABLE ara_targetp TO web_usr;


--
-- Name: ara_users; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE ara_users FROM PUBLIC;
REVOKE ALL ON TABLE ara_users FROM postgres;
GRANT ALL ON TABLE ara_users TO postgres;
GRANT ALL ON TABLE ara_users TO web_usr;


--
-- Name: blastwatch_queries; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE blastwatch_queries FROM PUBLIC;
REVOKE ALL ON TABLE blastwatch_queries FROM postgres;
GRANT ALL ON TABLE blastwatch_queries TO postgres;
GRANT ALL ON TABLE blastwatch_queries TO web_usr;


--
-- Name: blastwatch_queries_blastwatch_queries_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE blastwatch_queries_blastwatch_queries_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE blastwatch_queries_blastwatch_queries_id_seq FROM postgres;
GRANT ALL ON SEQUENCE blastwatch_queries_blastwatch_queries_id_seq TO postgres;
GRANT ALL ON SEQUENCE blastwatch_queries_blastwatch_queries_id_seq TO web_usr;


--
-- Name: blastwatch_results; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE blastwatch_results FROM PUBLIC;
REVOKE ALL ON TABLE blastwatch_results FROM postgres;
GRANT ALL ON TABLE blastwatch_results TO postgres;
GRANT ALL ON TABLE blastwatch_results TO web_usr;


--
-- Name: blastwatch_results_blastwatch_results_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE blastwatch_results_blastwatch_results_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE blastwatch_results_blastwatch_results_id_seq FROM postgres;
GRANT ALL ON SEQUENCE blastwatch_results_blastwatch_results_id_seq TO postgres;
GRANT ALL ON SEQUENCE blastwatch_results_blastwatch_results_id_seq TO web_usr;


--
-- Name: bug; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE bug FROM PUBLIC;
REVOKE ALL ON TABLE bug FROM postgres;
GRANT ALL ON TABLE bug TO postgres;
GRANT ALL ON TABLE bug TO web_usr;


--
-- Name: bug_bug_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE bug_bug_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bug_bug_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bug_bug_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE bug_bug_id_seq TO web_usr;


--
-- Name: contact; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE contact FROM PUBLIC;
REVOKE ALL ON TABLE contact FROM postgres;
GRANT ALL ON TABLE contact TO postgres;
GRANT ALL ON TABLE contact TO web_usr;


--
-- Name: contact_contact_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE contact_contact_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE contact_contact_id_seq FROM postgres;
GRANT ALL ON SEQUENCE contact_contact_id_seq TO postgres;
GRANT SELECT ON SEQUENCE contact_contact_id_seq TO web_usr;


--
-- Name: contact_relationship; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE contact_relationship FROM PUBLIC;
REVOKE ALL ON TABLE contact_relationship FROM postgres;
GRANT ALL ON TABLE contact_relationship TO postgres;
GRANT ALL ON TABLE contact_relationship TO web_usr;


--
-- Name: contact_relationship_contact_relationship_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE contact_relationship_contact_relationship_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE contact_relationship_contact_relationship_id_seq FROM postgres;
GRANT ALL ON SEQUENCE contact_relationship_contact_relationship_id_seq TO postgres;
GRANT SELECT ON SEQUENCE contact_relationship_contact_relationship_id_seq TO web_usr;


--
-- Name: cv_cv_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE cv_cv_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cv_cv_id_seq FROM postgres;
GRANT ALL ON SEQUENCE cv_cv_id_seq TO postgres;
GRANT USAGE ON SEQUENCE cv_cv_id_seq TO web_usr;


--
-- Name: cvterm_cvterm_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE cvterm_cvterm_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cvterm_cvterm_id_seq FROM postgres;
GRANT ALL ON SEQUENCE cvterm_cvterm_id_seq TO postgres;
GRANT USAGE,UPDATE ON SEQUENCE cvterm_cvterm_id_seq TO web_usr;


--
-- Name: cvterm_dbxref; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cvterm_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE cvterm_dbxref FROM postgres;
GRANT ALL ON TABLE cvterm_dbxref TO postgres;
GRANT ALL ON TABLE cvterm_dbxref TO web_usr;


--
-- Name: cvterm_dbxref_cvterm_dbxref_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE cvterm_dbxref_cvterm_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cvterm_dbxref_cvterm_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE cvterm_dbxref_cvterm_dbxref_id_seq TO postgres;


--
-- Name: cvterm_relationship; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cvterm_relationship FROM PUBLIC;
REVOKE ALL ON TABLE cvterm_relationship FROM postgres;
GRANT ALL ON TABLE cvterm_relationship TO postgres;
GRANT ALL ON TABLE cvterm_relationship TO web_usr;


--
-- Name: cvterm_relationship_cvterm_relationship_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE cvterm_relationship_cvterm_relationship_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cvterm_relationship_cvterm_relationship_id_seq FROM postgres;
GRANT ALL ON SEQUENCE cvterm_relationship_cvterm_relationship_id_seq TO postgres;


--
-- Name: cvtermpath; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cvtermpath FROM PUBLIC;
REVOKE ALL ON TABLE cvtermpath FROM postgres;
GRANT ALL ON TABLE cvtermpath TO postgres;
GRANT ALL ON TABLE cvtermpath TO web_usr;


--
-- Name: cvtermpath_cvtermpath_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE cvtermpath_cvtermpath_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cvtermpath_cvtermpath_id_seq FROM postgres;
GRANT ALL ON SEQUENCE cvtermpath_cvtermpath_id_seq TO postgres;


--
-- Name: cvtermprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cvtermprop FROM PUBLIC;
REVOKE ALL ON TABLE cvtermprop FROM postgres;
GRANT ALL ON TABLE cvtermprop TO postgres;
GRANT ALL ON TABLE cvtermprop TO web_usr;


--
-- Name: cvtermprop_cvtermprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE cvtermprop_cvtermprop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cvtermprop_cvtermprop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE cvtermprop_cvtermprop_id_seq TO postgres;


--
-- Name: cvtermsynonym; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cvtermsynonym FROM PUBLIC;
REVOKE ALL ON TABLE cvtermsynonym FROM postgres;
GRANT ALL ON TABLE cvtermsynonym TO postgres;
GRANT ALL ON TABLE cvtermsynonym TO web_usr;


--
-- Name: cvtermsynonym_cvtermsynonym_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE cvtermsynonym_cvtermsynonym_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cvtermsynonym_cvtermsynonym_id_seq FROM postgres;
GRANT ALL ON SEQUENCE cvtermsynonym_cvtermsynonym_id_seq TO postgres;


--
-- Name: cxgn_bac_pipeline_genbank_log; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cxgn_bac_pipeline_genbank_log FROM PUBLIC;
REVOKE ALL ON TABLE cxgn_bac_pipeline_genbank_log FROM postgres;
GRANT ALL ON TABLE cxgn_bac_pipeline_genbank_log TO postgres;
GRANT ALL ON TABLE cxgn_bac_pipeline_genbank_log TO web_usr;


--
-- Name: cxgn_bac_pipeline_genbank_log_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE cxgn_bac_pipeline_genbank_log_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cxgn_bac_pipeline_genbank_log_id_seq FROM postgres;
GRANT ALL ON SEQUENCE cxgn_bac_pipeline_genbank_log_id_seq TO postgres;
GRANT ALL ON SEQUENCE cxgn_bac_pipeline_genbank_log_id_seq TO web_usr;


--
-- Name: cxgn_bac_pipeline_loading_log; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cxgn_bac_pipeline_loading_log FROM PUBLIC;
REVOKE ALL ON TABLE cxgn_bac_pipeline_loading_log FROM postgres;
GRANT ALL ON TABLE cxgn_bac_pipeline_loading_log TO postgres;
GRANT ALL ON TABLE cxgn_bac_pipeline_loading_log TO web_usr;


--
-- Name: cxgn_bac_pipeline_loading_log_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE cxgn_bac_pipeline_loading_log_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cxgn_bac_pipeline_loading_log_id_seq FROM postgres;
GRANT ALL ON SEQUENCE cxgn_bac_pipeline_loading_log_id_seq TO postgres;
GRANT ALL ON SEQUENCE cxgn_bac_pipeline_loading_log_id_seq TO web_usr;


--
-- Name: cxgn_bac_pipeline_processing_log; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cxgn_bac_pipeline_processing_log FROM PUBLIC;
REVOKE ALL ON TABLE cxgn_bac_pipeline_processing_log FROM postgres;
GRANT ALL ON TABLE cxgn_bac_pipeline_processing_log TO postgres;
GRANT ALL ON TABLE cxgn_bac_pipeline_processing_log TO web_usr;


--
-- Name: cxgn_bac_pipeline_processing_log_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE cxgn_bac_pipeline_processing_log_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cxgn_bac_pipeline_processing_log_id_seq FROM postgres;
GRANT ALL ON SEQUENCE cxgn_bac_pipeline_processing_log_id_seq TO postgres;
GRANT ALL ON SEQUENCE cxgn_bac_pipeline_processing_log_id_seq TO web_usr;


--
-- Name: cxgn_indexedlog_test_feel_free_to_delete_me; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE cxgn_indexedlog_test_feel_free_to_delete_me FROM PUBLIC;
REVOKE ALL ON TABLE cxgn_indexedlog_test_feel_free_to_delete_me FROM postgres;
GRANT ALL ON TABLE cxgn_indexedlog_test_feel_free_to_delete_me TO postgres;
GRANT ALL ON TABLE cxgn_indexedlog_test_feel_free_to_delete_me TO web_usr;


--
-- Name: db_db_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE db_db_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE db_db_id_seq FROM postgres;
GRANT ALL ON SEQUENCE db_db_id_seq TO postgres;
GRANT USAGE ON SEQUENCE db_db_id_seq TO web_usr;


--
-- Name: dbxref_dbxref_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE dbxref_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dbxref_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE dbxref_dbxref_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE dbxref_dbxref_id_seq TO web_usr;


--
-- Name: dbxrefprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE dbxrefprop FROM PUBLIC;
REVOKE ALL ON TABLE dbxrefprop FROM postgres;
GRANT ALL ON TABLE dbxrefprop TO postgres;
GRANT ALL ON TABLE dbxrefprop TO web_usr;


--
-- Name: dbxrefprop_dbxrefprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE dbxrefprop_dbxrefprop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dbxrefprop_dbxrefprop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE dbxrefprop_dbxrefprop_id_seq TO postgres;


--
-- Name: environment; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE environment FROM PUBLIC;
REVOKE ALL ON TABLE environment FROM postgres;
GRANT ALL ON TABLE environment TO postgres;
GRANT ALL ON TABLE environment TO web_usr;


--
-- Name: environment_cvterm; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE environment_cvterm FROM PUBLIC;
REVOKE ALL ON TABLE environment_cvterm FROM postgres;
GRANT ALL ON TABLE environment_cvterm TO postgres;
GRANT ALL ON TABLE environment_cvterm TO web_usr;


--
-- Name: environment_cvterm_environment_cvterm_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE environment_cvterm_environment_cvterm_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE environment_cvterm_environment_cvterm_id_seq FROM postgres;
GRANT ALL ON SEQUENCE environment_cvterm_environment_cvterm_id_seq TO postgres;
GRANT SELECT ON SEQUENCE environment_cvterm_environment_cvterm_id_seq TO web_usr;


--
-- Name: environment_environment_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE environment_environment_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE environment_environment_id_seq FROM postgres;
GRANT ALL ON SEQUENCE environment_environment_id_seq TO postgres;
GRANT SELECT ON SEQUENCE environment_environment_id_seq TO web_usr;


--
-- Name: enzyme_restriction_sites; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE enzyme_restriction_sites FROM PUBLIC;
REVOKE ALL ON TABLE enzyme_restriction_sites FROM postgres;
GRANT ALL ON TABLE enzyme_restriction_sites TO postgres;
GRANT ALL ON TABLE enzyme_restriction_sites TO web_usr;


SET search_path = sgn, pg_catalog;

--
-- Name: family; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE family FROM PUBLIC;
REVOKE ALL ON TABLE family FROM postgres;
GRANT ALL ON TABLE family TO postgres;
GRANT SELECT ON TABLE family TO web_usr;


SET search_path = public, pg_catalog;

--
-- Name: family; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE family FROM PUBLIC;
REVOKE ALL ON TABLE family FROM postgres;
GRANT ALL ON TABLE family TO postgres;
GRANT ALL ON TABLE family TO web_usr;


SET search_path = sgn, pg_catalog;

--
-- Name: family_build; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE family_build FROM PUBLIC;
REVOKE ALL ON TABLE family_build FROM postgres;
GRANT ALL ON TABLE family_build TO postgres;
GRANT SELECT ON TABLE family_build TO web_usr;


SET search_path = public, pg_catalog;

--
-- Name: family_build; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE family_build FROM PUBLIC;
REVOKE ALL ON TABLE family_build FROM postgres;
GRANT ALL ON TABLE family_build TO postgres;
GRANT ALL ON TABLE family_build TO web_usr;


SET search_path = sgn, pg_catalog;

--
-- Name: family_member; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE family_member FROM PUBLIC;
REVOKE ALL ON TABLE family_member FROM postgres;
GRANT ALL ON TABLE family_member TO postgres;
GRANT SELECT ON TABLE family_member TO web_usr;


SET search_path = public, pg_catalog;

--
-- Name: family_member; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE family_member FROM PUBLIC;
REVOKE ALL ON TABLE family_member FROM postgres;
GRANT ALL ON TABLE family_member TO postgres;
GRANT ALL ON TABLE family_member TO web_usr;


--
-- Name: feature_cvterm_dbxref; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE feature_cvterm_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE feature_cvterm_dbxref FROM postgres;
GRANT ALL ON TABLE feature_cvterm_dbxref TO postgres;
GRANT ALL ON TABLE feature_cvterm_dbxref TO web_usr;


--
-- Name: feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq TO postgres;


--
-- Name: feature_cvterm_feature_cvterm_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE feature_cvterm_feature_cvterm_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE feature_cvterm_feature_cvterm_id_seq FROM postgres;
GRANT ALL ON SEQUENCE feature_cvterm_feature_cvterm_id_seq TO postgres;


--
-- Name: feature_cvterm_pub; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE feature_cvterm_pub FROM PUBLIC;
REVOKE ALL ON TABLE feature_cvterm_pub FROM postgres;
GRANT ALL ON TABLE feature_cvterm_pub TO postgres;
GRANT ALL ON TABLE feature_cvterm_pub TO web_usr;


--
-- Name: feature_cvterm_pub_feature_cvterm_pub_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE feature_cvterm_pub_feature_cvterm_pub_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE feature_cvterm_pub_feature_cvterm_pub_id_seq FROM postgres;
GRANT ALL ON SEQUENCE feature_cvterm_pub_feature_cvterm_pub_id_seq TO postgres;


--
-- Name: feature_cvtermprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE feature_cvtermprop FROM PUBLIC;
REVOKE ALL ON TABLE feature_cvtermprop FROM postgres;
GRANT ALL ON TABLE feature_cvtermprop TO postgres;
GRANT ALL ON TABLE feature_cvtermprop TO web_usr;


--
-- Name: feature_cvtermprop_feature_cvtermprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE feature_cvtermprop_feature_cvtermprop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE feature_cvtermprop_feature_cvtermprop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE feature_cvtermprop_feature_cvtermprop_id_seq TO postgres;


--
-- Name: feature_dbxref_feature_dbxref_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE feature_dbxref_feature_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE feature_dbxref_feature_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE feature_dbxref_feature_dbxref_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE feature_dbxref_feature_dbxref_id_seq TO web_usr;


--
-- Name: feature_feature_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE feature_feature_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE feature_feature_id_seq FROM postgres;
GRANT ALL ON SEQUENCE feature_feature_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE feature_feature_id_seq TO web_usr;


--
-- Name: feature_genotype; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE feature_genotype FROM PUBLIC;
REVOKE ALL ON TABLE feature_genotype FROM postgres;
GRANT ALL ON TABLE feature_genotype TO postgres;
GRANT ALL ON TABLE feature_genotype TO web_usr;


--
-- Name: feature_genotype_feature_genotype_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE feature_genotype_feature_genotype_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE feature_genotype_feature_genotype_id_seq FROM postgres;
GRANT ALL ON SEQUENCE feature_genotype_feature_genotype_id_seq TO postgres;
GRANT SELECT ON SEQUENCE feature_genotype_feature_genotype_id_seq TO web_usr;


--
-- Name: feature_pub_feature_pub_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE feature_pub_feature_pub_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE feature_pub_feature_pub_id_seq FROM postgres;
GRANT ALL ON SEQUENCE feature_pub_feature_pub_id_seq TO postgres;


--
-- Name: feature_relationship; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE feature_relationship FROM PUBLIC;
REVOKE ALL ON TABLE feature_relationship FROM postgres;
GRANT ALL ON TABLE feature_relationship TO postgres;
GRANT ALL ON TABLE feature_relationship TO web_usr;


--
-- Name: feature_relationship_feature_relationship_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE feature_relationship_feature_relationship_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE feature_relationship_feature_relationship_id_seq FROM postgres;
GRANT ALL ON SEQUENCE feature_relationship_feature_relationship_id_seq TO postgres;


--
-- Name: feature_relationship_pub; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE feature_relationship_pub FROM PUBLIC;
REVOKE ALL ON TABLE feature_relationship_pub FROM postgres;
GRANT ALL ON TABLE feature_relationship_pub TO postgres;
GRANT ALL ON TABLE feature_relationship_pub TO web_usr;


--
-- Name: feature_relationship_pub_feature_relationship_pub_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE feature_relationship_pub_feature_relationship_pub_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE feature_relationship_pub_feature_relationship_pub_id_seq FROM postgres;
GRANT ALL ON SEQUENCE feature_relationship_pub_feature_relationship_pub_id_seq TO postgres;


--
-- Name: feature_relationshipprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE feature_relationshipprop FROM PUBLIC;
REVOKE ALL ON TABLE feature_relationshipprop FROM postgres;
GRANT ALL ON TABLE feature_relationshipprop TO postgres;
GRANT ALL ON TABLE feature_relationshipprop TO web_usr;


--
-- Name: feature_relationshipprop_feature_relationshipprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE feature_relationshipprop_feature_relationshipprop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE feature_relationshipprop_feature_relationshipprop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE feature_relationshipprop_feature_relationshipprop_id_seq TO postgres;


--
-- Name: feature_relationshipprop_pub; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE feature_relationshipprop_pub FROM PUBLIC;
REVOKE ALL ON TABLE feature_relationshipprop_pub FROM postgres;
GRANT ALL ON TABLE feature_relationshipprop_pub TO postgres;
GRANT ALL ON TABLE feature_relationshipprop_pub TO web_usr;


--
-- Name: feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq FROM postgres;
GRANT ALL ON SEQUENCE feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq TO postgres;


--
-- Name: feature_synonym_feature_synonym_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE feature_synonym_feature_synonym_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE feature_synonym_feature_synonym_id_seq FROM postgres;
GRANT ALL ON SEQUENCE feature_synonym_feature_synonym_id_seq TO postgres;


--
-- Name: feature_uniquename_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE feature_uniquename_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE feature_uniquename_seq FROM postgres;
GRANT ALL ON SEQUENCE feature_uniquename_seq TO postgres;


--
-- Name: featureloc_featureloc_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE featureloc_featureloc_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE featureloc_featureloc_id_seq FROM postgres;
GRANT ALL ON SEQUENCE featureloc_featureloc_id_seq TO postgres;


--
-- Name: featureloc_pub; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE featureloc_pub FROM PUBLIC;
REVOKE ALL ON TABLE featureloc_pub FROM postgres;
GRANT ALL ON TABLE featureloc_pub TO postgres;
GRANT ALL ON TABLE featureloc_pub TO web_usr;


--
-- Name: featureloc_pub_featureloc_pub_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE featureloc_pub_featureloc_pub_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE featureloc_pub_featureloc_pub_id_seq FROM postgres;
GRANT ALL ON SEQUENCE featureloc_pub_featureloc_pub_id_seq TO postgres;


--
-- Name: featureprop_featureprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE featureprop_featureprop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE featureprop_featureprop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE featureprop_featureprop_id_seq TO postgres;


--
-- Name: featureprop_pub; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE featureprop_pub FROM PUBLIC;
REVOKE ALL ON TABLE featureprop_pub FROM postgres;
GRANT ALL ON TABLE featureprop_pub TO postgres;
GRANT ALL ON TABLE featureprop_pub TO web_usr;


--
-- Name: featureprop_pub_featureprop_pub_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE featureprop_pub_featureprop_pub_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE featureprop_pub_featureprop_pub_id_seq FROM postgres;
GRANT ALL ON SEQUENCE featureprop_pub_featureprop_pub_id_seq TO postgres;


--
-- Name: forward_amplicon_sequence_information; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE forward_amplicon_sequence_information FROM PUBLIC;
REVOKE ALL ON TABLE forward_amplicon_sequence_information FROM postgres;
GRANT ALL ON TABLE forward_amplicon_sequence_information TO postgres;
GRANT ALL ON TABLE forward_amplicon_sequence_information TO web_usr;


--
-- Name: forward_amplicon_sequence_markers; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE forward_amplicon_sequence_markers FROM PUBLIC;
REVOKE ALL ON TABLE forward_amplicon_sequence_markers FROM postgres;
GRANT ALL ON TABLE forward_amplicon_sequence_markers TO postgres;
GRANT ALL ON TABLE forward_amplicon_sequence_markers TO web_usr;


--
-- Name: fpc_band; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE fpc_band FROM PUBLIC;
REVOKE ALL ON TABLE fpc_band FROM postgres;
GRANT ALL ON TABLE fpc_band TO postgres;
GRANT ALL ON TABLE fpc_band TO web_usr;


--
-- Name: fpc_build; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE fpc_build FROM PUBLIC;
REVOKE ALL ON TABLE fpc_build FROM postgres;
GRANT ALL ON TABLE fpc_build TO postgres;
GRANT ALL ON TABLE fpc_build TO web_usr;


--
-- Name: fpc_build_fpc_fingerprint; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE fpc_build_fpc_fingerprint FROM PUBLIC;
REVOKE ALL ON TABLE fpc_build_fpc_fingerprint FROM postgres;
GRANT ALL ON TABLE fpc_build_fpc_fingerprint TO postgres;
GRANT ALL ON TABLE fpc_build_fpc_fingerprint TO web_usr;


--
-- Name: fpc_contig; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE fpc_contig FROM PUBLIC;
REVOKE ALL ON TABLE fpc_contig FROM postgres;
GRANT ALL ON TABLE fpc_contig TO postgres;
GRANT ALL ON TABLE fpc_contig TO web_usr;


--
-- Name: fpc_contig_clone; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE fpc_contig_clone FROM PUBLIC;
REVOKE ALL ON TABLE fpc_contig_clone FROM postgres;
GRANT ALL ON TABLE fpc_contig_clone TO postgres;
GRANT ALL ON TABLE fpc_contig_clone TO web_usr;


--
-- Name: fpc_fingerprint; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE fpc_fingerprint FROM PUBLIC;
REVOKE ALL ON TABLE fpc_fingerprint FROM postgres;
GRANT ALL ON TABLE fpc_fingerprint TO postgres;
GRANT ALL ON TABLE fpc_fingerprint TO web_usr;


--
-- Name: fpc_series; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE fpc_series FROM PUBLIC;
REVOKE ALL ON TABLE fpc_series FROM postgres;
GRANT ALL ON TABLE fpc_series TO postgres;
GRANT ALL ON TABLE fpc_series TO web_usr;


--
-- Name: genotype_genotype_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE genotype_genotype_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE genotype_genotype_id_seq FROM postgres;
GRANT ALL ON SEQUENCE genotype_genotype_id_seq TO postgres;
GRANT SELECT ON SEQUENCE genotype_genotype_id_seq TO web_usr;


--
-- Name: genotypeprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE genotypeprop FROM PUBLIC;
REVOKE ALL ON TABLE genotypeprop FROM postgres;
GRANT ALL ON TABLE genotypeprop TO postgres;
GRANT ALL ON TABLE genotypeprop TO web_usr;


--
-- Name: genotypeprop_genotypeprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE genotypeprop_genotypeprop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE genotypeprop_genotypeprop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE genotypeprop_genotypeprop_id_seq TO postgres;
GRANT USAGE ON SEQUENCE genotypeprop_genotypeprop_id_seq TO web_usr;


--
-- Name: gff3atts; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE gff3atts FROM PUBLIC;
REVOKE ALL ON TABLE gff3atts FROM postgres;
GRANT ALL ON TABLE gff3atts TO postgres;
GRANT ALL ON TABLE gff3atts TO web_usr;


--
-- Name: gff3view; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE gff3view FROM PUBLIC;
REVOKE ALL ON TABLE gff3view FROM postgres;
GRANT ALL ON TABLE gff3view TO postgres;
GRANT ALL ON TABLE gff3view TO web_usr;


--
-- Name: gff_meta; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE gff_meta FROM PUBLIC;
REVOKE ALL ON TABLE gff_meta FROM postgres;
GRANT ALL ON TABLE gff_meta TO postgres;
GRANT ALL ON TABLE gff_meta TO web_usr;


--
-- Name: glossary; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE glossary FROM PUBLIC;
REVOKE ALL ON TABLE glossary FROM postgres;
GRANT ALL ON TABLE glossary TO postgres;
GRANT ALL ON TABLE glossary TO web_usr;


--
-- Name: glossary_glossary_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE glossary_glossary_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE glossary_glossary_id_seq FROM postgres;
GRANT ALL ON SEQUENCE glossary_glossary_id_seq TO postgres;


--
-- Name: itag_loading_log; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE itag_loading_log FROM PUBLIC;
REVOKE ALL ON TABLE itag_loading_log FROM postgres;
GRANT ALL ON TABLE itag_loading_log TO postgres;
GRANT ALL ON TABLE itag_loading_log TO web_usr;


--
-- Name: itag_loading_log_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE itag_loading_log_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE itag_loading_log_id_seq FROM postgres;
GRANT ALL ON SEQUENCE itag_loading_log_id_seq TO postgres;
GRANT ALL ON SEQUENCE itag_loading_log_id_seq TO web_usr;


--
-- Name: marker_names; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE marker_names FROM PUBLIC;
REVOKE ALL ON TABLE marker_names FROM postgres;
GRANT ALL ON TABLE marker_names TO postgres;
GRANT ALL ON TABLE marker_names TO web_usr;


--
-- Name: materialized_view; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE materialized_view FROM PUBLIC;
REVOKE ALL ON TABLE materialized_view FROM postgres;
GRANT ALL ON TABLE materialized_view TO postgres;
GRANT ALL ON TABLE materialized_view TO web_usr;


--
-- Name: matviews; Type: ACL; Schema: public; Owner: web_usr
--

REVOKE ALL ON TABLE matviews FROM PUBLIC;
REVOKE ALL ON TABLE matviews FROM web_usr;
GRANT ALL ON TABLE matviews TO web_usr;


--
-- Name: matviews_mv_id_seq; Type: ACL; Schema: public; Owner: web_usr
--

REVOKE ALL ON SEQUENCE matviews_mv_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE matviews_mv_id_seq FROM web_usr;
GRANT ALL ON SEQUENCE matviews_mv_id_seq TO web_usr;


--
-- Name: nd_experiment_contact; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nd_experiment_contact FROM PUBLIC;
REVOKE ALL ON TABLE nd_experiment_contact FROM postgres;
GRANT ALL ON TABLE nd_experiment_contact TO postgres;
GRANT ALL ON TABLE nd_experiment_contact TO web_usr;


--
-- Name: nd_experiment_contact_nd_experiment_contact_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE nd_experiment_contact_nd_experiment_contact_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE nd_experiment_contact_nd_experiment_contact_id_seq FROM postgres;
GRANT ALL ON SEQUENCE nd_experiment_contact_nd_experiment_contact_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE nd_experiment_contact_nd_experiment_contact_id_seq TO web_usr;


--
-- Name: nd_experiment_dbxref; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nd_experiment_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE nd_experiment_dbxref FROM postgres;
GRANT ALL ON TABLE nd_experiment_dbxref TO postgres;
GRANT ALL ON TABLE nd_experiment_dbxref TO web_usr;


--
-- Name: nd_experiment_dbxref_nd_experiment_dbxref_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE nd_experiment_dbxref_nd_experiment_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE nd_experiment_dbxref_nd_experiment_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE nd_experiment_dbxref_nd_experiment_dbxref_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE nd_experiment_dbxref_nd_experiment_dbxref_id_seq TO web_usr;


--
-- Name: nd_experiment_genotype_nd_experiment_genotype_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE nd_experiment_genotype_nd_experiment_genotype_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE nd_experiment_genotype_nd_experiment_genotype_id_seq FROM postgres;
GRANT ALL ON SEQUENCE nd_experiment_genotype_nd_experiment_genotype_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE nd_experiment_genotype_nd_experiment_genotype_id_seq TO web_usr;


--
-- Name: nd_experiment_nd_experiment_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE nd_experiment_nd_experiment_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE nd_experiment_nd_experiment_id_seq FROM postgres;
GRANT ALL ON SEQUENCE nd_experiment_nd_experiment_id_seq TO postgres;
GRANT ALL ON SEQUENCE nd_experiment_nd_experiment_id_seq TO web_usr;


--
-- Name: nd_experiment_phenotype_nd_experiment_phenotype_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE nd_experiment_phenotype_nd_experiment_phenotype_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE nd_experiment_phenotype_nd_experiment_phenotype_id_seq FROM postgres;
GRANT ALL ON SEQUENCE nd_experiment_phenotype_nd_experiment_phenotype_id_seq TO postgres;
GRANT ALL ON SEQUENCE nd_experiment_phenotype_nd_experiment_phenotype_id_seq TO web_usr;


--
-- Name: nd_experiment_project_nd_experiment_project_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE nd_experiment_project_nd_experiment_project_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE nd_experiment_project_nd_experiment_project_id_seq FROM postgres;
GRANT ALL ON SEQUENCE nd_experiment_project_nd_experiment_project_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE nd_experiment_project_nd_experiment_project_id_seq TO web_usr;


--
-- Name: nd_experiment_protocol_nd_experiment_protocol_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE nd_experiment_protocol_nd_experiment_protocol_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE nd_experiment_protocol_nd_experiment_protocol_id_seq FROM postgres;
GRANT ALL ON SEQUENCE nd_experiment_protocol_nd_experiment_protocol_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE nd_experiment_protocol_nd_experiment_protocol_id_seq TO web_usr;


--
-- Name: nd_experiment_pub; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nd_experiment_pub FROM PUBLIC;
REVOKE ALL ON TABLE nd_experiment_pub FROM postgres;
GRANT ALL ON TABLE nd_experiment_pub TO postgres;
GRANT ALL ON TABLE nd_experiment_pub TO web_usr;


--
-- Name: nd_experiment_pub_nd_experiment_pub_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE nd_experiment_pub_nd_experiment_pub_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE nd_experiment_pub_nd_experiment_pub_id_seq FROM postgres;
GRANT ALL ON SEQUENCE nd_experiment_pub_nd_experiment_pub_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE nd_experiment_pub_nd_experiment_pub_id_seq TO web_usr;


--
-- Name: nd_experiment_stock_dbxref; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nd_experiment_stock_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE nd_experiment_stock_dbxref FROM postgres;
GRANT ALL ON TABLE nd_experiment_stock_dbxref TO postgres;
GRANT ALL ON TABLE nd_experiment_stock_dbxref TO web_usr;


--
-- Name: nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE nd_experiment_stock_dbxref_nd_experiment_stock_dbxref_id_seq TO web_usr;


--
-- Name: nd_experiment_stock_nd_experiment_stock_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE nd_experiment_stock_nd_experiment_stock_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE nd_experiment_stock_nd_experiment_stock_id_seq FROM postgres;
GRANT ALL ON SEQUENCE nd_experiment_stock_nd_experiment_stock_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE nd_experiment_stock_nd_experiment_stock_id_seq TO web_usr;


--
-- Name: nd_experiment_stockprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nd_experiment_stockprop FROM PUBLIC;
REVOKE ALL ON TABLE nd_experiment_stockprop FROM postgres;
GRANT ALL ON TABLE nd_experiment_stockprop TO postgres;
GRANT ALL ON TABLE nd_experiment_stockprop TO web_usr;


--
-- Name: nd_experiment_stockprop_nd_experiment_stockprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE nd_experiment_stockprop_nd_experiment_stockprop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE nd_experiment_stockprop_nd_experiment_stockprop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE nd_experiment_stockprop_nd_experiment_stockprop_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE nd_experiment_stockprop_nd_experiment_stockprop_id_seq TO web_usr;


--
-- Name: nd_experimentprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nd_experimentprop FROM PUBLIC;
REVOKE ALL ON TABLE nd_experimentprop FROM postgres;
GRANT ALL ON TABLE nd_experimentprop TO postgres;
GRANT ALL ON TABLE nd_experimentprop TO web_usr;


--
-- Name: nd_experimentprop_nd_experimentprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE nd_experimentprop_nd_experimentprop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE nd_experimentprop_nd_experimentprop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE nd_experimentprop_nd_experimentprop_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE nd_experimentprop_nd_experimentprop_id_seq TO web_usr;


--
-- Name: nd_geolocation_nd_geolocation_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE nd_geolocation_nd_geolocation_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE nd_geolocation_nd_geolocation_id_seq FROM postgres;
GRANT ALL ON SEQUENCE nd_geolocation_nd_geolocation_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE nd_geolocation_nd_geolocation_id_seq TO web_usr;


--
-- Name: nd_geolocationprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nd_geolocationprop FROM PUBLIC;
REVOKE ALL ON TABLE nd_geolocationprop FROM postgres;
GRANT ALL ON TABLE nd_geolocationprop TO postgres;
GRANT ALL ON TABLE nd_geolocationprop TO web_usr;


--
-- Name: nd_geolocationprop_nd_geolocationprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE nd_geolocationprop_nd_geolocationprop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE nd_geolocationprop_nd_geolocationprop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE nd_geolocationprop_nd_geolocationprop_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE nd_geolocationprop_nd_geolocationprop_id_seq TO web_usr;


--
-- Name: nd_protocol_nd_protocol_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE nd_protocol_nd_protocol_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE nd_protocol_nd_protocol_id_seq FROM postgres;
GRANT ALL ON SEQUENCE nd_protocol_nd_protocol_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE nd_protocol_nd_protocol_id_seq TO web_usr;


--
-- Name: nd_protocol_reagent; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nd_protocol_reagent FROM PUBLIC;
REVOKE ALL ON TABLE nd_protocol_reagent FROM postgres;
GRANT ALL ON TABLE nd_protocol_reagent TO postgres;
GRANT ALL ON TABLE nd_protocol_reagent TO web_usr;


--
-- Name: nd_protocol_reagent_nd_protocol_reagent_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE nd_protocol_reagent_nd_protocol_reagent_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE nd_protocol_reagent_nd_protocol_reagent_id_seq FROM postgres;
GRANT ALL ON SEQUENCE nd_protocol_reagent_nd_protocol_reagent_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE nd_protocol_reagent_nd_protocol_reagent_id_seq TO web_usr;


--
-- Name: nd_protocolprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nd_protocolprop FROM PUBLIC;
REVOKE ALL ON TABLE nd_protocolprop FROM postgres;
GRANT ALL ON TABLE nd_protocolprop TO postgres;
GRANT ALL ON TABLE nd_protocolprop TO web_usr;


--
-- Name: nd_protocolprop_nd_protocolprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE nd_protocolprop_nd_protocolprop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE nd_protocolprop_nd_protocolprop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE nd_protocolprop_nd_protocolprop_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE nd_protocolprop_nd_protocolprop_id_seq TO web_usr;


--
-- Name: nd_reagent; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nd_reagent FROM PUBLIC;
REVOKE ALL ON TABLE nd_reagent FROM postgres;
GRANT ALL ON TABLE nd_reagent TO postgres;
GRANT ALL ON TABLE nd_reagent TO web_usr;


--
-- Name: nd_reagent_nd_reagent_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE nd_reagent_nd_reagent_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE nd_reagent_nd_reagent_id_seq FROM postgres;
GRANT ALL ON SEQUENCE nd_reagent_nd_reagent_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE nd_reagent_nd_reagent_id_seq TO web_usr;


--
-- Name: nd_reagent_relationship; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nd_reagent_relationship FROM PUBLIC;
REVOKE ALL ON TABLE nd_reagent_relationship FROM postgres;
GRANT ALL ON TABLE nd_reagent_relationship TO postgres;
GRANT ALL ON TABLE nd_reagent_relationship TO web_usr;


--
-- Name: nd_reagent_relationship_nd_reagent_relationship_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE nd_reagent_relationship_nd_reagent_relationship_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE nd_reagent_relationship_nd_reagent_relationship_id_seq FROM postgres;
GRANT ALL ON SEQUENCE nd_reagent_relationship_nd_reagent_relationship_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE nd_reagent_relationship_nd_reagent_relationship_id_seq TO web_usr;


--
-- Name: nd_reagentprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE nd_reagentprop FROM PUBLIC;
REVOKE ALL ON TABLE nd_reagentprop FROM postgres;
GRANT ALL ON TABLE nd_reagentprop TO postgres;
GRANT ALL ON TABLE nd_reagentprop TO web_usr;


--
-- Name: nd_reagentprop_nd_reagentprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE nd_reagentprop_nd_reagentprop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE nd_reagentprop_nd_reagentprop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE nd_reagentprop_nd_reagentprop_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE nd_reagentprop_nd_reagentprop_id_seq TO web_usr;


--
-- Name: organism; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE organism FROM PUBLIC;
REVOKE ALL ON TABLE organism FROM postgres;
GRANT ALL ON TABLE organism TO postgres;
GRANT ALL ON TABLE organism TO web_usr;


--
-- Name: organism_dbxref; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE organism_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE organism_dbxref FROM postgres;
GRANT ALL ON TABLE organism_dbxref TO postgres;
GRANT ALL ON TABLE organism_dbxref TO web_usr;


--
-- Name: organism_dbxref_organism_dbxref_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE organism_dbxref_organism_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE organism_dbxref_organism_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE organism_dbxref_organism_dbxref_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE organism_dbxref_organism_dbxref_id_seq TO web_usr;


--
-- Name: organism_organism_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE organism_organism_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE organism_organism_id_seq FROM postgres;
GRANT ALL ON SEQUENCE organism_organism_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE organism_organism_id_seq TO web_usr;


--
-- Name: organism_relationship; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE organism_relationship FROM PUBLIC;
REVOKE ALL ON TABLE organism_relationship FROM postgres;
GRANT ALL ON TABLE organism_relationship TO postgres;
GRANT ALL ON TABLE organism_relationship TO web_usr;


--
-- Name: organism_relationship_organism_relationship_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE organism_relationship_organism_relationship_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE organism_relationship_organism_relationship_id_seq FROM postgres;
GRANT ALL ON SEQUENCE organism_relationship_organism_relationship_id_seq TO postgres;


--
-- Name: organismpath; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE organismpath FROM PUBLIC;
REVOKE ALL ON TABLE organismpath FROM postgres;
GRANT ALL ON TABLE organismpath TO postgres;
GRANT ALL ON TABLE organismpath TO web_usr;


--
-- Name: organismpath_organismpath_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE organismpath_organismpath_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE organismpath_organismpath_id_seq FROM postgres;
GRANT ALL ON SEQUENCE organismpath_organismpath_id_seq TO postgres;


--
-- Name: organismprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE organismprop FROM PUBLIC;
REVOKE ALL ON TABLE organismprop FROM postgres;
GRANT ALL ON TABLE organismprop TO postgres;
GRANT ALL ON TABLE organismprop TO web_usr;


--
-- Name: organismprop_organismprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE organismprop_organismprop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE organismprop_organismprop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE organismprop_organismprop_id_seq TO postgres;
GRANT USAGE,UPDATE ON SEQUENCE organismprop_organismprop_id_seq TO web_usr;


--
-- Name: phendesc; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE phendesc FROM PUBLIC;
REVOKE ALL ON TABLE phendesc FROM postgres;
GRANT ALL ON TABLE phendesc TO postgres;
GRANT ALL ON TABLE phendesc TO web_usr;


--
-- Name: phendesc_phendesc_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE phendesc_phendesc_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE phendesc_phendesc_id_seq FROM postgres;
GRANT ALL ON SEQUENCE phendesc_phendesc_id_seq TO postgres;
GRANT SELECT ON SEQUENCE phendesc_phendesc_id_seq TO web_usr;


--
-- Name: phenotype_comparison; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE phenotype_comparison FROM PUBLIC;
REVOKE ALL ON TABLE phenotype_comparison FROM postgres;
GRANT ALL ON TABLE phenotype_comparison TO postgres;
GRANT ALL ON TABLE phenotype_comparison TO web_usr;


--
-- Name: phenotype_comparison_cvterm; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE phenotype_comparison_cvterm FROM PUBLIC;
REVOKE ALL ON TABLE phenotype_comparison_cvterm FROM postgres;
GRANT ALL ON TABLE phenotype_comparison_cvterm TO postgres;
GRANT ALL ON TABLE phenotype_comparison_cvterm TO web_usr;


--
-- Name: phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq FROM postgres;
GRANT ALL ON SEQUENCE phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq TO postgres;
GRANT SELECT ON SEQUENCE phenotype_comparison_cvterm_phenotype_comparison_cvterm_id_seq TO web_usr;


--
-- Name: phenotype_comparison_phenotype_comparison_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE phenotype_comparison_phenotype_comparison_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE phenotype_comparison_phenotype_comparison_id_seq FROM postgres;
GRANT ALL ON SEQUENCE phenotype_comparison_phenotype_comparison_id_seq TO postgres;
GRANT SELECT ON SEQUENCE phenotype_comparison_phenotype_comparison_id_seq TO web_usr;


--
-- Name: phenotype_cvterm; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE phenotype_cvterm FROM PUBLIC;
REVOKE ALL ON TABLE phenotype_cvterm FROM postgres;
GRANT ALL ON TABLE phenotype_cvterm TO postgres;
GRANT ALL ON TABLE phenotype_cvterm TO web_usr;


--
-- Name: phenotype_cvterm_phenotype_cvterm_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE phenotype_cvterm_phenotype_cvterm_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE phenotype_cvterm_phenotype_cvterm_id_seq FROM postgres;
GRANT ALL ON SEQUENCE phenotype_cvterm_phenotype_cvterm_id_seq TO postgres;
GRANT USAGE ON SEQUENCE phenotype_cvterm_phenotype_cvterm_id_seq TO web_usr;


--
-- Name: phenotype_phenotype_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE phenotype_phenotype_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE phenotype_phenotype_id_seq FROM postgres;
GRANT ALL ON SEQUENCE phenotype_phenotype_id_seq TO postgres;
GRANT ALL ON SEQUENCE phenotype_phenotype_id_seq TO web_usr;


--
-- Name: phenotypeprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE phenotypeprop FROM PUBLIC;
REVOKE ALL ON TABLE phenotypeprop FROM postgres;
GRANT ALL ON TABLE phenotypeprop TO postgres;
GRANT ALL ON TABLE phenotypeprop TO web_usr;


--
-- Name: phenotypeprop_phenotypeprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE phenotypeprop_phenotypeprop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE phenotypeprop_phenotypeprop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE phenotypeprop_phenotypeprop_id_seq TO postgres;
GRANT USAGE ON SEQUENCE phenotypeprop_phenotypeprop_id_seq TO web_usr;


--
-- Name: phenstatement; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE phenstatement FROM PUBLIC;
REVOKE ALL ON TABLE phenstatement FROM postgres;
GRANT ALL ON TABLE phenstatement TO postgres;
GRANT ALL ON TABLE phenstatement TO web_usr;


--
-- Name: phenstatement_phenstatement_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE phenstatement_phenstatement_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE phenstatement_phenstatement_id_seq FROM postgres;
GRANT ALL ON SEQUENCE phenstatement_phenstatement_id_seq TO postgres;
GRANT SELECT ON SEQUENCE phenstatement_phenstatement_id_seq TO web_usr;


--
-- Name: phylonode; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE phylonode FROM PUBLIC;
REVOKE ALL ON TABLE phylonode FROM postgres;
GRANT ALL ON TABLE phylonode TO postgres;
GRANT ALL ON TABLE phylonode TO web_usr;


--
-- Name: phylonode_dbxref; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE phylonode_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE phylonode_dbxref FROM postgres;
GRANT ALL ON TABLE phylonode_dbxref TO postgres;
GRANT ALL ON TABLE phylonode_dbxref TO web_usr;


--
-- Name: phylonode_organism; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE phylonode_organism FROM PUBLIC;
REVOKE ALL ON TABLE phylonode_organism FROM postgres;
GRANT ALL ON TABLE phylonode_organism TO postgres;
GRANT ALL ON TABLE phylonode_organism TO web_usr;


--
-- Name: phylonode_pub; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE phylonode_pub FROM PUBLIC;
REVOKE ALL ON TABLE phylonode_pub FROM postgres;
GRANT ALL ON TABLE phylonode_pub TO postgres;
GRANT ALL ON TABLE phylonode_pub TO web_usr;


--
-- Name: phylonode_relationship; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE phylonode_relationship FROM PUBLIC;
REVOKE ALL ON TABLE phylonode_relationship FROM postgres;
GRANT ALL ON TABLE phylonode_relationship TO postgres;
GRANT ALL ON TABLE phylonode_relationship TO web_usr;


--
-- Name: phylonodeprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE phylonodeprop FROM PUBLIC;
REVOKE ALL ON TABLE phylonodeprop FROM postgres;
GRANT ALL ON TABLE phylonodeprop TO postgres;
GRANT ALL ON TABLE phylonodeprop TO web_usr;


--
-- Name: phylotree; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE phylotree FROM PUBLIC;
REVOKE ALL ON TABLE phylotree FROM postgres;
GRANT ALL ON TABLE phylotree TO postgres;
GRANT ALL ON TABLE phylotree TO web_usr;


--
-- Name: phylotree_pub; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE phylotree_pub FROM PUBLIC;
REVOKE ALL ON TABLE phylotree_pub FROM postgres;
GRANT ALL ON TABLE phylotree_pub TO postgres;
GRANT ALL ON TABLE phylotree_pub TO web_usr;


--
-- Name: project_contact; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE project_contact FROM PUBLIC;
REVOKE ALL ON TABLE project_contact FROM postgres;
GRANT ALL ON TABLE project_contact TO postgres;
GRANT ALL ON TABLE project_contact TO web_usr;


--
-- Name: project_contact_project_contact_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE project_contact_project_contact_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE project_contact_project_contact_id_seq FROM postgres;
GRANT ALL ON SEQUENCE project_contact_project_contact_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE project_contact_project_contact_id_seq TO web_usr;


--
-- Name: project_project_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE project_project_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE project_project_id_seq FROM postgres;
GRANT ALL ON SEQUENCE project_project_id_seq TO postgres;
GRANT USAGE ON SEQUENCE project_project_id_seq TO web_usr;


--
-- Name: project_pub; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE project_pub FROM PUBLIC;
REVOKE ALL ON TABLE project_pub FROM postgres;
GRANT ALL ON TABLE project_pub TO postgres;
GRANT ALL ON TABLE project_pub TO web_usr;


--
-- Name: project_pub_project_pub_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE project_pub_project_pub_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE project_pub_project_pub_id_seq FROM postgres;
GRANT ALL ON SEQUENCE project_pub_project_pub_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE project_pub_project_pub_id_seq TO web_usr;


--
-- Name: project_relationship_project_relationship_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE project_relationship_project_relationship_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE project_relationship_project_relationship_id_seq FROM postgres;
GRANT ALL ON SEQUENCE project_relationship_project_relationship_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE project_relationship_project_relationship_id_seq TO web_usr;


--
-- Name: projectprop_projectprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE projectprop_projectprop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE projectprop_projectprop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE projectprop_projectprop_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE projectprop_projectprop_id_seq TO web_usr;


--
-- Name: pub_dbxref; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE pub_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE pub_dbxref FROM postgres;
GRANT ALL ON TABLE pub_dbxref TO postgres;
GRANT ALL ON TABLE pub_dbxref TO web_usr;


--
-- Name: pub_dbxref_pub_dbxref_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE pub_dbxref_pub_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE pub_dbxref_pub_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE pub_dbxref_pub_dbxref_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE pub_dbxref_pub_dbxref_id_seq TO web_usr;


--
-- Name: pub_pub_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE pub_pub_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE pub_pub_id_seq FROM postgres;
GRANT ALL ON SEQUENCE pub_pub_id_seq TO postgres;
GRANT ALL ON SEQUENCE pub_pub_id_seq TO web_usr;


--
-- Name: pub_relationship; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE pub_relationship FROM PUBLIC;
REVOKE ALL ON TABLE pub_relationship FROM postgres;
GRANT ALL ON TABLE pub_relationship TO postgres;
GRANT ALL ON TABLE pub_relationship TO web_usr;


--
-- Name: pub_relationship_pub_relationship_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE pub_relationship_pub_relationship_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE pub_relationship_pub_relationship_id_seq FROM postgres;
GRANT ALL ON SEQUENCE pub_relationship_pub_relationship_id_seq TO postgres;


--
-- Name: pubabstract; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE pubabstract FROM PUBLIC;
REVOKE ALL ON TABLE pubabstract FROM postgres;
GRANT ALL ON TABLE pubabstract TO postgres;
GRANT ALL ON TABLE pubabstract TO web_usr;


--
-- Name: pubabstract_pubabstract_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE pubabstract_pubabstract_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE pubabstract_pubabstract_id_seq FROM postgres;
GRANT ALL ON SEQUENCE pubabstract_pubabstract_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE pubabstract_pubabstract_id_seq TO web_usr;


--
-- Name: pubauthor; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE pubauthor FROM PUBLIC;
REVOKE ALL ON TABLE pubauthor FROM postgres;
GRANT ALL ON TABLE pubauthor TO postgres;
GRANT ALL ON TABLE pubauthor TO web_usr;


--
-- Name: pubauthor_pubauthor_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE pubauthor_pubauthor_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE pubauthor_pubauthor_id_seq FROM postgres;
GRANT ALL ON SEQUENCE pubauthor_pubauthor_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE pubauthor_pubauthor_id_seq TO web_usr;


--
-- Name: pubprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE pubprop FROM PUBLIC;
REVOKE ALL ON TABLE pubprop FROM postgres;
GRANT ALL ON TABLE pubprop TO postgres;
GRANT ALL ON TABLE pubprop TO web_usr;


--
-- Name: pubprop_pubprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE pubprop_pubprop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE pubprop_pubprop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE pubprop_pubprop_id_seq TO postgres;


--
-- Name: resource_file; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE resource_file FROM PUBLIC;
REVOKE ALL ON TABLE resource_file FROM postgres;
GRANT ALL ON TABLE resource_file TO postgres;
GRANT ALL ON TABLE resource_file TO web_usr;


--
-- Name: signalp; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE signalp FROM PUBLIC;
REVOKE ALL ON TABLE signalp FROM postgres;
GRANT ALL ON TABLE signalp TO postgres;
GRANT ALL ON TABLE signalp TO web_usr;


--
-- Name: stock_cvterm; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE stock_cvterm FROM PUBLIC;
REVOKE ALL ON TABLE stock_cvterm FROM postgres;
GRANT ALL ON TABLE stock_cvterm TO postgres;
GRANT ALL ON TABLE stock_cvterm TO web_usr;


--
-- Name: stock_cvterm_stock_cvterm_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE stock_cvterm_stock_cvterm_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE stock_cvterm_stock_cvterm_id_seq FROM postgres;
GRANT ALL ON SEQUENCE stock_cvterm_stock_cvterm_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE stock_cvterm_stock_cvterm_id_seq TO web_usr;


--
-- Name: stock_cvtermprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE stock_cvtermprop FROM PUBLIC;
REVOKE ALL ON TABLE stock_cvtermprop FROM postgres;
GRANT ALL ON TABLE stock_cvtermprop TO postgres;
GRANT ALL ON TABLE stock_cvtermprop TO web_usr;


--
-- Name: stock_cvtermprop_stock_cvtermprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE stock_cvtermprop_stock_cvtermprop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE stock_cvtermprop_stock_cvtermprop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE stock_cvtermprop_stock_cvtermprop_id_seq TO postgres;
GRANT USAGE ON SEQUENCE stock_cvtermprop_stock_cvtermprop_id_seq TO web_usr;


--
-- Name: stock_dbxref; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE stock_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE stock_dbxref FROM postgres;
GRANT ALL ON TABLE stock_dbxref TO postgres;
GRANT ALL ON TABLE stock_dbxref TO web_usr;


--
-- Name: stock_dbxref_stock_dbxref_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE stock_dbxref_stock_dbxref_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE stock_dbxref_stock_dbxref_id_seq FROM postgres;
GRANT ALL ON SEQUENCE stock_dbxref_stock_dbxref_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE stock_dbxref_stock_dbxref_id_seq TO web_usr;


--
-- Name: stock_dbxrefprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE stock_dbxrefprop FROM PUBLIC;
REVOKE ALL ON TABLE stock_dbxrefprop FROM postgres;
GRANT ALL ON TABLE stock_dbxrefprop TO postgres;
GRANT ALL ON TABLE stock_dbxrefprop TO web_usr;


--
-- Name: stock_genotype; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE stock_genotype FROM PUBLIC;
REVOKE ALL ON TABLE stock_genotype FROM postgres;
GRANT ALL ON TABLE stock_genotype TO postgres;
GRANT ALL ON TABLE stock_genotype TO web_usr;


--
-- Name: stock_genotype_stock_genotype_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE stock_genotype_stock_genotype_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE stock_genotype_stock_genotype_id_seq FROM postgres;
GRANT ALL ON SEQUENCE stock_genotype_stock_genotype_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE stock_genotype_stock_genotype_id_seq TO web_usr;


--
-- Name: stock_pub; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE stock_pub FROM PUBLIC;
REVOKE ALL ON TABLE stock_pub FROM postgres;
GRANT ALL ON TABLE stock_pub TO postgres;
GRANT ALL ON TABLE stock_pub TO web_usr;


--
-- Name: stock_pub_stock_pub_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE stock_pub_stock_pub_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE stock_pub_stock_pub_id_seq FROM postgres;
GRANT ALL ON SEQUENCE stock_pub_stock_pub_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE stock_pub_stock_pub_id_seq TO web_usr;


--
-- Name: stock_relationship_cvterm; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE stock_relationship_cvterm FROM PUBLIC;
REVOKE ALL ON TABLE stock_relationship_cvterm FROM postgres;
GRANT ALL ON TABLE stock_relationship_cvterm TO postgres;
GRANT ALL ON TABLE stock_relationship_cvterm TO web_usr;


--
-- Name: stock_relationship_pub; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE stock_relationship_pub FROM PUBLIC;
REVOKE ALL ON TABLE stock_relationship_pub FROM postgres;
GRANT ALL ON TABLE stock_relationship_pub TO postgres;
GRANT ALL ON TABLE stock_relationship_pub TO web_usr;


--
-- Name: stock_relationship_pub_stock_relationship_pub_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE stock_relationship_pub_stock_relationship_pub_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE stock_relationship_pub_stock_relationship_pub_id_seq FROM postgres;
GRANT ALL ON SEQUENCE stock_relationship_pub_stock_relationship_pub_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE stock_relationship_pub_stock_relationship_pub_id_seq TO web_usr;


--
-- Name: stock_relationship_stock_relationship_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE stock_relationship_stock_relationship_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE stock_relationship_stock_relationship_id_seq FROM postgres;
GRANT ALL ON SEQUENCE stock_relationship_stock_relationship_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE stock_relationship_stock_relationship_id_seq TO web_usr;


--
-- Name: stock_stock_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE stock_stock_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE stock_stock_id_seq FROM postgres;
GRANT ALL ON SEQUENCE stock_stock_id_seq TO postgres;
GRANT ALL ON SEQUENCE stock_stock_id_seq TO web_usr;


--
-- Name: stockcollection; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE stockcollection FROM PUBLIC;
REVOKE ALL ON TABLE stockcollection FROM postgres;
GRANT ALL ON TABLE stockcollection TO postgres;
GRANT ALL ON TABLE stockcollection TO web_usr;


--
-- Name: stockcollection_stock; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE stockcollection_stock FROM PUBLIC;
REVOKE ALL ON TABLE stockcollection_stock FROM postgres;
GRANT ALL ON TABLE stockcollection_stock TO postgres;
GRANT ALL ON TABLE stockcollection_stock TO web_usr;


--
-- Name: stockcollection_stock_stockcollection_stock_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE stockcollection_stock_stockcollection_stock_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE stockcollection_stock_stockcollection_stock_id_seq FROM postgres;
GRANT ALL ON SEQUENCE stockcollection_stock_stockcollection_stock_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE stockcollection_stock_stockcollection_stock_id_seq TO web_usr;


--
-- Name: stockcollection_stockcollection_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE stockcollection_stockcollection_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE stockcollection_stockcollection_id_seq FROM postgres;
GRANT ALL ON SEQUENCE stockcollection_stockcollection_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE stockcollection_stockcollection_id_seq TO web_usr;


--
-- Name: stockcollectionprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE stockcollectionprop FROM PUBLIC;
REVOKE ALL ON TABLE stockcollectionprop FROM postgres;
GRANT ALL ON TABLE stockcollectionprop TO postgres;
GRANT ALL ON TABLE stockcollectionprop TO web_usr;


--
-- Name: stockcollectionprop_stockcollectionprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE stockcollectionprop_stockcollectionprop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE stockcollectionprop_stockcollectionprop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE stockcollectionprop_stockcollectionprop_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE stockcollectionprop_stockcollectionprop_id_seq TO web_usr;


--
-- Name: stockprop; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE stockprop FROM PUBLIC;
REVOKE ALL ON TABLE stockprop FROM postgres;
GRANT ALL ON TABLE stockprop TO postgres;
GRANT ALL ON TABLE stockprop TO web_usr;


--
-- Name: stockprop_pub; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE stockprop_pub FROM PUBLIC;
REVOKE ALL ON TABLE stockprop_pub FROM postgres;
GRANT ALL ON TABLE stockprop_pub TO postgres;
GRANT ALL ON TABLE stockprop_pub TO web_usr;


--
-- Name: stockprop_pub_stockprop_pub_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE stockprop_pub_stockprop_pub_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE stockprop_pub_stockprop_pub_id_seq FROM postgres;
GRANT ALL ON SEQUENCE stockprop_pub_stockprop_pub_id_seq TO postgres;
GRANT SELECT,USAGE ON SEQUENCE stockprop_pub_stockprop_pub_id_seq TO web_usr;


--
-- Name: stockprop_stockprop_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE stockprop_stockprop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE stockprop_stockprop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE stockprop_stockprop_id_seq TO postgres;
GRANT ALL ON SEQUENCE stockprop_stockprop_id_seq TO web_usr;


--
-- Name: synonym_synonym_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE synonym_synonym_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE synonym_synonym_id_seq FROM postgres;
GRANT ALL ON SEQUENCE synonym_synonym_id_seq TO postgres;


--
-- Name: tableinfo; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE tableinfo FROM PUBLIC;
REVOKE ALL ON TABLE tableinfo FROM postgres;
GRANT ALL ON TABLE tableinfo TO postgres;
GRANT ALL ON TABLE tableinfo TO web_usr;


--
-- Name: tableinfo_tableinfo_id_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE tableinfo_tableinfo_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE tableinfo_tableinfo_id_seq FROM postgres;
GRANT ALL ON SEQUENCE tableinfo_tableinfo_id_seq TO postgres;


--
-- Name: tmp_cds_handler; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE tmp_cds_handler FROM PUBLIC;
REVOKE ALL ON TABLE tmp_cds_handler FROM postgres;
GRANT ALL ON TABLE tmp_cds_handler TO postgres;
GRANT ALL ON TABLE tmp_cds_handler TO web_usr;


--
-- Name: tmp_cds_handler_relationship; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE tmp_cds_handler_relationship FROM PUBLIC;
REVOKE ALL ON TABLE tmp_cds_handler_relationship FROM postgres;
GRANT ALL ON TABLE tmp_cds_handler_relationship TO postgres;
GRANT ALL ON TABLE tmp_cds_handler_relationship TO web_usr;


--
-- Name: tmp_gff_load_cache; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE tmp_gff_load_cache FROM PUBLIC;
REVOKE ALL ON TABLE tmp_gff_load_cache FROM postgres;
GRANT ALL ON TABLE tmp_gff_load_cache TO postgres;
GRANT ALL ON TABLE tmp_gff_load_cache TO web_usr;


--
-- Name: unigene_dbxref; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE unigene_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE unigene_dbxref FROM postgres;
GRANT ALL ON TABLE unigene_dbxref TO postgres;
GRANT ALL ON TABLE unigene_dbxref TO web_usr;


--
-- Name: unigene_relations; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE unigene_relations FROM PUBLIC;
REVOKE ALL ON TABLE unigene_relations FROM postgres;
GRANT ALL ON TABLE unigene_relations TO postgres;
GRANT ALL ON TABLE unigene_relations TO web_usr;


--
-- Name: unigene_signalp; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE unigene_signalp FROM PUBLIC;
REVOKE ALL ON TABLE unigene_signalp FROM postgres;
GRANT ALL ON TABLE unigene_signalp TO postgres;
GRANT ALL ON TABLE unigene_signalp TO web_usr;


SET search_path = sgn, pg_catalog;

--
-- Name: accession; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE accession FROM PUBLIC;
REVOKE ALL ON TABLE accession FROM postgres;
GRANT ALL ON TABLE accession TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE accession TO web_usr;


--
-- Name: accession_accession_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE accession_accession_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE accession_accession_id_seq FROM postgres;
GRANT ALL ON SEQUENCE accession_accession_id_seq TO postgres;
GRANT ALL ON SEQUENCE accession_accession_id_seq TO web_usr;


--
-- Name: accession_names; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE accession_names FROM PUBLIC;
REVOKE ALL ON TABLE accession_names FROM postgres;
GRANT ALL ON TABLE accession_names TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE accession_names TO web_usr;


--
-- Name: accession_names_accession_name_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE accession_names_accession_name_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE accession_names_accession_name_id_seq FROM postgres;
GRANT ALL ON SEQUENCE accession_names_accession_name_id_seq TO postgres;
GRANT ALL ON SEQUENCE accession_names_accession_name_id_seq TO web_usr;


--
-- Name: annotation_target_type; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE annotation_target_type FROM PUBLIC;
REVOKE ALL ON TABLE annotation_target_type FROM postgres;
GRANT ALL ON TABLE annotation_target_type TO postgres;
GRANT SELECT ON TABLE annotation_target_type TO web_usr;


--
-- Name: annotation_target_type_annotation_target_type_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE annotation_target_type_annotation_target_type_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE annotation_target_type_annotation_target_type_id_seq FROM postgres;
GRANT ALL ON SEQUENCE annotation_target_type_annotation_target_type_id_seq TO postgres;
GRANT ALL ON SEQUENCE annotation_target_type_annotation_target_type_id_seq TO web_usr;


--
-- Name: authors; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE authors FROM PUBLIC;
REVOKE ALL ON TABLE authors FROM postgres;
GRANT ALL ON TABLE authors TO postgres;
GRANT SELECT ON TABLE authors TO web_usr;


--
-- Name: authors_author_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE authors_author_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE authors_author_id_seq FROM postgres;
GRANT ALL ON SEQUENCE authors_author_id_seq TO postgres;
GRANT ALL ON SEQUENCE authors_author_id_seq TO web_usr;


--
-- Name: blast_annotations; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE blast_annotations FROM PUBLIC;
REVOKE ALL ON TABLE blast_annotations FROM postgres;
GRANT ALL ON TABLE blast_annotations TO postgres;
GRANT SELECT ON TABLE blast_annotations TO web_usr;


--
-- Name: blast_annotations_blast_annotation_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE blast_annotations_blast_annotation_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE blast_annotations_blast_annotation_id_seq FROM postgres;
GRANT ALL ON SEQUENCE blast_annotations_blast_annotation_id_seq TO postgres;
GRANT ALL ON SEQUENCE blast_annotations_blast_annotation_id_seq TO web_usr;


--
-- Name: blast_db; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE blast_db FROM PUBLIC;
REVOKE ALL ON TABLE blast_db FROM postgres;
GRANT ALL ON TABLE blast_db TO postgres;
GRANT SELECT ON TABLE blast_db TO web_usr;


--
-- Name: blast_db_blast_db_group; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE blast_db_blast_db_group FROM PUBLIC;
REVOKE ALL ON TABLE blast_db_blast_db_group FROM postgres;
GRANT ALL ON TABLE blast_db_blast_db_group TO postgres;
GRANT SELECT ON TABLE blast_db_blast_db_group TO web_usr;


--
-- Name: blast_db_blast_db_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE blast_db_blast_db_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE blast_db_blast_db_id_seq FROM postgres;
GRANT ALL ON SEQUENCE blast_db_blast_db_id_seq TO postgres;
GRANT ALL ON SEQUENCE blast_db_blast_db_id_seq TO web_usr;


--
-- Name: blast_db_group; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE blast_db_group FROM PUBLIC;
REVOKE ALL ON TABLE blast_db_group FROM postgres;
GRANT ALL ON TABLE blast_db_group TO postgres;
GRANT SELECT ON TABLE blast_db_group TO web_usr;


--
-- Name: blast_db_organism; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE blast_db_organism FROM PUBLIC;
REVOKE ALL ON TABLE blast_db_organism FROM postgres;
GRANT ALL ON TABLE blast_db_organism TO postgres;
GRANT SELECT ON TABLE blast_db_organism TO web_usr;


--
-- Name: blast_defline; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE blast_defline FROM PUBLIC;
REVOKE ALL ON TABLE blast_defline FROM postgres;
GRANT ALL ON TABLE blast_defline TO postgres;
GRANT SELECT ON TABLE blast_defline TO web_usr;


--
-- Name: blast_defline_defline_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE blast_defline_defline_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE blast_defline_defline_id_seq FROM postgres;
GRANT ALL ON SEQUENCE blast_defline_defline_id_seq TO postgres;
GRANT ALL ON SEQUENCE blast_defline_defline_id_seq TO web_usr;


--
-- Name: blast_hits; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE blast_hits FROM PUBLIC;
REVOKE ALL ON TABLE blast_hits FROM postgres;
GRANT ALL ON TABLE blast_hits TO postgres;
GRANT SELECT ON TABLE blast_hits TO web_usr;


--
-- Name: blast_hits_blast_hit_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE blast_hits_blast_hit_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE blast_hits_blast_hit_id_seq FROM postgres;
GRANT ALL ON SEQUENCE blast_hits_blast_hit_id_seq TO postgres;
GRANT ALL ON SEQUENCE blast_hits_blast_hit_id_seq TO web_usr;


--
-- Name: blast_targets; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE blast_targets FROM PUBLIC;
REVOKE ALL ON TABLE blast_targets FROM postgres;
GRANT ALL ON TABLE blast_targets TO postgres;
GRANT SELECT ON TABLE blast_targets TO web_usr;


--
-- Name: blast_targets_blast_target_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE blast_targets_blast_target_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE blast_targets_blast_target_id_seq FROM postgres;
GRANT ALL ON SEQUENCE blast_targets_blast_target_id_seq TO postgres;
GRANT ALL ON SEQUENCE blast_targets_blast_target_id_seq TO web_usr;


--
-- Name: cds; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE cds FROM PUBLIC;
REVOKE ALL ON TABLE cds FROM postgres;
GRANT ALL ON TABLE cds TO postgres;
GRANT SELECT ON TABLE cds TO web_usr;


--
-- Name: cds_cds_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE cds_cds_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cds_cds_id_seq FROM postgres;
GRANT ALL ON SEQUENCE cds_cds_id_seq TO postgres;
GRANT ALL ON SEQUENCE cds_cds_id_seq TO web_usr;


--
-- Name: clone; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE clone FROM PUBLIC;
REVOKE ALL ON TABLE clone FROM postgres;
GRANT ALL ON TABLE clone TO postgres;
GRANT SELECT ON TABLE clone TO web_usr;


--
-- Name: clone_clone_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE clone_clone_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE clone_clone_id_seq FROM postgres;
GRANT ALL ON SEQUENCE clone_clone_id_seq TO postgres;
GRANT ALL ON SEQUENCE clone_clone_id_seq TO web_usr;


--
-- Name: cloning_vector; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE cloning_vector FROM PUBLIC;
REVOKE ALL ON TABLE cloning_vector FROM postgres;
GRANT ALL ON TABLE cloning_vector TO postgres;
GRANT SELECT ON TABLE cloning_vector TO web_usr;


--
-- Name: cloning_vector_cloning_vector_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE cloning_vector_cloning_vector_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cloning_vector_cloning_vector_id_seq FROM postgres;
GRANT ALL ON SEQUENCE cloning_vector_cloning_vector_id_seq TO postgres;
GRANT ALL ON SEQUENCE cloning_vector_cloning_vector_id_seq TO web_usr;


--
-- Name: common_name; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE common_name FROM PUBLIC;
REVOKE ALL ON TABLE common_name FROM postgres;
GRANT ALL ON TABLE common_name TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE common_name TO web_usr;


--
-- Name: common_name_common_name_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE common_name_common_name_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE common_name_common_name_id_seq FROM postgres;
GRANT ALL ON SEQUENCE common_name_common_name_id_seq TO postgres;
GRANT ALL ON SEQUENCE common_name_common_name_id_seq TO web_usr;


--
-- Name: common_nameprop; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE common_nameprop FROM PUBLIC;
REVOKE ALL ON TABLE common_nameprop FROM postgres;
GRANT ALL ON TABLE common_nameprop TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE common_nameprop TO web_usr;


--
-- Name: cos_markers; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE cos_markers FROM PUBLIC;
REVOKE ALL ON TABLE cos_markers FROM postgres;
GRANT ALL ON TABLE cos_markers TO postgres;
GRANT SELECT ON TABLE cos_markers TO web_usr;


--
-- Name: cos_markers_cos_marker_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE cos_markers_cos_marker_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cos_markers_cos_marker_id_seq FROM postgres;
GRANT ALL ON SEQUENCE cos_markers_cos_marker_id_seq TO postgres;
GRANT ALL ON SEQUENCE cos_markers_cos_marker_id_seq TO web_usr;


--
-- Name: cosii_ortholog; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE cosii_ortholog FROM PUBLIC;
REVOKE ALL ON TABLE cosii_ortholog FROM postgres;
GRANT ALL ON TABLE cosii_ortholog TO postgres;
GRANT SELECT ON TABLE cosii_ortholog TO web_usr;


--
-- Name: cosii_ortholog_cosii_unigene_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE cosii_ortholog_cosii_unigene_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cosii_ortholog_cosii_unigene_id_seq FROM postgres;
GRANT ALL ON SEQUENCE cosii_ortholog_cosii_unigene_id_seq TO postgres;
GRANT ALL ON SEQUENCE cosii_ortholog_cosii_unigene_id_seq TO web_usr;


--
-- Name: deprecated_linkage_groups; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE deprecated_linkage_groups FROM PUBLIC;
REVOKE ALL ON TABLE deprecated_linkage_groups FROM postgres;
GRANT ALL ON TABLE deprecated_linkage_groups TO postgres;
GRANT SELECT ON TABLE deprecated_linkage_groups TO web_usr;


--
-- Name: deprecated_linkage_groups_lg_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE deprecated_linkage_groups_lg_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE deprecated_linkage_groups_lg_id_seq FROM postgres;
GRANT ALL ON SEQUENCE deprecated_linkage_groups_lg_id_seq TO postgres;
GRANT ALL ON SEQUENCE deprecated_linkage_groups_lg_id_seq TO web_usr;


--
-- Name: deprecated_map_cross; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE deprecated_map_cross FROM PUBLIC;
REVOKE ALL ON TABLE deprecated_map_cross FROM postgres;
GRANT ALL ON TABLE deprecated_map_cross TO postgres;
GRANT SELECT ON TABLE deprecated_map_cross TO web_usr;


--
-- Name: deprecated_map_cross_map_cross_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE deprecated_map_cross_map_cross_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE deprecated_map_cross_map_cross_id_seq FROM postgres;
GRANT ALL ON SEQUENCE deprecated_map_cross_map_cross_id_seq TO postgres;
GRANT ALL ON SEQUENCE deprecated_map_cross_map_cross_id_seq TO web_usr;


--
-- Name: deprecated_mapdata; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE deprecated_mapdata FROM PUBLIC;
REVOKE ALL ON TABLE deprecated_mapdata FROM postgres;
GRANT ALL ON TABLE deprecated_mapdata TO postgres;
GRANT SELECT ON TABLE deprecated_mapdata TO web_usr;


--
-- Name: deprecated_mapdata_loc_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE deprecated_mapdata_loc_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE deprecated_mapdata_loc_id_seq FROM postgres;
GRANT ALL ON SEQUENCE deprecated_mapdata_loc_id_seq TO postgres;
GRANT ALL ON SEQUENCE deprecated_mapdata_loc_id_seq TO web_usr;


--
-- Name: deprecated_maps; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE deprecated_maps FROM PUBLIC;
REVOKE ALL ON TABLE deprecated_maps FROM postgres;
GRANT ALL ON TABLE deprecated_maps TO postgres;
GRANT SELECT ON TABLE deprecated_maps TO web_usr;


--
-- Name: deprecated_maps_map_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE deprecated_maps_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE deprecated_maps_map_id_seq FROM postgres;
GRANT ALL ON SEQUENCE deprecated_maps_map_id_seq TO postgres;
GRANT ALL ON SEQUENCE deprecated_maps_map_id_seq TO web_usr;


--
-- Name: deprecated_marker_confidences; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE deprecated_marker_confidences FROM PUBLIC;
REVOKE ALL ON TABLE deprecated_marker_confidences FROM postgres;
GRANT ALL ON TABLE deprecated_marker_confidences TO postgres;
GRANT SELECT ON TABLE deprecated_marker_confidences TO web_usr;


--
-- Name: deprecated_marker_confidences_confidence_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE deprecated_marker_confidences_confidence_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE deprecated_marker_confidences_confidence_id_seq FROM postgres;
GRANT ALL ON SEQUENCE deprecated_marker_confidences_confidence_id_seq TO postgres;
GRANT ALL ON SEQUENCE deprecated_marker_confidences_confidence_id_seq TO web_usr;


--
-- Name: deprecated_marker_locations; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE deprecated_marker_locations FROM PUBLIC;
REVOKE ALL ON TABLE deprecated_marker_locations FROM postgres;
GRANT ALL ON TABLE deprecated_marker_locations TO postgres;
GRANT SELECT ON TABLE deprecated_marker_locations TO web_usr;


--
-- Name: deprecated_marker_locations_marker_location_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE deprecated_marker_locations_marker_location_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE deprecated_marker_locations_marker_location_id_seq FROM postgres;
GRANT ALL ON SEQUENCE deprecated_marker_locations_marker_location_id_seq TO postgres;
GRANT ALL ON SEQUENCE deprecated_marker_locations_marker_location_id_seq TO web_usr;


--
-- Name: deprecated_marker_types; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE deprecated_marker_types FROM PUBLIC;
REVOKE ALL ON TABLE deprecated_marker_types FROM postgres;
GRANT ALL ON TABLE deprecated_marker_types TO postgres;
GRANT SELECT ON TABLE deprecated_marker_types TO web_usr;


--
-- Name: deprecated_marker_types_marker_type_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE deprecated_marker_types_marker_type_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE deprecated_marker_types_marker_type_id_seq FROM postgres;
GRANT ALL ON SEQUENCE deprecated_marker_types_marker_type_id_seq TO postgres;
GRANT ALL ON SEQUENCE deprecated_marker_types_marker_type_id_seq TO web_usr;


--
-- Name: deprecated_markers; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE deprecated_markers FROM PUBLIC;
REVOKE ALL ON TABLE deprecated_markers FROM postgres;
GRANT ALL ON TABLE deprecated_markers TO postgres;
GRANT SELECT ON TABLE deprecated_markers TO web_usr;


--
-- Name: deprecated_markers_marker_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE deprecated_markers_marker_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE deprecated_markers_marker_id_seq FROM postgres;
GRANT ALL ON SEQUENCE deprecated_markers_marker_id_seq TO postgres;
GRANT ALL ON SEQUENCE deprecated_markers_marker_id_seq TO web_usr;


--
-- Name: derived_from_source; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE derived_from_source FROM PUBLIC;
REVOKE ALL ON TABLE derived_from_source FROM postgres;
GRANT ALL ON TABLE derived_from_source TO postgres;
GRANT SELECT ON TABLE derived_from_source TO web_usr;


--
-- Name: derived_from_source_derived_from_source_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE derived_from_source_derived_from_source_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE derived_from_source_derived_from_source_id_seq FROM postgres;
GRANT ALL ON SEQUENCE derived_from_source_derived_from_source_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE derived_from_source_derived_from_source_id_seq TO web_usr;


--
-- Name: domain; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE domain FROM PUBLIC;
REVOKE ALL ON TABLE domain FROM postgres;
GRANT ALL ON TABLE domain TO postgres;
GRANT SELECT ON TABLE domain TO web_usr;


--
-- Name: domain_domain_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE domain_domain_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE domain_domain_id_seq FROM postgres;
GRANT ALL ON SEQUENCE domain_domain_id_seq TO postgres;
GRANT ALL ON SEQUENCE domain_domain_id_seq TO web_usr;


--
-- Name: domain_match; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE domain_match FROM PUBLIC;
REVOKE ALL ON TABLE domain_match FROM postgres;
GRANT ALL ON TABLE domain_match TO postgres;
GRANT SELECT ON TABLE domain_match TO web_usr;


--
-- Name: domain_match_domain_match_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE domain_match_domain_match_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE domain_match_domain_match_id_seq FROM postgres;
GRANT ALL ON SEQUENCE domain_match_domain_match_id_seq TO postgres;
GRANT ALL ON SEQUENCE domain_match_domain_match_id_seq TO web_usr;


--
-- Name: enzyme_restriction_sites; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE enzyme_restriction_sites FROM PUBLIC;
REVOKE ALL ON TABLE enzyme_restriction_sites FROM postgres;
GRANT ALL ON TABLE enzyme_restriction_sites TO postgres;
GRANT SELECT ON TABLE enzyme_restriction_sites TO web_usr;


--
-- Name: enzyme_restriction_sites_enzyme_restriction_sites_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE enzyme_restriction_sites_enzyme_restriction_sites_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE enzyme_restriction_sites_enzyme_restriction_sites_id_seq FROM postgres;
GRANT ALL ON SEQUENCE enzyme_restriction_sites_enzyme_restriction_sites_id_seq TO postgres;


--
-- Name: enzymes; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE enzymes FROM PUBLIC;
REVOKE ALL ON TABLE enzymes FROM postgres;
GRANT ALL ON TABLE enzymes TO postgres;
GRANT SELECT ON TABLE enzymes TO web_usr;


--
-- Name: enzymes_enzyme_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE enzymes_enzyme_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE enzymes_enzyme_id_seq FROM postgres;
GRANT ALL ON SEQUENCE enzymes_enzyme_id_seq TO postgres;
GRANT ALL ON SEQUENCE enzymes_enzyme_id_seq TO web_usr;


--
-- Name: est; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE est FROM PUBLIC;
REVOKE ALL ON TABLE est FROM postgres;
GRANT ALL ON TABLE est TO postgres;
GRANT SELECT ON TABLE est TO web_usr;


--
-- Name: est_dbxref; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE est_dbxref FROM PUBLIC;
REVOKE ALL ON TABLE est_dbxref FROM postgres;
GRANT ALL ON TABLE est_dbxref TO postgres;
GRANT SELECT ON TABLE est_dbxref TO web_usr;


--
-- Name: est_est_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE est_est_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE est_est_id_seq FROM postgres;
GRANT ALL ON SEQUENCE est_est_id_seq TO postgres;


--
-- Name: ests_mapped_by_clone; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE ests_mapped_by_clone FROM PUBLIC;
REVOKE ALL ON TABLE ests_mapped_by_clone FROM postgres;
GRANT ALL ON TABLE ests_mapped_by_clone TO postgres;
GRANT SELECT ON TABLE ests_mapped_by_clone TO web_usr;


--
-- Name: ests_mapped_by_clone_embc_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE ests_mapped_by_clone_embc_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ests_mapped_by_clone_embc_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ests_mapped_by_clone_embc_id_seq TO postgres;
GRANT ALL ON SEQUENCE ests_mapped_by_clone_embc_id_seq TO web_usr;


--
-- Name: experiment_type; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE experiment_type FROM PUBLIC;
REVOKE ALL ON TABLE experiment_type FROM postgres;
GRANT ALL ON TABLE experiment_type TO postgres;
GRANT SELECT ON TABLE experiment_type TO web_usr;


--
-- Name: experiment_type_experiment_type_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE experiment_type_experiment_type_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE experiment_type_experiment_type_id_seq FROM postgres;
GRANT ALL ON SEQUENCE experiment_type_experiment_type_id_seq TO postgres;
GRANT ALL ON SEQUENCE experiment_type_experiment_type_id_seq TO web_usr;


--
-- Name: facility; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE facility FROM PUBLIC;
REVOKE ALL ON TABLE facility FROM postgres;
GRANT ALL ON TABLE facility TO postgres;
GRANT SELECT ON TABLE facility TO web_usr;


--
-- Name: facility_facility_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE facility_facility_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE facility_facility_id_seq FROM postgres;
GRANT ALL ON SEQUENCE facility_facility_id_seq TO postgres;
GRANT ALL ON SEQUENCE facility_facility_id_seq TO web_usr;


--
-- Name: family_build_family_build_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE family_build_family_build_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE family_build_family_build_id_seq FROM postgres;
GRANT ALL ON SEQUENCE family_build_family_build_id_seq TO postgres;
GRANT ALL ON SEQUENCE family_build_family_build_id_seq TO web_usr;


--
-- Name: family_family_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE family_family_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE family_family_id_seq FROM postgres;
GRANT ALL ON SEQUENCE family_family_id_seq TO postgres;
GRANT ALL ON SEQUENCE family_family_id_seq TO web_usr;


--
-- Name: family_member_family_member_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE family_member_family_member_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE family_member_family_member_id_seq FROM postgres;
GRANT ALL ON SEQUENCE family_member_family_member_id_seq TO postgres;
GRANT ALL ON SEQUENCE family_member_family_member_id_seq TO web_usr;


--
-- Name: family_tree; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE family_tree FROM PUBLIC;
REVOKE ALL ON TABLE family_tree FROM postgres;
GRANT ALL ON TABLE family_tree TO postgres;
GRANT SELECT ON TABLE family_tree TO web_usr;


--
-- Name: family_tree_family_tree_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE family_tree_family_tree_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE family_tree_family_tree_id_seq FROM postgres;
GRANT ALL ON SEQUENCE family_tree_family_tree_id_seq TO postgres;


--
-- Name: fish_chromatin_density_constants; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE fish_chromatin_density_constants FROM PUBLIC;
REVOKE ALL ON TABLE fish_chromatin_density_constants FROM postgres;
GRANT ALL ON TABLE fish_chromatin_density_constants TO postgres;
GRANT SELECT ON TABLE fish_chromatin_density_constants TO web_usr;


--
-- Name: fish_experimenter; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE fish_experimenter FROM PUBLIC;
REVOKE ALL ON TABLE fish_experimenter FROM postgres;
GRANT ALL ON TABLE fish_experimenter TO postgres;
GRANT SELECT ON TABLE fish_experimenter TO web_usr;


--
-- Name: fish_experimenter_fish_experimenter_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE fish_experimenter_fish_experimenter_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE fish_experimenter_fish_experimenter_id_seq FROM postgres;
GRANT ALL ON SEQUENCE fish_experimenter_fish_experimenter_id_seq TO postgres;
GRANT ALL ON SEQUENCE fish_experimenter_fish_experimenter_id_seq TO web_usr;


--
-- Name: fish_file; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE fish_file FROM PUBLIC;
REVOKE ALL ON TABLE fish_file FROM postgres;
GRANT ALL ON TABLE fish_file TO postgres;
GRANT SELECT ON TABLE fish_file TO web_usr;


--
-- Name: fish_file_fish_file_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE fish_file_fish_file_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE fish_file_fish_file_id_seq FROM postgres;
GRANT ALL ON SEQUENCE fish_file_fish_file_id_seq TO postgres;
GRANT ALL ON SEQUENCE fish_file_fish_file_id_seq TO web_usr;


--
-- Name: fish_image; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE fish_image FROM PUBLIC;
REVOKE ALL ON TABLE fish_image FROM postgres;
GRANT ALL ON TABLE fish_image TO postgres;
GRANT SELECT ON TABLE fish_image TO web_usr;


--
-- Name: fish_karyotype_constants; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE fish_karyotype_constants FROM PUBLIC;
REVOKE ALL ON TABLE fish_karyotype_constants FROM postgres;
GRANT ALL ON TABLE fish_karyotype_constants TO postgres;
GRANT SELECT ON TABLE fish_karyotype_constants TO web_usr;


--
-- Name: fish_karyotype_constants_old; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE fish_karyotype_constants_old FROM PUBLIC;
REVOKE ALL ON TABLE fish_karyotype_constants_old FROM postgres;
GRANT ALL ON TABLE fish_karyotype_constants_old TO postgres;
GRANT SELECT ON TABLE fish_karyotype_constants_old TO web_usr;


--
-- Name: fish_result; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE fish_result FROM PUBLIC;
REVOKE ALL ON TABLE fish_result FROM postgres;
GRANT ALL ON TABLE fish_result TO postgres;
GRANT SELECT ON TABLE fish_result TO web_usr;


--
-- Name: fish_result_composite; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE fish_result_composite FROM PUBLIC;
REVOKE ALL ON TABLE fish_result_composite FROM postgres;
GRANT ALL ON TABLE fish_result_composite TO postgres;
GRANT SELECT ON TABLE fish_result_composite TO web_usr;


--
-- Name: fish_result_fish_result_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE fish_result_fish_result_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE fish_result_fish_result_id_seq FROM postgres;
GRANT ALL ON SEQUENCE fish_result_fish_result_id_seq TO postgres;
GRANT ALL ON SEQUENCE fish_result_fish_result_id_seq TO web_usr;


--
-- Name: fish_result_image; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE fish_result_image FROM PUBLIC;
REVOKE ALL ON TABLE fish_result_image FROM postgres;
GRANT ALL ON TABLE fish_result_image TO postgres;
GRANT SELECT ON TABLE fish_result_image TO web_usr;


--
-- Name: fish_result_image_fish_result_image_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE fish_result_image_fish_result_image_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE fish_result_image_fish_result_image_id_seq FROM postgres;
GRANT ALL ON SEQUENCE fish_result_image_fish_result_image_id_seq TO postgres;
GRANT SELECT ON SEQUENCE fish_result_image_fish_result_image_id_seq TO web_usr;


--
-- Name: go; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE go FROM PUBLIC;
REVOKE ALL ON TABLE go FROM postgres;
GRANT ALL ON TABLE go TO postgres;
GRANT SELECT ON TABLE go TO web_usr;


--
-- Name: go_go_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE go_go_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE go_go_id_seq FROM postgres;
GRANT ALL ON SEQUENCE go_go_id_seq TO postgres;
GRANT ALL ON SEQUENCE go_go_id_seq TO web_usr;


--
-- Name: group_linkage; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE group_linkage FROM PUBLIC;
REVOKE ALL ON TABLE group_linkage FROM postgres;
GRANT ALL ON TABLE group_linkage TO postgres;
GRANT SELECT ON TABLE group_linkage TO web_usr;


--
-- Name: group_linkage_group_linkage_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE group_linkage_group_linkage_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE group_linkage_group_linkage_id_seq FROM postgres;
GRANT ALL ON SEQUENCE group_linkage_group_linkage_id_seq TO postgres;
GRANT ALL ON SEQUENCE group_linkage_group_linkage_id_seq TO web_usr;


--
-- Name: groups; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE groups FROM PUBLIC;
REVOKE ALL ON TABLE groups FROM postgres;
GRANT ALL ON TABLE groups TO postgres;
GRANT SELECT ON TABLE groups TO web_usr;


--
-- Name: groups_group_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE groups_group_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE groups_group_id_seq FROM postgres;
GRANT ALL ON SEQUENCE groups_group_id_seq TO postgres;
GRANT ALL ON SEQUENCE groups_group_id_seq TO web_usr;


--
-- Name: id_linkage; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE id_linkage FROM PUBLIC;
REVOKE ALL ON TABLE id_linkage FROM postgres;
GRANT ALL ON TABLE id_linkage TO postgres;
GRANT SELECT ON TABLE id_linkage TO web_usr;


--
-- Name: id_linkage_id_linkage_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE id_linkage_id_linkage_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE id_linkage_id_linkage_id_seq FROM postgres;
GRANT ALL ON SEQUENCE id_linkage_id_linkage_id_seq TO postgres;
GRANT ALL ON SEQUENCE id_linkage_id_linkage_id_seq TO web_usr;


--
-- Name: il_info; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE il_info FROM PUBLIC;
REVOKE ALL ON TABLE il_info FROM postgres;
GRANT ALL ON TABLE il_info TO postgres;
GRANT SELECT ON TABLE il_info TO web_usr;


--
-- Name: interpro; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE interpro FROM PUBLIC;
REVOKE ALL ON TABLE interpro FROM postgres;
GRANT ALL ON TABLE interpro TO postgres;
GRANT SELECT ON TABLE interpro TO web_usr;


--
-- Name: interpro_go; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE interpro_go FROM PUBLIC;
REVOKE ALL ON TABLE interpro_go FROM postgres;
GRANT ALL ON TABLE interpro_go TO postgres;
GRANT SELECT ON TABLE interpro_go TO web_usr;


--
-- Name: interpro_go_interpro_go_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE interpro_go_interpro_go_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE interpro_go_interpro_go_id_seq FROM postgres;
GRANT ALL ON SEQUENCE interpro_go_interpro_go_id_seq TO postgres;
GRANT ALL ON SEQUENCE interpro_go_interpro_go_id_seq TO web_usr;


--
-- Name: interpro_interpro_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE interpro_interpro_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE interpro_interpro_id_seq FROM postgres;
GRANT ALL ON SEQUENCE interpro_interpro_id_seq TO postgres;
GRANT ALL ON SEQUENCE interpro_interpro_id_seq TO web_usr;


--
-- Name: library; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE library FROM PUBLIC;
REVOKE ALL ON TABLE library FROM postgres;
GRANT ALL ON TABLE library TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE library TO web_usr;


--
-- Name: library_library_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE library_library_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE library_library_id_seq FROM postgres;
GRANT ALL ON SEQUENCE library_library_id_seq TO postgres;
GRANT ALL ON SEQUENCE library_library_id_seq TO web_usr;


--
-- Name: linkage_group; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE linkage_group FROM PUBLIC;
REVOKE ALL ON TABLE linkage_group FROM postgres;
GRANT ALL ON TABLE linkage_group TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE linkage_group TO web_usr;


--
-- Name: linkage_group_lg_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE linkage_group_lg_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE linkage_group_lg_id_seq FROM postgres;
GRANT ALL ON SEQUENCE linkage_group_lg_id_seq TO postgres;
GRANT ALL ON SEQUENCE linkage_group_lg_id_seq TO web_usr;


--
-- Name: loc_types; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE loc_types FROM PUBLIC;
REVOKE ALL ON TABLE loc_types FROM postgres;
GRANT ALL ON TABLE loc_types TO postgres;
GRANT SELECT ON TABLE loc_types TO web_usr;


--
-- Name: loc_types_loc_type_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE loc_types_loc_type_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE loc_types_loc_type_id_seq FROM postgres;
GRANT ALL ON SEQUENCE loc_types_loc_type_id_seq TO postgres;
GRANT ALL ON SEQUENCE loc_types_loc_type_id_seq TO web_usr;


--
-- Name: manual_annotations; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE manual_annotations FROM PUBLIC;
REVOKE ALL ON TABLE manual_annotations FROM postgres;
GRANT ALL ON TABLE manual_annotations TO postgres;
GRANT SELECT ON TABLE manual_annotations TO web_usr;


--
-- Name: manual_annotations_manual_annotations_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE manual_annotations_manual_annotations_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE manual_annotations_manual_annotations_id_seq FROM postgres;
GRANT ALL ON SEQUENCE manual_annotations_manual_annotations_id_seq TO postgres;
GRANT ALL ON SEQUENCE manual_annotations_manual_annotations_id_seq TO web_usr;


--
-- Name: manual_censor_reasons; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE manual_censor_reasons FROM PUBLIC;
REVOKE ALL ON TABLE manual_censor_reasons FROM postgres;
GRANT ALL ON TABLE manual_censor_reasons TO postgres;
GRANT SELECT ON TABLE manual_censor_reasons TO web_usr;


--
-- Name: manual_censor_reasons_censor_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE manual_censor_reasons_censor_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE manual_censor_reasons_censor_id_seq FROM postgres;
GRANT ALL ON SEQUENCE manual_censor_reasons_censor_id_seq TO postgres;
GRANT ALL ON SEQUENCE manual_censor_reasons_censor_id_seq TO web_usr;


--
-- Name: map; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE map FROM PUBLIC;
REVOKE ALL ON TABLE map FROM postgres;
GRANT ALL ON TABLE map TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE map TO web_usr;


--
-- Name: map_map_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE map_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE map_map_id_seq FROM postgres;
GRANT ALL ON SEQUENCE map_map_id_seq TO postgres;
GRANT ALL ON SEQUENCE map_map_id_seq TO web_usr;


--
-- Name: map_version; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE map_version FROM PUBLIC;
REVOKE ALL ON TABLE map_version FROM postgres;
GRANT ALL ON TABLE map_version TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE map_version TO web_usr;


--
-- Name: map_version_map_version_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE map_version_map_version_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE map_version_map_version_id_seq FROM postgres;
GRANT ALL ON SEQUENCE map_version_map_version_id_seq TO postgres;
GRANT ALL ON SEQUENCE map_version_map_version_id_seq TO web_usr;


--
-- Name: marker; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE marker FROM PUBLIC;
REVOKE ALL ON TABLE marker FROM postgres;
GRANT ALL ON TABLE marker TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE marker TO web_usr;


--
-- Name: marker_alias; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE marker_alias FROM PUBLIC;
REVOKE ALL ON TABLE marker_alias FROM postgres;
GRANT ALL ON TABLE marker_alias TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE marker_alias TO web_usr;


--
-- Name: marker_alias_alias_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE marker_alias_alias_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE marker_alias_alias_id_seq FROM postgres;
GRANT ALL ON SEQUENCE marker_alias_alias_id_seq TO postgres;
GRANT ALL ON SEQUENCE marker_alias_alias_id_seq TO web_usr;


--
-- Name: marker_collectible; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE marker_collectible FROM PUBLIC;
REVOKE ALL ON TABLE marker_collectible FROM postgres;
GRANT ALL ON TABLE marker_collectible TO postgres;
GRANT SELECT ON TABLE marker_collectible TO web_usr;


--
-- Name: marker_collectible_marker_collectible_dummy_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE marker_collectible_marker_collectible_dummy_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE marker_collectible_marker_collectible_dummy_id_seq FROM postgres;
GRANT ALL ON SEQUENCE marker_collectible_marker_collectible_dummy_id_seq TO postgres;
GRANT ALL ON SEQUENCE marker_collectible_marker_collectible_dummy_id_seq TO web_usr;


--
-- Name: marker_collection; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE marker_collection FROM PUBLIC;
REVOKE ALL ON TABLE marker_collection FROM postgres;
GRANT ALL ON TABLE marker_collection TO postgres;
GRANT SELECT ON TABLE marker_collection TO web_usr;


--
-- Name: marker_collection_mc_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE marker_collection_mc_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE marker_collection_mc_id_seq FROM postgres;
GRANT ALL ON SEQUENCE marker_collection_mc_id_seq TO postgres;
GRANT ALL ON SEQUENCE marker_collection_mc_id_seq TO web_usr;


--
-- Name: marker_confidence; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE marker_confidence FROM PUBLIC;
REVOKE ALL ON TABLE marker_confidence FROM postgres;
GRANT ALL ON TABLE marker_confidence TO postgres;
GRANT SELECT ON TABLE marker_confidence TO web_usr;


--
-- Name: marker_confidence_confidence_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE marker_confidence_confidence_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE marker_confidence_confidence_id_seq FROM postgres;
GRANT ALL ON SEQUENCE marker_confidence_confidence_id_seq TO postgres;
GRANT ALL ON SEQUENCE marker_confidence_confidence_id_seq TO web_usr;


--
-- Name: marker_derived_from; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE marker_derived_from FROM PUBLIC;
REVOKE ALL ON TABLE marker_derived_from FROM postgres;
GRANT ALL ON TABLE marker_derived_from TO postgres;
GRANT SELECT ON TABLE marker_derived_from TO web_usr;


--
-- Name: marker_derived_from_marker_derived_dummy_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE marker_derived_from_marker_derived_dummy_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE marker_derived_from_marker_derived_dummy_id_seq FROM postgres;
GRANT ALL ON SEQUENCE marker_derived_from_marker_derived_dummy_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE marker_derived_from_marker_derived_dummy_id_seq TO web_usr;


--
-- Name: marker_experiment; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE marker_experiment FROM PUBLIC;
REVOKE ALL ON TABLE marker_experiment FROM postgres;
GRANT ALL ON TABLE marker_experiment TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE marker_experiment TO web_usr;


--
-- Name: marker_experiment_marker_experiment_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE marker_experiment_marker_experiment_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE marker_experiment_marker_experiment_id_seq FROM postgres;
GRANT ALL ON SEQUENCE marker_experiment_marker_experiment_id_seq TO postgres;
GRANT ALL ON SEQUENCE marker_experiment_marker_experiment_id_seq TO web_usr;


--
-- Name: marker_location; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE marker_location FROM PUBLIC;
REVOKE ALL ON TABLE marker_location FROM postgres;
GRANT ALL ON TABLE marker_location TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE marker_location TO web_usr;


--
-- Name: marker_location_location_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE marker_location_location_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE marker_location_location_id_seq FROM postgres;
GRANT ALL ON SEQUENCE marker_location_location_id_seq TO postgres;
GRANT ALL ON SEQUENCE marker_location_location_id_seq TO web_usr;


--
-- Name: marker_marker_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE marker_marker_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE marker_marker_id_seq FROM postgres;
GRANT ALL ON SEQUENCE marker_marker_id_seq TO postgres;
GRANT ALL ON SEQUENCE marker_marker_id_seq TO web_usr;


--
-- Name: marker_to_map; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE marker_to_map FROM PUBLIC;
REVOKE ALL ON TABLE marker_to_map FROM postgres;
GRANT ALL ON TABLE marker_to_map TO postgres;
GRANT SELECT ON TABLE marker_to_map TO web_usr;


--
-- Name: metadata; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE metadata FROM PUBLIC;
REVOKE ALL ON TABLE metadata FROM postgres;
GRANT ALL ON TABLE metadata TO postgres;
GRANT SELECT ON TABLE metadata TO web_usr;


--
-- Name: metadata_metadata_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE metadata_metadata_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE metadata_metadata_id_seq FROM postgres;
GRANT ALL ON SEQUENCE metadata_metadata_id_seq TO postgres;
GRANT ALL ON SEQUENCE metadata_metadata_id_seq TO web_usr;


--
-- Name: microarray; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE microarray FROM PUBLIC;
REVOKE ALL ON TABLE microarray FROM postgres;
GRANT ALL ON TABLE microarray TO postgres;
GRANT SELECT ON TABLE microarray TO web_usr;


--
-- Name: microarray_microarray_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE microarray_microarray_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE microarray_microarray_id_seq FROM postgres;
GRANT ALL ON SEQUENCE microarray_microarray_id_seq TO postgres;
GRANT ALL ON SEQUENCE microarray_microarray_id_seq TO web_usr;


--
-- Name: misc; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE misc FROM PUBLIC;
REVOKE ALL ON TABLE misc FROM postgres;
GRANT ALL ON TABLE misc TO postgres;
GRANT SELECT ON TABLE misc TO web_usr;


--
-- Name: misc_misc_unique_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE misc_misc_unique_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE misc_misc_unique_id_seq FROM postgres;
GRANT ALL ON SEQUENCE misc_misc_unique_id_seq TO postgres;
GRANT ALL ON SEQUENCE misc_misc_unique_id_seq TO web_usr;


--
-- Name: organism; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE organism FROM PUBLIC;
REVOKE ALL ON TABLE organism FROM postgres;
GRANT ALL ON TABLE organism TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE organism TO web_usr;


--
-- Name: organism_organism_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE organism_organism_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE organism_organism_id_seq FROM postgres;
GRANT ALL ON SEQUENCE organism_organism_id_seq TO postgres;
GRANT ALL ON SEQUENCE organism_organism_id_seq TO web_usr;


--
-- Name: organismgroup; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE organismgroup FROM PUBLIC;
REVOKE ALL ON TABLE organismgroup FROM postgres;
GRANT ALL ON TABLE organismgroup TO postgres;
GRANT SELECT ON TABLE organismgroup TO web_usr;


--
-- Name: organismgroup_member; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE organismgroup_member FROM PUBLIC;
REVOKE ALL ON TABLE organismgroup_member FROM postgres;
GRANT ALL ON TABLE organismgroup_member TO postgres;
GRANT SELECT ON TABLE organismgroup_member TO web_usr;


--
-- Name: p_markers; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE p_markers FROM PUBLIC;
REVOKE ALL ON TABLE p_markers FROM postgres;
GRANT ALL ON TABLE p_markers TO postgres;
GRANT SELECT ON TABLE p_markers TO web_usr;


--
-- Name: p_markers_pid_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE p_markers_pid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE p_markers_pid_seq FROM postgres;
GRANT ALL ON SEQUENCE p_markers_pid_seq TO postgres;
GRANT ALL ON SEQUENCE p_markers_pid_seq TO web_usr;


--
-- Name: pcr_exp_accession; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE pcr_exp_accession FROM PUBLIC;
REVOKE ALL ON TABLE pcr_exp_accession FROM postgres;
GRANT ALL ON TABLE pcr_exp_accession TO postgres;
GRANT SELECT ON TABLE pcr_exp_accession TO web_usr;


--
-- Name: pcr_exp_accession_pcr_exp_accession_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE pcr_exp_accession_pcr_exp_accession_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE pcr_exp_accession_pcr_exp_accession_id_seq FROM postgres;
GRANT ALL ON SEQUENCE pcr_exp_accession_pcr_exp_accession_id_seq TO postgres;
GRANT ALL ON SEQUENCE pcr_exp_accession_pcr_exp_accession_id_seq TO web_usr;


--
-- Name: pcr_experiment; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE pcr_experiment FROM PUBLIC;
REVOKE ALL ON TABLE pcr_experiment FROM postgres;
GRANT ALL ON TABLE pcr_experiment TO postgres;
GRANT SELECT ON TABLE pcr_experiment TO web_usr;


--
-- Name: pcr_experiment_pcr_experiment_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE pcr_experiment_pcr_experiment_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE pcr_experiment_pcr_experiment_id_seq FROM postgres;
GRANT ALL ON SEQUENCE pcr_experiment_pcr_experiment_id_seq TO postgres;
GRANT ALL ON SEQUENCE pcr_experiment_pcr_experiment_id_seq TO web_usr;


--
-- Name: pcr_experiment_sequence; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE pcr_experiment_sequence FROM PUBLIC;
REVOKE ALL ON TABLE pcr_experiment_sequence FROM postgres;
GRANT ALL ON TABLE pcr_experiment_sequence TO postgres;
GRANT SELECT ON TABLE pcr_experiment_sequence TO web_usr;


--
-- Name: pcr_experiment_sequence_pcr_experiment_sequence_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE pcr_experiment_sequence_pcr_experiment_sequence_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE pcr_experiment_sequence_pcr_experiment_sequence_id_seq FROM postgres;
GRANT ALL ON SEQUENCE pcr_experiment_sequence_pcr_experiment_sequence_id_seq TO postgres;
GRANT SELECT ON SEQUENCE pcr_experiment_sequence_pcr_experiment_sequence_id_seq TO web_usr;


--
-- Name: pcr_product; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE pcr_product FROM PUBLIC;
REVOKE ALL ON TABLE pcr_product FROM postgres;
GRANT ALL ON TABLE pcr_product TO postgres;
GRANT SELECT ON TABLE pcr_product TO web_usr;


--
-- Name: pcr_product_pcr_product_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE pcr_product_pcr_product_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE pcr_product_pcr_product_id_seq FROM postgres;
GRANT ALL ON SEQUENCE pcr_product_pcr_product_id_seq TO postgres;
GRANT ALL ON SEQUENCE pcr_product_pcr_product_id_seq TO web_usr;


--
-- Name: primer_unigene_match; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE primer_unigene_match FROM PUBLIC;
REVOKE ALL ON TABLE primer_unigene_match FROM postgres;
GRANT ALL ON TABLE primer_unigene_match TO postgres;
GRANT SELECT ON TABLE primer_unigene_match TO web_usr;


--
-- Name: primer_unigene_match_primer_unigene_match_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE primer_unigene_match_primer_unigene_match_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE primer_unigene_match_primer_unigene_match_id_seq FROM postgres;
GRANT ALL ON SEQUENCE primer_unigene_match_primer_unigene_match_id_seq TO postgres;
GRANT ALL ON SEQUENCE primer_unigene_match_primer_unigene_match_id_seq TO web_usr;


--
-- Name: qc_report; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE qc_report FROM PUBLIC;
REVOKE ALL ON TABLE qc_report FROM postgres;
GRANT ALL ON TABLE qc_report TO postgres;
GRANT SELECT ON TABLE qc_report TO web_usr;


--
-- Name: qc_report_qc_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE qc_report_qc_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE qc_report_qc_id_seq FROM postgres;
GRANT ALL ON SEQUENCE qc_report_qc_id_seq TO postgres;
GRANT ALL ON SEQUENCE qc_report_qc_id_seq TO web_usr;


--
-- Name: rflp_markers; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE rflp_markers FROM PUBLIC;
REVOKE ALL ON TABLE rflp_markers FROM postgres;
GRANT ALL ON TABLE rflp_markers TO postgres;
GRANT SELECT ON TABLE rflp_markers TO web_usr;


--
-- Name: rflp_markers_rflp_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE rflp_markers_rflp_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE rflp_markers_rflp_id_seq FROM postgres;
GRANT ALL ON SEQUENCE rflp_markers_rflp_id_seq TO postgres;
GRANT ALL ON SEQUENCE rflp_markers_rflp_id_seq TO web_usr;


--
-- Name: rflp_sequences; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE rflp_sequences FROM PUBLIC;
REVOKE ALL ON TABLE rflp_sequences FROM postgres;
GRANT ALL ON TABLE rflp_sequences TO postgres;
GRANT SELECT ON TABLE rflp_sequences TO web_usr;


--
-- Name: rflp_sequences_seq_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE rflp_sequences_seq_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE rflp_sequences_seq_id_seq FROM postgres;
GRANT ALL ON SEQUENCE rflp_sequences_seq_id_seq TO postgres;
GRANT ALL ON SEQUENCE rflp_sequences_seq_id_seq TO web_usr;


--
-- Name: rflp_unigene_associations; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE rflp_unigene_associations FROM PUBLIC;
REVOKE ALL ON TABLE rflp_unigene_associations FROM postgres;
GRANT ALL ON TABLE rflp_unigene_associations TO postgres;
GRANT SELECT ON TABLE rflp_unigene_associations TO web_usr;


--
-- Name: rflp_unigene_associations_rflp_unigene_assoc_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE rflp_unigene_associations_rflp_unigene_assoc_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE rflp_unigene_associations_rflp_unigene_assoc_id_seq FROM postgres;
GRANT ALL ON SEQUENCE rflp_unigene_associations_rflp_unigene_assoc_id_seq TO postgres;
GRANT ALL ON SEQUENCE rflp_unigene_associations_rflp_unigene_assoc_id_seq TO web_usr;


--
-- Name: seqread; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE seqread FROM PUBLIC;
REVOKE ALL ON TABLE seqread FROM postgres;
GRANT ALL ON TABLE seqread TO postgres;
GRANT SELECT ON TABLE seqread TO web_usr;


--
-- Name: seqread_read_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE seqread_read_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE seqread_read_id_seq FROM postgres;
GRANT ALL ON SEQUENCE seqread_read_id_seq TO postgres;
GRANT ALL ON SEQUENCE seqread_read_id_seq TO web_usr;


--
-- Name: sequence; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE sequence FROM PUBLIC;
REVOKE ALL ON TABLE sequence FROM postgres;
GRANT ALL ON TABLE sequence TO postgres;
GRANT SELECT ON TABLE sequence TO web_usr;


--
-- Name: sequence_sequence_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE sequence_sequence_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sequence_sequence_id_seq FROM postgres;
GRANT ALL ON SEQUENCE sequence_sequence_id_seq TO postgres;
GRANT ALL ON SEQUENCE sequence_sequence_id_seq TO web_usr;


--
-- Name: snp; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE snp FROM PUBLIC;
REVOKE ALL ON TABLE snp FROM postgres;
GRANT ALL ON TABLE snp TO postgres;
GRANT SELECT ON TABLE snp TO web_usr;


--
-- Name: snp_file; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE snp_file FROM PUBLIC;
REVOKE ALL ON TABLE snp_file FROM postgres;
GRANT ALL ON TABLE snp_file TO postgres;
GRANT SELECT ON TABLE snp_file TO web_usr;


--
-- Name: snp_file_snp_file_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE snp_file_snp_file_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE snp_file_snp_file_id_seq FROM postgres;
GRANT ALL ON SEQUENCE snp_file_snp_file_id_seq TO postgres;
GRANT SELECT ON SEQUENCE snp_file_snp_file_id_seq TO web_usr;


--
-- Name: snp_snp_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE snp_snp_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE snp_snp_id_seq FROM postgres;
GRANT ALL ON SEQUENCE snp_snp_id_seq TO postgres;
GRANT SELECT ON SEQUENCE snp_snp_id_seq TO web_usr;


--
-- Name: snpprop; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE snpprop FROM PUBLIC;
REVOKE ALL ON TABLE snpprop FROM postgres;
GRANT ALL ON TABLE snpprop TO postgres;
GRANT SELECT ON TABLE snpprop TO web_usr;


--
-- Name: snpprop_snpprop_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE snpprop_snpprop_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE snpprop_snpprop_id_seq FROM postgres;
GRANT ALL ON SEQUENCE snpprop_snpprop_id_seq TO postgres;
GRANT SELECT ON SEQUENCE snpprop_snpprop_id_seq TO web_usr;


--
-- Name: ssr; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE ssr FROM PUBLIC;
REVOKE ALL ON TABLE ssr FROM postgres;
GRANT ALL ON TABLE ssr TO postgres;
GRANT SELECT ON TABLE ssr TO web_usr;


--
-- Name: ssr_primer_unigene_matches; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE ssr_primer_unigene_matches FROM PUBLIC;
REVOKE ALL ON TABLE ssr_primer_unigene_matches FROM postgres;
GRANT ALL ON TABLE ssr_primer_unigene_matches TO postgres;
GRANT SELECT ON TABLE ssr_primer_unigene_matches TO web_usr;


--
-- Name: ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq TO postgres;
GRANT ALL ON SEQUENCE ssr_primer_unigene_matches_ssr_primer_unigene_match_id_seq TO web_usr;


--
-- Name: ssr_repeats; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE ssr_repeats FROM PUBLIC;
REVOKE ALL ON TABLE ssr_repeats FROM postgres;
GRANT ALL ON TABLE ssr_repeats TO postgres;
GRANT SELECT ON TABLE ssr_repeats TO web_usr;


--
-- Name: ssr_repeats_repeat_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE ssr_repeats_repeat_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ssr_repeats_repeat_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ssr_repeats_repeat_id_seq TO postgres;
GRANT ALL ON SEQUENCE ssr_repeats_repeat_id_seq TO web_usr;


--
-- Name: ssr_ssr_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE ssr_ssr_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ssr_ssr_id_seq FROM postgres;
GRANT ALL ON SEQUENCE ssr_ssr_id_seq TO postgres;
GRANT ALL ON SEQUENCE ssr_ssr_id_seq TO web_usr;


--
-- Name: submit_user; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE submit_user FROM PUBLIC;
REVOKE ALL ON TABLE submit_user FROM postgres;
GRANT ALL ON TABLE submit_user TO postgres;
GRANT SELECT ON TABLE submit_user TO web_usr;


--
-- Name: submit_user_submit_user_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE submit_user_submit_user_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE submit_user_submit_user_id_seq FROM postgres;
GRANT ALL ON SEQUENCE submit_user_submit_user_id_seq TO postgres;
GRANT ALL ON SEQUENCE submit_user_submit_user_id_seq TO web_usr;


--
-- Name: taxonomy; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE taxonomy FROM PUBLIC;
REVOKE ALL ON TABLE taxonomy FROM postgres;
GRANT ALL ON TABLE taxonomy TO postgres;
GRANT ALL ON TABLE taxonomy TO PUBLIC;
GRANT SELECT,INSERT,UPDATE ON TABLE taxonomy TO web_usr;


--
-- Name: taxonomy_tax_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE taxonomy_tax_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE taxonomy_tax_id_seq FROM postgres;
GRANT ALL ON SEQUENCE taxonomy_tax_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE taxonomy_tax_id_seq TO web_usr;


--
-- Name: temp_caps_correspondence; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE temp_caps_correspondence FROM PUBLIC;
REVOKE ALL ON TABLE temp_caps_correspondence FROM postgres;
GRANT ALL ON TABLE temp_caps_correspondence TO postgres;
GRANT SELECT ON TABLE temp_caps_correspondence TO web_usr;


--
-- Name: temp_caps_correspondence_tcc_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE temp_caps_correspondence_tcc_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE temp_caps_correspondence_tcc_id_seq FROM postgres;
GRANT ALL ON SEQUENCE temp_caps_correspondence_tcc_id_seq TO postgres;
GRANT ALL ON SEQUENCE temp_caps_correspondence_tcc_id_seq TO web_usr;


--
-- Name: temp_map_correspondence; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE temp_map_correspondence FROM PUBLIC;
REVOKE ALL ON TABLE temp_map_correspondence FROM postgres;
GRANT ALL ON TABLE temp_map_correspondence TO postgres;
GRANT SELECT ON TABLE temp_map_correspondence TO web_usr;


--
-- Name: temp_map_correspondence_tmc_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE temp_map_correspondence_tmc_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE temp_map_correspondence_tmc_id_seq FROM postgres;
GRANT ALL ON SEQUENCE temp_map_correspondence_tmc_id_seq TO postgres;
GRANT ALL ON SEQUENCE temp_map_correspondence_tmc_id_seq TO web_usr;


--
-- Name: temp_marker_correspondence; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE temp_marker_correspondence FROM PUBLIC;
REVOKE ALL ON TABLE temp_marker_correspondence FROM postgres;
GRANT ALL ON TABLE temp_marker_correspondence TO postgres;
GRANT SELECT ON TABLE temp_marker_correspondence TO web_usr;


--
-- Name: temp_marker_correspondence_tmc_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE temp_marker_correspondence_tmc_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE temp_marker_correspondence_tmc_id_seq FROM postgres;
GRANT ALL ON SEQUENCE temp_marker_correspondence_tmc_id_seq TO postgres;
GRANT ALL ON SEQUENCE temp_marker_correspondence_tmc_id_seq TO web_usr;


--
-- Name: tigrtc_index; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE tigrtc_index FROM PUBLIC;
REVOKE ALL ON TABLE tigrtc_index FROM postgres;
GRANT ALL ON TABLE tigrtc_index TO postgres;
GRANT SELECT ON TABLE tigrtc_index TO web_usr;


--
-- Name: tigrtc_index_tcindex_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE tigrtc_index_tcindex_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE tigrtc_index_tcindex_id_seq FROM postgres;
GRANT ALL ON SEQUENCE tigrtc_index_tcindex_id_seq TO postgres;
GRANT ALL ON SEQUENCE tigrtc_index_tcindex_id_seq TO web_usr;


--
-- Name: tigrtc_membership; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE tigrtc_membership FROM PUBLIC;
REVOKE ALL ON TABLE tigrtc_membership FROM postgres;
GRANT ALL ON TABLE tigrtc_membership TO postgres;
GRANT SELECT ON TABLE tigrtc_membership TO web_usr;


--
-- Name: tigrtc_membership_tigrtc_membership_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE tigrtc_membership_tigrtc_membership_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE tigrtc_membership_tigrtc_membership_id_seq FROM postgres;
GRANT ALL ON SEQUENCE tigrtc_membership_tigrtc_membership_id_seq TO postgres;
GRANT ALL ON SEQUENCE tigrtc_membership_tigrtc_membership_id_seq TO web_usr;


--
-- Name: tigrtc_tracking; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE tigrtc_tracking FROM PUBLIC;
REVOKE ALL ON TABLE tigrtc_tracking FROM postgres;
GRANT ALL ON TABLE tigrtc_tracking TO postgres;
GRANT SELECT ON TABLE tigrtc_tracking TO web_usr;


--
-- Name: tigrtc_tracking_tigrtc_tracking_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE tigrtc_tracking_tigrtc_tracking_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE tigrtc_tracking_tigrtc_tracking_id_seq FROM postgres;
GRANT ALL ON SEQUENCE tigrtc_tracking_tigrtc_tracking_id_seq TO postgres;
GRANT ALL ON SEQUENCE tigrtc_tracking_tigrtc_tracking_id_seq TO web_usr;


--
-- Name: tm_markers; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE tm_markers FROM PUBLIC;
REVOKE ALL ON TABLE tm_markers FROM postgres;
GRANT ALL ON TABLE tm_markers TO postgres;
GRANT SELECT ON TABLE tm_markers TO web_usr;


--
-- Name: tm_markers_sequences; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE tm_markers_sequences FROM PUBLIC;
REVOKE ALL ON TABLE tm_markers_sequences FROM postgres;
GRANT ALL ON TABLE tm_markers_sequences TO postgres;
GRANT SELECT ON TABLE tm_markers_sequences TO web_usr;


--
-- Name: tm_markers_tm_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE tm_markers_tm_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE tm_markers_tm_id_seq FROM postgres;
GRANT ALL ON SEQUENCE tm_markers_tm_id_seq TO postgres;
GRANT ALL ON SEQUENCE tm_markers_tm_id_seq TO web_usr;


--
-- Name: trim_feature; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE trim_feature FROM PUBLIC;
REVOKE ALL ON TABLE trim_feature FROM postgres;
GRANT ALL ON TABLE trim_feature TO postgres;
GRANT SELECT ON TABLE trim_feature TO web_usr;


--
-- Name: trim_feature_feature_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE trim_feature_feature_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE trim_feature_feature_id_seq FROM postgres;
GRANT ALL ON SEQUENCE trim_feature_feature_id_seq TO postgres;
GRANT ALL ON SEQUENCE trim_feature_feature_id_seq TO web_usr;


--
-- Name: trim_feature_types; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE trim_feature_types FROM PUBLIC;
REVOKE ALL ON TABLE trim_feature_types FROM postgres;
GRANT ALL ON TABLE trim_feature_types TO postgres;
GRANT SELECT ON TABLE trim_feature_types TO web_usr;


--
-- Name: trim_feature_types_trim_type_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE trim_feature_types_trim_type_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE trim_feature_types_trim_type_id_seq FROM postgres;
GRANT ALL ON SEQUENCE trim_feature_types_trim_type_id_seq TO postgres;
GRANT ALL ON SEQUENCE trim_feature_types_trim_type_id_seq TO web_usr;


--
-- Name: types; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE types FROM PUBLIC;
REVOKE ALL ON TABLE types FROM postgres;
GRANT ALL ON TABLE types TO postgres;
GRANT SELECT ON TABLE types TO web_usr;


--
-- Name: types_type_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE types_type_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE types_type_id_seq FROM postgres;
GRANT ALL ON SEQUENCE types_type_id_seq TO postgres;
GRANT ALL ON SEQUENCE types_type_id_seq TO web_usr;


--
-- Name: unigene; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE unigene FROM PUBLIC;
REVOKE ALL ON TABLE unigene FROM postgres;
GRANT ALL ON TABLE unigene TO postgres;
GRANT SELECT ON TABLE unigene TO web_usr;


--
-- Name: unigene_build; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE unigene_build FROM PUBLIC;
REVOKE ALL ON TABLE unigene_build FROM postgres;
GRANT ALL ON TABLE unigene_build TO postgres;
GRANT SELECT ON TABLE unigene_build TO web_usr;


--
-- Name: unigene_build_unigene_build_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE unigene_build_unigene_build_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE unigene_build_unigene_build_id_seq FROM postgres;
GRANT ALL ON SEQUENCE unigene_build_unigene_build_id_seq TO postgres;
GRANT ALL ON SEQUENCE unigene_build_unigene_build_id_seq TO web_usr;


--
-- Name: unigene_consensi; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE unigene_consensi FROM PUBLIC;
REVOKE ALL ON TABLE unigene_consensi FROM postgres;
GRANT ALL ON TABLE unigene_consensi TO postgres;
GRANT SELECT ON TABLE unigene_consensi TO web_usr;


--
-- Name: unigene_consensi_consensi_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE unigene_consensi_consensi_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE unigene_consensi_consensi_id_seq FROM postgres;
GRANT ALL ON SEQUENCE unigene_consensi_consensi_id_seq TO postgres;
GRANT ALL ON SEQUENCE unigene_consensi_consensi_id_seq TO web_usr;


--
-- Name: unigene_member; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON TABLE unigene_member FROM PUBLIC;
REVOKE ALL ON TABLE unigene_member FROM postgres;
GRANT ALL ON TABLE unigene_member TO postgres;
GRANT SELECT ON TABLE unigene_member TO web_usr;


--
-- Name: unigene_member_unigene_member_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE unigene_member_unigene_member_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE unigene_member_unigene_member_id_seq FROM postgres;
GRANT ALL ON SEQUENCE unigene_member_unigene_member_id_seq TO postgres;
GRANT ALL ON SEQUENCE unigene_member_unigene_member_id_seq TO web_usr;


--
-- Name: unigene_unigene_id_seq; Type: ACL; Schema: sgn; Owner: postgres
--

REVOKE ALL ON SEQUENCE unigene_unigene_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE unigene_unigene_id_seq FROM postgres;
GRANT ALL ON SEQUENCE unigene_unigene_id_seq TO postgres;
GRANT ALL ON SEQUENCE unigene_unigene_id_seq TO web_usr;


SET search_path = sgn_people, pg_catalog;

--
-- Name: bac_status; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE bac_status FROM PUBLIC;
REVOKE ALL ON TABLE bac_status FROM postgres;
GRANT ALL ON TABLE bac_status TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE bac_status TO web_usr;


--
-- Name: bac_status_bac_status_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE bac_status_bac_status_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bac_status_bac_status_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bac_status_bac_status_id_seq TO postgres;
GRANT ALL ON SEQUENCE bac_status_bac_status_id_seq TO web_usr;


--
-- Name: bac_status_log; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE bac_status_log FROM PUBLIC;
REVOKE ALL ON TABLE bac_status_log FROM postgres;
GRANT ALL ON TABLE bac_status_log TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE bac_status_log TO web_usr;


--
-- Name: bac_status_log_bac_status_log_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE bac_status_log_bac_status_log_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE bac_status_log_bac_status_log_id_seq FROM postgres;
GRANT ALL ON SEQUENCE bac_status_log_bac_status_log_id_seq TO postgres;
GRANT ALL ON SEQUENCE bac_status_log_bac_status_log_id_seq TO web_usr;


--
-- Name: clone_il_mapping_bin_log; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE clone_il_mapping_bin_log FROM PUBLIC;
REVOKE ALL ON TABLE clone_il_mapping_bin_log FROM postgres;
GRANT ALL ON TABLE clone_il_mapping_bin_log TO postgres;
GRANT SELECT ON TABLE clone_il_mapping_bin_log TO PUBLIC;
GRANT INSERT,UPDATE ON TABLE clone_il_mapping_bin_log TO web_usr;


--
-- Name: clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq FROM postgres;
GRANT ALL ON SEQUENCE clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE clone_il_mapping_bin_log_sp_clone_il_mapping_bin_log_id_seq TO web_usr;


--
-- Name: clone_validation_log; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE clone_validation_log FROM PUBLIC;
REVOKE ALL ON TABLE clone_validation_log FROM postgres;
GRANT ALL ON TABLE clone_validation_log TO postgres;
GRANT SELECT ON TABLE clone_validation_log TO PUBLIC;
GRANT INSERT,UPDATE ON TABLE clone_validation_log TO web_usr;


--
-- Name: clone_validation_log_clone_validation_log_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE clone_validation_log_clone_validation_log_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE clone_validation_log_clone_validation_log_id_seq FROM postgres;
GRANT ALL ON SEQUENCE clone_validation_log_clone_validation_log_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE clone_validation_log_clone_validation_log_id_seq TO web_usr;


--
-- Name: clone_verification_log; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE clone_verification_log FROM PUBLIC;
REVOKE ALL ON TABLE clone_verification_log FROM postgres;
GRANT ALL ON TABLE clone_verification_log TO postgres;
GRANT SELECT ON TABLE clone_verification_log TO PUBLIC;
GRANT INSERT,UPDATE ON TABLE clone_verification_log TO web_usr;


--
-- Name: clone_verification_log_clone_verification_log_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE clone_verification_log_clone_verification_log_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE clone_verification_log_clone_verification_log_id_seq FROM postgres;
GRANT ALL ON SEQUENCE clone_verification_log_clone_verification_log_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE clone_verification_log_clone_verification_log_id_seq TO web_usr;


--
-- Name: forum_post; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE forum_post FROM PUBLIC;
REVOKE ALL ON TABLE forum_post FROM postgres;
GRANT ALL ON TABLE forum_post TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE forum_post TO web_usr;


--
-- Name: forum_post_forum_post_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE forum_post_forum_post_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE forum_post_forum_post_id_seq FROM postgres;
GRANT ALL ON SEQUENCE forum_post_forum_post_id_seq TO postgres;
GRANT ALL ON SEQUENCE forum_post_forum_post_id_seq TO web_usr;


--
-- Name: forum_topic; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE forum_topic FROM PUBLIC;
REVOKE ALL ON TABLE forum_topic FROM postgres;
GRANT ALL ON TABLE forum_topic TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE forum_topic TO web_usr;


--
-- Name: forum_topic_forum_topic_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE forum_topic_forum_topic_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE forum_topic_forum_topic_id_seq FROM postgres;
GRANT ALL ON SEQUENCE forum_topic_forum_topic_id_seq TO postgres;
GRANT ALL ON SEQUENCE forum_topic_forum_topic_id_seq TO web_usr;


--
-- Name: list; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE list FROM PUBLIC;
REVOKE ALL ON TABLE list FROM postgres;
GRANT ALL ON TABLE list TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE list TO web_usr;


--
-- Name: list_item; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE list_item FROM PUBLIC;
REVOKE ALL ON TABLE list_item FROM postgres;
GRANT ALL ON TABLE list_item TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE list_item TO web_usr;


--
-- Name: list_item_list_item_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE list_item_list_item_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE list_item_list_item_id_seq FROM postgres;
GRANT ALL ON SEQUENCE list_item_list_item_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE list_item_list_item_id_seq TO web_usr;


--
-- Name: list_list_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE list_list_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE list_list_id_seq FROM postgres;
GRANT ALL ON SEQUENCE list_list_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE list_list_id_seq TO web_usr;


--
-- Name: sp_clone_il_mapping_segment_log; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE sp_clone_il_mapping_segment_log FROM PUBLIC;
REVOKE ALL ON TABLE sp_clone_il_mapping_segment_log FROM postgres;
GRANT ALL ON TABLE sp_clone_il_mapping_segment_log TO postgres;
GRANT INSERT,UPDATE ON TABLE sp_clone_il_mapping_segment_log TO web_usr;
GRANT SELECT ON TABLE sp_clone_il_mapping_segment_log TO PUBLIC;


--
-- Name: sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq FROM postgres;
GRANT ALL ON SEQUENCE sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE sp_clone_il_mapping_segment_l_sp_clone_il_mapping_segment_l_seq TO web_usr;


--
-- Name: sp_group; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE sp_group FROM PUBLIC;
REVOKE ALL ON TABLE sp_group FROM postgres;
GRANT ALL ON TABLE sp_group TO postgres;
GRANT SELECT ON TABLE sp_group TO web_usr;


--
-- Name: sp_group_member; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE sp_group_member FROM PUBLIC;
REVOKE ALL ON TABLE sp_group_member FROM postgres;
GRANT ALL ON TABLE sp_group_member TO postgres;
GRANT SELECT ON TABLE sp_group_member TO web_usr;


--
-- Name: sp_login_old; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE sp_login_old FROM PUBLIC;
REVOKE ALL ON TABLE sp_login_old FROM postgres;
GRANT ALL ON TABLE sp_login_old TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sp_login_old TO web_usr;


--
-- Name: sp_login_old_sp_login_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE sp_login_old_sp_login_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sp_login_old_sp_login_id_seq FROM postgres;
GRANT ALL ON SEQUENCE sp_login_old_sp_login_id_seq TO postgres;
GRANT ALL ON SEQUENCE sp_login_old_sp_login_id_seq TO web_usr;


--
-- Name: sp_organisms; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE sp_organisms FROM PUBLIC;
REVOKE ALL ON TABLE sp_organisms FROM postgres;
GRANT ALL ON TABLE sp_organisms TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sp_organisms TO web_usr;


--
-- Name: sp_organisms_organism_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE sp_organisms_organism_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sp_organisms_organism_id_seq FROM postgres;
GRANT ALL ON SEQUENCE sp_organisms_organism_id_seq TO postgres;
GRANT ALL ON SEQUENCE sp_organisms_organism_id_seq TO web_usr;


--
-- Name: sp_organization; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE sp_organization FROM PUBLIC;
REVOKE ALL ON TABLE sp_organization FROM postgres;
GRANT ALL ON TABLE sp_organization TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sp_organization TO web_usr;


--
-- Name: sp_organization_person; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE sp_organization_person FROM PUBLIC;
REVOKE ALL ON TABLE sp_organization_person FROM postgres;
GRANT ALL ON TABLE sp_organization_person TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sp_organization_person TO web_usr;


--
-- Name: sp_organization_person_sp_organization_person_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE sp_organization_person_sp_organization_person_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sp_organization_person_sp_organization_person_id_seq FROM postgres;
GRANT ALL ON SEQUENCE sp_organization_person_sp_organization_person_id_seq TO postgres;
GRANT ALL ON SEQUENCE sp_organization_person_sp_organization_person_id_seq TO web_usr;


--
-- Name: sp_organization_sp_organization_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE sp_organization_sp_organization_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sp_organization_sp_organization_id_seq FROM postgres;
GRANT ALL ON SEQUENCE sp_organization_sp_organization_id_seq TO postgres;
GRANT ALL ON SEQUENCE sp_organization_sp_organization_id_seq TO web_usr;


--
-- Name: sp_papers; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE sp_papers FROM PUBLIC;
REVOKE ALL ON TABLE sp_papers FROM postgres;
GRANT ALL ON TABLE sp_papers TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sp_papers TO web_usr;


--
-- Name: sp_papers_sp_paper_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE sp_papers_sp_paper_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sp_papers_sp_paper_id_seq FROM postgres;
GRANT ALL ON SEQUENCE sp_papers_sp_paper_id_seq TO postgres;
GRANT ALL ON SEQUENCE sp_papers_sp_paper_id_seq TO web_usr;


--
-- Name: sp_person; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE sp_person FROM PUBLIC;
REVOKE ALL ON TABLE sp_person FROM postgres;
GRANT ALL ON TABLE sp_person TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sp_person TO web_usr;


--
-- Name: sp_person_organisms; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE sp_person_organisms FROM PUBLIC;
REVOKE ALL ON TABLE sp_person_organisms FROM postgres;
GRANT ALL ON TABLE sp_person_organisms TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sp_person_organisms TO web_usr;


--
-- Name: sp_person_organisms_sp_person_organisms_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE sp_person_organisms_sp_person_organisms_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sp_person_organisms_sp_person_organisms_id_seq FROM postgres;
GRANT ALL ON SEQUENCE sp_person_organisms_sp_person_organisms_id_seq TO postgres;
GRANT ALL ON SEQUENCE sp_person_organisms_sp_person_organisms_id_seq TO web_usr;


--
-- Name: sp_person_roles; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE sp_person_roles FROM PUBLIC;
REVOKE ALL ON TABLE sp_person_roles FROM postgres;
GRANT ALL ON TABLE sp_person_roles TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sp_person_roles TO web_usr;


--
-- Name: sp_person_roles_sp_person_role_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE sp_person_roles_sp_person_role_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sp_person_roles_sp_person_role_id_seq FROM postgres;
GRANT ALL ON SEQUENCE sp_person_roles_sp_person_role_id_seq TO postgres;
GRANT ALL ON SEQUENCE sp_person_roles_sp_person_role_id_seq TO web_usr;


--
-- Name: sp_person_sp_person_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE sp_person_sp_person_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sp_person_sp_person_id_seq FROM postgres;
GRANT ALL ON SEQUENCE sp_person_sp_person_id_seq TO postgres;
GRANT ALL ON SEQUENCE sp_person_sp_person_id_seq TO web_usr;


--
-- Name: sp_project; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE sp_project FROM PUBLIC;
REVOKE ALL ON TABLE sp_project FROM postgres;
GRANT ALL ON TABLE sp_project TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sp_project TO web_usr;


--
-- Name: sp_project_il_mapping_clone_log; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE sp_project_il_mapping_clone_log FROM PUBLIC;
REVOKE ALL ON TABLE sp_project_il_mapping_clone_log FROM postgres;
GRANT ALL ON TABLE sp_project_il_mapping_clone_log TO postgres;
GRANT SELECT ON TABLE sp_project_il_mapping_clone_log TO PUBLIC;
GRANT INSERT,UPDATE ON TABLE sp_project_il_mapping_clone_log TO web_usr;


--
-- Name: sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq FROM postgres;
GRANT ALL ON SEQUENCE sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE sp_project_il_mapping_clone_l_sp_project_il_mapping_clone_l_seq TO web_usr;


--
-- Name: sp_project_organization; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE sp_project_organization FROM PUBLIC;
REVOKE ALL ON TABLE sp_project_organization FROM postgres;
GRANT ALL ON TABLE sp_project_organization TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sp_project_organization TO web_usr;


--
-- Name: sp_project_organization_sp_project_organization_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE sp_project_organization_sp_project_organization_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sp_project_organization_sp_project_organization_id_seq FROM postgres;
GRANT ALL ON SEQUENCE sp_project_organization_sp_project_organization_id_seq TO postgres;
GRANT ALL ON SEQUENCE sp_project_organization_sp_project_organization_id_seq TO web_usr;


--
-- Name: sp_project_person; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE sp_project_person FROM PUBLIC;
REVOKE ALL ON TABLE sp_project_person FROM postgres;
GRANT ALL ON TABLE sp_project_person TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sp_project_person TO web_usr;


--
-- Name: sp_project_person_sp_project_person_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE sp_project_person_sp_project_person_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sp_project_person_sp_project_person_id_seq FROM postgres;
GRANT ALL ON SEQUENCE sp_project_person_sp_project_person_id_seq TO postgres;
GRANT ALL ON SEQUENCE sp_project_person_sp_project_person_id_seq TO web_usr;


--
-- Name: sp_project_sp_project_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE sp_project_sp_project_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sp_project_sp_project_id_seq FROM postgres;
GRANT ALL ON SEQUENCE sp_project_sp_project_id_seq TO postgres;
GRANT ALL ON SEQUENCE sp_project_sp_project_id_seq TO web_usr;


--
-- Name: sp_roles; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE sp_roles FROM PUBLIC;
REVOKE ALL ON TABLE sp_roles FROM postgres;
GRANT ALL ON TABLE sp_roles TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE sp_roles TO web_usr;


--
-- Name: sp_roles_sp_role_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE sp_roles_sp_role_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sp_roles_sp_role_id_seq FROM postgres;
GRANT ALL ON SEQUENCE sp_roles_sp_role_id_seq TO postgres;
GRANT ALL ON SEQUENCE sp_roles_sp_role_id_seq TO web_usr;


--
-- Name: user_map; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE user_map FROM PUBLIC;
REVOKE ALL ON TABLE user_map FROM postgres;
GRANT ALL ON TABLE user_map TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE user_map TO web_usr;


--
-- Name: user_map_data; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON TABLE user_map_data FROM PUBLIC;
REVOKE ALL ON TABLE user_map_data FROM postgres;
GRANT ALL ON TABLE user_map_data TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE user_map_data TO web_usr;


--
-- Name: user_map_data_user_map_data_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE user_map_data_user_map_data_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE user_map_data_user_map_data_id_seq FROM postgres;
GRANT ALL ON SEQUENCE user_map_data_user_map_data_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE user_map_data_user_map_data_id_seq TO web_usr;


--
-- Name: user_map_user_map_id_seq; Type: ACL; Schema: sgn_people; Owner: postgres
--

REVOKE ALL ON SEQUENCE user_map_user_map_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE user_map_user_map_id_seq FROM postgres;
GRANT ALL ON SEQUENCE user_map_user_map_id_seq TO postgres;
GRANT SELECT,UPDATE ON SEQUENCE user_map_user_map_id_seq TO web_usr;


SET search_path = sgn_submit, pg_catalog;

--
-- Name: facility; Type: ACL; Schema: sgn_submit; Owner: postgres
--

REVOKE ALL ON TABLE facility FROM PUBLIC;
REVOKE ALL ON TABLE facility FROM postgres;
GRANT ALL ON TABLE facility TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE facility TO web_usr;


--
-- Name: facility_facility_id_seq; Type: ACL; Schema: sgn_submit; Owner: postgres
--

REVOKE ALL ON SEQUENCE facility_facility_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE facility_facility_id_seq FROM postgres;
GRANT ALL ON SEQUENCE facility_facility_id_seq TO postgres;
GRANT ALL ON SEQUENCE facility_facility_id_seq TO web_usr;


--
-- Name: library; Type: ACL; Schema: sgn_submit; Owner: postgres
--

REVOKE ALL ON TABLE library FROM PUBLIC;
REVOKE ALL ON TABLE library FROM postgres;
GRANT ALL ON TABLE library TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE library TO web_usr;


--
-- Name: library_library_id_seq; Type: ACL; Schema: sgn_submit; Owner: postgres
--

REVOKE ALL ON SEQUENCE library_library_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE library_library_id_seq FROM postgres;
GRANT ALL ON SEQUENCE library_library_id_seq TO postgres;
GRANT ALL ON SEQUENCE library_library_id_seq TO web_usr;


--
-- Name: seqread; Type: ACL; Schema: sgn_submit; Owner: postgres
--

REVOKE ALL ON TABLE seqread FROM PUBLIC;
REVOKE ALL ON TABLE seqread FROM postgres;
GRANT ALL ON TABLE seqread TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE seqread TO web_usr;


--
-- Name: seqread_submit_read_id_seq; Type: ACL; Schema: sgn_submit; Owner: postgres
--

REVOKE ALL ON SEQUENCE seqread_submit_read_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE seqread_submit_read_id_seq FROM postgres;
GRANT ALL ON SEQUENCE seqread_submit_read_id_seq TO postgres;
GRANT ALL ON SEQUENCE seqread_submit_read_id_seq TO web_usr;


--
-- Name: submit_user; Type: ACL; Schema: sgn_submit; Owner: postgres
--

REVOKE ALL ON TABLE submit_user FROM PUBLIC;
REVOKE ALL ON TABLE submit_user FROM postgres;
GRANT ALL ON TABLE submit_user TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE submit_user TO web_usr;


--
-- Name: submit_user_submit_user_id_seq; Type: ACL; Schema: sgn_submit; Owner: postgres
--

REVOKE ALL ON SEQUENCE submit_user_submit_user_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE submit_user_submit_user_id_seq FROM postgres;
GRANT ALL ON SEQUENCE submit_user_submit_user_id_seq TO postgres;
GRANT ALL ON SEQUENCE submit_user_submit_user_id_seq TO web_usr;


SET search_path = tomato_gff, pg_catalog;

--
-- Name: fattribute; Type: ACL; Schema: tomato_gff; Owner: postgres
--

REVOKE ALL ON TABLE fattribute FROM PUBLIC;
REVOKE ALL ON TABLE fattribute FROM postgres;
GRANT ALL ON TABLE fattribute TO postgres;
GRANT SELECT ON TABLE fattribute TO web_usr;


--
-- Name: fattribute_to_feature; Type: ACL; Schema: tomato_gff; Owner: postgres
--

REVOKE ALL ON TABLE fattribute_to_feature FROM PUBLIC;
REVOKE ALL ON TABLE fattribute_to_feature FROM postgres;
GRANT ALL ON TABLE fattribute_to_feature TO postgres;
GRANT SELECT ON TABLE fattribute_to_feature TO web_usr;


--
-- Name: fdata; Type: ACL; Schema: tomato_gff; Owner: postgres
--

REVOKE ALL ON TABLE fdata FROM PUBLIC;
REVOKE ALL ON TABLE fdata FROM postgres;
GRANT ALL ON TABLE fdata TO postgres;
GRANT SELECT ON TABLE fdata TO web_usr;


--
-- Name: fdna; Type: ACL; Schema: tomato_gff; Owner: postgres
--

REVOKE ALL ON TABLE fdna FROM PUBLIC;
REVOKE ALL ON TABLE fdna FROM postgres;
GRANT ALL ON TABLE fdna TO postgres;
GRANT SELECT ON TABLE fdna TO web_usr;


--
-- Name: fgroup; Type: ACL; Schema: tomato_gff; Owner: postgres
--

REVOKE ALL ON TABLE fgroup FROM PUBLIC;
REVOKE ALL ON TABLE fgroup FROM postgres;
GRANT ALL ON TABLE fgroup TO postgres;
GRANT SELECT ON TABLE fgroup TO web_usr;


--
-- Name: fmeta; Type: ACL; Schema: tomato_gff; Owner: postgres
--

REVOKE ALL ON TABLE fmeta FROM PUBLIC;
REVOKE ALL ON TABLE fmeta FROM postgres;
GRANT ALL ON TABLE fmeta TO postgres;
GRANT SELECT ON TABLE fmeta TO web_usr;


--
-- Name: ftype; Type: ACL; Schema: tomato_gff; Owner: postgres
--

REVOKE ALL ON TABLE ftype FROM PUBLIC;
REVOKE ALL ON TABLE ftype FROM postgres;
GRANT ALL ON TABLE ftype TO postgres;
GRANT SELECT ON TABLE ftype TO web_usr;


--
-- PostgreSQL database dump complete
--

